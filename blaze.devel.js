Meteor = {};
//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
//                                                                      //
// If you are using Chrome, open the Developer Tools and click the gear //
// icon in its lower right corner. In the General Settings panel, turn  //
// on 'Enable source maps'.                                             //
//                                                                      //
// If you are using Firefox 23, go to `about:config` and set the        //
// `devtools.debugger.source-maps-enabled` preference to true.          //
// (The preference should be on by default in Firefox 24; versions      //
// older than 23 do not support source maps.)                           //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

/* Imports */
var Meteor = Package.meteor.Meteor;



/* Exports */
if (typeof Package === 'undefined') Package = {};
Package.autopublish = {};

})();

//# sourceMappingURL=c3059a78bb200b171099fc4fa1a9345101790ddb.map
//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
//                                                                      //
// If you are using Chrome, open the Developer Tools and click the gear //
// icon in its lower right corner. In the General Settings panel, turn  //
// on 'Enable source maps'.                                             //
//                                                                      //
// If you are using Firefox 23, go to `about:config` and set the        //
// `devtools.debugger.source-maps-enabled` preference to true.          //
// (The preference should be on by default in Firefox 24; versions      //
// older than 23 do not support source maps.)                           //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

/* Imports */
var Meteor = Package.meteor.Meteor;
var _ = Package.underscore._;

/* Package-scope variables */
var Deps;

(function () {

//////////////////////////////////////////////////////////////////////////////////
//                                                                              //
// packages/deps/deps.js                                                        //
//                                                                              //
//////////////////////////////////////////////////////////////////////////////////
                                                                                //
//////////////////////////////////////////////////                              // 1
// Package docs at http://docs.meteor.com/#deps //                              // 2
//////////////////////////////////////////////////                              // 3
                                                                                // 4
Deps = {};                                                                      // 5
                                                                                // 6
// http://docs.meteor.com/#deps_active                                          // 7
Deps.active = false;                                                            // 8
                                                                                // 9
// http://docs.meteor.com/#deps_currentcomputation                              // 10
Deps.currentComputation = null;                                                 // 11
                                                                                // 12
var setCurrentComputation = function (c) {                                      // 13
  Deps.currentComputation = c;                                                  // 14
  Deps.active = !! c;                                                           // 15
};                                                                              // 16
                                                                                // 17
// _assign is like _.extend or the upcoming Object.assign.                      // 18
// Copy src's own, enumerable properties onto tgt and return                    // 19
// tgt.                                                                         // 20
var _hasOwnProperty = Object.prototype.hasOwnProperty;                          // 21
var _assign = function (tgt, src) {                                             // 22
  for (var k in src) {                                                          // 23
    if (_hasOwnProperty.call(src, k))                                           // 24
      tgt[k] = src[k];                                                          // 25
  }                                                                             // 26
  return tgt;                                                                   // 27
};                                                                              // 28
                                                                                // 29
var _debugFunc = function () {                                                  // 30
  // lazy evaluation because `Meteor` does not exist right away                 // 31
  return (typeof Meteor !== "undefined" ? Meteor._debug :                       // 32
          ((typeof console !== "undefined") && console.log ?                    // 33
           function () { console.log.apply(console, arguments); } :             // 34
           function () {}));                                                    // 35
};                                                                              // 36
                                                                                // 37
var _throwOrLog = function (from, e) {                                          // 38
  if (throwFirstError) {                                                        // 39
    throw e;                                                                    // 40
  } else {                                                                      // 41
    _debugFunc()("Exception from Deps " + from + " function:",                  // 42
                 e.stack || e.message);                                         // 43
  }                                                                             // 44
};                                                                              // 45
                                                                                // 46
// Like `Meteor._noYieldsAllowed(function () { f(comp); })` but shorter,        // 47
// and doesn't clutter the stack with an extra frame on the client,             // 48
// where `_noYieldsAllowed` is a no-op.  `f` may be a computation               // 49
// function or an onInvalidate callback.                                        // 50
var callWithNoYieldsAllowed = function (f, comp) {                              // 51
  if ((typeof Meteor === 'undefined') || Meteor.isClient) {                     // 52
    f(comp);                                                                    // 53
  } else {                                                                      // 54
    Meteor._noYieldsAllowed(function () {                                       // 55
      f(comp);                                                                  // 56
    });                                                                         // 57
  }                                                                             // 58
};                                                                              // 59
                                                                                // 60
var nextId = 1;                                                                 // 61
// computations whose callbacks we should call at flush time                    // 62
var pendingComputations = [];                                                   // 63
// `true` if a Deps.flush is scheduled, or if we are in Deps.flush now          // 64
var willFlush = false;                                                          // 65
// `true` if we are in Deps.flush now                                           // 66
var inFlush = false;                                                            // 67
// `true` if we are computing a computation now, either first time              // 68
// or recompute.  This matches Deps.active unless we are inside                 // 69
// Deps.nonreactive, which nullfies currentComputation even though              // 70
// an enclosing computation may still be running.                               // 71
var inCompute = false;                                                          // 72
// `true` if the `_throwFirstError` option was passed in to the call            // 73
// to Deps.flush that we are in. When set, throw rather than log the            // 74
// first error encountered while flushing. Before throwing the error,           // 75
// finish flushing (from a finally block), logging any subsequent               // 76
// errors.                                                                      // 77
var throwFirstError = false;                                                    // 78
                                                                                // 79
var afterFlushCallbacks = [];                                                   // 80
                                                                                // 81
var requireFlush = function () {                                                // 82
  if (! willFlush) {                                                            // 83
    setTimeout(Deps.flush, 0);                                                  // 84
    willFlush = true;                                                           // 85
  }                                                                             // 86
};                                                                              // 87
                                                                                // 88
// Deps.Computation constructor is visible but private                          // 89
// (throws an error if you try to call it)                                      // 90
var constructingComputation = false;                                            // 91
                                                                                // 92
//                                                                              // 93
// http://docs.meteor.com/#deps_computation                                     // 94
//                                                                              // 95
Deps.Computation = function (f, parent) {                                       // 96
  if (! constructingComputation)                                                // 97
    throw new Error(                                                            // 98
      "Deps.Computation constructor is private; use Deps.autorun");             // 99
  constructingComputation = false;                                              // 100
                                                                                // 101
  var self = this;                                                              // 102
                                                                                // 103
  // http://docs.meteor.com/#computation_stopped                                // 104
  self.stopped = false;                                                         // 105
                                                                                // 106
  // http://docs.meteor.com/#computation_invalidated                            // 107
  self.invalidated = false;                                                     // 108
                                                                                // 109
  // http://docs.meteor.com/#computation_firstrun                               // 110
  self.firstRun = true;                                                         // 111
                                                                                // 112
  self._id = nextId++;                                                          // 113
  self._onInvalidateCallbacks = [];                                             // 114
  // the plan is at some point to use the parent relation                       // 115
  // to constrain the order that computations are processed                     // 116
  self._parent = parent;                                                        // 117
  self._func = f;                                                               // 118
  self._recomputing = false;                                                    // 119
                                                                                // 120
  var errored = true;                                                           // 121
  try {                                                                         // 122
    self._compute();                                                            // 123
    errored = false;                                                            // 124
  } finally {                                                                   // 125
    self.firstRun = false;                                                      // 126
    if (errored)                                                                // 127
      self.stop();                                                              // 128
  }                                                                             // 129
};                                                                              // 130
                                                                                // 131
_assign(Deps.Computation.prototype, {                                           // 132
                                                                                // 133
  // http://docs.meteor.com/#computation_oninvalidate                           // 134
  onInvalidate: function (f) {                                                  // 135
    var self = this;                                                            // 136
                                                                                // 137
    if (typeof f !== 'function')                                                // 138
      throw new Error("onInvalidate requires a function");                      // 139
                                                                                // 140
    if (self.invalidated) {                                                     // 141
      Deps.nonreactive(function () {                                            // 142
        callWithNoYieldsAllowed(f, self);                                       // 143
      });                                                                       // 144
    } else {                                                                    // 145
      self._onInvalidateCallbacks.push(f);                                      // 146
    }                                                                           // 147
  },                                                                            // 148
                                                                                // 149
  // http://docs.meteor.com/#computation_invalidate                             // 150
  invalidate: function () {                                                     // 151
    var self = this;                                                            // 152
    if (! self.invalidated) {                                                   // 153
      // if we're currently in _recompute(), don't enqueue                      // 154
      // ourselves, since we'll rerun immediately anyway.                       // 155
      if (! self._recomputing && ! self.stopped) {                              // 156
        requireFlush();                                                         // 157
        pendingComputations.push(this);                                         // 158
      }                                                                         // 159
                                                                                // 160
      self.invalidated = true;                                                  // 161
                                                                                // 162
      // callbacks can't add callbacks, because                                 // 163
      // self.invalidated === true.                                             // 164
      for(var i = 0, f; f = self._onInvalidateCallbacks[i]; i++) {              // 165
        Deps.nonreactive(function () {                                          // 166
          callWithNoYieldsAllowed(f, self);                                     // 167
        });                                                                     // 168
      }                                                                         // 169
      self._onInvalidateCallbacks = [];                                         // 170
    }                                                                           // 171
  },                                                                            // 172
                                                                                // 173
  // http://docs.meteor.com/#computation_stop                                   // 174
  stop: function () {                                                           // 175
    if (! this.stopped) {                                                       // 176
      this.stopped = true;                                                      // 177
      this.invalidate();                                                        // 178
    }                                                                           // 179
  },                                                                            // 180
                                                                                // 181
  _compute: function () {                                                       // 182
    var self = this;                                                            // 183
    self.invalidated = false;                                                   // 184
                                                                                // 185
    var previous = Deps.currentComputation;                                     // 186
    setCurrentComputation(self);                                                // 187
    var previousInCompute = inCompute;                                          // 188
    inCompute = true;                                                           // 189
    try {                                                                       // 190
      callWithNoYieldsAllowed(self._func, self);                                // 191
    } finally {                                                                 // 192
      setCurrentComputation(previous);                                          // 193
      inCompute = false;                                                        // 194
    }                                                                           // 195
  },                                                                            // 196
                                                                                // 197
  _recompute: function () {                                                     // 198
    var self = this;                                                            // 199
                                                                                // 200
    self._recomputing = true;                                                   // 201
    try {                                                                       // 202
      while (self.invalidated && ! self.stopped) {                              // 203
        try {                                                                   // 204
          self._compute();                                                      // 205
        } catch (e) {                                                           // 206
          _throwOrLog("recompute", e);                                          // 207
        }                                                                       // 208
        // If _compute() invalidated us, we run again immediately.              // 209
        // A computation that invalidates itself indefinitely is an             // 210
        // infinite loop, of course.                                            // 211
        //                                                                      // 212
        // We could put an iteration counter here and catch run-away            // 213
        // loops.                                                               // 214
      }                                                                         // 215
    } finally {                                                                 // 216
      self._recomputing = false;                                                // 217
    }                                                                           // 218
  }                                                                             // 219
});                                                                             // 220
                                                                                // 221
//                                                                              // 222
// http://docs.meteor.com/#deps_dependency                                      // 223
//                                                                              // 224
Deps.Dependency = function () {                                                 // 225
  this._dependentsById = {};                                                    // 226
};                                                                              // 227
                                                                                // 228
_assign(Deps.Dependency.prototype, {                                            // 229
  // http://docs.meteor.com/#dependency_depend                                  // 230
  //                                                                            // 231
  // Adds `computation` to this set if it is not already                        // 232
  // present.  Returns true if `computation` is a new member of the set.        // 233
  // If no argument, defaults to currentComputation, or does nothing            // 234
  // if there is no currentComputation.                                         // 235
  depend: function (computation) {                                              // 236
    if (! computation) {                                                        // 237
      if (! Deps.active)                                                        // 238
        return false;                                                           // 239
                                                                                // 240
      computation = Deps.currentComputation;                                    // 241
    }                                                                           // 242
    var self = this;                                                            // 243
    var id = computation._id;                                                   // 244
    if (! (id in self._dependentsById)) {                                       // 245
      self._dependentsById[id] = computation;                                   // 246
      computation.onInvalidate(function () {                                    // 247
        delete self._dependentsById[id];                                        // 248
      });                                                                       // 249
      return true;                                                              // 250
    }                                                                           // 251
    return false;                                                               // 252
  },                                                                            // 253
                                                                                // 254
  // http://docs.meteor.com/#dependency_changed                                 // 255
  changed: function () {                                                        // 256
    var self = this;                                                            // 257
    for (var id in self._dependentsById)                                        // 258
      self._dependentsById[id].invalidate();                                    // 259
  },                                                                            // 260
                                                                                // 261
  // http://docs.meteor.com/#dependency_hasdependents                           // 262
  hasDependents: function () {                                                  // 263
    var self = this;                                                            // 264
    for(var id in self._dependentsById)                                         // 265
      return true;                                                              // 266
    return false;                                                               // 267
  }                                                                             // 268
});                                                                             // 269
                                                                                // 270
_assign(Deps, {                                                                 // 271
  // http://docs.meteor.com/#deps_flush                                         // 272
  flush: function (_opts) {                                                     // 273
    // XXX What part of the comment below is still true? (We no longer          // 274
    // have Spark)                                                              // 275
    //                                                                          // 276
    // Nested flush could plausibly happen if, say, a flush causes              // 277
    // DOM mutation, which causes a "blur" event, which runs an                 // 278
    // app event handler that calls Deps.flush.  At the moment                  // 279
    // Spark blocks event handlers during DOM mutation anyway,                  // 280
    // because the LiveRange tree isn't valid.  And we don't have               // 281
    // any useful notion of a nested flush.                                     // 282
    //                                                                          // 283
    // https://app.asana.com/0/159908330244/385138233856                        // 284
    if (inFlush)                                                                // 285
      throw new Error("Can't call Deps.flush while flushing");                  // 286
                                                                                // 287
    if (inCompute)                                                              // 288
      throw new Error("Can't flush inside Deps.autorun");                       // 289
                                                                                // 290
    inFlush = true;                                                             // 291
    willFlush = true;                                                           // 292
    throwFirstError = !! (_opts && _opts._throwFirstError);                     // 293
                                                                                // 294
    var finishedTry = false;                                                    // 295
    try {                                                                       // 296
      while (pendingComputations.length ||                                      // 297
             afterFlushCallbacks.length) {                                      // 298
                                                                                // 299
        // recompute all pending computations                                   // 300
        while (pendingComputations.length) {                                    // 301
          var comp = pendingComputations.shift();                               // 302
          comp._recompute();                                                    // 303
        }                                                                       // 304
                                                                                // 305
        if (afterFlushCallbacks.length) {                                       // 306
          // call one afterFlush callback, which may                            // 307
          // invalidate more computations                                       // 308
          var func = afterFlushCallbacks.shift();                               // 309
          try {                                                                 // 310
            func();                                                             // 311
          } catch (e) {                                                         // 312
            _throwOrLog("afterFlush function", e);                              // 313
          }                                                                     // 314
        }                                                                       // 315
      }                                                                         // 316
      finishedTry = true;                                                       // 317
    } finally {                                                                 // 318
      if (! finishedTry) {                                                      // 319
        // we're erroring                                                       // 320
        inFlush = false; // needed before calling `Deps.flush()` again          // 321
        Deps.flush({_throwFirstError: false}); // finish flushing               // 322
      }                                                                         // 323
      willFlush = false;                                                        // 324
      inFlush = false;                                                          // 325
    }                                                                           // 326
  },                                                                            // 327
                                                                                // 328
  // http://docs.meteor.com/#deps_autorun                                       // 329
  //                                                                            // 330
  // Run f(). Record its dependencies. Rerun it whenever the                    // 331
  // dependencies change.                                                       // 332
  //                                                                            // 333
  // Returns a new Computation, which is also passed to f.                      // 334
  //                                                                            // 335
  // Links the computation to the current computation                           // 336
  // so that it is stopped if the current computation is invalidated.           // 337
  autorun: function (f) {                                                       // 338
    if (typeof f !== 'function')                                                // 339
      throw new Error('Deps.autorun requires a function argument');             // 340
                                                                                // 341
    constructingComputation = true;                                             // 342
    var c = new Deps.Computation(f, Deps.currentComputation);                   // 343
                                                                                // 344
    if (Deps.active)                                                            // 345
      Deps.onInvalidate(function () {                                           // 346
        c.stop();                                                               // 347
      });                                                                       // 348
                                                                                // 349
    return c;                                                                   // 350
  },                                                                            // 351
                                                                                // 352
  // http://docs.meteor.com/#deps_nonreactive                                   // 353
  //                                                                            // 354
  // Run `f` with no current computation, returning the return value            // 355
  // of `f`.  Used to turn off reactivity for the duration of `f`,              // 356
  // so that reactive data sources accessed by `f` will not result in any       // 357
  // computations being invalidated.                                            // 358
  nonreactive: function (f) {                                                   // 359
    var previous = Deps.currentComputation;                                     // 360
    setCurrentComputation(null);                                                // 361
    try {                                                                       // 362
      return f();                                                               // 363
    } finally {                                                                 // 364
      setCurrentComputation(previous);                                          // 365
    }                                                                           // 366
  },                                                                            // 367
                                                                                // 368
  // http://docs.meteor.com/#deps_oninvalidate                                  // 369
  onInvalidate: function (f) {                                                  // 370
    if (! Deps.active)                                                          // 371
      throw new Error("Deps.onInvalidate requires a currentComputation");       // 372
                                                                                // 373
    Deps.currentComputation.onInvalidate(f);                                    // 374
  },                                                                            // 375
                                                                                // 376
  // http://docs.meteor.com/#deps_afterflush                                    // 377
  afterFlush: function (f) {                                                    // 378
    afterFlushCallbacks.push(f);                                                // 379
    requireFlush();                                                             // 380
  }                                                                             // 381
});                                                                             // 382
                                                                                // 383
//////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

//////////////////////////////////////////////////////////////////////////////////
//                                                                              //
// packages/deps/deprecated.js                                                  //
//                                                                              //
//////////////////////////////////////////////////////////////////////////////////
                                                                                //
// Deprecated (Deps-recated?) functions.                                        // 1
                                                                                // 2
// These functions used to be on the Meteor object (and worked slightly         // 3
// differently).                                                                // 4
// XXX COMPAT WITH 0.5.7                                                        // 5
Meteor.flush = Deps.flush;                                                      // 6
Meteor.autorun = Deps.autorun;                                                  // 7
                                                                                // 8
// We used to require a special "autosubscribe" call to reactively subscribe to // 9
// things. Now, it works with autorun.                                          // 10
// XXX COMPAT WITH 0.5.4                                                        // 11
Meteor.autosubscribe = Deps.autorun;                                            // 12
                                                                                // 13
// This Deps API briefly existed in 0.5.8 and 0.5.9                             // 14
// XXX COMPAT WITH 0.5.9                                                        // 15
Deps.depend = function (d) {                                                    // 16
  return d.depend();                                                            // 17
};                                                                              // 18
                                                                                // 19
//////////////////////////////////////////////////////////////////////////////////

}).call(this);


/* Exports */
if (typeof Package === 'undefined') Package = {};
Package.deps = {
  Deps: Deps
};

})();

//# sourceMappingURL=91f1235baecd83915f7d3a7328526dbba41482be.map
//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
//                                                                      //
// If you are using Chrome, open the Developer Tools and click the gear //
// icon in its lower right corner. In the General Settings panel, turn  //
// on 'Enable source maps'.                                             //
//                                                                      //
// If you are using Firefox 23, go to `about:config` and set the        //
// `devtools.debugger.source-maps-enabled` preference to true.          //
// (The preference should be on by default in Firefox 24; versions      //
// older than 23 do not support source maps.)                           //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

/* Imports */
var Meteor = Package.meteor.Meteor;
var JSON = Package.json.JSON;
var _ = Package.underscore._;

/* Package-scope variables */
var EJSON, EJSONTest, base64Encode, base64Decode;

(function () {

//////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                              //
// packages/ejson/ejson.js                                                                      //
//                                                                                              //
//////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                //
EJSON = {};                                                                                     // 1
EJSONTest = {};                                                                                 // 2
                                                                                                // 3
var customTypes = {};                                                                           // 4
// Add a custom type, using a method of your choice to get to and                               // 5
// from a basic JSON-able representation.  The factory argument                                 // 6
// is a function of JSON-able --> your object                                                   // 7
// The type you add must have:                                                                  // 8
// - A toJSONValue() method, so that Meteor can serialize it                                    // 9
// - a typeName() method, to show how to look it up in our type table.                          // 10
// It is okay if these methods are monkey-patched on.                                           // 11
// EJSON.clone will use toJSONValue and the given factory to produce                            // 12
// a clone, but you may specify a method clone() that will be                                   // 13
// used instead.                                                                                // 14
// Similarly, EJSON.equals will use toJSONValue to make comparisons,                            // 15
// but you may provide a method equals() instead.                                               // 16
//                                                                                              // 17
EJSON.addType = function (name, factory) {                                                      // 18
  if (_.has(customTypes, name))                                                                 // 19
    throw new Error("Type " + name + " already present");                                       // 20
  customTypes[name] = factory;                                                                  // 21
};                                                                                              // 22
                                                                                                // 23
var isInfOrNan = function (obj) {                                                               // 24
  return _.isNaN(obj) || obj === Infinity || obj === -Infinity;                                 // 25
};                                                                                              // 26
                                                                                                // 27
var builtinConverters = [                                                                       // 28
  { // Date                                                                                     // 29
    matchJSONValue: function (obj) {                                                            // 30
      return _.has(obj, '$date') && _.size(obj) === 1;                                          // 31
    },                                                                                          // 32
    matchObject: function (obj) {                                                               // 33
      return obj instanceof Date;                                                               // 34
    },                                                                                          // 35
    toJSONValue: function (obj) {                                                               // 36
      return {$date: obj.getTime()};                                                            // 37
    },                                                                                          // 38
    fromJSONValue: function (obj) {                                                             // 39
      return new Date(obj.$date);                                                               // 40
    }                                                                                           // 41
  },                                                                                            // 42
  { // NaN, Inf, -Inf. (These are the only objects with typeof !== 'object'                     // 43
    // which we match.)                                                                         // 44
    matchJSONValue: function (obj) {                                                            // 45
      return _.has(obj, '$InfNaN') && _.size(obj) === 1;                                        // 46
    },                                                                                          // 47
    matchObject: isInfOrNan,                                                                    // 48
    toJSONValue: function (obj) {                                                               // 49
      var sign;                                                                                 // 50
      if (_.isNaN(obj))                                                                         // 51
        sign = 0;                                                                               // 52
      else if (obj === Infinity)                                                                // 53
        sign = 1;                                                                               // 54
      else                                                                                      // 55
        sign = -1;                                                                              // 56
      return {$InfNaN: sign};                                                                   // 57
    },                                                                                          // 58
    fromJSONValue: function (obj) {                                                             // 59
      return obj.$InfNaN/0;                                                                     // 60
    }                                                                                           // 61
  },                                                                                            // 62
  { // Binary                                                                                   // 63
    matchJSONValue: function (obj) {                                                            // 64
      return _.has(obj, '$binary') && _.size(obj) === 1;                                        // 65
    },                                                                                          // 66
    matchObject: function (obj) {                                                               // 67
      return typeof Uint8Array !== 'undefined' && obj instanceof Uint8Array                     // 68
        || (obj && _.has(obj, '$Uint8ArrayPolyfill'));                                          // 69
    },                                                                                          // 70
    toJSONValue: function (obj) {                                                               // 71
      return {$binary: base64Encode(obj)};                                                      // 72
    },                                                                                          // 73
    fromJSONValue: function (obj) {                                                             // 74
      return base64Decode(obj.$binary);                                                         // 75
    }                                                                                           // 76
  },                                                                                            // 77
  { // Escaping one level                                                                       // 78
    matchJSONValue: function (obj) {                                                            // 79
      return _.has(obj, '$escape') && _.size(obj) === 1;                                        // 80
    },                                                                                          // 81
    matchObject: function (obj) {                                                               // 82
      if (_.isEmpty(obj) || _.size(obj) > 2) {                                                  // 83
        return false;                                                                           // 84
      }                                                                                         // 85
      return _.any(builtinConverters, function (converter) {                                    // 86
        return converter.matchJSONValue(obj);                                                   // 87
      });                                                                                       // 88
    },                                                                                          // 89
    toJSONValue: function (obj) {                                                               // 90
      var newObj = {};                                                                          // 91
      _.each(obj, function (value, key) {                                                       // 92
        newObj[key] = EJSON.toJSONValue(value);                                                 // 93
      });                                                                                       // 94
      return {$escape: newObj};                                                                 // 95
    },                                                                                          // 96
    fromJSONValue: function (obj) {                                                             // 97
      var newObj = {};                                                                          // 98
      _.each(obj.$escape, function (value, key) {                                               // 99
        newObj[key] = EJSON.fromJSONValue(value);                                               // 100
      });                                                                                       // 101
      return newObj;                                                                            // 102
    }                                                                                           // 103
  },                                                                                            // 104
  { // Custom                                                                                   // 105
    matchJSONValue: function (obj) {                                                            // 106
      return _.has(obj, '$type') && _.has(obj, '$value') && _.size(obj) === 2;                  // 107
    },                                                                                          // 108
    matchObject: function (obj) {                                                               // 109
      return EJSON._isCustomType(obj);                                                          // 110
    },                                                                                          // 111
    toJSONValue: function (obj) {                                                               // 112
      var jsonValue = Meteor._noYieldsAllowed(function () {                                     // 113
        return obj.toJSONValue();                                                               // 114
      });                                                                                       // 115
      return {$type: obj.typeName(), $value: jsonValue};                                        // 116
    },                                                                                          // 117
    fromJSONValue: function (obj) {                                                             // 118
      var typeName = obj.$type;                                                                 // 119
      if (!_.has(customTypes, typeName))                                                        // 120
        throw new Error("Custom EJSON type " + typeName + " is not defined");                   // 121
      var converter = customTypes[typeName];                                                    // 122
      return Meteor._noYieldsAllowed(function () {                                              // 123
        return converter(obj.$value);                                                           // 124
      });                                                                                       // 125
    }                                                                                           // 126
  }                                                                                             // 127
];                                                                                              // 128
                                                                                                // 129
EJSON._isCustomType = function (obj) {                                                          // 130
  return obj &&                                                                                 // 131
    typeof obj.toJSONValue === 'function' &&                                                    // 132
    typeof obj.typeName === 'function' &&                                                       // 133
    _.has(customTypes, obj.typeName());                                                         // 134
};                                                                                              // 135
                                                                                                // 136
                                                                                                // 137
// for both arrays and objects, in-place modification.                                          // 138
var adjustTypesToJSONValue =                                                                    // 139
EJSON._adjustTypesToJSONValue = function (obj) {                                                // 140
  // Is it an atom that we need to adjust?                                                      // 141
  if (obj === null)                                                                             // 142
    return null;                                                                                // 143
  var maybeChanged = toJSONValueHelper(obj);                                                    // 144
  if (maybeChanged !== undefined)                                                               // 145
    return maybeChanged;                                                                        // 146
                                                                                                // 147
  // Other atoms are unchanged.                                                                 // 148
  if (typeof obj !== 'object')                                                                  // 149
    return obj;                                                                                 // 150
                                                                                                // 151
  // Iterate over array or object structure.                                                    // 152
  _.each(obj, function (value, key) {                                                           // 153
    if (typeof value !== 'object' && value !== undefined &&                                     // 154
        !isInfOrNan(value))                                                                     // 155
      return; // continue                                                                       // 156
                                                                                                // 157
    var changed = toJSONValueHelper(value);                                                     // 158
    if (changed) {                                                                              // 159
      obj[key] = changed;                                                                       // 160
      return; // on to the next key                                                             // 161
    }                                                                                           // 162
    // if we get here, value is an object but not adjustable                                    // 163
    // at this level.  recurse.                                                                 // 164
    adjustTypesToJSONValue(value);                                                              // 165
  });                                                                                           // 166
  return obj;                                                                                   // 167
};                                                                                              // 168
                                                                                                // 169
// Either return the JSON-compatible version of the argument, or undefined (if                  // 170
// the item isn't itself replaceable, but maybe some fields in it are)                          // 171
var toJSONValueHelper = function (item) {                                                       // 172
  for (var i = 0; i < builtinConverters.length; i++) {                                          // 173
    var converter = builtinConverters[i];                                                       // 174
    if (converter.matchObject(item)) {                                                          // 175
      return converter.toJSONValue(item);                                                       // 176
    }                                                                                           // 177
  }                                                                                             // 178
  return undefined;                                                                             // 179
};                                                                                              // 180
                                                                                                // 181
EJSON.toJSONValue = function (item) {                                                           // 182
  var changed = toJSONValueHelper(item);                                                        // 183
  if (changed !== undefined)                                                                    // 184
    return changed;                                                                             // 185
  if (typeof item === 'object') {                                                               // 186
    item = EJSON.clone(item);                                                                   // 187
    adjustTypesToJSONValue(item);                                                               // 188
  }                                                                                             // 189
  return item;                                                                                  // 190
};                                                                                              // 191
                                                                                                // 192
// for both arrays and objects. Tries its best to just                                          // 193
// use the object you hand it, but may return something                                         // 194
// different if the object you hand it itself needs changing.                                   // 195
//                                                                                              // 196
var adjustTypesFromJSONValue =                                                                  // 197
EJSON._adjustTypesFromJSONValue = function (obj) {                                              // 198
  if (obj === null)                                                                             // 199
    return null;                                                                                // 200
  var maybeChanged = fromJSONValueHelper(obj);                                                  // 201
  if (maybeChanged !== obj)                                                                     // 202
    return maybeChanged;                                                                        // 203
                                                                                                // 204
  // Other atoms are unchanged.                                                                 // 205
  if (typeof obj !== 'object')                                                                  // 206
    return obj;                                                                                 // 207
                                                                                                // 208
  _.each(obj, function (value, key) {                                                           // 209
    if (typeof value === 'object') {                                                            // 210
      var changed = fromJSONValueHelper(value);                                                 // 211
      if (value !== changed) {                                                                  // 212
        obj[key] = changed;                                                                     // 213
        return;                                                                                 // 214
      }                                                                                         // 215
      // if we get here, value is an object but not adjustable                                  // 216
      // at this level.  recurse.                                                               // 217
      adjustTypesFromJSONValue(value);                                                          // 218
    }                                                                                           // 219
  });                                                                                           // 220
  return obj;                                                                                   // 221
};                                                                                              // 222
                                                                                                // 223
// Either return the argument changed to have the non-json                                      // 224
// rep of itself (the Object version) or the argument itself.                                   // 225
                                                                                                // 226
// DOES NOT RECURSE.  For actually getting the fully-changed value, use                         // 227
// EJSON.fromJSONValue                                                                          // 228
var fromJSONValueHelper = function (value) {                                                    // 229
  if (typeof value === 'object' && value !== null) {                                            // 230
    if (_.size(value) <= 2                                                                      // 231
        && _.all(value, function (v, k) {                                                       // 232
          return typeof k === 'string' && k.substr(0, 1) === '$';                               // 233
        })) {                                                                                   // 234
      for (var i = 0; i < builtinConverters.length; i++) {                                      // 235
        var converter = builtinConverters[i];                                                   // 236
        if (converter.matchJSONValue(value)) {                                                  // 237
          return converter.fromJSONValue(value);                                                // 238
        }                                                                                       // 239
      }                                                                                         // 240
    }                                                                                           // 241
  }                                                                                             // 242
  return value;                                                                                 // 243
};                                                                                              // 244
                                                                                                // 245
EJSON.fromJSONValue = function (item) {                                                         // 246
  var changed = fromJSONValueHelper(item);                                                      // 247
  if (changed === item && typeof item === 'object') {                                           // 248
    item = EJSON.clone(item);                                                                   // 249
    adjustTypesFromJSONValue(item);                                                             // 250
    return item;                                                                                // 251
  } else {                                                                                      // 252
    return changed;                                                                             // 253
  }                                                                                             // 254
};                                                                                              // 255
                                                                                                // 256
EJSON.stringify = function (item, options) {                                                    // 257
  var json = EJSON.toJSONValue(item);                                                           // 258
  if (options && (options.canonical || options.indent)) {                                       // 259
    return EJSON._canonicalStringify(json, options);                                            // 260
  } else {                                                                                      // 261
    return JSON.stringify(json);                                                                // 262
  }                                                                                             // 263
};                                                                                              // 264
                                                                                                // 265
EJSON.parse = function (item) {                                                                 // 266
  if (typeof item !== 'string')                                                                 // 267
    throw new Error("EJSON.parse argument should be a string");                                 // 268
  return EJSON.fromJSONValue(JSON.parse(item));                                                 // 269
};                                                                                              // 270
                                                                                                // 271
EJSON.isBinary = function (obj) {                                                               // 272
  return !!((typeof Uint8Array !== 'undefined' && obj instanceof Uint8Array) ||                 // 273
    (obj && obj.$Uint8ArrayPolyfill));                                                          // 274
};                                                                                              // 275
                                                                                                // 276
EJSON.equals = function (a, b, options) {                                                       // 277
  var i;                                                                                        // 278
  var keyOrderSensitive = !!(options && options.keyOrderSensitive);                             // 279
  if (a === b)                                                                                  // 280
    return true;                                                                                // 281
  if (_.isNaN(a) && _.isNaN(b))                                                                 // 282
    return true; // This differs from the IEEE spec for NaN equality, b/c we don't want         // 283
                 // anything ever with a NaN to be poisoned from becoming equal to anything.    // 284
  if (!a || !b) // if either one is falsy, they'd have to be === to be equal                    // 285
    return false;                                                                               // 286
  if (!(typeof a === 'object' && typeof b === 'object'))                                        // 287
    return false;                                                                               // 288
  if (a instanceof Date && b instanceof Date)                                                   // 289
    return a.valueOf() === b.valueOf();                                                         // 290
  if (EJSON.isBinary(a) && EJSON.isBinary(b)) {                                                 // 291
    if (a.length !== b.length)                                                                  // 292
      return false;                                                                             // 293
    for (i = 0; i < a.length; i++) {                                                            // 294
      if (a[i] !== b[i])                                                                        // 295
        return false;                                                                           // 296
    }                                                                                           // 297
    return true;                                                                                // 298
  }                                                                                             // 299
  if (typeof (a.equals) === 'function')                                                         // 300
    return a.equals(b, options);                                                                // 301
  if (typeof (b.equals) === 'function')                                                         // 302
    return b.equals(a, options);                                                                // 303
  if (a instanceof Array) {                                                                     // 304
    if (!(b instanceof Array))                                                                  // 305
      return false;                                                                             // 306
    if (a.length !== b.length)                                                                  // 307
      return false;                                                                             // 308
    for (i = 0; i < a.length; i++) {                                                            // 309
      if (!EJSON.equals(a[i], b[i], options))                                                   // 310
        return false;                                                                           // 311
    }                                                                                           // 312
    return true;                                                                                // 313
  }                                                                                             // 314
  // fallback for custom types that don't implement their own equals                            // 315
  switch (EJSON._isCustomType(a) + EJSON._isCustomType(b)) {                                    // 316
    case 1: return false;                                                                       // 317
    case 2: return EJSON.equals(EJSON.toJSONValue(a), EJSON.toJSONValue(b));                    // 318
  }                                                                                             // 319
  // fall back to structural equality of objects                                                // 320
  var ret;                                                                                      // 321
  if (keyOrderSensitive) {                                                                      // 322
    var bKeys = [];                                                                             // 323
    _.each(b, function (val, x) {                                                               // 324
        bKeys.push(x);                                                                          // 325
    });                                                                                         // 326
    i = 0;                                                                                      // 327
    ret = _.all(a, function (val, x) {                                                          // 328
      if (i >= bKeys.length) {                                                                  // 329
        return false;                                                                           // 330
      }                                                                                         // 331
      if (x !== bKeys[i]) {                                                                     // 332
        return false;                                                                           // 333
      }                                                                                         // 334
      if (!EJSON.equals(val, b[bKeys[i]], options)) {                                           // 335
        return false;                                                                           // 336
      }                                                                                         // 337
      i++;                                                                                      // 338
      return true;                                                                              // 339
    });                                                                                         // 340
    return ret && i === bKeys.length;                                                           // 341
  } else {                                                                                      // 342
    i = 0;                                                                                      // 343
    ret = _.all(a, function (val, key) {                                                        // 344
      if (!_.has(b, key)) {                                                                     // 345
        return false;                                                                           // 346
      }                                                                                         // 347
      if (!EJSON.equals(val, b[key], options)) {                                                // 348
        return false;                                                                           // 349
      }                                                                                         // 350
      i++;                                                                                      // 351
      return true;                                                                              // 352
    });                                                                                         // 353
    return ret && _.size(b) === i;                                                              // 354
  }                                                                                             // 355
};                                                                                              // 356
                                                                                                // 357
EJSON.clone = function (v) {                                                                    // 358
  var ret;                                                                                      // 359
  if (typeof v !== "object")                                                                    // 360
    return v;                                                                                   // 361
  if (v === null)                                                                               // 362
    return null; // null has typeof "object"                                                    // 363
  if (v instanceof Date)                                                                        // 364
    return new Date(v.getTime());                                                               // 365
  // RegExps are not really EJSON elements (eg we don't define a serialization                  // 366
  // for them), but they're immutable anyway, so we can support them in clone.                  // 367
  if (v instanceof RegExp)                                                                      // 368
    return v;                                                                                   // 369
  if (EJSON.isBinary(v)) {                                                                      // 370
    ret = EJSON.newBinary(v.length);                                                            // 371
    for (var i = 0; i < v.length; i++) {                                                        // 372
      ret[i] = v[i];                                                                            // 373
    }                                                                                           // 374
    return ret;                                                                                 // 375
  }                                                                                             // 376
  // XXX: Use something better than underscore's isArray                                        // 377
  if (_.isArray(v) || _.isArguments(v)) {                                                       // 378
    // For some reason, _.map doesn't work in this context on Opera (weird test                 // 379
    // failures).                                                                               // 380
    ret = [];                                                                                   // 381
    for (i = 0; i < v.length; i++)                                                              // 382
      ret[i] = EJSON.clone(v[i]);                                                               // 383
    return ret;                                                                                 // 384
  }                                                                                             // 385
  // handle general user-defined typed Objects if they have a clone method                      // 386
  if (typeof v.clone === 'function') {                                                          // 387
    return v.clone();                                                                           // 388
  }                                                                                             // 389
  // handle other custom types                                                                  // 390
  if (EJSON._isCustomType(v)) {                                                                 // 391
    return EJSON.fromJSONValue(EJSON.clone(EJSON.toJSONValue(v)), true);                        // 392
  }                                                                                             // 393
  // handle other objects                                                                       // 394
  ret = {};                                                                                     // 395
  _.each(v, function (value, key) {                                                             // 396
    ret[key] = EJSON.clone(value);                                                              // 397
  });                                                                                           // 398
  return ret;                                                                                   // 399
};                                                                                              // 400
                                                                                                // 401
//////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

//////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                              //
// packages/ejson/stringify.js                                                                  //
//                                                                                              //
//////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                //
// Based on json2.js from https://github.com/douglascrockford/JSON-js                           // 1
//                                                                                              // 2
//    json2.js                                                                                  // 3
//    2012-10-08                                                                                // 4
//                                                                                              // 5
//    Public Domain.                                                                            // 6
//                                                                                              // 7
//    NO WARRANTY EXPRESSED OR IMPLIED. USE AT YOUR OWN RISK.                                   // 8
                                                                                                // 9
function quote(string) {                                                                        // 10
  return JSON.stringify(string);                                                                // 11
}                                                                                               // 12
                                                                                                // 13
var str = function (key, holder, singleIndent, outerIndent, canonical) {                        // 14
                                                                                                // 15
  // Produce a string from holder[key].                                                         // 16
                                                                                                // 17
  var i;          // The loop counter.                                                          // 18
  var k;          // The member key.                                                            // 19
  var v;          // The member value.                                                          // 20
  var length;                                                                                   // 21
  var innerIndent = outerIndent;                                                                // 22
  var partial;                                                                                  // 23
  var value = holder[key];                                                                      // 24
                                                                                                // 25
  // What happens next depends on the value's type.                                             // 26
                                                                                                // 27
  switch (typeof value) {                                                                       // 28
  case 'string':                                                                                // 29
    return quote(value);                                                                        // 30
  case 'number':                                                                                // 31
    // JSON numbers must be finite. Encode non-finite numbers as null.                          // 32
    return isFinite(value) ? String(value) : 'null';                                            // 33
  case 'boolean':                                                                               // 34
    return String(value);                                                                       // 35
  // If the type is 'object', we might be dealing with an object or an array or                 // 36
  // null.                                                                                      // 37
  case 'object':                                                                                // 38
    // Due to a specification blunder in ECMAScript, typeof null is 'object',                   // 39
    // so watch out for that case.                                                              // 40
    if (!value) {                                                                               // 41
      return 'null';                                                                            // 42
    }                                                                                           // 43
    // Make an array to hold the partial results of stringifying this object value.             // 44
    innerIndent = outerIndent + singleIndent;                                                   // 45
    partial = [];                                                                               // 46
                                                                                                // 47
    // Is the value an array?                                                                   // 48
    if (_.isArray(value) || _.isArguments(value)) {                                             // 49
                                                                                                // 50
      // The value is an array. Stringify every element. Use null as a placeholder              // 51
      // for non-JSON values.                                                                   // 52
                                                                                                // 53
      length = value.length;                                                                    // 54
      for (i = 0; i < length; i += 1) {                                                         // 55
        partial[i] = str(i, value, singleIndent, innerIndent, canonical) || 'null';             // 56
      }                                                                                         // 57
                                                                                                // 58
      // Join all of the elements together, separated with commas, and wrap them in             // 59
      // brackets.                                                                              // 60
                                                                                                // 61
      if (partial.length === 0) {                                                               // 62
        v = '[]';                                                                               // 63
      } else if (innerIndent) {                                                                 // 64
        v = '[\n' + innerIndent + partial.join(',\n' + innerIndent) + '\n' + outerIndent + ']'; // 65
      } else {                                                                                  // 66
        v = '[' + partial.join(',') + ']';                                                      // 67
      }                                                                                         // 68
      return v;                                                                                 // 69
    }                                                                                           // 70
                                                                                                // 71
                                                                                                // 72
    // Iterate through all of the keys in the object.                                           // 73
    var keys = _.keys(value);                                                                   // 74
    if (canonical)                                                                              // 75
      keys = keys.sort();                                                                       // 76
    _.each(keys, function (k) {                                                                 // 77
      v = str(k, value, singleIndent, innerIndent, canonical);                                  // 78
      if (v) {                                                                                  // 79
        partial.push(quote(k) + (innerIndent ? ': ' : ':') + v);                                // 80
      }                                                                                         // 81
    });                                                                                         // 82
                                                                                                // 83
                                                                                                // 84
    // Join all of the member texts together, separated with commas,                            // 85
    // and wrap them in braces.                                                                 // 86
                                                                                                // 87
    if (partial.length === 0) {                                                                 // 88
      v = '{}';                                                                                 // 89
    } else if (innerIndent) {                                                                   // 90
      v = '{\n' + innerIndent + partial.join(',\n' + innerIndent) + '\n' + outerIndent + '}';   // 91
    } else {                                                                                    // 92
      v = '{' + partial.join(',') + '}';                                                        // 93
    }                                                                                           // 94
    return v;                                                                                   // 95
  }                                                                                             // 96
}                                                                                               // 97
                                                                                                // 98
// If the JSON object does not yet have a stringify method, give it one.                        // 99
                                                                                                // 100
EJSON._canonicalStringify = function (value, options) {                                         // 101
  // Make a fake root object containing our value under the key of ''.                          // 102
  // Return the result of stringifying the value.                                               // 103
  options = _.extend({                                                                          // 104
    indent: "",                                                                                 // 105
    canonical: false                                                                            // 106
  }, options);                                                                                  // 107
  if (options.indent === true) {                                                                // 108
    options.indent = "  ";                                                                      // 109
  } else if (typeof options.indent === 'number') {                                              // 110
    var newIndent = "";                                                                         // 111
    for (var i = 0; i < options.indent; i++) {                                                  // 112
      newIndent += ' ';                                                                         // 113
    }                                                                                           // 114
    options.indent = newIndent;                                                                 // 115
  }                                                                                             // 116
  return str('', {'': value}, options.indent, "", options.canonical);                           // 117
};                                                                                              // 118
                                                                                                // 119
//////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

//////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                              //
// packages/ejson/base64.js                                                                     //
//                                                                                              //
//////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                //
// Base 64 encoding                                                                             // 1
                                                                                                // 2
var BASE_64_CHARS = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";         // 3
                                                                                                // 4
var BASE_64_VALS = {};                                                                          // 5
                                                                                                // 6
for (var i = 0; i < BASE_64_CHARS.length; i++) {                                                // 7
  BASE_64_VALS[BASE_64_CHARS.charAt(i)] = i;                                                    // 8
};                                                                                              // 9
                                                                                                // 10
base64Encode = function (array) {                                                               // 11
  var answer = [];                                                                              // 12
  var a = null;                                                                                 // 13
  var b = null;                                                                                 // 14
  var c = null;                                                                                 // 15
  var d = null;                                                                                 // 16
  for (var i = 0; i < array.length; i++) {                                                      // 17
    switch (i % 3) {                                                                            // 18
    case 0:                                                                                     // 19
      a = (array[i] >> 2) & 0x3F;                                                               // 20
      b = (array[i] & 0x03) << 4;                                                               // 21
      break;                                                                                    // 22
    case 1:                                                                                     // 23
      b = b | (array[i] >> 4) & 0xF;                                                            // 24
      c = (array[i] & 0xF) << 2;                                                                // 25
      break;                                                                                    // 26
    case 2:                                                                                     // 27
      c = c | (array[i] >> 6) & 0x03;                                                           // 28
      d = array[i] & 0x3F;                                                                      // 29
      answer.push(getChar(a));                                                                  // 30
      answer.push(getChar(b));                                                                  // 31
      answer.push(getChar(c));                                                                  // 32
      answer.push(getChar(d));                                                                  // 33
      a = null;                                                                                 // 34
      b = null;                                                                                 // 35
      c = null;                                                                                 // 36
      d = null;                                                                                 // 37
      break;                                                                                    // 38
    }                                                                                           // 39
  }                                                                                             // 40
  if (a != null) {                                                                              // 41
    answer.push(getChar(a));                                                                    // 42
    answer.push(getChar(b));                                                                    // 43
    if (c == null)                                                                              // 44
      answer.push('=');                                                                         // 45
    else                                                                                        // 46
      answer.push(getChar(c));                                                                  // 47
    if (d == null)                                                                              // 48
      answer.push('=');                                                                         // 49
  }                                                                                             // 50
  return answer.join("");                                                                       // 51
};                                                                                              // 52
                                                                                                // 53
var getChar = function (val) {                                                                  // 54
  return BASE_64_CHARS.charAt(val);                                                             // 55
};                                                                                              // 56
                                                                                                // 57
var getVal = function (ch) {                                                                    // 58
  if (ch === '=') {                                                                             // 59
    return -1;                                                                                  // 60
  }                                                                                             // 61
  return BASE_64_VALS[ch];                                                                      // 62
};                                                                                              // 63
                                                                                                // 64
EJSON.newBinary = function (len) {                                                              // 65
  if (typeof Uint8Array === 'undefined' || typeof ArrayBuffer === 'undefined') {                // 66
    var ret = [];                                                                               // 67
    for (var i = 0; i < len; i++) {                                                             // 68
      ret.push(0);                                                                              // 69
    }                                                                                           // 70
    ret.$Uint8ArrayPolyfill = true;                                                             // 71
    return ret;                                                                                 // 72
  }                                                                                             // 73
  return new Uint8Array(new ArrayBuffer(len));                                                  // 74
};                                                                                              // 75
                                                                                                // 76
base64Decode = function (str) {                                                                 // 77
  var len = Math.floor((str.length*3)/4);                                                       // 78
  if (str.charAt(str.length - 1) == '=') {                                                      // 79
    len--;                                                                                      // 80
    if (str.charAt(str.length - 2) == '=')                                                      // 81
      len--;                                                                                    // 82
  }                                                                                             // 83
  var arr = EJSON.newBinary(len);                                                               // 84
                                                                                                // 85
  var one = null;                                                                               // 86
  var two = null;                                                                               // 87
  var three = null;                                                                             // 88
                                                                                                // 89
  var j = 0;                                                                                    // 90
                                                                                                // 91
  for (var i = 0; i < str.length; i++) {                                                        // 92
    var c = str.charAt(i);                                                                      // 93
    var v = getVal(c);                                                                          // 94
    switch (i % 4) {                                                                            // 95
    case 0:                                                                                     // 96
      if (v < 0)                                                                                // 97
        throw new Error('invalid base64 string');                                               // 98
      one = v << 2;                                                                             // 99
      break;                                                                                    // 100
    case 1:                                                                                     // 101
      if (v < 0)                                                                                // 102
        throw new Error('invalid base64 string');                                               // 103
      one = one | (v >> 4);                                                                     // 104
      arr[j++] = one;                                                                           // 105
      two = (v & 0x0F) << 4;                                                                    // 106
      break;                                                                                    // 107
    case 2:                                                                                     // 108
      if (v >= 0) {                                                                             // 109
        two = two | (v >> 2);                                                                   // 110
        arr[j++] = two;                                                                         // 111
        three = (v & 0x03) << 6;                                                                // 112
      }                                                                                         // 113
      break;                                                                                    // 114
    case 3:                                                                                     // 115
      if (v >= 0) {                                                                             // 116
        arr[j++] = three | v;                                                                   // 117
      }                                                                                         // 118
      break;                                                                                    // 119
    }                                                                                           // 120
  }                                                                                             // 121
  return arr;                                                                                   // 122
};                                                                                              // 123
                                                                                                // 124
EJSONTest.base64Encode = base64Encode;                                                          // 125
                                                                                                // 126
EJSONTest.base64Decode = base64Decode;                                                          // 127
                                                                                                // 128
//////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);


/* Exports */
if (typeof Package === 'undefined') Package = {};
Package.ejson = {
  EJSON: EJSON,
  EJSONTest: EJSONTest
};

})();

//# sourceMappingURL=9ccd48dbafd805e21408c9eae1061468b3ec1f2f.map
//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
//                                                                      //
// If you are using Chrome, open the Developer Tools and click the gear //
// icon in its lower right corner. In the General Settings panel, turn  //
// on 'Enable source maps'.                                             //
//                                                                      //
// If you are using Firefox 23, go to `about:config` and set the        //
// `devtools.debugger.source-maps-enabled` preference to true.          //
// (The preference should be on by default in Firefox 24; versions      //
// older than 23 do not support source maps.)                           //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

/* Imports */
var Meteor = Package.meteor.Meteor;

/* Package-scope variables */
var GeoJSON, module;

(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                         //
// packages/geojson-utils/pre.js                                                                           //
//                                                                                                         //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                           //
// Define an object named exports. This will cause geojson-utils.js to put `gju`                           // 1
// as a field on it, instead of in the global namespace.  See also post.js.                                // 2
module = {exports:{}};                                                                                     // 3
                                                                                                           // 4
                                                                                                           // 5
/////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                         //
// packages/geojson-utils/geojson-utils.js                                                                 //
//                                                                                                         //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                           //
(function () {                                                                                             // 1
  var gju = {};                                                                                            // 2
                                                                                                           // 3
  // Export the geojson object for **CommonJS**                                                            // 4
  if (typeof module !== 'undefined' && module.exports) {                                                   // 5
    module.exports = gju;                                                                                  // 6
  }                                                                                                        // 7
                                                                                                           // 8
  // adapted from http://www.kevlindev.com/gui/math/intersection/Intersection.js                           // 9
  gju.lineStringsIntersect = function (l1, l2) {                                                           // 10
    var intersects = [];                                                                                   // 11
    for (var i = 0; i <= l1.coordinates.length - 2; ++i) {                                                 // 12
      for (var j = 0; j <= l2.coordinates.length - 2; ++j) {                                               // 13
        var a1 = {                                                                                         // 14
          x: l1.coordinates[i][1],                                                                         // 15
          y: l1.coordinates[i][0]                                                                          // 16
        },                                                                                                 // 17
          a2 = {                                                                                           // 18
            x: l1.coordinates[i + 1][1],                                                                   // 19
            y: l1.coordinates[i + 1][0]                                                                    // 20
          },                                                                                               // 21
          b1 = {                                                                                           // 22
            x: l2.coordinates[j][1],                                                                       // 23
            y: l2.coordinates[j][0]                                                                        // 24
          },                                                                                               // 25
          b2 = {                                                                                           // 26
            x: l2.coordinates[j + 1][1],                                                                   // 27
            y: l2.coordinates[j + 1][0]                                                                    // 28
          },                                                                                               // 29
          ua_t = (b2.x - b1.x) * (a1.y - b1.y) - (b2.y - b1.y) * (a1.x - b1.x),                            // 30
          ub_t = (a2.x - a1.x) * (a1.y - b1.y) - (a2.y - a1.y) * (a1.x - b1.x),                            // 31
          u_b = (b2.y - b1.y) * (a2.x - a1.x) - (b2.x - b1.x) * (a2.y - a1.y);                             // 32
        if (u_b != 0) {                                                                                    // 33
          var ua = ua_t / u_b,                                                                             // 34
            ub = ub_t / u_b;                                                                               // 35
          if (0 <= ua && ua <= 1 && 0 <= ub && ub <= 1) {                                                  // 36
            intersects.push({                                                                              // 37
              'type': 'Point',                                                                             // 38
              'coordinates': [a1.x + ua * (a2.x - a1.x), a1.y + ua * (a2.y - a1.y)]                        // 39
            });                                                                                            // 40
          }                                                                                                // 41
        }                                                                                                  // 42
      }                                                                                                    // 43
    }                                                                                                      // 44
    if (intersects.length == 0) intersects = false;                                                        // 45
    return intersects;                                                                                     // 46
  }                                                                                                        // 47
                                                                                                           // 48
  // Bounding Box                                                                                          // 49
                                                                                                           // 50
  function boundingBoxAroundPolyCoords (coords) {                                                          // 51
    var xAll = [], yAll = []                                                                               // 52
                                                                                                           // 53
    for (var i = 0; i < coords[0].length; i++) {                                                           // 54
      xAll.push(coords[0][i][1])                                                                           // 55
      yAll.push(coords[0][i][0])                                                                           // 56
    }                                                                                                      // 57
                                                                                                           // 58
    xAll = xAll.sort(function (a,b) { return a - b })                                                      // 59
    yAll = yAll.sort(function (a,b) { return a - b })                                                      // 60
                                                                                                           // 61
    return [ [xAll[0], yAll[0]], [xAll[xAll.length - 1], yAll[yAll.length - 1]] ]                          // 62
  }                                                                                                        // 63
                                                                                                           // 64
  gju.pointInBoundingBox = function (point, bounds) {                                                      // 65
    return !(point.coordinates[1] < bounds[0][0] || point.coordinates[1] > bounds[1][0] || point.coordinates[0] < bounds[0][1] || point.coordinates[0] > bounds[1][1]) 
  }                                                                                                        // 67
                                                                                                           // 68
  // Point in Polygon                                                                                      // 69
  // http://www.ecse.rpi.edu/Homepages/wrf/Research/Short_Notes/pnpoly.html#Listing the Vertices           // 70
                                                                                                           // 71
  function pnpoly (x,y,coords) {                                                                           // 72
    var vert = [ [0,0] ]                                                                                   // 73
                                                                                                           // 74
    for (var i = 0; i < coords.length; i++) {                                                              // 75
      for (var j = 0; j < coords[i].length; j++) {                                                         // 76
        vert.push(coords[i][j])                                                                            // 77
      }                                                                                                    // 78
      vert.push([0,0])                                                                                     // 79
    }                                                                                                      // 80
                                                                                                           // 81
    var inside = false                                                                                     // 82
    for (var i = 0, j = vert.length - 1; i < vert.length; j = i++) {                                       // 83
      if (((vert[i][0] > y) != (vert[j][0] > y)) && (x < (vert[j][1] - vert[i][1]) * (y - vert[i][0]) / (vert[j][0] - vert[i][0]) + vert[i][1])) inside = !inside
    }                                                                                                      // 85
                                                                                                           // 86
    return inside                                                                                          // 87
  }                                                                                                        // 88
                                                                                                           // 89
  gju.pointInPolygon = function (p, poly) {                                                                // 90
    var coords = (poly.type == "Polygon") ? [ poly.coordinates ] : poly.coordinates                        // 91
                                                                                                           // 92
    var insideBox = false                                                                                  // 93
    for (var i = 0; i < coords.length; i++) {                                                              // 94
      if (gju.pointInBoundingBox(p, boundingBoxAroundPolyCoords(coords[i]))) insideBox = true              // 95
    }                                                                                                      // 96
    if (!insideBox) return false                                                                           // 97
                                                                                                           // 98
    var insidePoly = false                                                                                 // 99
    for (var i = 0; i < coords.length; i++) {                                                              // 100
      if (pnpoly(p.coordinates[1], p.coordinates[0], coords[i])) insidePoly = true                         // 101
    }                                                                                                      // 102
                                                                                                           // 103
    return insidePoly                                                                                      // 104
  }                                                                                                        // 105
                                                                                                           // 106
  gju.numberToRadius = function (number) {                                                                 // 107
    return number * Math.PI / 180;                                                                         // 108
  }                                                                                                        // 109
                                                                                                           // 110
  gju.numberToDegree = function (number) {                                                                 // 111
    return number * 180 / Math.PI;                                                                         // 112
  }                                                                                                        // 113
                                                                                                           // 114
  // written with help from @tautologe                                                                     // 115
  gju.drawCircle = function (radiusInMeters, centerPoint, steps) {                                         // 116
    var center = [centerPoint.coordinates[1], centerPoint.coordinates[0]],                                 // 117
      dist = (radiusInMeters / 1000) / 6371,                                                               // 118
      // convert meters to radiant                                                                         // 119
      radCenter = [gju.numberToRadius(center[0]), gju.numberToRadius(center[1])],                          // 120
      steps = steps || 15,                                                                                 // 121
      // 15 sided circle                                                                                   // 122
      poly = [[center[0], center[1]]];                                                                     // 123
    for (var i = 0; i < steps; i++) {                                                                      // 124
      var brng = 2 * Math.PI * i / steps;                                                                  // 125
      var lat = Math.asin(Math.sin(radCenter[0]) * Math.cos(dist)                                          // 126
              + Math.cos(radCenter[0]) * Math.sin(dist) * Math.cos(brng));                                 // 127
      var lng = radCenter[1] + Math.atan2(Math.sin(brng) * Math.sin(dist) * Math.cos(radCenter[0]),        // 128
                                          Math.cos(dist) - Math.sin(radCenter[0]) * Math.sin(lat));        // 129
      poly[i] = [];                                                                                        // 130
      poly[i][1] = gju.numberToDegree(lat);                                                                // 131
      poly[i][0] = gju.numberToDegree(lng);                                                                // 132
    }                                                                                                      // 133
    return {                                                                                               // 134
      "type": "Polygon",                                                                                   // 135
      "coordinates": [poly]                                                                                // 136
    };                                                                                                     // 137
  }                                                                                                        // 138
                                                                                                           // 139
  // assumes rectangle starts at lower left point                                                          // 140
  gju.rectangleCentroid = function (rectangle) {                                                           // 141
    var bbox = rectangle.coordinates[0];                                                                   // 142
    var xmin = bbox[0][0],                                                                                 // 143
      ymin = bbox[0][1],                                                                                   // 144
      xmax = bbox[2][0],                                                                                   // 145
      ymax = bbox[2][1];                                                                                   // 146
    var xwidth = xmax - xmin;                                                                              // 147
    var ywidth = ymax - ymin;                                                                              // 148
    return {                                                                                               // 149
      'type': 'Point',                                                                                     // 150
      'coordinates': [xmin + xwidth / 2, ymin + ywidth / 2]                                                // 151
    };                                                                                                     // 152
  }                                                                                                        // 153
                                                                                                           // 154
  // from http://www.movable-type.co.uk/scripts/latlong.html                                               // 155
  gju.pointDistance = function (pt1, pt2) {                                                                // 156
    var lon1 = pt1.coordinates[0],                                                                         // 157
      lat1 = pt1.coordinates[1],                                                                           // 158
      lon2 = pt2.coordinates[0],                                                                           // 159
      lat2 = pt2.coordinates[1],                                                                           // 160
      dLat = gju.numberToRadius(lat2 - lat1),                                                              // 161
      dLon = gju.numberToRadius(lon2 - lon1),                                                              // 162
      a = Math.pow(Math.sin(dLat / 2), 2) + Math.cos(gju.numberToRadius(lat1))                             // 163
        * Math.cos(gju.numberToRadius(lat2)) * Math.pow(Math.sin(dLon / 2), 2),                            // 164
      c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));                                                  // 165
    // Earth radius is 6371 km                                                                             // 166
    return (6371 * c) * 1000; // returns meters                                                            // 167
  },                                                                                                       // 168
                                                                                                           // 169
  // checks if geometry lies entirely within a circle                                                      // 170
  // works with Point, LineString, Polygon                                                                 // 171
  gju.geometryWithinRadius = function (geometry, center, radius) {                                         // 172
    if (geometry.type == 'Point') {                                                                        // 173
      return gju.pointDistance(geometry, center) <= radius;                                                // 174
    } else if (geometry.type == 'LineString' || geometry.type == 'Polygon') {                              // 175
      var point = {};                                                                                      // 176
      var coordinates;                                                                                     // 177
      if (geometry.type == 'Polygon') {                                                                    // 178
        // it's enough to check the exterior ring of the Polygon                                           // 179
        coordinates = geometry.coordinates[0];                                                             // 180
      } else {                                                                                             // 181
        coordinates = geometry.coordinates;                                                                // 182
      }                                                                                                    // 183
      for (var i in coordinates) {                                                                         // 184
        point.coordinates = coordinates[i];                                                                // 185
        if (gju.pointDistance(point, center) > radius) {                                                   // 186
          return false;                                                                                    // 187
        }                                                                                                  // 188
      }                                                                                                    // 189
    }                                                                                                      // 190
    return true;                                                                                           // 191
  }                                                                                                        // 192
                                                                                                           // 193
  // adapted from http://paulbourke.net/geometry/polyarea/javascript.txt                                   // 194
  gju.area = function (polygon) {                                                                          // 195
    var area = 0;                                                                                          // 196
    // TODO: polygon holes at coordinates[1]                                                               // 197
    var points = polygon.coordinates[0];                                                                   // 198
    var j = points.length - 1;                                                                             // 199
    var p1, p2;                                                                                            // 200
                                                                                                           // 201
    for (var i = 0; i < points.length; j = i++) {                                                          // 202
      var p1 = {                                                                                           // 203
        x: points[i][1],                                                                                   // 204
        y: points[i][0]                                                                                    // 205
      };                                                                                                   // 206
      var p2 = {                                                                                           // 207
        x: points[j][1],                                                                                   // 208
        y: points[j][0]                                                                                    // 209
      };                                                                                                   // 210
      area += p1.x * p2.y;                                                                                 // 211
      area -= p1.y * p2.x;                                                                                 // 212
    }                                                                                                      // 213
                                                                                                           // 214
    area /= 2;                                                                                             // 215
    return area;                                                                                           // 216
  },                                                                                                       // 217
                                                                                                           // 218
  // adapted from http://paulbourke.net/geometry/polyarea/javascript.txt                                   // 219
  gju.centroid = function (polygon) {                                                                      // 220
    var f, x = 0,                                                                                          // 221
      y = 0;                                                                                               // 222
    // TODO: polygon holes at coordinates[1]                                                               // 223
    var points = polygon.coordinates[0];                                                                   // 224
    var j = points.length - 1;                                                                             // 225
    var p1, p2;                                                                                            // 226
                                                                                                           // 227
    for (var i = 0; i < points.length; j = i++) {                                                          // 228
      var p1 = {                                                                                           // 229
        x: points[i][1],                                                                                   // 230
        y: points[i][0]                                                                                    // 231
      };                                                                                                   // 232
      var p2 = {                                                                                           // 233
        x: points[j][1],                                                                                   // 234
        y: points[j][0]                                                                                    // 235
      };                                                                                                   // 236
      f = p1.x * p2.y - p2.x * p1.y;                                                                       // 237
      x += (p1.x + p2.x) * f;                                                                              // 238
      y += (p1.y + p2.y) * f;                                                                              // 239
    }                                                                                                      // 240
                                                                                                           // 241
    f = gju.area(polygon) * 6;                                                                             // 242
    return {                                                                                               // 243
      'type': 'Point',                                                                                     // 244
      'coordinates': [y / f, x / f]                                                                        // 245
    };                                                                                                     // 246
  },                                                                                                       // 247
                                                                                                           // 248
  gju.simplify = function (source, kink) { /* source[] array of geojson points */                          // 249
    /* kink	in metres, kinks above this depth kept  */                                                     // 250
    /* kink depth is the height of the triangle abc where a-b and b-c are two consecutive line segments */ // 251
    kink = kink || 20;                                                                                     // 252
    source = source.map(function (o) {                                                                     // 253
      return {                                                                                             // 254
        lng: o.coordinates[0],                                                                             // 255
        lat: o.coordinates[1]                                                                              // 256
      }                                                                                                    // 257
    });                                                                                                    // 258
                                                                                                           // 259
    var n_source, n_stack, n_dest, start, end, i, sig;                                                     // 260
    var dev_sqr, max_dev_sqr, band_sqr;                                                                    // 261
    var x12, y12, d12, x13, y13, d13, x23, y23, d23;                                                       // 262
    var F = (Math.PI / 180.0) * 0.5;                                                                       // 263
    var index = new Array(); /* aray of indexes of source points to include in the reduced line */         // 264
    var sig_start = new Array(); /* indices of start & end of working section */                           // 265
    var sig_end = new Array();                                                                             // 266
                                                                                                           // 267
    /* check for simple cases */                                                                           // 268
                                                                                                           // 269
    if (source.length < 3) return (source); /* one or two points */                                        // 270
                                                                                                           // 271
    /* more complex case. initialize stack */                                                              // 272
                                                                                                           // 273
    n_source = source.length;                                                                              // 274
    band_sqr = kink * 360.0 / (2.0 * Math.PI * 6378137.0); /* Now in degrees */                            // 275
    band_sqr *= band_sqr;                                                                                  // 276
    n_dest = 0;                                                                                            // 277
    sig_start[0] = 0;                                                                                      // 278
    sig_end[0] = n_source - 1;                                                                             // 279
    n_stack = 1;                                                                                           // 280
                                                                                                           // 281
    /* while the stack is not empty  ... */                                                                // 282
    while (n_stack > 0) {                                                                                  // 283
                                                                                                           // 284
      /* ... pop the top-most entries off the stacks */                                                    // 285
                                                                                                           // 286
      start = sig_start[n_stack - 1];                                                                      // 287
      end = sig_end[n_stack - 1];                                                                          // 288
      n_stack--;                                                                                           // 289
                                                                                                           // 290
      if ((end - start) > 1) { /* any intermediate points ? */                                             // 291
                                                                                                           // 292
        /* ... yes, so find most deviant intermediate point to                                             // 293
        either side of line joining start & end points */                                                  // 294
                                                                                                           // 295
        x12 = (source[end].lng() - source[start].lng());                                                   // 296
        y12 = (source[end].lat() - source[start].lat());                                                   // 297
        if (Math.abs(x12) > 180.0) x12 = 360.0 - Math.abs(x12);                                            // 298
        x12 *= Math.cos(F * (source[end].lat() + source[start].lat())); /* use avg lat to reduce lng */    // 299
        d12 = (x12 * x12) + (y12 * y12);                                                                   // 300
                                                                                                           // 301
        for (i = start + 1, sig = start, max_dev_sqr = -1.0; i < end; i++) {                               // 302
                                                                                                           // 303
          x13 = source[i].lng() - source[start].lng();                                                     // 304
          y13 = source[i].lat() - source[start].lat();                                                     // 305
          if (Math.abs(x13) > 180.0) x13 = 360.0 - Math.abs(x13);                                          // 306
          x13 *= Math.cos(F * (source[i].lat() + source[start].lat()));                                    // 307
          d13 = (x13 * x13) + (y13 * y13);                                                                 // 308
                                                                                                           // 309
          x23 = source[i].lng() - source[end].lng();                                                       // 310
          y23 = source[i].lat() - source[end].lat();                                                       // 311
          if (Math.abs(x23) > 180.0) x23 = 360.0 - Math.abs(x23);                                          // 312
          x23 *= Math.cos(F * (source[i].lat() + source[end].lat()));                                      // 313
          d23 = (x23 * x23) + (y23 * y23);                                                                 // 314
                                                                                                           // 315
          if (d13 >= (d12 + d23)) dev_sqr = d23;                                                           // 316
          else if (d23 >= (d12 + d13)) dev_sqr = d13;                                                      // 317
          else dev_sqr = (x13 * y12 - y13 * x12) * (x13 * y12 - y13 * x12) / d12; // solve triangle        // 318
          if (dev_sqr > max_dev_sqr) {                                                                     // 319
            sig = i;                                                                                       // 320
            max_dev_sqr = dev_sqr;                                                                         // 321
          }                                                                                                // 322
        }                                                                                                  // 323
                                                                                                           // 324
        if (max_dev_sqr < band_sqr) { /* is there a sig. intermediate point ? */                           // 325
          /* ... no, so transfer current start point */                                                    // 326
          index[n_dest] = start;                                                                           // 327
          n_dest++;                                                                                        // 328
        } else { /* ... yes, so push two sub-sections on stack for further processing */                   // 329
          n_stack++;                                                                                       // 330
          sig_start[n_stack - 1] = sig;                                                                    // 331
          sig_end[n_stack - 1] = end;                                                                      // 332
          n_stack++;                                                                                       // 333
          sig_start[n_stack - 1] = start;                                                                  // 334
          sig_end[n_stack - 1] = sig;                                                                      // 335
        }                                                                                                  // 336
      } else { /* ... no intermediate points, so transfer current start point */                           // 337
        index[n_dest] = start;                                                                             // 338
        n_dest++;                                                                                          // 339
      }                                                                                                    // 340
    }                                                                                                      // 341
                                                                                                           // 342
    /* transfer last point */                                                                              // 343
    index[n_dest] = n_source - 1;                                                                          // 344
    n_dest++;                                                                                              // 345
                                                                                                           // 346
    /* make return array */                                                                                // 347
    var r = new Array();                                                                                   // 348
    for (var i = 0; i < n_dest; i++)                                                                       // 349
      r.push(source[index[i]]);                                                                            // 350
                                                                                                           // 351
    return r.map(function (o) {                                                                            // 352
      return {                                                                                             // 353
        type: "Point",                                                                                     // 354
        coordinates: [o.lng, o.lat]                                                                        // 355
      }                                                                                                    // 356
    });                                                                                                    // 357
  }                                                                                                        // 358
                                                                                                           // 359
  // http://www.movable-type.co.uk/scripts/latlong.html#destPoint                                          // 360
  gju.destinationPoint = function (pt, brng, dist) {                                                       // 361
    dist = dist/6371;  // convert dist to angular distance in radians                                      // 362
    brng = gju.numberToRadius(brng);                                                                       // 363
                                                                                                           // 364
    var lat1 = gju.numberToRadius(pt.coordinates[0]);                                                      // 365
    var lon1 = gju.numberToRadius(pt.coordinates[1]);                                                      // 366
                                                                                                           // 367
    var lat2 = Math.asin( Math.sin(lat1)*Math.cos(dist) +                                                  // 368
                          Math.cos(lat1)*Math.sin(dist)*Math.cos(brng) );                                  // 369
    var lon2 = lon1 + Math.atan2(Math.sin(brng)*Math.sin(dist)*Math.cos(lat1),                             // 370
                                 Math.cos(dist)-Math.sin(lat1)*Math.sin(lat2));                            // 371
    lon2 = (lon2+3*Math.PI) % (2*Math.PI) - Math.PI;  // normalise to -180..+180º                          // 372
                                                                                                           // 373
    return {                                                                                               // 374
      'type': 'Point',                                                                                     // 375
      'coordinates': [gju.numberToDegree(lat2), gju.numberToDegree(lon2)]                                  // 376
    };                                                                                                     // 377
  };                                                                                                       // 378
                                                                                                           // 379
})();                                                                                                      // 380
                                                                                                           // 381
/////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                         //
// packages/geojson-utils/post.js                                                                          //
//                                                                                                         //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                           //
// This exports object was created in pre.js.  Now copy the `exports` object                               // 1
// from it into the package-scope variable `GeoJSON`, which will get exported.                             // 2
GeoJSON = module.exports;                                                                                  // 3
                                                                                                           // 4
                                                                                                           // 5
/////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);


/* Exports */
if (typeof Package === 'undefined') Package = {};
Package['geojson-utils'] = {
  GeoJSON: GeoJSON
};

})();

//# sourceMappingURL=81b79d5cf96d00b4b7a28987debcffb665c17526.map
/* Imports for global scope */

Template = Package.templating.Template;
$ = Package.jquery.$;
jQuery = Package.jquery.jQuery;
Meteor = Package.meteor.Meteor;
UI = Package.ui.UI;
Handlebars = Package.ui.Handlebars;
Spacebars = Package.spacebars.Spacebars;
HTMLTools = Package['html-tools'].HTMLTools;
HTML = Package.htmljs.HTML;

//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
//                                                                      //
// If you are using Chrome, open the Developer Tools and click the gear //
// icon in its lower right corner. In the General Settings panel, turn  //
// on 'Enable source maps'.                                             //
//                                                                      //
// If you are using Firefox 23, go to `about:config` and set the        //
// `devtools.debugger.source-maps-enabled` preference to true.          //
// (The preference should be on by default in Firefox 24; versions      //
// older than 23 do not support source maps.)                           //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

/* Imports */
var Meteor = Package.meteor.Meteor;
var HTML = Package.htmljs.HTML;

/* Package-scope variables */
var HTMLTools, Scanner, makeRegexMatcher, getCharacterReference, getComment, getDoctype, getHTMLToken, getTagToken, TEMPLATE_TAG_POSITION, isLookingAtEndTag, codePointToString, getContent, getRCData;

(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                             //
// packages/html-tools/utils.js                                                                                //
//                                                                                                             //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                               //
                                                                                                               // 1
HTMLTools = {};                                                                                                // 2
HTMLTools.Parse = {};                                                                                          // 3
                                                                                                               // 4
var asciiLowerCase = HTMLTools.asciiLowerCase = function (str) {                                               // 5
  return str.replace(/[A-Z]/g, function (c) {                                                                  // 6
    return String.fromCharCode(c.charCodeAt(0) + 32);                                                          // 7
  });                                                                                                          // 8
};                                                                                                             // 9
                                                                                                               // 10
var svgCamelCaseAttributes = 'attributeName attributeType baseFrequency baseProfile calcMode clipPathUnits contentScriptType contentStyleType diffuseConstant edgeMode externalResourcesRequired filterRes filterUnits glyphRef glyphRef gradientTransform gradientTransform gradientUnits gradientUnits kernelMatrix kernelUnitLength kernelUnitLength kernelUnitLength keyPoints keySplines keyTimes lengthAdjust limitingConeAngle markerHeight markerUnits markerWidth maskContentUnits maskUnits numOctaves pathLength patternContentUnits patternTransform patternUnits pointsAtX pointsAtY pointsAtZ preserveAlpha preserveAspectRatio primitiveUnits refX refY repeatCount repeatDur requiredExtensions requiredFeatures specularConstant specularExponent specularExponent spreadMethod spreadMethod startOffset stdDeviation stitchTiles surfaceScale surfaceScale systemLanguage tableValues targetX targetY textLength textLength viewBox viewTarget xChannelSelector yChannelSelector zoomAndPan'.split(' ');
                                                                                                               // 12
var properAttributeCaseMap = (function (map) {                                                                 // 13
  for (var i = 0; i < svgCamelCaseAttributes.length; i++) {                                                    // 14
    var a = svgCamelCaseAttributes[i];                                                                         // 15
    map[asciiLowerCase(a)] = a;                                                                                // 16
  }                                                                                                            // 17
  return map;                                                                                                  // 18
})({});                                                                                                        // 19
                                                                                                               // 20
var properTagCaseMap = (function (map) {                                                                       // 21
  var knownElements = HTML.knownElementNames;                                                                  // 22
  for (var i = 0; i < knownElements.length; i++) {                                                             // 23
    var a = knownElements[i];                                                                                  // 24
    map[asciiLowerCase(a)] = a;                                                                                // 25
  }                                                                                                            // 26
  return map;                                                                                                  // 27
})({});                                                                                                        // 28
                                                                                                               // 29
// Take a tag name in any case and make it the proper case for HTML.                                           // 30
//                                                                                                             // 31
// Modern browsers let you embed SVG in HTML, but SVG elements are special                                     // 32
// in that they have a case-sensitive DOM API (nodeName, getAttribute,                                         // 33
// setAttribute).  For example, it has to be `setAttribute("viewBox")`,                                        // 34
// not `"viewbox"`.  However, the browser's HTML parser is NOT case sensitive                                  // 35
// and will fix the case for you, so if you write `<svg viewbox="...">`                                        // 36
// you actually get a `"viewBox"` attribute.  Any HTML-parsing toolchain                                       // 37
// must do the same.                                                                                           // 38
HTMLTools.properCaseTagName = function (name) {                                                                // 39
  var lowered = asciiLowerCase(name);                                                                          // 40
  return properTagCaseMap.hasOwnProperty(lowered) ?                                                            // 41
    properTagCaseMap[lowered] : lowered;                                                                       // 42
};                                                                                                             // 43
                                                                                                               // 44
// See docs for properCaseTagName.                                                                             // 45
HTMLTools.properCaseAttributeName = function (name) {                                                          // 46
  var lowered = asciiLowerCase(name);                                                                          // 47
  return properAttributeCaseMap.hasOwnProperty(lowered) ?                                                      // 48
    properAttributeCaseMap[lowered] : lowered;                                                                 // 49
};                                                                                                             // 50
                                                                                                               // 51
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                             //
// packages/html-tools/scanner.js                                                                              //
//                                                                                                             //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                               //
// This is a Scanner class suitable for any parser/lexer/tokenizer.                                            // 1
//                                                                                                             // 2
// A Scanner has an immutable source document (string) `input` and a current                                   // 3
// position `pos`, an index into the string, which can be set at will.                                         // 4
//                                                                                                             // 5
// * `new Scanner(input)` - constructs a Scanner with source string `input`                                    // 6
// * `scanner.rest()` - returns the rest of the input after `pos`                                              // 7
// * `scanner.peek()` - returns the character at `pos`                                                         // 8
// * `scanner.isEOF()` - true if `pos` is at or beyond the end of `input`                                      // 9
// * `scanner.fatal(msg)` - throw an error indicating a problem at `pos`                                       // 10
                                                                                                               // 11
Scanner = HTMLTools.Scanner = function (input) {                                                               // 12
  this.input = input; // public, read-only                                                                     // 13
  this.pos = 0; // public, read-write                                                                          // 14
};                                                                                                             // 15
                                                                                                               // 16
Scanner.prototype.rest = function () {                                                                         // 17
  // Slicing a string is O(1) in modern JavaScript VMs (including old IE).                                     // 18
  return this.input.slice(this.pos);                                                                           // 19
};                                                                                                             // 20
                                                                                                               // 21
Scanner.prototype.isEOF = function () {                                                                        // 22
  return this.pos >= this.input.length;                                                                        // 23
};                                                                                                             // 24
                                                                                                               // 25
Scanner.prototype.fatal = function (msg) {                                                                     // 26
  // despite this default, you should always provide a message!                                                // 27
  msg = (msg || "Parse error");                                                                                // 28
                                                                                                               // 29
  var CONTEXT_AMOUNT = 20;                                                                                     // 30
                                                                                                               // 31
  var input = this.input;                                                                                      // 32
  var pos = this.pos;                                                                                          // 33
  var pastInput = input.substring(pos - CONTEXT_AMOUNT - 1, pos);                                              // 34
  if (pastInput.length > CONTEXT_AMOUNT)                                                                       // 35
    pastInput = '...' + pastInput.substring(-CONTEXT_AMOUNT);                                                  // 36
                                                                                                               // 37
  var upcomingInput = input.substring(pos, pos + CONTEXT_AMOUNT + 1);                                          // 38
  if (upcomingInput.length > CONTEXT_AMOUNT)                                                                   // 39
    upcomingInput = upcomingInput.substring(0, CONTEXT_AMOUNT) + '...';                                        // 40
                                                                                                               // 41
  var positionDisplay = ((pastInput + upcomingInput).replace(/\n/g, ' ') + '\n' +                              // 42
                         (new Array(pastInput.length + 1).join(' ')) + "^");                                   // 43
                                                                                                               // 44
  var e = new Error(msg + "\n" + positionDisplay);                                                             // 45
                                                                                                               // 46
  e.offset = pos;                                                                                              // 47
  var allPastInput = input.substring(0, pos);                                                                  // 48
  e.line = (1 + (allPastInput.match(/\n/g) || []).length);                                                     // 49
  e.col = (1 + pos - allPastInput.lastIndexOf('\n'));                                                          // 50
  e.scanner = this;                                                                                            // 51
                                                                                                               // 52
  throw e;                                                                                                     // 53
};                                                                                                             // 54
                                                                                                               // 55
// Peek at the next character.                                                                                 // 56
//                                                                                                             // 57
// If `isEOF`, returns an empty string.                                                                        // 58
Scanner.prototype.peek = function () {                                                                         // 59
  return this.input.charAt(this.pos);                                                                          // 60
};                                                                                                             // 61
                                                                                                               // 62
// Constructs a `getFoo` function where `foo` is specified with a regex.                                       // 63
// The regex should start with `^`.  The constructed function will return                                      // 64
// match group 1, if it exists and matches a non-empty string, or else                                         // 65
// the entire matched string (or null if there is no match).                                                   // 66
//                                                                                                             // 67
// A `getFoo` function tries to match and consume a foo.  If it succeeds,                                      // 68
// the current position of the scanner is advanced.  If it fails, the                                          // 69
// current position is not advanced and a falsy value (typically null)                                         // 70
// is returned.                                                                                                // 71
makeRegexMatcher = function (regex) {                                                                          // 72
  return function (scanner) {                                                                                  // 73
    var match = regex.exec(scanner.rest());                                                                    // 74
                                                                                                               // 75
    if (! match)                                                                                               // 76
      return null;                                                                                             // 77
                                                                                                               // 78
    scanner.pos += match[0].length;                                                                            // 79
    return match[1] || match[0];                                                                               // 80
  };                                                                                                           // 81
};                                                                                                             // 82
                                                                                                               // 83
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                             //
// packages/html-tools/charref.js                                                                              //
//                                                                                                             //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                               //
                                                                                                               // 1
// http://www.whatwg.org/specs/web-apps/current-work/multipage/entities.json                                   // 2
                                                                                                               // 3
                                                                                                               // 4
// Note that some entities don't have a final semicolon!  These are used to                                    // 5
// make `&lt` (for example) with no semicolon a parse error but `&abcde` not.                                  // 6
                                                                                                               // 7
var ENTITIES = {                                                                                               // 8
  "&Aacute;": { "codepoints": [193], "characters": "\u00C1" },                                                 // 9
  "&Aacute": { "codepoints": [193], "characters": "\u00C1" },                                                  // 10
  "&aacute;": { "codepoints": [225], "characters": "\u00E1" },                                                 // 11
  "&aacute": { "codepoints": [225], "characters": "\u00E1" },                                                  // 12
  "&Abreve;": { "codepoints": [258], "characters": "\u0102" },                                                 // 13
  "&abreve;": { "codepoints": [259], "characters": "\u0103" },                                                 // 14
  "&ac;": { "codepoints": [8766], "characters": "\u223E" },                                                    // 15
  "&acd;": { "codepoints": [8767], "characters": "\u223F" },                                                   // 16
  "&acE;": { "codepoints": [8766, 819], "characters": "\u223E\u0333" },                                        // 17
  "&Acirc;": { "codepoints": [194], "characters": "\u00C2" },                                                  // 18
  "&Acirc": { "codepoints": [194], "characters": "\u00C2" },                                                   // 19
  "&acirc;": { "codepoints": [226], "characters": "\u00E2" },                                                  // 20
  "&acirc": { "codepoints": [226], "characters": "\u00E2" },                                                   // 21
  "&acute;": { "codepoints": [180], "characters": "\u00B4" },                                                  // 22
  "&acute": { "codepoints": [180], "characters": "\u00B4" },                                                   // 23
  "&Acy;": { "codepoints": [1040], "characters": "\u0410" },                                                   // 24
  "&acy;": { "codepoints": [1072], "characters": "\u0430" },                                                   // 25
  "&AElig;": { "codepoints": [198], "characters": "\u00C6" },                                                  // 26
  "&AElig": { "codepoints": [198], "characters": "\u00C6" },                                                   // 27
  "&aelig;": { "codepoints": [230], "characters": "\u00E6" },                                                  // 28
  "&aelig": { "codepoints": [230], "characters": "\u00E6" },                                                   // 29
  "&af;": { "codepoints": [8289], "characters": "\u2061" },                                                    // 30
  "&Afr;": { "codepoints": [120068], "characters": "\uD835\uDD04" },                                           // 31
  "&afr;": { "codepoints": [120094], "characters": "\uD835\uDD1E" },                                           // 32
  "&Agrave;": { "codepoints": [192], "characters": "\u00C0" },                                                 // 33
  "&Agrave": { "codepoints": [192], "characters": "\u00C0" },                                                  // 34
  "&agrave;": { "codepoints": [224], "characters": "\u00E0" },                                                 // 35
  "&agrave": { "codepoints": [224], "characters": "\u00E0" },                                                  // 36
  "&alefsym;": { "codepoints": [8501], "characters": "\u2135" },                                               // 37
  "&aleph;": { "codepoints": [8501], "characters": "\u2135" },                                                 // 38
  "&Alpha;": { "codepoints": [913], "characters": "\u0391" },                                                  // 39
  "&alpha;": { "codepoints": [945], "characters": "\u03B1" },                                                  // 40
  "&Amacr;": { "codepoints": [256], "characters": "\u0100" },                                                  // 41
  "&amacr;": { "codepoints": [257], "characters": "\u0101" },                                                  // 42
  "&amalg;": { "codepoints": [10815], "characters": "\u2A3F" },                                                // 43
  "&amp;": { "codepoints": [38], "characters": "\u0026" },                                                     // 44
  "&amp": { "codepoints": [38], "characters": "\u0026" },                                                      // 45
  "&AMP;": { "codepoints": [38], "characters": "\u0026" },                                                     // 46
  "&AMP": { "codepoints": [38], "characters": "\u0026" },                                                      // 47
  "&andand;": { "codepoints": [10837], "characters": "\u2A55" },                                               // 48
  "&And;": { "codepoints": [10835], "characters": "\u2A53" },                                                  // 49
  "&and;": { "codepoints": [8743], "characters": "\u2227" },                                                   // 50
  "&andd;": { "codepoints": [10844], "characters": "\u2A5C" },                                                 // 51
  "&andslope;": { "codepoints": [10840], "characters": "\u2A58" },                                             // 52
  "&andv;": { "codepoints": [10842], "characters": "\u2A5A" },                                                 // 53
  "&ang;": { "codepoints": [8736], "characters": "\u2220" },                                                   // 54
  "&ange;": { "codepoints": [10660], "characters": "\u29A4" },                                                 // 55
  "&angle;": { "codepoints": [8736], "characters": "\u2220" },                                                 // 56
  "&angmsdaa;": { "codepoints": [10664], "characters": "\u29A8" },                                             // 57
  "&angmsdab;": { "codepoints": [10665], "characters": "\u29A9" },                                             // 58
  "&angmsdac;": { "codepoints": [10666], "characters": "\u29AA" },                                             // 59
  "&angmsdad;": { "codepoints": [10667], "characters": "\u29AB" },                                             // 60
  "&angmsdae;": { "codepoints": [10668], "characters": "\u29AC" },                                             // 61
  "&angmsdaf;": { "codepoints": [10669], "characters": "\u29AD" },                                             // 62
  "&angmsdag;": { "codepoints": [10670], "characters": "\u29AE" },                                             // 63
  "&angmsdah;": { "codepoints": [10671], "characters": "\u29AF" },                                             // 64
  "&angmsd;": { "codepoints": [8737], "characters": "\u2221" },                                                // 65
  "&angrt;": { "codepoints": [8735], "characters": "\u221F" },                                                 // 66
  "&angrtvb;": { "codepoints": [8894], "characters": "\u22BE" },                                               // 67
  "&angrtvbd;": { "codepoints": [10653], "characters": "\u299D" },                                             // 68
  "&angsph;": { "codepoints": [8738], "characters": "\u2222" },                                                // 69
  "&angst;": { "codepoints": [197], "characters": "\u00C5" },                                                  // 70
  "&angzarr;": { "codepoints": [9084], "characters": "\u237C" },                                               // 71
  "&Aogon;": { "codepoints": [260], "characters": "\u0104" },                                                  // 72
  "&aogon;": { "codepoints": [261], "characters": "\u0105" },                                                  // 73
  "&Aopf;": { "codepoints": [120120], "characters": "\uD835\uDD38" },                                          // 74
  "&aopf;": { "codepoints": [120146], "characters": "\uD835\uDD52" },                                          // 75
  "&apacir;": { "codepoints": [10863], "characters": "\u2A6F" },                                               // 76
  "&ap;": { "codepoints": [8776], "characters": "\u2248" },                                                    // 77
  "&apE;": { "codepoints": [10864], "characters": "\u2A70" },                                                  // 78
  "&ape;": { "codepoints": [8778], "characters": "\u224A" },                                                   // 79
  "&apid;": { "codepoints": [8779], "characters": "\u224B" },                                                  // 80
  "&apos;": { "codepoints": [39], "characters": "\u0027" },                                                    // 81
  "&ApplyFunction;": { "codepoints": [8289], "characters": "\u2061" },                                         // 82
  "&approx;": { "codepoints": [8776], "characters": "\u2248" },                                                // 83
  "&approxeq;": { "codepoints": [8778], "characters": "\u224A" },                                              // 84
  "&Aring;": { "codepoints": [197], "characters": "\u00C5" },                                                  // 85
  "&Aring": { "codepoints": [197], "characters": "\u00C5" },                                                   // 86
  "&aring;": { "codepoints": [229], "characters": "\u00E5" },                                                  // 87
  "&aring": { "codepoints": [229], "characters": "\u00E5" },                                                   // 88
  "&Ascr;": { "codepoints": [119964], "characters": "\uD835\uDC9C" },                                          // 89
  "&ascr;": { "codepoints": [119990], "characters": "\uD835\uDCB6" },                                          // 90
  "&Assign;": { "codepoints": [8788], "characters": "\u2254" },                                                // 91
  "&ast;": { "codepoints": [42], "characters": "\u002A" },                                                     // 92
  "&asymp;": { "codepoints": [8776], "characters": "\u2248" },                                                 // 93
  "&asympeq;": { "codepoints": [8781], "characters": "\u224D" },                                               // 94
  "&Atilde;": { "codepoints": [195], "characters": "\u00C3" },                                                 // 95
  "&Atilde": { "codepoints": [195], "characters": "\u00C3" },                                                  // 96
  "&atilde;": { "codepoints": [227], "characters": "\u00E3" },                                                 // 97
  "&atilde": { "codepoints": [227], "characters": "\u00E3" },                                                  // 98
  "&Auml;": { "codepoints": [196], "characters": "\u00C4" },                                                   // 99
  "&Auml": { "codepoints": [196], "characters": "\u00C4" },                                                    // 100
  "&auml;": { "codepoints": [228], "characters": "\u00E4" },                                                   // 101
  "&auml": { "codepoints": [228], "characters": "\u00E4" },                                                    // 102
  "&awconint;": { "codepoints": [8755], "characters": "\u2233" },                                              // 103
  "&awint;": { "codepoints": [10769], "characters": "\u2A11" },                                                // 104
  "&backcong;": { "codepoints": [8780], "characters": "\u224C" },                                              // 105
  "&backepsilon;": { "codepoints": [1014], "characters": "\u03F6" },                                           // 106
  "&backprime;": { "codepoints": [8245], "characters": "\u2035" },                                             // 107
  "&backsim;": { "codepoints": [8765], "characters": "\u223D" },                                               // 108
  "&backsimeq;": { "codepoints": [8909], "characters": "\u22CD" },                                             // 109
  "&Backslash;": { "codepoints": [8726], "characters": "\u2216" },                                             // 110
  "&Barv;": { "codepoints": [10983], "characters": "\u2AE7" },                                                 // 111
  "&barvee;": { "codepoints": [8893], "characters": "\u22BD" },                                                // 112
  "&barwed;": { "codepoints": [8965], "characters": "\u2305" },                                                // 113
  "&Barwed;": { "codepoints": [8966], "characters": "\u2306" },                                                // 114
  "&barwedge;": { "codepoints": [8965], "characters": "\u2305" },                                              // 115
  "&bbrk;": { "codepoints": [9141], "characters": "\u23B5" },                                                  // 116
  "&bbrktbrk;": { "codepoints": [9142], "characters": "\u23B6" },                                              // 117
  "&bcong;": { "codepoints": [8780], "characters": "\u224C" },                                                 // 118
  "&Bcy;": { "codepoints": [1041], "characters": "\u0411" },                                                   // 119
  "&bcy;": { "codepoints": [1073], "characters": "\u0431" },                                                   // 120
  "&bdquo;": { "codepoints": [8222], "characters": "\u201E" },                                                 // 121
  "&becaus;": { "codepoints": [8757], "characters": "\u2235" },                                                // 122
  "&because;": { "codepoints": [8757], "characters": "\u2235" },                                               // 123
  "&Because;": { "codepoints": [8757], "characters": "\u2235" },                                               // 124
  "&bemptyv;": { "codepoints": [10672], "characters": "\u29B0" },                                              // 125
  "&bepsi;": { "codepoints": [1014], "characters": "\u03F6" },                                                 // 126
  "&bernou;": { "codepoints": [8492], "characters": "\u212C" },                                                // 127
  "&Bernoullis;": { "codepoints": [8492], "characters": "\u212C" },                                            // 128
  "&Beta;": { "codepoints": [914], "characters": "\u0392" },                                                   // 129
  "&beta;": { "codepoints": [946], "characters": "\u03B2" },                                                   // 130
  "&beth;": { "codepoints": [8502], "characters": "\u2136" },                                                  // 131
  "&between;": { "codepoints": [8812], "characters": "\u226C" },                                               // 132
  "&Bfr;": { "codepoints": [120069], "characters": "\uD835\uDD05" },                                           // 133
  "&bfr;": { "codepoints": [120095], "characters": "\uD835\uDD1F" },                                           // 134
  "&bigcap;": { "codepoints": [8898], "characters": "\u22C2" },                                                // 135
  "&bigcirc;": { "codepoints": [9711], "characters": "\u25EF" },                                               // 136
  "&bigcup;": { "codepoints": [8899], "characters": "\u22C3" },                                                // 137
  "&bigodot;": { "codepoints": [10752], "characters": "\u2A00" },                                              // 138
  "&bigoplus;": { "codepoints": [10753], "characters": "\u2A01" },                                             // 139
  "&bigotimes;": { "codepoints": [10754], "characters": "\u2A02" },                                            // 140
  "&bigsqcup;": { "codepoints": [10758], "characters": "\u2A06" },                                             // 141
  "&bigstar;": { "codepoints": [9733], "characters": "\u2605" },                                               // 142
  "&bigtriangledown;": { "codepoints": [9661], "characters": "\u25BD" },                                       // 143
  "&bigtriangleup;": { "codepoints": [9651], "characters": "\u25B3" },                                         // 144
  "&biguplus;": { "codepoints": [10756], "characters": "\u2A04" },                                             // 145
  "&bigvee;": { "codepoints": [8897], "characters": "\u22C1" },                                                // 146
  "&bigwedge;": { "codepoints": [8896], "characters": "\u22C0" },                                              // 147
  "&bkarow;": { "codepoints": [10509], "characters": "\u290D" },                                               // 148
  "&blacklozenge;": { "codepoints": [10731], "characters": "\u29EB" },                                         // 149
  "&blacksquare;": { "codepoints": [9642], "characters": "\u25AA" },                                           // 150
  "&blacktriangle;": { "codepoints": [9652], "characters": "\u25B4" },                                         // 151
  "&blacktriangledown;": { "codepoints": [9662], "characters": "\u25BE" },                                     // 152
  "&blacktriangleleft;": { "codepoints": [9666], "characters": "\u25C2" },                                     // 153
  "&blacktriangleright;": { "codepoints": [9656], "characters": "\u25B8" },                                    // 154
  "&blank;": { "codepoints": [9251], "characters": "\u2423" },                                                 // 155
  "&blk12;": { "codepoints": [9618], "characters": "\u2592" },                                                 // 156
  "&blk14;": { "codepoints": [9617], "characters": "\u2591" },                                                 // 157
  "&blk34;": { "codepoints": [9619], "characters": "\u2593" },                                                 // 158
  "&block;": { "codepoints": [9608], "characters": "\u2588" },                                                 // 159
  "&bne;": { "codepoints": [61, 8421], "characters": "\u003D\u20E5" },                                         // 160
  "&bnequiv;": { "codepoints": [8801, 8421], "characters": "\u2261\u20E5" },                                   // 161
  "&bNot;": { "codepoints": [10989], "characters": "\u2AED" },                                                 // 162
  "&bnot;": { "codepoints": [8976], "characters": "\u2310" },                                                  // 163
  "&Bopf;": { "codepoints": [120121], "characters": "\uD835\uDD39" },                                          // 164
  "&bopf;": { "codepoints": [120147], "characters": "\uD835\uDD53" },                                          // 165
  "&bot;": { "codepoints": [8869], "characters": "\u22A5" },                                                   // 166
  "&bottom;": { "codepoints": [8869], "characters": "\u22A5" },                                                // 167
  "&bowtie;": { "codepoints": [8904], "characters": "\u22C8" },                                                // 168
  "&boxbox;": { "codepoints": [10697], "characters": "\u29C9" },                                               // 169
  "&boxdl;": { "codepoints": [9488], "characters": "\u2510" },                                                 // 170
  "&boxdL;": { "codepoints": [9557], "characters": "\u2555" },                                                 // 171
  "&boxDl;": { "codepoints": [9558], "characters": "\u2556" },                                                 // 172
  "&boxDL;": { "codepoints": [9559], "characters": "\u2557" },                                                 // 173
  "&boxdr;": { "codepoints": [9484], "characters": "\u250C" },                                                 // 174
  "&boxdR;": { "codepoints": [9554], "characters": "\u2552" },                                                 // 175
  "&boxDr;": { "codepoints": [9555], "characters": "\u2553" },                                                 // 176
  "&boxDR;": { "codepoints": [9556], "characters": "\u2554" },                                                 // 177
  "&boxh;": { "codepoints": [9472], "characters": "\u2500" },                                                  // 178
  "&boxH;": { "codepoints": [9552], "characters": "\u2550" },                                                  // 179
  "&boxhd;": { "codepoints": [9516], "characters": "\u252C" },                                                 // 180
  "&boxHd;": { "codepoints": [9572], "characters": "\u2564" },                                                 // 181
  "&boxhD;": { "codepoints": [9573], "characters": "\u2565" },                                                 // 182
  "&boxHD;": { "codepoints": [9574], "characters": "\u2566" },                                                 // 183
  "&boxhu;": { "codepoints": [9524], "characters": "\u2534" },                                                 // 184
  "&boxHu;": { "codepoints": [9575], "characters": "\u2567" },                                                 // 185
  "&boxhU;": { "codepoints": [9576], "characters": "\u2568" },                                                 // 186
  "&boxHU;": { "codepoints": [9577], "characters": "\u2569" },                                                 // 187
  "&boxminus;": { "codepoints": [8863], "characters": "\u229F" },                                              // 188
  "&boxplus;": { "codepoints": [8862], "characters": "\u229E" },                                               // 189
  "&boxtimes;": { "codepoints": [8864], "characters": "\u22A0" },                                              // 190
  "&boxul;": { "codepoints": [9496], "characters": "\u2518" },                                                 // 191
  "&boxuL;": { "codepoints": [9563], "characters": "\u255B" },                                                 // 192
  "&boxUl;": { "codepoints": [9564], "characters": "\u255C" },                                                 // 193
  "&boxUL;": { "codepoints": [9565], "characters": "\u255D" },                                                 // 194
  "&boxur;": { "codepoints": [9492], "characters": "\u2514" },                                                 // 195
  "&boxuR;": { "codepoints": [9560], "characters": "\u2558" },                                                 // 196
  "&boxUr;": { "codepoints": [9561], "characters": "\u2559" },                                                 // 197
  "&boxUR;": { "codepoints": [9562], "characters": "\u255A" },                                                 // 198
  "&boxv;": { "codepoints": [9474], "characters": "\u2502" },                                                  // 199
  "&boxV;": { "codepoints": [9553], "characters": "\u2551" },                                                  // 200
  "&boxvh;": { "codepoints": [9532], "characters": "\u253C" },                                                 // 201
  "&boxvH;": { "codepoints": [9578], "characters": "\u256A" },                                                 // 202
  "&boxVh;": { "codepoints": [9579], "characters": "\u256B" },                                                 // 203
  "&boxVH;": { "codepoints": [9580], "characters": "\u256C" },                                                 // 204
  "&boxvl;": { "codepoints": [9508], "characters": "\u2524" },                                                 // 205
  "&boxvL;": { "codepoints": [9569], "characters": "\u2561" },                                                 // 206
  "&boxVl;": { "codepoints": [9570], "characters": "\u2562" },                                                 // 207
  "&boxVL;": { "codepoints": [9571], "characters": "\u2563" },                                                 // 208
  "&boxvr;": { "codepoints": [9500], "characters": "\u251C" },                                                 // 209
  "&boxvR;": { "codepoints": [9566], "characters": "\u255E" },                                                 // 210
  "&boxVr;": { "codepoints": [9567], "characters": "\u255F" },                                                 // 211
  "&boxVR;": { "codepoints": [9568], "characters": "\u2560" },                                                 // 212
  "&bprime;": { "codepoints": [8245], "characters": "\u2035" },                                                // 213
  "&breve;": { "codepoints": [728], "characters": "\u02D8" },                                                  // 214
  "&Breve;": { "codepoints": [728], "characters": "\u02D8" },                                                  // 215
  "&brvbar;": { "codepoints": [166], "characters": "\u00A6" },                                                 // 216
  "&brvbar": { "codepoints": [166], "characters": "\u00A6" },                                                  // 217
  "&bscr;": { "codepoints": [119991], "characters": "\uD835\uDCB7" },                                          // 218
  "&Bscr;": { "codepoints": [8492], "characters": "\u212C" },                                                  // 219
  "&bsemi;": { "codepoints": [8271], "characters": "\u204F" },                                                 // 220
  "&bsim;": { "codepoints": [8765], "characters": "\u223D" },                                                  // 221
  "&bsime;": { "codepoints": [8909], "characters": "\u22CD" },                                                 // 222
  "&bsolb;": { "codepoints": [10693], "characters": "\u29C5" },                                                // 223
  "&bsol;": { "codepoints": [92], "characters": "\u005C" },                                                    // 224
  "&bsolhsub;": { "codepoints": [10184], "characters": "\u27C8" },                                             // 225
  "&bull;": { "codepoints": [8226], "characters": "\u2022" },                                                  // 226
  "&bullet;": { "codepoints": [8226], "characters": "\u2022" },                                                // 227
  "&bump;": { "codepoints": [8782], "characters": "\u224E" },                                                  // 228
  "&bumpE;": { "codepoints": [10926], "characters": "\u2AAE" },                                                // 229
  "&bumpe;": { "codepoints": [8783], "characters": "\u224F" },                                                 // 230
  "&Bumpeq;": { "codepoints": [8782], "characters": "\u224E" },                                                // 231
  "&bumpeq;": { "codepoints": [8783], "characters": "\u224F" },                                                // 232
  "&Cacute;": { "codepoints": [262], "characters": "\u0106" },                                                 // 233
  "&cacute;": { "codepoints": [263], "characters": "\u0107" },                                                 // 234
  "&capand;": { "codepoints": [10820], "characters": "\u2A44" },                                               // 235
  "&capbrcup;": { "codepoints": [10825], "characters": "\u2A49" },                                             // 236
  "&capcap;": { "codepoints": [10827], "characters": "\u2A4B" },                                               // 237
  "&cap;": { "codepoints": [8745], "characters": "\u2229" },                                                   // 238
  "&Cap;": { "codepoints": [8914], "characters": "\u22D2" },                                                   // 239
  "&capcup;": { "codepoints": [10823], "characters": "\u2A47" },                                               // 240
  "&capdot;": { "codepoints": [10816], "characters": "\u2A40" },                                               // 241
  "&CapitalDifferentialD;": { "codepoints": [8517], "characters": "\u2145" },                                  // 242
  "&caps;": { "codepoints": [8745, 65024], "characters": "\u2229\uFE00" },                                     // 243
  "&caret;": { "codepoints": [8257], "characters": "\u2041" },                                                 // 244
  "&caron;": { "codepoints": [711], "characters": "\u02C7" },                                                  // 245
  "&Cayleys;": { "codepoints": [8493], "characters": "\u212D" },                                               // 246
  "&ccaps;": { "codepoints": [10829], "characters": "\u2A4D" },                                                // 247
  "&Ccaron;": { "codepoints": [268], "characters": "\u010C" },                                                 // 248
  "&ccaron;": { "codepoints": [269], "characters": "\u010D" },                                                 // 249
  "&Ccedil;": { "codepoints": [199], "characters": "\u00C7" },                                                 // 250
  "&Ccedil": { "codepoints": [199], "characters": "\u00C7" },                                                  // 251
  "&ccedil;": { "codepoints": [231], "characters": "\u00E7" },                                                 // 252
  "&ccedil": { "codepoints": [231], "characters": "\u00E7" },                                                  // 253
  "&Ccirc;": { "codepoints": [264], "characters": "\u0108" },                                                  // 254
  "&ccirc;": { "codepoints": [265], "characters": "\u0109" },                                                  // 255
  "&Cconint;": { "codepoints": [8752], "characters": "\u2230" },                                               // 256
  "&ccups;": { "codepoints": [10828], "characters": "\u2A4C" },                                                // 257
  "&ccupssm;": { "codepoints": [10832], "characters": "\u2A50" },                                              // 258
  "&Cdot;": { "codepoints": [266], "characters": "\u010A" },                                                   // 259
  "&cdot;": { "codepoints": [267], "characters": "\u010B" },                                                   // 260
  "&cedil;": { "codepoints": [184], "characters": "\u00B8" },                                                  // 261
  "&cedil": { "codepoints": [184], "characters": "\u00B8" },                                                   // 262
  "&Cedilla;": { "codepoints": [184], "characters": "\u00B8" },                                                // 263
  "&cemptyv;": { "codepoints": [10674], "characters": "\u29B2" },                                              // 264
  "&cent;": { "codepoints": [162], "characters": "\u00A2" },                                                   // 265
  "&cent": { "codepoints": [162], "characters": "\u00A2" },                                                    // 266
  "&centerdot;": { "codepoints": [183], "characters": "\u00B7" },                                              // 267
  "&CenterDot;": { "codepoints": [183], "characters": "\u00B7" },                                              // 268
  "&cfr;": { "codepoints": [120096], "characters": "\uD835\uDD20" },                                           // 269
  "&Cfr;": { "codepoints": [8493], "characters": "\u212D" },                                                   // 270
  "&CHcy;": { "codepoints": [1063], "characters": "\u0427" },                                                  // 271
  "&chcy;": { "codepoints": [1095], "characters": "\u0447" },                                                  // 272
  "&check;": { "codepoints": [10003], "characters": "\u2713" },                                                // 273
  "&checkmark;": { "codepoints": [10003], "characters": "\u2713" },                                            // 274
  "&Chi;": { "codepoints": [935], "characters": "\u03A7" },                                                    // 275
  "&chi;": { "codepoints": [967], "characters": "\u03C7" },                                                    // 276
  "&circ;": { "codepoints": [710], "characters": "\u02C6" },                                                   // 277
  "&circeq;": { "codepoints": [8791], "characters": "\u2257" },                                                // 278
  "&circlearrowleft;": { "codepoints": [8634], "characters": "\u21BA" },                                       // 279
  "&circlearrowright;": { "codepoints": [8635], "characters": "\u21BB" },                                      // 280
  "&circledast;": { "codepoints": [8859], "characters": "\u229B" },                                            // 281
  "&circledcirc;": { "codepoints": [8858], "characters": "\u229A" },                                           // 282
  "&circleddash;": { "codepoints": [8861], "characters": "\u229D" },                                           // 283
  "&CircleDot;": { "codepoints": [8857], "characters": "\u2299" },                                             // 284
  "&circledR;": { "codepoints": [174], "characters": "\u00AE" },                                               // 285
  "&circledS;": { "codepoints": [9416], "characters": "\u24C8" },                                              // 286
  "&CircleMinus;": { "codepoints": [8854], "characters": "\u2296" },                                           // 287
  "&CirclePlus;": { "codepoints": [8853], "characters": "\u2295" },                                            // 288
  "&CircleTimes;": { "codepoints": [8855], "characters": "\u2297" },                                           // 289
  "&cir;": { "codepoints": [9675], "characters": "\u25CB" },                                                   // 290
  "&cirE;": { "codepoints": [10691], "characters": "\u29C3" },                                                 // 291
  "&cire;": { "codepoints": [8791], "characters": "\u2257" },                                                  // 292
  "&cirfnint;": { "codepoints": [10768], "characters": "\u2A10" },                                             // 293
  "&cirmid;": { "codepoints": [10991], "characters": "\u2AEF" },                                               // 294
  "&cirscir;": { "codepoints": [10690], "characters": "\u29C2" },                                              // 295
  "&ClockwiseContourIntegral;": { "codepoints": [8754], "characters": "\u2232" },                              // 296
  "&CloseCurlyDoubleQuote;": { "codepoints": [8221], "characters": "\u201D" },                                 // 297
  "&CloseCurlyQuote;": { "codepoints": [8217], "characters": "\u2019" },                                       // 298
  "&clubs;": { "codepoints": [9827], "characters": "\u2663" },                                                 // 299
  "&clubsuit;": { "codepoints": [9827], "characters": "\u2663" },                                              // 300
  "&colon;": { "codepoints": [58], "characters": "\u003A" },                                                   // 301
  "&Colon;": { "codepoints": [8759], "characters": "\u2237" },                                                 // 302
  "&Colone;": { "codepoints": [10868], "characters": "\u2A74" },                                               // 303
  "&colone;": { "codepoints": [8788], "characters": "\u2254" },                                                // 304
  "&coloneq;": { "codepoints": [8788], "characters": "\u2254" },                                               // 305
  "&comma;": { "codepoints": [44], "characters": "\u002C" },                                                   // 306
  "&commat;": { "codepoints": [64], "characters": "\u0040" },                                                  // 307
  "&comp;": { "codepoints": [8705], "characters": "\u2201" },                                                  // 308
  "&compfn;": { "codepoints": [8728], "characters": "\u2218" },                                                // 309
  "&complement;": { "codepoints": [8705], "characters": "\u2201" },                                            // 310
  "&complexes;": { "codepoints": [8450], "characters": "\u2102" },                                             // 311
  "&cong;": { "codepoints": [8773], "characters": "\u2245" },                                                  // 312
  "&congdot;": { "codepoints": [10861], "characters": "\u2A6D" },                                              // 313
  "&Congruent;": { "codepoints": [8801], "characters": "\u2261" },                                             // 314
  "&conint;": { "codepoints": [8750], "characters": "\u222E" },                                                // 315
  "&Conint;": { "codepoints": [8751], "characters": "\u222F" },                                                // 316
  "&ContourIntegral;": { "codepoints": [8750], "characters": "\u222E" },                                       // 317
  "&copf;": { "codepoints": [120148], "characters": "\uD835\uDD54" },                                          // 318
  "&Copf;": { "codepoints": [8450], "characters": "\u2102" },                                                  // 319
  "&coprod;": { "codepoints": [8720], "characters": "\u2210" },                                                // 320
  "&Coproduct;": { "codepoints": [8720], "characters": "\u2210" },                                             // 321
  "&copy;": { "codepoints": [169], "characters": "\u00A9" },                                                   // 322
  "&copy": { "codepoints": [169], "characters": "\u00A9" },                                                    // 323
  "&COPY;": { "codepoints": [169], "characters": "\u00A9" },                                                   // 324
  "&COPY": { "codepoints": [169], "characters": "\u00A9" },                                                    // 325
  "&copysr;": { "codepoints": [8471], "characters": "\u2117" },                                                // 326
  "&CounterClockwiseContourIntegral;": { "codepoints": [8755], "characters": "\u2233" },                       // 327
  "&crarr;": { "codepoints": [8629], "characters": "\u21B5" },                                                 // 328
  "&cross;": { "codepoints": [10007], "characters": "\u2717" },                                                // 329
  "&Cross;": { "codepoints": [10799], "characters": "\u2A2F" },                                                // 330
  "&Cscr;": { "codepoints": [119966], "characters": "\uD835\uDC9E" },                                          // 331
  "&cscr;": { "codepoints": [119992], "characters": "\uD835\uDCB8" },                                          // 332
  "&csub;": { "codepoints": [10959], "characters": "\u2ACF" },                                                 // 333
  "&csube;": { "codepoints": [10961], "characters": "\u2AD1" },                                                // 334
  "&csup;": { "codepoints": [10960], "characters": "\u2AD0" },                                                 // 335
  "&csupe;": { "codepoints": [10962], "characters": "\u2AD2" },                                                // 336
  "&ctdot;": { "codepoints": [8943], "characters": "\u22EF" },                                                 // 337
  "&cudarrl;": { "codepoints": [10552], "characters": "\u2938" },                                              // 338
  "&cudarrr;": { "codepoints": [10549], "characters": "\u2935" },                                              // 339
  "&cuepr;": { "codepoints": [8926], "characters": "\u22DE" },                                                 // 340
  "&cuesc;": { "codepoints": [8927], "characters": "\u22DF" },                                                 // 341
  "&cularr;": { "codepoints": [8630], "characters": "\u21B6" },                                                // 342
  "&cularrp;": { "codepoints": [10557], "characters": "\u293D" },                                              // 343
  "&cupbrcap;": { "codepoints": [10824], "characters": "\u2A48" },                                             // 344
  "&cupcap;": { "codepoints": [10822], "characters": "\u2A46" },                                               // 345
  "&CupCap;": { "codepoints": [8781], "characters": "\u224D" },                                                // 346
  "&cup;": { "codepoints": [8746], "characters": "\u222A" },                                                   // 347
  "&Cup;": { "codepoints": [8915], "characters": "\u22D3" },                                                   // 348
  "&cupcup;": { "codepoints": [10826], "characters": "\u2A4A" },                                               // 349
  "&cupdot;": { "codepoints": [8845], "characters": "\u228D" },                                                // 350
  "&cupor;": { "codepoints": [10821], "characters": "\u2A45" },                                                // 351
  "&cups;": { "codepoints": [8746, 65024], "characters": "\u222A\uFE00" },                                     // 352
  "&curarr;": { "codepoints": [8631], "characters": "\u21B7" },                                                // 353
  "&curarrm;": { "codepoints": [10556], "characters": "\u293C" },                                              // 354
  "&curlyeqprec;": { "codepoints": [8926], "characters": "\u22DE" },                                           // 355
  "&curlyeqsucc;": { "codepoints": [8927], "characters": "\u22DF" },                                           // 356
  "&curlyvee;": { "codepoints": [8910], "characters": "\u22CE" },                                              // 357
  "&curlywedge;": { "codepoints": [8911], "characters": "\u22CF" },                                            // 358
  "&curren;": { "codepoints": [164], "characters": "\u00A4" },                                                 // 359
  "&curren": { "codepoints": [164], "characters": "\u00A4" },                                                  // 360
  "&curvearrowleft;": { "codepoints": [8630], "characters": "\u21B6" },                                        // 361
  "&curvearrowright;": { "codepoints": [8631], "characters": "\u21B7" },                                       // 362
  "&cuvee;": { "codepoints": [8910], "characters": "\u22CE" },                                                 // 363
  "&cuwed;": { "codepoints": [8911], "characters": "\u22CF" },                                                 // 364
  "&cwconint;": { "codepoints": [8754], "characters": "\u2232" },                                              // 365
  "&cwint;": { "codepoints": [8753], "characters": "\u2231" },                                                 // 366
  "&cylcty;": { "codepoints": [9005], "characters": "\u232D" },                                                // 367
  "&dagger;": { "codepoints": [8224], "characters": "\u2020" },                                                // 368
  "&Dagger;": { "codepoints": [8225], "characters": "\u2021" },                                                // 369
  "&daleth;": { "codepoints": [8504], "characters": "\u2138" },                                                // 370
  "&darr;": { "codepoints": [8595], "characters": "\u2193" },                                                  // 371
  "&Darr;": { "codepoints": [8609], "characters": "\u21A1" },                                                  // 372
  "&dArr;": { "codepoints": [8659], "characters": "\u21D3" },                                                  // 373
  "&dash;": { "codepoints": [8208], "characters": "\u2010" },                                                  // 374
  "&Dashv;": { "codepoints": [10980], "characters": "\u2AE4" },                                                // 375
  "&dashv;": { "codepoints": [8867], "characters": "\u22A3" },                                                 // 376
  "&dbkarow;": { "codepoints": [10511], "characters": "\u290F" },                                              // 377
  "&dblac;": { "codepoints": [733], "characters": "\u02DD" },                                                  // 378
  "&Dcaron;": { "codepoints": [270], "characters": "\u010E" },                                                 // 379
  "&dcaron;": { "codepoints": [271], "characters": "\u010F" },                                                 // 380
  "&Dcy;": { "codepoints": [1044], "characters": "\u0414" },                                                   // 381
  "&dcy;": { "codepoints": [1076], "characters": "\u0434" },                                                   // 382
  "&ddagger;": { "codepoints": [8225], "characters": "\u2021" },                                               // 383
  "&ddarr;": { "codepoints": [8650], "characters": "\u21CA" },                                                 // 384
  "&DD;": { "codepoints": [8517], "characters": "\u2145" },                                                    // 385
  "&dd;": { "codepoints": [8518], "characters": "\u2146" },                                                    // 386
  "&DDotrahd;": { "codepoints": [10513], "characters": "\u2911" },                                             // 387
  "&ddotseq;": { "codepoints": [10871], "characters": "\u2A77" },                                              // 388
  "&deg;": { "codepoints": [176], "characters": "\u00B0" },                                                    // 389
  "&deg": { "codepoints": [176], "characters": "\u00B0" },                                                     // 390
  "&Del;": { "codepoints": [8711], "characters": "\u2207" },                                                   // 391
  "&Delta;": { "codepoints": [916], "characters": "\u0394" },                                                  // 392
  "&delta;": { "codepoints": [948], "characters": "\u03B4" },                                                  // 393
  "&demptyv;": { "codepoints": [10673], "characters": "\u29B1" },                                              // 394
  "&dfisht;": { "codepoints": [10623], "characters": "\u297F" },                                               // 395
  "&Dfr;": { "codepoints": [120071], "characters": "\uD835\uDD07" },                                           // 396
  "&dfr;": { "codepoints": [120097], "characters": "\uD835\uDD21" },                                           // 397
  "&dHar;": { "codepoints": [10597], "characters": "\u2965" },                                                 // 398
  "&dharl;": { "codepoints": [8643], "characters": "\u21C3" },                                                 // 399
  "&dharr;": { "codepoints": [8642], "characters": "\u21C2" },                                                 // 400
  "&DiacriticalAcute;": { "codepoints": [180], "characters": "\u00B4" },                                       // 401
  "&DiacriticalDot;": { "codepoints": [729], "characters": "\u02D9" },                                         // 402
  "&DiacriticalDoubleAcute;": { "codepoints": [733], "characters": "\u02DD" },                                 // 403
  "&DiacriticalGrave;": { "codepoints": [96], "characters": "\u0060" },                                        // 404
  "&DiacriticalTilde;": { "codepoints": [732], "characters": "\u02DC" },                                       // 405
  "&diam;": { "codepoints": [8900], "characters": "\u22C4" },                                                  // 406
  "&diamond;": { "codepoints": [8900], "characters": "\u22C4" },                                               // 407
  "&Diamond;": { "codepoints": [8900], "characters": "\u22C4" },                                               // 408
  "&diamondsuit;": { "codepoints": [9830], "characters": "\u2666" },                                           // 409
  "&diams;": { "codepoints": [9830], "characters": "\u2666" },                                                 // 410
  "&die;": { "codepoints": [168], "characters": "\u00A8" },                                                    // 411
  "&DifferentialD;": { "codepoints": [8518], "characters": "\u2146" },                                         // 412
  "&digamma;": { "codepoints": [989], "characters": "\u03DD" },                                                // 413
  "&disin;": { "codepoints": [8946], "characters": "\u22F2" },                                                 // 414
  "&div;": { "codepoints": [247], "characters": "\u00F7" },                                                    // 415
  "&divide;": { "codepoints": [247], "characters": "\u00F7" },                                                 // 416
  "&divide": { "codepoints": [247], "characters": "\u00F7" },                                                  // 417
  "&divideontimes;": { "codepoints": [8903], "characters": "\u22C7" },                                         // 418
  "&divonx;": { "codepoints": [8903], "characters": "\u22C7" },                                                // 419
  "&DJcy;": { "codepoints": [1026], "characters": "\u0402" },                                                  // 420
  "&djcy;": { "codepoints": [1106], "characters": "\u0452" },                                                  // 421
  "&dlcorn;": { "codepoints": [8990], "characters": "\u231E" },                                                // 422
  "&dlcrop;": { "codepoints": [8973], "characters": "\u230D" },                                                // 423
  "&dollar;": { "codepoints": [36], "characters": "\u0024" },                                                  // 424
  "&Dopf;": { "codepoints": [120123], "characters": "\uD835\uDD3B" },                                          // 425
  "&dopf;": { "codepoints": [120149], "characters": "\uD835\uDD55" },                                          // 426
  "&Dot;": { "codepoints": [168], "characters": "\u00A8" },                                                    // 427
  "&dot;": { "codepoints": [729], "characters": "\u02D9" },                                                    // 428
  "&DotDot;": { "codepoints": [8412], "characters": "\u20DC" },                                                // 429
  "&doteq;": { "codepoints": [8784], "characters": "\u2250" },                                                 // 430
  "&doteqdot;": { "codepoints": [8785], "characters": "\u2251" },                                              // 431
  "&DotEqual;": { "codepoints": [8784], "characters": "\u2250" },                                              // 432
  "&dotminus;": { "codepoints": [8760], "characters": "\u2238" },                                              // 433
  "&dotplus;": { "codepoints": [8724], "characters": "\u2214" },                                               // 434
  "&dotsquare;": { "codepoints": [8865], "characters": "\u22A1" },                                             // 435
  "&doublebarwedge;": { "codepoints": [8966], "characters": "\u2306" },                                        // 436
  "&DoubleContourIntegral;": { "codepoints": [8751], "characters": "\u222F" },                                 // 437
  "&DoubleDot;": { "codepoints": [168], "characters": "\u00A8" },                                              // 438
  "&DoubleDownArrow;": { "codepoints": [8659], "characters": "\u21D3" },                                       // 439
  "&DoubleLeftArrow;": { "codepoints": [8656], "characters": "\u21D0" },                                       // 440
  "&DoubleLeftRightArrow;": { "codepoints": [8660], "characters": "\u21D4" },                                  // 441
  "&DoubleLeftTee;": { "codepoints": [10980], "characters": "\u2AE4" },                                        // 442
  "&DoubleLongLeftArrow;": { "codepoints": [10232], "characters": "\u27F8" },                                  // 443
  "&DoubleLongLeftRightArrow;": { "codepoints": [10234], "characters": "\u27FA" },                             // 444
  "&DoubleLongRightArrow;": { "codepoints": [10233], "characters": "\u27F9" },                                 // 445
  "&DoubleRightArrow;": { "codepoints": [8658], "characters": "\u21D2" },                                      // 446
  "&DoubleRightTee;": { "codepoints": [8872], "characters": "\u22A8" },                                        // 447
  "&DoubleUpArrow;": { "codepoints": [8657], "characters": "\u21D1" },                                         // 448
  "&DoubleUpDownArrow;": { "codepoints": [8661], "characters": "\u21D5" },                                     // 449
  "&DoubleVerticalBar;": { "codepoints": [8741], "characters": "\u2225" },                                     // 450
  "&DownArrowBar;": { "codepoints": [10515], "characters": "\u2913" },                                         // 451
  "&downarrow;": { "codepoints": [8595], "characters": "\u2193" },                                             // 452
  "&DownArrow;": { "codepoints": [8595], "characters": "\u2193" },                                             // 453
  "&Downarrow;": { "codepoints": [8659], "characters": "\u21D3" },                                             // 454
  "&DownArrowUpArrow;": { "codepoints": [8693], "characters": "\u21F5" },                                      // 455
  "&DownBreve;": { "codepoints": [785], "characters": "\u0311" },                                              // 456
  "&downdownarrows;": { "codepoints": [8650], "characters": "\u21CA" },                                        // 457
  "&downharpoonleft;": { "codepoints": [8643], "characters": "\u21C3" },                                       // 458
  "&downharpoonright;": { "codepoints": [8642], "characters": "\u21C2" },                                      // 459
  "&DownLeftRightVector;": { "codepoints": [10576], "characters": "\u2950" },                                  // 460
  "&DownLeftTeeVector;": { "codepoints": [10590], "characters": "\u295E" },                                    // 461
  "&DownLeftVectorBar;": { "codepoints": [10582], "characters": "\u2956" },                                    // 462
  "&DownLeftVector;": { "codepoints": [8637], "characters": "\u21BD" },                                        // 463
  "&DownRightTeeVector;": { "codepoints": [10591], "characters": "\u295F" },                                   // 464
  "&DownRightVectorBar;": { "codepoints": [10583], "characters": "\u2957" },                                   // 465
  "&DownRightVector;": { "codepoints": [8641], "characters": "\u21C1" },                                       // 466
  "&DownTeeArrow;": { "codepoints": [8615], "characters": "\u21A7" },                                          // 467
  "&DownTee;": { "codepoints": [8868], "characters": "\u22A4" },                                               // 468
  "&drbkarow;": { "codepoints": [10512], "characters": "\u2910" },                                             // 469
  "&drcorn;": { "codepoints": [8991], "characters": "\u231F" },                                                // 470
  "&drcrop;": { "codepoints": [8972], "characters": "\u230C" },                                                // 471
  "&Dscr;": { "codepoints": [119967], "characters": "\uD835\uDC9F" },                                          // 472
  "&dscr;": { "codepoints": [119993], "characters": "\uD835\uDCB9" },                                          // 473
  "&DScy;": { "codepoints": [1029], "characters": "\u0405" },                                                  // 474
  "&dscy;": { "codepoints": [1109], "characters": "\u0455" },                                                  // 475
  "&dsol;": { "codepoints": [10742], "characters": "\u29F6" },                                                 // 476
  "&Dstrok;": { "codepoints": [272], "characters": "\u0110" },                                                 // 477
  "&dstrok;": { "codepoints": [273], "characters": "\u0111" },                                                 // 478
  "&dtdot;": { "codepoints": [8945], "characters": "\u22F1" },                                                 // 479
  "&dtri;": { "codepoints": [9663], "characters": "\u25BF" },                                                  // 480
  "&dtrif;": { "codepoints": [9662], "characters": "\u25BE" },                                                 // 481
  "&duarr;": { "codepoints": [8693], "characters": "\u21F5" },                                                 // 482
  "&duhar;": { "codepoints": [10607], "characters": "\u296F" },                                                // 483
  "&dwangle;": { "codepoints": [10662], "characters": "\u29A6" },                                              // 484
  "&DZcy;": { "codepoints": [1039], "characters": "\u040F" },                                                  // 485
  "&dzcy;": { "codepoints": [1119], "characters": "\u045F" },                                                  // 486
  "&dzigrarr;": { "codepoints": [10239], "characters": "\u27FF" },                                             // 487
  "&Eacute;": { "codepoints": [201], "characters": "\u00C9" },                                                 // 488
  "&Eacute": { "codepoints": [201], "characters": "\u00C9" },                                                  // 489
  "&eacute;": { "codepoints": [233], "characters": "\u00E9" },                                                 // 490
  "&eacute": { "codepoints": [233], "characters": "\u00E9" },                                                  // 491
  "&easter;": { "codepoints": [10862], "characters": "\u2A6E" },                                               // 492
  "&Ecaron;": { "codepoints": [282], "characters": "\u011A" },                                                 // 493
  "&ecaron;": { "codepoints": [283], "characters": "\u011B" },                                                 // 494
  "&Ecirc;": { "codepoints": [202], "characters": "\u00CA" },                                                  // 495
  "&Ecirc": { "codepoints": [202], "characters": "\u00CA" },                                                   // 496
  "&ecirc;": { "codepoints": [234], "characters": "\u00EA" },                                                  // 497
  "&ecirc": { "codepoints": [234], "characters": "\u00EA" },                                                   // 498
  "&ecir;": { "codepoints": [8790], "characters": "\u2256" },                                                  // 499
  "&ecolon;": { "codepoints": [8789], "characters": "\u2255" },                                                // 500
  "&Ecy;": { "codepoints": [1069], "characters": "\u042D" },                                                   // 501
  "&ecy;": { "codepoints": [1101], "characters": "\u044D" },                                                   // 502
  "&eDDot;": { "codepoints": [10871], "characters": "\u2A77" },                                                // 503
  "&Edot;": { "codepoints": [278], "characters": "\u0116" },                                                   // 504
  "&edot;": { "codepoints": [279], "characters": "\u0117" },                                                   // 505
  "&eDot;": { "codepoints": [8785], "characters": "\u2251" },                                                  // 506
  "&ee;": { "codepoints": [8519], "characters": "\u2147" },                                                    // 507
  "&efDot;": { "codepoints": [8786], "characters": "\u2252" },                                                 // 508
  "&Efr;": { "codepoints": [120072], "characters": "\uD835\uDD08" },                                           // 509
  "&efr;": { "codepoints": [120098], "characters": "\uD835\uDD22" },                                           // 510
  "&eg;": { "codepoints": [10906], "characters": "\u2A9A" },                                                   // 511
  "&Egrave;": { "codepoints": [200], "characters": "\u00C8" },                                                 // 512
  "&Egrave": { "codepoints": [200], "characters": "\u00C8" },                                                  // 513
  "&egrave;": { "codepoints": [232], "characters": "\u00E8" },                                                 // 514
  "&egrave": { "codepoints": [232], "characters": "\u00E8" },                                                  // 515
  "&egs;": { "codepoints": [10902], "characters": "\u2A96" },                                                  // 516
  "&egsdot;": { "codepoints": [10904], "characters": "\u2A98" },                                               // 517
  "&el;": { "codepoints": [10905], "characters": "\u2A99" },                                                   // 518
  "&Element;": { "codepoints": [8712], "characters": "\u2208" },                                               // 519
  "&elinters;": { "codepoints": [9191], "characters": "\u23E7" },                                              // 520
  "&ell;": { "codepoints": [8467], "characters": "\u2113" },                                                   // 521
  "&els;": { "codepoints": [10901], "characters": "\u2A95" },                                                  // 522
  "&elsdot;": { "codepoints": [10903], "characters": "\u2A97" },                                               // 523
  "&Emacr;": { "codepoints": [274], "characters": "\u0112" },                                                  // 524
  "&emacr;": { "codepoints": [275], "characters": "\u0113" },                                                  // 525
  "&empty;": { "codepoints": [8709], "characters": "\u2205" },                                                 // 526
  "&emptyset;": { "codepoints": [8709], "characters": "\u2205" },                                              // 527
  "&EmptySmallSquare;": { "codepoints": [9723], "characters": "\u25FB" },                                      // 528
  "&emptyv;": { "codepoints": [8709], "characters": "\u2205" },                                                // 529
  "&EmptyVerySmallSquare;": { "codepoints": [9643], "characters": "\u25AB" },                                  // 530
  "&emsp13;": { "codepoints": [8196], "characters": "\u2004" },                                                // 531
  "&emsp14;": { "codepoints": [8197], "characters": "\u2005" },                                                // 532
  "&emsp;": { "codepoints": [8195], "characters": "\u2003" },                                                  // 533
  "&ENG;": { "codepoints": [330], "characters": "\u014A" },                                                    // 534
  "&eng;": { "codepoints": [331], "characters": "\u014B" },                                                    // 535
  "&ensp;": { "codepoints": [8194], "characters": "\u2002" },                                                  // 536
  "&Eogon;": { "codepoints": [280], "characters": "\u0118" },                                                  // 537
  "&eogon;": { "codepoints": [281], "characters": "\u0119" },                                                  // 538
  "&Eopf;": { "codepoints": [120124], "characters": "\uD835\uDD3C" },                                          // 539
  "&eopf;": { "codepoints": [120150], "characters": "\uD835\uDD56" },                                          // 540
  "&epar;": { "codepoints": [8917], "characters": "\u22D5" },                                                  // 541
  "&eparsl;": { "codepoints": [10723], "characters": "\u29E3" },                                               // 542
  "&eplus;": { "codepoints": [10865], "characters": "\u2A71" },                                                // 543
  "&epsi;": { "codepoints": [949], "characters": "\u03B5" },                                                   // 544
  "&Epsilon;": { "codepoints": [917], "characters": "\u0395" },                                                // 545
  "&epsilon;": { "codepoints": [949], "characters": "\u03B5" },                                                // 546
  "&epsiv;": { "codepoints": [1013], "characters": "\u03F5" },                                                 // 547
  "&eqcirc;": { "codepoints": [8790], "characters": "\u2256" },                                                // 548
  "&eqcolon;": { "codepoints": [8789], "characters": "\u2255" },                                               // 549
  "&eqsim;": { "codepoints": [8770], "characters": "\u2242" },                                                 // 550
  "&eqslantgtr;": { "codepoints": [10902], "characters": "\u2A96" },                                           // 551
  "&eqslantless;": { "codepoints": [10901], "characters": "\u2A95" },                                          // 552
  "&Equal;": { "codepoints": [10869], "characters": "\u2A75" },                                                // 553
  "&equals;": { "codepoints": [61], "characters": "\u003D" },                                                  // 554
  "&EqualTilde;": { "codepoints": [8770], "characters": "\u2242" },                                            // 555
  "&equest;": { "codepoints": [8799], "characters": "\u225F" },                                                // 556
  "&Equilibrium;": { "codepoints": [8652], "characters": "\u21CC" },                                           // 557
  "&equiv;": { "codepoints": [8801], "characters": "\u2261" },                                                 // 558
  "&equivDD;": { "codepoints": [10872], "characters": "\u2A78" },                                              // 559
  "&eqvparsl;": { "codepoints": [10725], "characters": "\u29E5" },                                             // 560
  "&erarr;": { "codepoints": [10609], "characters": "\u2971" },                                                // 561
  "&erDot;": { "codepoints": [8787], "characters": "\u2253" },                                                 // 562
  "&escr;": { "codepoints": [8495], "characters": "\u212F" },                                                  // 563
  "&Escr;": { "codepoints": [8496], "characters": "\u2130" },                                                  // 564
  "&esdot;": { "codepoints": [8784], "characters": "\u2250" },                                                 // 565
  "&Esim;": { "codepoints": [10867], "characters": "\u2A73" },                                                 // 566
  "&esim;": { "codepoints": [8770], "characters": "\u2242" },                                                  // 567
  "&Eta;": { "codepoints": [919], "characters": "\u0397" },                                                    // 568
  "&eta;": { "codepoints": [951], "characters": "\u03B7" },                                                    // 569
  "&ETH;": { "codepoints": [208], "characters": "\u00D0" },                                                    // 570
  "&ETH": { "codepoints": [208], "characters": "\u00D0" },                                                     // 571
  "&eth;": { "codepoints": [240], "characters": "\u00F0" },                                                    // 572
  "&eth": { "codepoints": [240], "characters": "\u00F0" },                                                     // 573
  "&Euml;": { "codepoints": [203], "characters": "\u00CB" },                                                   // 574
  "&Euml": { "codepoints": [203], "characters": "\u00CB" },                                                    // 575
  "&euml;": { "codepoints": [235], "characters": "\u00EB" },                                                   // 576
  "&euml": { "codepoints": [235], "characters": "\u00EB" },                                                    // 577
  "&euro;": { "codepoints": [8364], "characters": "\u20AC" },                                                  // 578
  "&excl;": { "codepoints": [33], "characters": "\u0021" },                                                    // 579
  "&exist;": { "codepoints": [8707], "characters": "\u2203" },                                                 // 580
  "&Exists;": { "codepoints": [8707], "characters": "\u2203" },                                                // 581
  "&expectation;": { "codepoints": [8496], "characters": "\u2130" },                                           // 582
  "&exponentiale;": { "codepoints": [8519], "characters": "\u2147" },                                          // 583
  "&ExponentialE;": { "codepoints": [8519], "characters": "\u2147" },                                          // 584
  "&fallingdotseq;": { "codepoints": [8786], "characters": "\u2252" },                                         // 585
  "&Fcy;": { "codepoints": [1060], "characters": "\u0424" },                                                   // 586
  "&fcy;": { "codepoints": [1092], "characters": "\u0444" },                                                   // 587
  "&female;": { "codepoints": [9792], "characters": "\u2640" },                                                // 588
  "&ffilig;": { "codepoints": [64259], "characters": "\uFB03" },                                               // 589
  "&fflig;": { "codepoints": [64256], "characters": "\uFB00" },                                                // 590
  "&ffllig;": { "codepoints": [64260], "characters": "\uFB04" },                                               // 591
  "&Ffr;": { "codepoints": [120073], "characters": "\uD835\uDD09" },                                           // 592
  "&ffr;": { "codepoints": [120099], "characters": "\uD835\uDD23" },                                           // 593
  "&filig;": { "codepoints": [64257], "characters": "\uFB01" },                                                // 594
  "&FilledSmallSquare;": { "codepoints": [9724], "characters": "\u25FC" },                                     // 595
  "&FilledVerySmallSquare;": { "codepoints": [9642], "characters": "\u25AA" },                                 // 596
  "&fjlig;": { "codepoints": [102, 106], "characters": "\u0066\u006A" },                                       // 597
  "&flat;": { "codepoints": [9837], "characters": "\u266D" },                                                  // 598
  "&fllig;": { "codepoints": [64258], "characters": "\uFB02" },                                                // 599
  "&fltns;": { "codepoints": [9649], "characters": "\u25B1" },                                                 // 600
  "&fnof;": { "codepoints": [402], "characters": "\u0192" },                                                   // 601
  "&Fopf;": { "codepoints": [120125], "characters": "\uD835\uDD3D" },                                          // 602
  "&fopf;": { "codepoints": [120151], "characters": "\uD835\uDD57" },                                          // 603
  "&forall;": { "codepoints": [8704], "characters": "\u2200" },                                                // 604
  "&ForAll;": { "codepoints": [8704], "characters": "\u2200" },                                                // 605
  "&fork;": { "codepoints": [8916], "characters": "\u22D4" },                                                  // 606
  "&forkv;": { "codepoints": [10969], "characters": "\u2AD9" },                                                // 607
  "&Fouriertrf;": { "codepoints": [8497], "characters": "\u2131" },                                            // 608
  "&fpartint;": { "codepoints": [10765], "characters": "\u2A0D" },                                             // 609
  "&frac12;": { "codepoints": [189], "characters": "\u00BD" },                                                 // 610
  "&frac12": { "codepoints": [189], "characters": "\u00BD" },                                                  // 611
  "&frac13;": { "codepoints": [8531], "characters": "\u2153" },                                                // 612
  "&frac14;": { "codepoints": [188], "characters": "\u00BC" },                                                 // 613
  "&frac14": { "codepoints": [188], "characters": "\u00BC" },                                                  // 614
  "&frac15;": { "codepoints": [8533], "characters": "\u2155" },                                                // 615
  "&frac16;": { "codepoints": [8537], "characters": "\u2159" },                                                // 616
  "&frac18;": { "codepoints": [8539], "characters": "\u215B" },                                                // 617
  "&frac23;": { "codepoints": [8532], "characters": "\u2154" },                                                // 618
  "&frac25;": { "codepoints": [8534], "characters": "\u2156" },                                                // 619
  "&frac34;": { "codepoints": [190], "characters": "\u00BE" },                                                 // 620
  "&frac34": { "codepoints": [190], "characters": "\u00BE" },                                                  // 621
  "&frac35;": { "codepoints": [8535], "characters": "\u2157" },                                                // 622
  "&frac38;": { "codepoints": [8540], "characters": "\u215C" },                                                // 623
  "&frac45;": { "codepoints": [8536], "characters": "\u2158" },                                                // 624
  "&frac56;": { "codepoints": [8538], "characters": "\u215A" },                                                // 625
  "&frac58;": { "codepoints": [8541], "characters": "\u215D" },                                                // 626
  "&frac78;": { "codepoints": [8542], "characters": "\u215E" },                                                // 627
  "&frasl;": { "codepoints": [8260], "characters": "\u2044" },                                                 // 628
  "&frown;": { "codepoints": [8994], "characters": "\u2322" },                                                 // 629
  "&fscr;": { "codepoints": [119995], "characters": "\uD835\uDCBB" },                                          // 630
  "&Fscr;": { "codepoints": [8497], "characters": "\u2131" },                                                  // 631
  "&gacute;": { "codepoints": [501], "characters": "\u01F5" },                                                 // 632
  "&Gamma;": { "codepoints": [915], "characters": "\u0393" },                                                  // 633
  "&gamma;": { "codepoints": [947], "characters": "\u03B3" },                                                  // 634
  "&Gammad;": { "codepoints": [988], "characters": "\u03DC" },                                                 // 635
  "&gammad;": { "codepoints": [989], "characters": "\u03DD" },                                                 // 636
  "&gap;": { "codepoints": [10886], "characters": "\u2A86" },                                                  // 637
  "&Gbreve;": { "codepoints": [286], "characters": "\u011E" },                                                 // 638
  "&gbreve;": { "codepoints": [287], "characters": "\u011F" },                                                 // 639
  "&Gcedil;": { "codepoints": [290], "characters": "\u0122" },                                                 // 640
  "&Gcirc;": { "codepoints": [284], "characters": "\u011C" },                                                  // 641
  "&gcirc;": { "codepoints": [285], "characters": "\u011D" },                                                  // 642
  "&Gcy;": { "codepoints": [1043], "characters": "\u0413" },                                                   // 643
  "&gcy;": { "codepoints": [1075], "characters": "\u0433" },                                                   // 644
  "&Gdot;": { "codepoints": [288], "characters": "\u0120" },                                                   // 645
  "&gdot;": { "codepoints": [289], "characters": "\u0121" },                                                   // 646
  "&ge;": { "codepoints": [8805], "characters": "\u2265" },                                                    // 647
  "&gE;": { "codepoints": [8807], "characters": "\u2267" },                                                    // 648
  "&gEl;": { "codepoints": [10892], "characters": "\u2A8C" },                                                  // 649
  "&gel;": { "codepoints": [8923], "characters": "\u22DB" },                                                   // 650
  "&geq;": { "codepoints": [8805], "characters": "\u2265" },                                                   // 651
  "&geqq;": { "codepoints": [8807], "characters": "\u2267" },                                                  // 652
  "&geqslant;": { "codepoints": [10878], "characters": "\u2A7E" },                                             // 653
  "&gescc;": { "codepoints": [10921], "characters": "\u2AA9" },                                                // 654
  "&ges;": { "codepoints": [10878], "characters": "\u2A7E" },                                                  // 655
  "&gesdot;": { "codepoints": [10880], "characters": "\u2A80" },                                               // 656
  "&gesdoto;": { "codepoints": [10882], "characters": "\u2A82" },                                              // 657
  "&gesdotol;": { "codepoints": [10884], "characters": "\u2A84" },                                             // 658
  "&gesl;": { "codepoints": [8923, 65024], "characters": "\u22DB\uFE00" },                                     // 659
  "&gesles;": { "codepoints": [10900], "characters": "\u2A94" },                                               // 660
  "&Gfr;": { "codepoints": [120074], "characters": "\uD835\uDD0A" },                                           // 661
  "&gfr;": { "codepoints": [120100], "characters": "\uD835\uDD24" },                                           // 662
  "&gg;": { "codepoints": [8811], "characters": "\u226B" },                                                    // 663
  "&Gg;": { "codepoints": [8921], "characters": "\u22D9" },                                                    // 664
  "&ggg;": { "codepoints": [8921], "characters": "\u22D9" },                                                   // 665
  "&gimel;": { "codepoints": [8503], "characters": "\u2137" },                                                 // 666
  "&GJcy;": { "codepoints": [1027], "characters": "\u0403" },                                                  // 667
  "&gjcy;": { "codepoints": [1107], "characters": "\u0453" },                                                  // 668
  "&gla;": { "codepoints": [10917], "characters": "\u2AA5" },                                                  // 669
  "&gl;": { "codepoints": [8823], "characters": "\u2277" },                                                    // 670
  "&glE;": { "codepoints": [10898], "characters": "\u2A92" },                                                  // 671
  "&glj;": { "codepoints": [10916], "characters": "\u2AA4" },                                                  // 672
  "&gnap;": { "codepoints": [10890], "characters": "\u2A8A" },                                                 // 673
  "&gnapprox;": { "codepoints": [10890], "characters": "\u2A8A" },                                             // 674
  "&gne;": { "codepoints": [10888], "characters": "\u2A88" },                                                  // 675
  "&gnE;": { "codepoints": [8809], "characters": "\u2269" },                                                   // 676
  "&gneq;": { "codepoints": [10888], "characters": "\u2A88" },                                                 // 677
  "&gneqq;": { "codepoints": [8809], "characters": "\u2269" },                                                 // 678
  "&gnsim;": { "codepoints": [8935], "characters": "\u22E7" },                                                 // 679
  "&Gopf;": { "codepoints": [120126], "characters": "\uD835\uDD3E" },                                          // 680
  "&gopf;": { "codepoints": [120152], "characters": "\uD835\uDD58" },                                          // 681
  "&grave;": { "codepoints": [96], "characters": "\u0060" },                                                   // 682
  "&GreaterEqual;": { "codepoints": [8805], "characters": "\u2265" },                                          // 683
  "&GreaterEqualLess;": { "codepoints": [8923], "characters": "\u22DB" },                                      // 684
  "&GreaterFullEqual;": { "codepoints": [8807], "characters": "\u2267" },                                      // 685
  "&GreaterGreater;": { "codepoints": [10914], "characters": "\u2AA2" },                                       // 686
  "&GreaterLess;": { "codepoints": [8823], "characters": "\u2277" },                                           // 687
  "&GreaterSlantEqual;": { "codepoints": [10878], "characters": "\u2A7E" },                                    // 688
  "&GreaterTilde;": { "codepoints": [8819], "characters": "\u2273" },                                          // 689
  "&Gscr;": { "codepoints": [119970], "characters": "\uD835\uDCA2" },                                          // 690
  "&gscr;": { "codepoints": [8458], "characters": "\u210A" },                                                  // 691
  "&gsim;": { "codepoints": [8819], "characters": "\u2273" },                                                  // 692
  "&gsime;": { "codepoints": [10894], "characters": "\u2A8E" },                                                // 693
  "&gsiml;": { "codepoints": [10896], "characters": "\u2A90" },                                                // 694
  "&gtcc;": { "codepoints": [10919], "characters": "\u2AA7" },                                                 // 695
  "&gtcir;": { "codepoints": [10874], "characters": "\u2A7A" },                                                // 696
  "&gt;": { "codepoints": [62], "characters": "\u003E" },                                                      // 697
  "&gt": { "codepoints": [62], "characters": "\u003E" },                                                       // 698
  "&GT;": { "codepoints": [62], "characters": "\u003E" },                                                      // 699
  "&GT": { "codepoints": [62], "characters": "\u003E" },                                                       // 700
  "&Gt;": { "codepoints": [8811], "characters": "\u226B" },                                                    // 701
  "&gtdot;": { "codepoints": [8919], "characters": "\u22D7" },                                                 // 702
  "&gtlPar;": { "codepoints": [10645], "characters": "\u2995" },                                               // 703
  "&gtquest;": { "codepoints": [10876], "characters": "\u2A7C" },                                              // 704
  "&gtrapprox;": { "codepoints": [10886], "characters": "\u2A86" },                                            // 705
  "&gtrarr;": { "codepoints": [10616], "characters": "\u2978" },                                               // 706
  "&gtrdot;": { "codepoints": [8919], "characters": "\u22D7" },                                                // 707
  "&gtreqless;": { "codepoints": [8923], "characters": "\u22DB" },                                             // 708
  "&gtreqqless;": { "codepoints": [10892], "characters": "\u2A8C" },                                           // 709
  "&gtrless;": { "codepoints": [8823], "characters": "\u2277" },                                               // 710
  "&gtrsim;": { "codepoints": [8819], "characters": "\u2273" },                                                // 711
  "&gvertneqq;": { "codepoints": [8809, 65024], "characters": "\u2269\uFE00" },                                // 712
  "&gvnE;": { "codepoints": [8809, 65024], "characters": "\u2269\uFE00" },                                     // 713
  "&Hacek;": { "codepoints": [711], "characters": "\u02C7" },                                                  // 714
  "&hairsp;": { "codepoints": [8202], "characters": "\u200A" },                                                // 715
  "&half;": { "codepoints": [189], "characters": "\u00BD" },                                                   // 716
  "&hamilt;": { "codepoints": [8459], "characters": "\u210B" },                                                // 717
  "&HARDcy;": { "codepoints": [1066], "characters": "\u042A" },                                                // 718
  "&hardcy;": { "codepoints": [1098], "characters": "\u044A" },                                                // 719
  "&harrcir;": { "codepoints": [10568], "characters": "\u2948" },                                              // 720
  "&harr;": { "codepoints": [8596], "characters": "\u2194" },                                                  // 721
  "&hArr;": { "codepoints": [8660], "characters": "\u21D4" },                                                  // 722
  "&harrw;": { "codepoints": [8621], "characters": "\u21AD" },                                                 // 723
  "&Hat;": { "codepoints": [94], "characters": "\u005E" },                                                     // 724
  "&hbar;": { "codepoints": [8463], "characters": "\u210F" },                                                  // 725
  "&Hcirc;": { "codepoints": [292], "characters": "\u0124" },                                                  // 726
  "&hcirc;": { "codepoints": [293], "characters": "\u0125" },                                                  // 727
  "&hearts;": { "codepoints": [9829], "characters": "\u2665" },                                                // 728
  "&heartsuit;": { "codepoints": [9829], "characters": "\u2665" },                                             // 729
  "&hellip;": { "codepoints": [8230], "characters": "\u2026" },                                                // 730
  "&hercon;": { "codepoints": [8889], "characters": "\u22B9" },                                                // 731
  "&hfr;": { "codepoints": [120101], "characters": "\uD835\uDD25" },                                           // 732
  "&Hfr;": { "codepoints": [8460], "characters": "\u210C" },                                                   // 733
  "&HilbertSpace;": { "codepoints": [8459], "characters": "\u210B" },                                          // 734
  "&hksearow;": { "codepoints": [10533], "characters": "\u2925" },                                             // 735
  "&hkswarow;": { "codepoints": [10534], "characters": "\u2926" },                                             // 736
  "&hoarr;": { "codepoints": [8703], "characters": "\u21FF" },                                                 // 737
  "&homtht;": { "codepoints": [8763], "characters": "\u223B" },                                                // 738
  "&hookleftarrow;": { "codepoints": [8617], "characters": "\u21A9" },                                         // 739
  "&hookrightarrow;": { "codepoints": [8618], "characters": "\u21AA" },                                        // 740
  "&hopf;": { "codepoints": [120153], "characters": "\uD835\uDD59" },                                          // 741
  "&Hopf;": { "codepoints": [8461], "characters": "\u210D" },                                                  // 742
  "&horbar;": { "codepoints": [8213], "characters": "\u2015" },                                                // 743
  "&HorizontalLine;": { "codepoints": [9472], "characters": "\u2500" },                                        // 744
  "&hscr;": { "codepoints": [119997], "characters": "\uD835\uDCBD" },                                          // 745
  "&Hscr;": { "codepoints": [8459], "characters": "\u210B" },                                                  // 746
  "&hslash;": { "codepoints": [8463], "characters": "\u210F" },                                                // 747
  "&Hstrok;": { "codepoints": [294], "characters": "\u0126" },                                                 // 748
  "&hstrok;": { "codepoints": [295], "characters": "\u0127" },                                                 // 749
  "&HumpDownHump;": { "codepoints": [8782], "characters": "\u224E" },                                          // 750
  "&HumpEqual;": { "codepoints": [8783], "characters": "\u224F" },                                             // 751
  "&hybull;": { "codepoints": [8259], "characters": "\u2043" },                                                // 752
  "&hyphen;": { "codepoints": [8208], "characters": "\u2010" },                                                // 753
  "&Iacute;": { "codepoints": [205], "characters": "\u00CD" },                                                 // 754
  "&Iacute": { "codepoints": [205], "characters": "\u00CD" },                                                  // 755
  "&iacute;": { "codepoints": [237], "characters": "\u00ED" },                                                 // 756
  "&iacute": { "codepoints": [237], "characters": "\u00ED" },                                                  // 757
  "&ic;": { "codepoints": [8291], "characters": "\u2063" },                                                    // 758
  "&Icirc;": { "codepoints": [206], "characters": "\u00CE" },                                                  // 759
  "&Icirc": { "codepoints": [206], "characters": "\u00CE" },                                                   // 760
  "&icirc;": { "codepoints": [238], "characters": "\u00EE" },                                                  // 761
  "&icirc": { "codepoints": [238], "characters": "\u00EE" },                                                   // 762
  "&Icy;": { "codepoints": [1048], "characters": "\u0418" },                                                   // 763
  "&icy;": { "codepoints": [1080], "characters": "\u0438" },                                                   // 764
  "&Idot;": { "codepoints": [304], "characters": "\u0130" },                                                   // 765
  "&IEcy;": { "codepoints": [1045], "characters": "\u0415" },                                                  // 766
  "&iecy;": { "codepoints": [1077], "characters": "\u0435" },                                                  // 767
  "&iexcl;": { "codepoints": [161], "characters": "\u00A1" },                                                  // 768
  "&iexcl": { "codepoints": [161], "characters": "\u00A1" },                                                   // 769
  "&iff;": { "codepoints": [8660], "characters": "\u21D4" },                                                   // 770
  "&ifr;": { "codepoints": [120102], "characters": "\uD835\uDD26" },                                           // 771
  "&Ifr;": { "codepoints": [8465], "characters": "\u2111" },                                                   // 772
  "&Igrave;": { "codepoints": [204], "characters": "\u00CC" },                                                 // 773
  "&Igrave": { "codepoints": [204], "characters": "\u00CC" },                                                  // 774
  "&igrave;": { "codepoints": [236], "characters": "\u00EC" },                                                 // 775
  "&igrave": { "codepoints": [236], "characters": "\u00EC" },                                                  // 776
  "&ii;": { "codepoints": [8520], "characters": "\u2148" },                                                    // 777
  "&iiiint;": { "codepoints": [10764], "characters": "\u2A0C" },                                               // 778
  "&iiint;": { "codepoints": [8749], "characters": "\u222D" },                                                 // 779
  "&iinfin;": { "codepoints": [10716], "characters": "\u29DC" },                                               // 780
  "&iiota;": { "codepoints": [8489], "characters": "\u2129" },                                                 // 781
  "&IJlig;": { "codepoints": [306], "characters": "\u0132" },                                                  // 782
  "&ijlig;": { "codepoints": [307], "characters": "\u0133" },                                                  // 783
  "&Imacr;": { "codepoints": [298], "characters": "\u012A" },                                                  // 784
  "&imacr;": { "codepoints": [299], "characters": "\u012B" },                                                  // 785
  "&image;": { "codepoints": [8465], "characters": "\u2111" },                                                 // 786
  "&ImaginaryI;": { "codepoints": [8520], "characters": "\u2148" },                                            // 787
  "&imagline;": { "codepoints": [8464], "characters": "\u2110" },                                              // 788
  "&imagpart;": { "codepoints": [8465], "characters": "\u2111" },                                              // 789
  "&imath;": { "codepoints": [305], "characters": "\u0131" },                                                  // 790
  "&Im;": { "codepoints": [8465], "characters": "\u2111" },                                                    // 791
  "&imof;": { "codepoints": [8887], "characters": "\u22B7" },                                                  // 792
  "&imped;": { "codepoints": [437], "characters": "\u01B5" },                                                  // 793
  "&Implies;": { "codepoints": [8658], "characters": "\u21D2" },                                               // 794
  "&incare;": { "codepoints": [8453], "characters": "\u2105" },                                                // 795
  "&in;": { "codepoints": [8712], "characters": "\u2208" },                                                    // 796
  "&infin;": { "codepoints": [8734], "characters": "\u221E" },                                                 // 797
  "&infintie;": { "codepoints": [10717], "characters": "\u29DD" },                                             // 798
  "&inodot;": { "codepoints": [305], "characters": "\u0131" },                                                 // 799
  "&intcal;": { "codepoints": [8890], "characters": "\u22BA" },                                                // 800
  "&int;": { "codepoints": [8747], "characters": "\u222B" },                                                   // 801
  "&Int;": { "codepoints": [8748], "characters": "\u222C" },                                                   // 802
  "&integers;": { "codepoints": [8484], "characters": "\u2124" },                                              // 803
  "&Integral;": { "codepoints": [8747], "characters": "\u222B" },                                              // 804
  "&intercal;": { "codepoints": [8890], "characters": "\u22BA" },                                              // 805
  "&Intersection;": { "codepoints": [8898], "characters": "\u22C2" },                                          // 806
  "&intlarhk;": { "codepoints": [10775], "characters": "\u2A17" },                                             // 807
  "&intprod;": { "codepoints": [10812], "characters": "\u2A3C" },                                              // 808
  "&InvisibleComma;": { "codepoints": [8291], "characters": "\u2063" },                                        // 809
  "&InvisibleTimes;": { "codepoints": [8290], "characters": "\u2062" },                                        // 810
  "&IOcy;": { "codepoints": [1025], "characters": "\u0401" },                                                  // 811
  "&iocy;": { "codepoints": [1105], "characters": "\u0451" },                                                  // 812
  "&Iogon;": { "codepoints": [302], "characters": "\u012E" },                                                  // 813
  "&iogon;": { "codepoints": [303], "characters": "\u012F" },                                                  // 814
  "&Iopf;": { "codepoints": [120128], "characters": "\uD835\uDD40" },                                          // 815
  "&iopf;": { "codepoints": [120154], "characters": "\uD835\uDD5A" },                                          // 816
  "&Iota;": { "codepoints": [921], "characters": "\u0399" },                                                   // 817
  "&iota;": { "codepoints": [953], "characters": "\u03B9" },                                                   // 818
  "&iprod;": { "codepoints": [10812], "characters": "\u2A3C" },                                                // 819
  "&iquest;": { "codepoints": [191], "characters": "\u00BF" },                                                 // 820
  "&iquest": { "codepoints": [191], "characters": "\u00BF" },                                                  // 821
  "&iscr;": { "codepoints": [119998], "characters": "\uD835\uDCBE" },                                          // 822
  "&Iscr;": { "codepoints": [8464], "characters": "\u2110" },                                                  // 823
  "&isin;": { "codepoints": [8712], "characters": "\u2208" },                                                  // 824
  "&isindot;": { "codepoints": [8949], "characters": "\u22F5" },                                               // 825
  "&isinE;": { "codepoints": [8953], "characters": "\u22F9" },                                                 // 826
  "&isins;": { "codepoints": [8948], "characters": "\u22F4" },                                                 // 827
  "&isinsv;": { "codepoints": [8947], "characters": "\u22F3" },                                                // 828
  "&isinv;": { "codepoints": [8712], "characters": "\u2208" },                                                 // 829
  "&it;": { "codepoints": [8290], "characters": "\u2062" },                                                    // 830
  "&Itilde;": { "codepoints": [296], "characters": "\u0128" },                                                 // 831
  "&itilde;": { "codepoints": [297], "characters": "\u0129" },                                                 // 832
  "&Iukcy;": { "codepoints": [1030], "characters": "\u0406" },                                                 // 833
  "&iukcy;": { "codepoints": [1110], "characters": "\u0456" },                                                 // 834
  "&Iuml;": { "codepoints": [207], "characters": "\u00CF" },                                                   // 835
  "&Iuml": { "codepoints": [207], "characters": "\u00CF" },                                                    // 836
  "&iuml;": { "codepoints": [239], "characters": "\u00EF" },                                                   // 837
  "&iuml": { "codepoints": [239], "characters": "\u00EF" },                                                    // 838
  "&Jcirc;": { "codepoints": [308], "characters": "\u0134" },                                                  // 839
  "&jcirc;": { "codepoints": [309], "characters": "\u0135" },                                                  // 840
  "&Jcy;": { "codepoints": [1049], "characters": "\u0419" },                                                   // 841
  "&jcy;": { "codepoints": [1081], "characters": "\u0439" },                                                   // 842
  "&Jfr;": { "codepoints": [120077], "characters": "\uD835\uDD0D" },                                           // 843
  "&jfr;": { "codepoints": [120103], "characters": "\uD835\uDD27" },                                           // 844
  "&jmath;": { "codepoints": [567], "characters": "\u0237" },                                                  // 845
  "&Jopf;": { "codepoints": [120129], "characters": "\uD835\uDD41" },                                          // 846
  "&jopf;": { "codepoints": [120155], "characters": "\uD835\uDD5B" },                                          // 847
  "&Jscr;": { "codepoints": [119973], "characters": "\uD835\uDCA5" },                                          // 848
  "&jscr;": { "codepoints": [119999], "characters": "\uD835\uDCBF" },                                          // 849
  "&Jsercy;": { "codepoints": [1032], "characters": "\u0408" },                                                // 850
  "&jsercy;": { "codepoints": [1112], "characters": "\u0458" },                                                // 851
  "&Jukcy;": { "codepoints": [1028], "characters": "\u0404" },                                                 // 852
  "&jukcy;": { "codepoints": [1108], "characters": "\u0454" },                                                 // 853
  "&Kappa;": { "codepoints": [922], "characters": "\u039A" },                                                  // 854
  "&kappa;": { "codepoints": [954], "characters": "\u03BA" },                                                  // 855
  "&kappav;": { "codepoints": [1008], "characters": "\u03F0" },                                                // 856
  "&Kcedil;": { "codepoints": [310], "characters": "\u0136" },                                                 // 857
  "&kcedil;": { "codepoints": [311], "characters": "\u0137" },                                                 // 858
  "&Kcy;": { "codepoints": [1050], "characters": "\u041A" },                                                   // 859
  "&kcy;": { "codepoints": [1082], "characters": "\u043A" },                                                   // 860
  "&Kfr;": { "codepoints": [120078], "characters": "\uD835\uDD0E" },                                           // 861
  "&kfr;": { "codepoints": [120104], "characters": "\uD835\uDD28" },                                           // 862
  "&kgreen;": { "codepoints": [312], "characters": "\u0138" },                                                 // 863
  "&KHcy;": { "codepoints": [1061], "characters": "\u0425" },                                                  // 864
  "&khcy;": { "codepoints": [1093], "characters": "\u0445" },                                                  // 865
  "&KJcy;": { "codepoints": [1036], "characters": "\u040C" },                                                  // 866
  "&kjcy;": { "codepoints": [1116], "characters": "\u045C" },                                                  // 867
  "&Kopf;": { "codepoints": [120130], "characters": "\uD835\uDD42" },                                          // 868
  "&kopf;": { "codepoints": [120156], "characters": "\uD835\uDD5C" },                                          // 869
  "&Kscr;": { "codepoints": [119974], "characters": "\uD835\uDCA6" },                                          // 870
  "&kscr;": { "codepoints": [120000], "characters": "\uD835\uDCC0" },                                          // 871
  "&lAarr;": { "codepoints": [8666], "characters": "\u21DA" },                                                 // 872
  "&Lacute;": { "codepoints": [313], "characters": "\u0139" },                                                 // 873
  "&lacute;": { "codepoints": [314], "characters": "\u013A" },                                                 // 874
  "&laemptyv;": { "codepoints": [10676], "characters": "\u29B4" },                                             // 875
  "&lagran;": { "codepoints": [8466], "characters": "\u2112" },                                                // 876
  "&Lambda;": { "codepoints": [923], "characters": "\u039B" },                                                 // 877
  "&lambda;": { "codepoints": [955], "characters": "\u03BB" },                                                 // 878
  "&lang;": { "codepoints": [10216], "characters": "\u27E8" },                                                 // 879
  "&Lang;": { "codepoints": [10218], "characters": "\u27EA" },                                                 // 880
  "&langd;": { "codepoints": [10641], "characters": "\u2991" },                                                // 881
  "&langle;": { "codepoints": [10216], "characters": "\u27E8" },                                               // 882
  "&lap;": { "codepoints": [10885], "characters": "\u2A85" },                                                  // 883
  "&Laplacetrf;": { "codepoints": [8466], "characters": "\u2112" },                                            // 884
  "&laquo;": { "codepoints": [171], "characters": "\u00AB" },                                                  // 885
  "&laquo": { "codepoints": [171], "characters": "\u00AB" },                                                   // 886
  "&larrb;": { "codepoints": [8676], "characters": "\u21E4" },                                                 // 887
  "&larrbfs;": { "codepoints": [10527], "characters": "\u291F" },                                              // 888
  "&larr;": { "codepoints": [8592], "characters": "\u2190" },                                                  // 889
  "&Larr;": { "codepoints": [8606], "characters": "\u219E" },                                                  // 890
  "&lArr;": { "codepoints": [8656], "characters": "\u21D0" },                                                  // 891
  "&larrfs;": { "codepoints": [10525], "characters": "\u291D" },                                               // 892
  "&larrhk;": { "codepoints": [8617], "characters": "\u21A9" },                                                // 893
  "&larrlp;": { "codepoints": [8619], "characters": "\u21AB" },                                                // 894
  "&larrpl;": { "codepoints": [10553], "characters": "\u2939" },                                               // 895
  "&larrsim;": { "codepoints": [10611], "characters": "\u2973" },                                              // 896
  "&larrtl;": { "codepoints": [8610], "characters": "\u21A2" },                                                // 897
  "&latail;": { "codepoints": [10521], "characters": "\u2919" },                                               // 898
  "&lAtail;": { "codepoints": [10523], "characters": "\u291B" },                                               // 899
  "&lat;": { "codepoints": [10923], "characters": "\u2AAB" },                                                  // 900
  "&late;": { "codepoints": [10925], "characters": "\u2AAD" },                                                 // 901
  "&lates;": { "codepoints": [10925, 65024], "characters": "\u2AAD\uFE00" },                                   // 902
  "&lbarr;": { "codepoints": [10508], "characters": "\u290C" },                                                // 903
  "&lBarr;": { "codepoints": [10510], "characters": "\u290E" },                                                // 904
  "&lbbrk;": { "codepoints": [10098], "characters": "\u2772" },                                                // 905
  "&lbrace;": { "codepoints": [123], "characters": "\u007B" },                                                 // 906
  "&lbrack;": { "codepoints": [91], "characters": "\u005B" },                                                  // 907
  "&lbrke;": { "codepoints": [10635], "characters": "\u298B" },                                                // 908
  "&lbrksld;": { "codepoints": [10639], "characters": "\u298F" },                                              // 909
  "&lbrkslu;": { "codepoints": [10637], "characters": "\u298D" },                                              // 910
  "&Lcaron;": { "codepoints": [317], "characters": "\u013D" },                                                 // 911
  "&lcaron;": { "codepoints": [318], "characters": "\u013E" },                                                 // 912
  "&Lcedil;": { "codepoints": [315], "characters": "\u013B" },                                                 // 913
  "&lcedil;": { "codepoints": [316], "characters": "\u013C" },                                                 // 914
  "&lceil;": { "codepoints": [8968], "characters": "\u2308" },                                                 // 915
  "&lcub;": { "codepoints": [123], "characters": "\u007B" },                                                   // 916
  "&Lcy;": { "codepoints": [1051], "characters": "\u041B" },                                                   // 917
  "&lcy;": { "codepoints": [1083], "characters": "\u043B" },                                                   // 918
  "&ldca;": { "codepoints": [10550], "characters": "\u2936" },                                                 // 919
  "&ldquo;": { "codepoints": [8220], "characters": "\u201C" },                                                 // 920
  "&ldquor;": { "codepoints": [8222], "characters": "\u201E" },                                                // 921
  "&ldrdhar;": { "codepoints": [10599], "characters": "\u2967" },                                              // 922
  "&ldrushar;": { "codepoints": [10571], "characters": "\u294B" },                                             // 923
  "&ldsh;": { "codepoints": [8626], "characters": "\u21B2" },                                                  // 924
  "&le;": { "codepoints": [8804], "characters": "\u2264" },                                                    // 925
  "&lE;": { "codepoints": [8806], "characters": "\u2266" },                                                    // 926
  "&LeftAngleBracket;": { "codepoints": [10216], "characters": "\u27E8" },                                     // 927
  "&LeftArrowBar;": { "codepoints": [8676], "characters": "\u21E4" },                                          // 928
  "&leftarrow;": { "codepoints": [8592], "characters": "\u2190" },                                             // 929
  "&LeftArrow;": { "codepoints": [8592], "characters": "\u2190" },                                             // 930
  "&Leftarrow;": { "codepoints": [8656], "characters": "\u21D0" },                                             // 931
  "&LeftArrowRightArrow;": { "codepoints": [8646], "characters": "\u21C6" },                                   // 932
  "&leftarrowtail;": { "codepoints": [8610], "characters": "\u21A2" },                                         // 933
  "&LeftCeiling;": { "codepoints": [8968], "characters": "\u2308" },                                           // 934
  "&LeftDoubleBracket;": { "codepoints": [10214], "characters": "\u27E6" },                                    // 935
  "&LeftDownTeeVector;": { "codepoints": [10593], "characters": "\u2961" },                                    // 936
  "&LeftDownVectorBar;": { "codepoints": [10585], "characters": "\u2959" },                                    // 937
  "&LeftDownVector;": { "codepoints": [8643], "characters": "\u21C3" },                                        // 938
  "&LeftFloor;": { "codepoints": [8970], "characters": "\u230A" },                                             // 939
  "&leftharpoondown;": { "codepoints": [8637], "characters": "\u21BD" },                                       // 940
  "&leftharpoonup;": { "codepoints": [8636], "characters": "\u21BC" },                                         // 941
  "&leftleftarrows;": { "codepoints": [8647], "characters": "\u21C7" },                                        // 942
  "&leftrightarrow;": { "codepoints": [8596], "characters": "\u2194" },                                        // 943
  "&LeftRightArrow;": { "codepoints": [8596], "characters": "\u2194" },                                        // 944
  "&Leftrightarrow;": { "codepoints": [8660], "characters": "\u21D4" },                                        // 945
  "&leftrightarrows;": { "codepoints": [8646], "characters": "\u21C6" },                                       // 946
  "&leftrightharpoons;": { "codepoints": [8651], "characters": "\u21CB" },                                     // 947
  "&leftrightsquigarrow;": { "codepoints": [8621], "characters": "\u21AD" },                                   // 948
  "&LeftRightVector;": { "codepoints": [10574], "characters": "\u294E" },                                      // 949
  "&LeftTeeArrow;": { "codepoints": [8612], "characters": "\u21A4" },                                          // 950
  "&LeftTee;": { "codepoints": [8867], "characters": "\u22A3" },                                               // 951
  "&LeftTeeVector;": { "codepoints": [10586], "characters": "\u295A" },                                        // 952
  "&leftthreetimes;": { "codepoints": [8907], "characters": "\u22CB" },                                        // 953
  "&LeftTriangleBar;": { "codepoints": [10703], "characters": "\u29CF" },                                      // 954
  "&LeftTriangle;": { "codepoints": [8882], "characters": "\u22B2" },                                          // 955
  "&LeftTriangleEqual;": { "codepoints": [8884], "characters": "\u22B4" },                                     // 956
  "&LeftUpDownVector;": { "codepoints": [10577], "characters": "\u2951" },                                     // 957
  "&LeftUpTeeVector;": { "codepoints": [10592], "characters": "\u2960" },                                      // 958
  "&LeftUpVectorBar;": { "codepoints": [10584], "characters": "\u2958" },                                      // 959
  "&LeftUpVector;": { "codepoints": [8639], "characters": "\u21BF" },                                          // 960
  "&LeftVectorBar;": { "codepoints": [10578], "characters": "\u2952" },                                        // 961
  "&LeftVector;": { "codepoints": [8636], "characters": "\u21BC" },                                            // 962
  "&lEg;": { "codepoints": [10891], "characters": "\u2A8B" },                                                  // 963
  "&leg;": { "codepoints": [8922], "characters": "\u22DA" },                                                   // 964
  "&leq;": { "codepoints": [8804], "characters": "\u2264" },                                                   // 965
  "&leqq;": { "codepoints": [8806], "characters": "\u2266" },                                                  // 966
  "&leqslant;": { "codepoints": [10877], "characters": "\u2A7D" },                                             // 967
  "&lescc;": { "codepoints": [10920], "characters": "\u2AA8" },                                                // 968
  "&les;": { "codepoints": [10877], "characters": "\u2A7D" },                                                  // 969
  "&lesdot;": { "codepoints": [10879], "characters": "\u2A7F" },                                               // 970
  "&lesdoto;": { "codepoints": [10881], "characters": "\u2A81" },                                              // 971
  "&lesdotor;": { "codepoints": [10883], "characters": "\u2A83" },                                             // 972
  "&lesg;": { "codepoints": [8922, 65024], "characters": "\u22DA\uFE00" },                                     // 973
  "&lesges;": { "codepoints": [10899], "characters": "\u2A93" },                                               // 974
  "&lessapprox;": { "codepoints": [10885], "characters": "\u2A85" },                                           // 975
  "&lessdot;": { "codepoints": [8918], "characters": "\u22D6" },                                               // 976
  "&lesseqgtr;": { "codepoints": [8922], "characters": "\u22DA" },                                             // 977
  "&lesseqqgtr;": { "codepoints": [10891], "characters": "\u2A8B" },                                           // 978
  "&LessEqualGreater;": { "codepoints": [8922], "characters": "\u22DA" },                                      // 979
  "&LessFullEqual;": { "codepoints": [8806], "characters": "\u2266" },                                         // 980
  "&LessGreater;": { "codepoints": [8822], "characters": "\u2276" },                                           // 981
  "&lessgtr;": { "codepoints": [8822], "characters": "\u2276" },                                               // 982
  "&LessLess;": { "codepoints": [10913], "characters": "\u2AA1" },                                             // 983
  "&lesssim;": { "codepoints": [8818], "characters": "\u2272" },                                               // 984
  "&LessSlantEqual;": { "codepoints": [10877], "characters": "\u2A7D" },                                       // 985
  "&LessTilde;": { "codepoints": [8818], "characters": "\u2272" },                                             // 986
  "&lfisht;": { "codepoints": [10620], "characters": "\u297C" },                                               // 987
  "&lfloor;": { "codepoints": [8970], "characters": "\u230A" },                                                // 988
  "&Lfr;": { "codepoints": [120079], "characters": "\uD835\uDD0F" },                                           // 989
  "&lfr;": { "codepoints": [120105], "characters": "\uD835\uDD29" },                                           // 990
  "&lg;": { "codepoints": [8822], "characters": "\u2276" },                                                    // 991
  "&lgE;": { "codepoints": [10897], "characters": "\u2A91" },                                                  // 992
  "&lHar;": { "codepoints": [10594], "characters": "\u2962" },                                                 // 993
  "&lhard;": { "codepoints": [8637], "characters": "\u21BD" },                                                 // 994
  "&lharu;": { "codepoints": [8636], "characters": "\u21BC" },                                                 // 995
  "&lharul;": { "codepoints": [10602], "characters": "\u296A" },                                               // 996
  "&lhblk;": { "codepoints": [9604], "characters": "\u2584" },                                                 // 997
  "&LJcy;": { "codepoints": [1033], "characters": "\u0409" },                                                  // 998
  "&ljcy;": { "codepoints": [1113], "characters": "\u0459" },                                                  // 999
  "&llarr;": { "codepoints": [8647], "characters": "\u21C7" },                                                 // 1000
  "&ll;": { "codepoints": [8810], "characters": "\u226A" },                                                    // 1001
  "&Ll;": { "codepoints": [8920], "characters": "\u22D8" },                                                    // 1002
  "&llcorner;": { "codepoints": [8990], "characters": "\u231E" },                                              // 1003
  "&Lleftarrow;": { "codepoints": [8666], "characters": "\u21DA" },                                            // 1004
  "&llhard;": { "codepoints": [10603], "characters": "\u296B" },                                               // 1005
  "&lltri;": { "codepoints": [9722], "characters": "\u25FA" },                                                 // 1006
  "&Lmidot;": { "codepoints": [319], "characters": "\u013F" },                                                 // 1007
  "&lmidot;": { "codepoints": [320], "characters": "\u0140" },                                                 // 1008
  "&lmoustache;": { "codepoints": [9136], "characters": "\u23B0" },                                            // 1009
  "&lmoust;": { "codepoints": [9136], "characters": "\u23B0" },                                                // 1010
  "&lnap;": { "codepoints": [10889], "characters": "\u2A89" },                                                 // 1011
  "&lnapprox;": { "codepoints": [10889], "characters": "\u2A89" },                                             // 1012
  "&lne;": { "codepoints": [10887], "characters": "\u2A87" },                                                  // 1013
  "&lnE;": { "codepoints": [8808], "characters": "\u2268" },                                                   // 1014
  "&lneq;": { "codepoints": [10887], "characters": "\u2A87" },                                                 // 1015
  "&lneqq;": { "codepoints": [8808], "characters": "\u2268" },                                                 // 1016
  "&lnsim;": { "codepoints": [8934], "characters": "\u22E6" },                                                 // 1017
  "&loang;": { "codepoints": [10220], "characters": "\u27EC" },                                                // 1018
  "&loarr;": { "codepoints": [8701], "characters": "\u21FD" },                                                 // 1019
  "&lobrk;": { "codepoints": [10214], "characters": "\u27E6" },                                                // 1020
  "&longleftarrow;": { "codepoints": [10229], "characters": "\u27F5" },                                        // 1021
  "&LongLeftArrow;": { "codepoints": [10229], "characters": "\u27F5" },                                        // 1022
  "&Longleftarrow;": { "codepoints": [10232], "characters": "\u27F8" },                                        // 1023
  "&longleftrightarrow;": { "codepoints": [10231], "characters": "\u27F7" },                                   // 1024
  "&LongLeftRightArrow;": { "codepoints": [10231], "characters": "\u27F7" },                                   // 1025
  "&Longleftrightarrow;": { "codepoints": [10234], "characters": "\u27FA" },                                   // 1026
  "&longmapsto;": { "codepoints": [10236], "characters": "\u27FC" },                                           // 1027
  "&longrightarrow;": { "codepoints": [10230], "characters": "\u27F6" },                                       // 1028
  "&LongRightArrow;": { "codepoints": [10230], "characters": "\u27F6" },                                       // 1029
  "&Longrightarrow;": { "codepoints": [10233], "characters": "\u27F9" },                                       // 1030
  "&looparrowleft;": { "codepoints": [8619], "characters": "\u21AB" },                                         // 1031
  "&looparrowright;": { "codepoints": [8620], "characters": "\u21AC" },                                        // 1032
  "&lopar;": { "codepoints": [10629], "characters": "\u2985" },                                                // 1033
  "&Lopf;": { "codepoints": [120131], "characters": "\uD835\uDD43" },                                          // 1034
  "&lopf;": { "codepoints": [120157], "characters": "\uD835\uDD5D" },                                          // 1035
  "&loplus;": { "codepoints": [10797], "characters": "\u2A2D" },                                               // 1036
  "&lotimes;": { "codepoints": [10804], "characters": "\u2A34" },                                              // 1037
  "&lowast;": { "codepoints": [8727], "characters": "\u2217" },                                                // 1038
  "&lowbar;": { "codepoints": [95], "characters": "\u005F" },                                                  // 1039
  "&LowerLeftArrow;": { "codepoints": [8601], "characters": "\u2199" },                                        // 1040
  "&LowerRightArrow;": { "codepoints": [8600], "characters": "\u2198" },                                       // 1041
  "&loz;": { "codepoints": [9674], "characters": "\u25CA" },                                                   // 1042
  "&lozenge;": { "codepoints": [9674], "characters": "\u25CA" },                                               // 1043
  "&lozf;": { "codepoints": [10731], "characters": "\u29EB" },                                                 // 1044
  "&lpar;": { "codepoints": [40], "characters": "\u0028" },                                                    // 1045
  "&lparlt;": { "codepoints": [10643], "characters": "\u2993" },                                               // 1046
  "&lrarr;": { "codepoints": [8646], "characters": "\u21C6" },                                                 // 1047
  "&lrcorner;": { "codepoints": [8991], "characters": "\u231F" },                                              // 1048
  "&lrhar;": { "codepoints": [8651], "characters": "\u21CB" },                                                 // 1049
  "&lrhard;": { "codepoints": [10605], "characters": "\u296D" },                                               // 1050
  "&lrm;": { "codepoints": [8206], "characters": "\u200E" },                                                   // 1051
  "&lrtri;": { "codepoints": [8895], "characters": "\u22BF" },                                                 // 1052
  "&lsaquo;": { "codepoints": [8249], "characters": "\u2039" },                                                // 1053
  "&lscr;": { "codepoints": [120001], "characters": "\uD835\uDCC1" },                                          // 1054
  "&Lscr;": { "codepoints": [8466], "characters": "\u2112" },                                                  // 1055
  "&lsh;": { "codepoints": [8624], "characters": "\u21B0" },                                                   // 1056
  "&Lsh;": { "codepoints": [8624], "characters": "\u21B0" },                                                   // 1057
  "&lsim;": { "codepoints": [8818], "characters": "\u2272" },                                                  // 1058
  "&lsime;": { "codepoints": [10893], "characters": "\u2A8D" },                                                // 1059
  "&lsimg;": { "codepoints": [10895], "characters": "\u2A8F" },                                                // 1060
  "&lsqb;": { "codepoints": [91], "characters": "\u005B" },                                                    // 1061
  "&lsquo;": { "codepoints": [8216], "characters": "\u2018" },                                                 // 1062
  "&lsquor;": { "codepoints": [8218], "characters": "\u201A" },                                                // 1063
  "&Lstrok;": { "codepoints": [321], "characters": "\u0141" },                                                 // 1064
  "&lstrok;": { "codepoints": [322], "characters": "\u0142" },                                                 // 1065
  "&ltcc;": { "codepoints": [10918], "characters": "\u2AA6" },                                                 // 1066
  "&ltcir;": { "codepoints": [10873], "characters": "\u2A79" },                                                // 1067
  "&lt;": { "codepoints": [60], "characters": "\u003C" },                                                      // 1068
  "&lt": { "codepoints": [60], "characters": "\u003C" },                                                       // 1069
  "&LT;": { "codepoints": [60], "characters": "\u003C" },                                                      // 1070
  "&LT": { "codepoints": [60], "characters": "\u003C" },                                                       // 1071
  "&Lt;": { "codepoints": [8810], "characters": "\u226A" },                                                    // 1072
  "&ltdot;": { "codepoints": [8918], "characters": "\u22D6" },                                                 // 1073
  "&lthree;": { "codepoints": [8907], "characters": "\u22CB" },                                                // 1074
  "&ltimes;": { "codepoints": [8905], "characters": "\u22C9" },                                                // 1075
  "&ltlarr;": { "codepoints": [10614], "characters": "\u2976" },                                               // 1076
  "&ltquest;": { "codepoints": [10875], "characters": "\u2A7B" },                                              // 1077
  "&ltri;": { "codepoints": [9667], "characters": "\u25C3" },                                                  // 1078
  "&ltrie;": { "codepoints": [8884], "characters": "\u22B4" },                                                 // 1079
  "&ltrif;": { "codepoints": [9666], "characters": "\u25C2" },                                                 // 1080
  "&ltrPar;": { "codepoints": [10646], "characters": "\u2996" },                                               // 1081
  "&lurdshar;": { "codepoints": [10570], "characters": "\u294A" },                                             // 1082
  "&luruhar;": { "codepoints": [10598], "characters": "\u2966" },                                              // 1083
  "&lvertneqq;": { "codepoints": [8808, 65024], "characters": "\u2268\uFE00" },                                // 1084
  "&lvnE;": { "codepoints": [8808, 65024], "characters": "\u2268\uFE00" },                                     // 1085
  "&macr;": { "codepoints": [175], "characters": "\u00AF" },                                                   // 1086
  "&macr": { "codepoints": [175], "characters": "\u00AF" },                                                    // 1087
  "&male;": { "codepoints": [9794], "characters": "\u2642" },                                                  // 1088
  "&malt;": { "codepoints": [10016], "characters": "\u2720" },                                                 // 1089
  "&maltese;": { "codepoints": [10016], "characters": "\u2720" },                                              // 1090
  "&Map;": { "codepoints": [10501], "characters": "\u2905" },                                                  // 1091
  "&map;": { "codepoints": [8614], "characters": "\u21A6" },                                                   // 1092
  "&mapsto;": { "codepoints": [8614], "characters": "\u21A6" },                                                // 1093
  "&mapstodown;": { "codepoints": [8615], "characters": "\u21A7" },                                            // 1094
  "&mapstoleft;": { "codepoints": [8612], "characters": "\u21A4" },                                            // 1095
  "&mapstoup;": { "codepoints": [8613], "characters": "\u21A5" },                                              // 1096
  "&marker;": { "codepoints": [9646], "characters": "\u25AE" },                                                // 1097
  "&mcomma;": { "codepoints": [10793], "characters": "\u2A29" },                                               // 1098
  "&Mcy;": { "codepoints": [1052], "characters": "\u041C" },                                                   // 1099
  "&mcy;": { "codepoints": [1084], "characters": "\u043C" },                                                   // 1100
  "&mdash;": { "codepoints": [8212], "characters": "\u2014" },                                                 // 1101
  "&mDDot;": { "codepoints": [8762], "characters": "\u223A" },                                                 // 1102
  "&measuredangle;": { "codepoints": [8737], "characters": "\u2221" },                                         // 1103
  "&MediumSpace;": { "codepoints": [8287], "characters": "\u205F" },                                           // 1104
  "&Mellintrf;": { "codepoints": [8499], "characters": "\u2133" },                                             // 1105
  "&Mfr;": { "codepoints": [120080], "characters": "\uD835\uDD10" },                                           // 1106
  "&mfr;": { "codepoints": [120106], "characters": "\uD835\uDD2A" },                                           // 1107
  "&mho;": { "codepoints": [8487], "characters": "\u2127" },                                                   // 1108
  "&micro;": { "codepoints": [181], "characters": "\u00B5" },                                                  // 1109
  "&micro": { "codepoints": [181], "characters": "\u00B5" },                                                   // 1110
  "&midast;": { "codepoints": [42], "characters": "\u002A" },                                                  // 1111
  "&midcir;": { "codepoints": [10992], "characters": "\u2AF0" },                                               // 1112
  "&mid;": { "codepoints": [8739], "characters": "\u2223" },                                                   // 1113
  "&middot;": { "codepoints": [183], "characters": "\u00B7" },                                                 // 1114
  "&middot": { "codepoints": [183], "characters": "\u00B7" },                                                  // 1115
  "&minusb;": { "codepoints": [8863], "characters": "\u229F" },                                                // 1116
  "&minus;": { "codepoints": [8722], "characters": "\u2212" },                                                 // 1117
  "&minusd;": { "codepoints": [8760], "characters": "\u2238" },                                                // 1118
  "&minusdu;": { "codepoints": [10794], "characters": "\u2A2A" },                                              // 1119
  "&MinusPlus;": { "codepoints": [8723], "characters": "\u2213" },                                             // 1120
  "&mlcp;": { "codepoints": [10971], "characters": "\u2ADB" },                                                 // 1121
  "&mldr;": { "codepoints": [8230], "characters": "\u2026" },                                                  // 1122
  "&mnplus;": { "codepoints": [8723], "characters": "\u2213" },                                                // 1123
  "&models;": { "codepoints": [8871], "characters": "\u22A7" },                                                // 1124
  "&Mopf;": { "codepoints": [120132], "characters": "\uD835\uDD44" },                                          // 1125
  "&mopf;": { "codepoints": [120158], "characters": "\uD835\uDD5E" },                                          // 1126
  "&mp;": { "codepoints": [8723], "characters": "\u2213" },                                                    // 1127
  "&mscr;": { "codepoints": [120002], "characters": "\uD835\uDCC2" },                                          // 1128
  "&Mscr;": { "codepoints": [8499], "characters": "\u2133" },                                                  // 1129
  "&mstpos;": { "codepoints": [8766], "characters": "\u223E" },                                                // 1130
  "&Mu;": { "codepoints": [924], "characters": "\u039C" },                                                     // 1131
  "&mu;": { "codepoints": [956], "characters": "\u03BC" },                                                     // 1132
  "&multimap;": { "codepoints": [8888], "characters": "\u22B8" },                                              // 1133
  "&mumap;": { "codepoints": [8888], "characters": "\u22B8" },                                                 // 1134
  "&nabla;": { "codepoints": [8711], "characters": "\u2207" },                                                 // 1135
  "&Nacute;": { "codepoints": [323], "characters": "\u0143" },                                                 // 1136
  "&nacute;": { "codepoints": [324], "characters": "\u0144" },                                                 // 1137
  "&nang;": { "codepoints": [8736, 8402], "characters": "\u2220\u20D2" },                                      // 1138
  "&nap;": { "codepoints": [8777], "characters": "\u2249" },                                                   // 1139
  "&napE;": { "codepoints": [10864, 824], "characters": "\u2A70\u0338" },                                      // 1140
  "&napid;": { "codepoints": [8779, 824], "characters": "\u224B\u0338" },                                      // 1141
  "&napos;": { "codepoints": [329], "characters": "\u0149" },                                                  // 1142
  "&napprox;": { "codepoints": [8777], "characters": "\u2249" },                                               // 1143
  "&natural;": { "codepoints": [9838], "characters": "\u266E" },                                               // 1144
  "&naturals;": { "codepoints": [8469], "characters": "\u2115" },                                              // 1145
  "&natur;": { "codepoints": [9838], "characters": "\u266E" },                                                 // 1146
  "&nbsp;": { "codepoints": [160], "characters": "\u00A0" },                                                   // 1147
  "&nbsp": { "codepoints": [160], "characters": "\u00A0" },                                                    // 1148
  "&nbump;": { "codepoints": [8782, 824], "characters": "\u224E\u0338" },                                      // 1149
  "&nbumpe;": { "codepoints": [8783, 824], "characters": "\u224F\u0338" },                                     // 1150
  "&ncap;": { "codepoints": [10819], "characters": "\u2A43" },                                                 // 1151
  "&Ncaron;": { "codepoints": [327], "characters": "\u0147" },                                                 // 1152
  "&ncaron;": { "codepoints": [328], "characters": "\u0148" },                                                 // 1153
  "&Ncedil;": { "codepoints": [325], "characters": "\u0145" },                                                 // 1154
  "&ncedil;": { "codepoints": [326], "characters": "\u0146" },                                                 // 1155
  "&ncong;": { "codepoints": [8775], "characters": "\u2247" },                                                 // 1156
  "&ncongdot;": { "codepoints": [10861, 824], "characters": "\u2A6D\u0338" },                                  // 1157
  "&ncup;": { "codepoints": [10818], "characters": "\u2A42" },                                                 // 1158
  "&Ncy;": { "codepoints": [1053], "characters": "\u041D" },                                                   // 1159
  "&ncy;": { "codepoints": [1085], "characters": "\u043D" },                                                   // 1160
  "&ndash;": { "codepoints": [8211], "characters": "\u2013" },                                                 // 1161
  "&nearhk;": { "codepoints": [10532], "characters": "\u2924" },                                               // 1162
  "&nearr;": { "codepoints": [8599], "characters": "\u2197" },                                                 // 1163
  "&neArr;": { "codepoints": [8663], "characters": "\u21D7" },                                                 // 1164
  "&nearrow;": { "codepoints": [8599], "characters": "\u2197" },                                               // 1165
  "&ne;": { "codepoints": [8800], "characters": "\u2260" },                                                    // 1166
  "&nedot;": { "codepoints": [8784, 824], "characters": "\u2250\u0338" },                                      // 1167
  "&NegativeMediumSpace;": { "codepoints": [8203], "characters": "\u200B" },                                   // 1168
  "&NegativeThickSpace;": { "codepoints": [8203], "characters": "\u200B" },                                    // 1169
  "&NegativeThinSpace;": { "codepoints": [8203], "characters": "\u200B" },                                     // 1170
  "&NegativeVeryThinSpace;": { "codepoints": [8203], "characters": "\u200B" },                                 // 1171
  "&nequiv;": { "codepoints": [8802], "characters": "\u2262" },                                                // 1172
  "&nesear;": { "codepoints": [10536], "characters": "\u2928" },                                               // 1173
  "&nesim;": { "codepoints": [8770, 824], "characters": "\u2242\u0338" },                                      // 1174
  "&NestedGreaterGreater;": { "codepoints": [8811], "characters": "\u226B" },                                  // 1175
  "&NestedLessLess;": { "codepoints": [8810], "characters": "\u226A" },                                        // 1176
  "&NewLine;": { "codepoints": [10], "characters": "\u000A" },                                                 // 1177
  "&nexist;": { "codepoints": [8708], "characters": "\u2204" },                                                // 1178
  "&nexists;": { "codepoints": [8708], "characters": "\u2204" },                                               // 1179
  "&Nfr;": { "codepoints": [120081], "characters": "\uD835\uDD11" },                                           // 1180
  "&nfr;": { "codepoints": [120107], "characters": "\uD835\uDD2B" },                                           // 1181
  "&ngE;": { "codepoints": [8807, 824], "characters": "\u2267\u0338" },                                        // 1182
  "&nge;": { "codepoints": [8817], "characters": "\u2271" },                                                   // 1183
  "&ngeq;": { "codepoints": [8817], "characters": "\u2271" },                                                  // 1184
  "&ngeqq;": { "codepoints": [8807, 824], "characters": "\u2267\u0338" },                                      // 1185
  "&ngeqslant;": { "codepoints": [10878, 824], "characters": "\u2A7E\u0338" },                                 // 1186
  "&nges;": { "codepoints": [10878, 824], "characters": "\u2A7E\u0338" },                                      // 1187
  "&nGg;": { "codepoints": [8921, 824], "characters": "\u22D9\u0338" },                                        // 1188
  "&ngsim;": { "codepoints": [8821], "characters": "\u2275" },                                                 // 1189
  "&nGt;": { "codepoints": [8811, 8402], "characters": "\u226B\u20D2" },                                       // 1190
  "&ngt;": { "codepoints": [8815], "characters": "\u226F" },                                                   // 1191
  "&ngtr;": { "codepoints": [8815], "characters": "\u226F" },                                                  // 1192
  "&nGtv;": { "codepoints": [8811, 824], "characters": "\u226B\u0338" },                                       // 1193
  "&nharr;": { "codepoints": [8622], "characters": "\u21AE" },                                                 // 1194
  "&nhArr;": { "codepoints": [8654], "characters": "\u21CE" },                                                 // 1195
  "&nhpar;": { "codepoints": [10994], "characters": "\u2AF2" },                                                // 1196
  "&ni;": { "codepoints": [8715], "characters": "\u220B" },                                                    // 1197
  "&nis;": { "codepoints": [8956], "characters": "\u22FC" },                                                   // 1198
  "&nisd;": { "codepoints": [8954], "characters": "\u22FA" },                                                  // 1199
  "&niv;": { "codepoints": [8715], "characters": "\u220B" },                                                   // 1200
  "&NJcy;": { "codepoints": [1034], "characters": "\u040A" },                                                  // 1201
  "&njcy;": { "codepoints": [1114], "characters": "\u045A" },                                                  // 1202
  "&nlarr;": { "codepoints": [8602], "characters": "\u219A" },                                                 // 1203
  "&nlArr;": { "codepoints": [8653], "characters": "\u21CD" },                                                 // 1204
  "&nldr;": { "codepoints": [8229], "characters": "\u2025" },                                                  // 1205
  "&nlE;": { "codepoints": [8806, 824], "characters": "\u2266\u0338" },                                        // 1206
  "&nle;": { "codepoints": [8816], "characters": "\u2270" },                                                   // 1207
  "&nleftarrow;": { "codepoints": [8602], "characters": "\u219A" },                                            // 1208
  "&nLeftarrow;": { "codepoints": [8653], "characters": "\u21CD" },                                            // 1209
  "&nleftrightarrow;": { "codepoints": [8622], "characters": "\u21AE" },                                       // 1210
  "&nLeftrightarrow;": { "codepoints": [8654], "characters": "\u21CE" },                                       // 1211
  "&nleq;": { "codepoints": [8816], "characters": "\u2270" },                                                  // 1212
  "&nleqq;": { "codepoints": [8806, 824], "characters": "\u2266\u0338" },                                      // 1213
  "&nleqslant;": { "codepoints": [10877, 824], "characters": "\u2A7D\u0338" },                                 // 1214
  "&nles;": { "codepoints": [10877, 824], "characters": "\u2A7D\u0338" },                                      // 1215
  "&nless;": { "codepoints": [8814], "characters": "\u226E" },                                                 // 1216
  "&nLl;": { "codepoints": [8920, 824], "characters": "\u22D8\u0338" },                                        // 1217
  "&nlsim;": { "codepoints": [8820], "characters": "\u2274" },                                                 // 1218
  "&nLt;": { "codepoints": [8810, 8402], "characters": "\u226A\u20D2" },                                       // 1219
  "&nlt;": { "codepoints": [8814], "characters": "\u226E" },                                                   // 1220
  "&nltri;": { "codepoints": [8938], "characters": "\u22EA" },                                                 // 1221
  "&nltrie;": { "codepoints": [8940], "characters": "\u22EC" },                                                // 1222
  "&nLtv;": { "codepoints": [8810, 824], "characters": "\u226A\u0338" },                                       // 1223
  "&nmid;": { "codepoints": [8740], "characters": "\u2224" },                                                  // 1224
  "&NoBreak;": { "codepoints": [8288], "characters": "\u2060" },                                               // 1225
  "&NonBreakingSpace;": { "codepoints": [160], "characters": "\u00A0" },                                       // 1226
  "&nopf;": { "codepoints": [120159], "characters": "\uD835\uDD5F" },                                          // 1227
  "&Nopf;": { "codepoints": [8469], "characters": "\u2115" },                                                  // 1228
  "&Not;": { "codepoints": [10988], "characters": "\u2AEC" },                                                  // 1229
  "&not;": { "codepoints": [172], "characters": "\u00AC" },                                                    // 1230
  "&not": { "codepoints": [172], "characters": "\u00AC" },                                                     // 1231
  "&NotCongruent;": { "codepoints": [8802], "characters": "\u2262" },                                          // 1232
  "&NotCupCap;": { "codepoints": [8813], "characters": "\u226D" },                                             // 1233
  "&NotDoubleVerticalBar;": { "codepoints": [8742], "characters": "\u2226" },                                  // 1234
  "&NotElement;": { "codepoints": [8713], "characters": "\u2209" },                                            // 1235
  "&NotEqual;": { "codepoints": [8800], "characters": "\u2260" },                                              // 1236
  "&NotEqualTilde;": { "codepoints": [8770, 824], "characters": "\u2242\u0338" },                              // 1237
  "&NotExists;": { "codepoints": [8708], "characters": "\u2204" },                                             // 1238
  "&NotGreater;": { "codepoints": [8815], "characters": "\u226F" },                                            // 1239
  "&NotGreaterEqual;": { "codepoints": [8817], "characters": "\u2271" },                                       // 1240
  "&NotGreaterFullEqual;": { "codepoints": [8807, 824], "characters": "\u2267\u0338" },                        // 1241
  "&NotGreaterGreater;": { "codepoints": [8811, 824], "characters": "\u226B\u0338" },                          // 1242
  "&NotGreaterLess;": { "codepoints": [8825], "characters": "\u2279" },                                        // 1243
  "&NotGreaterSlantEqual;": { "codepoints": [10878, 824], "characters": "\u2A7E\u0338" },                      // 1244
  "&NotGreaterTilde;": { "codepoints": [8821], "characters": "\u2275" },                                       // 1245
  "&NotHumpDownHump;": { "codepoints": [8782, 824], "characters": "\u224E\u0338" },                            // 1246
  "&NotHumpEqual;": { "codepoints": [8783, 824], "characters": "\u224F\u0338" },                               // 1247
  "&notin;": { "codepoints": [8713], "characters": "\u2209" },                                                 // 1248
  "&notindot;": { "codepoints": [8949, 824], "characters": "\u22F5\u0338" },                                   // 1249
  "&notinE;": { "codepoints": [8953, 824], "characters": "\u22F9\u0338" },                                     // 1250
  "&notinva;": { "codepoints": [8713], "characters": "\u2209" },                                               // 1251
  "&notinvb;": { "codepoints": [8951], "characters": "\u22F7" },                                               // 1252
  "&notinvc;": { "codepoints": [8950], "characters": "\u22F6" },                                               // 1253
  "&NotLeftTriangleBar;": { "codepoints": [10703, 824], "characters": "\u29CF\u0338" },                        // 1254
  "&NotLeftTriangle;": { "codepoints": [8938], "characters": "\u22EA" },                                       // 1255
  "&NotLeftTriangleEqual;": { "codepoints": [8940], "characters": "\u22EC" },                                  // 1256
  "&NotLess;": { "codepoints": [8814], "characters": "\u226E" },                                               // 1257
  "&NotLessEqual;": { "codepoints": [8816], "characters": "\u2270" },                                          // 1258
  "&NotLessGreater;": { "codepoints": [8824], "characters": "\u2278" },                                        // 1259
  "&NotLessLess;": { "codepoints": [8810, 824], "characters": "\u226A\u0338" },                                // 1260
  "&NotLessSlantEqual;": { "codepoints": [10877, 824], "characters": "\u2A7D\u0338" },                         // 1261
  "&NotLessTilde;": { "codepoints": [8820], "characters": "\u2274" },                                          // 1262
  "&NotNestedGreaterGreater;": { "codepoints": [10914, 824], "characters": "\u2AA2\u0338" },                   // 1263
  "&NotNestedLessLess;": { "codepoints": [10913, 824], "characters": "\u2AA1\u0338" },                         // 1264
  "&notni;": { "codepoints": [8716], "characters": "\u220C" },                                                 // 1265
  "&notniva;": { "codepoints": [8716], "characters": "\u220C" },                                               // 1266
  "&notnivb;": { "codepoints": [8958], "characters": "\u22FE" },                                               // 1267
  "&notnivc;": { "codepoints": [8957], "characters": "\u22FD" },                                               // 1268
  "&NotPrecedes;": { "codepoints": [8832], "characters": "\u2280" },                                           // 1269
  "&NotPrecedesEqual;": { "codepoints": [10927, 824], "characters": "\u2AAF\u0338" },                          // 1270
  "&NotPrecedesSlantEqual;": { "codepoints": [8928], "characters": "\u22E0" },                                 // 1271
  "&NotReverseElement;": { "codepoints": [8716], "characters": "\u220C" },                                     // 1272
  "&NotRightTriangleBar;": { "codepoints": [10704, 824], "characters": "\u29D0\u0338" },                       // 1273
  "&NotRightTriangle;": { "codepoints": [8939], "characters": "\u22EB" },                                      // 1274
  "&NotRightTriangleEqual;": { "codepoints": [8941], "characters": "\u22ED" },                                 // 1275
  "&NotSquareSubset;": { "codepoints": [8847, 824], "characters": "\u228F\u0338" },                            // 1276
  "&NotSquareSubsetEqual;": { "codepoints": [8930], "characters": "\u22E2" },                                  // 1277
  "&NotSquareSuperset;": { "codepoints": [8848, 824], "characters": "\u2290\u0338" },                          // 1278
  "&NotSquareSupersetEqual;": { "codepoints": [8931], "characters": "\u22E3" },                                // 1279
  "&NotSubset;": { "codepoints": [8834, 8402], "characters": "\u2282\u20D2" },                                 // 1280
  "&NotSubsetEqual;": { "codepoints": [8840], "characters": "\u2288" },                                        // 1281
  "&NotSucceeds;": { "codepoints": [8833], "characters": "\u2281" },                                           // 1282
  "&NotSucceedsEqual;": { "codepoints": [10928, 824], "characters": "\u2AB0\u0338" },                          // 1283
  "&NotSucceedsSlantEqual;": { "codepoints": [8929], "characters": "\u22E1" },                                 // 1284
  "&NotSucceedsTilde;": { "codepoints": [8831, 824], "characters": "\u227F\u0338" },                           // 1285
  "&NotSuperset;": { "codepoints": [8835, 8402], "characters": "\u2283\u20D2" },                               // 1286
  "&NotSupersetEqual;": { "codepoints": [8841], "characters": "\u2289" },                                      // 1287
  "&NotTilde;": { "codepoints": [8769], "characters": "\u2241" },                                              // 1288
  "&NotTildeEqual;": { "codepoints": [8772], "characters": "\u2244" },                                         // 1289
  "&NotTildeFullEqual;": { "codepoints": [8775], "characters": "\u2247" },                                     // 1290
  "&NotTildeTilde;": { "codepoints": [8777], "characters": "\u2249" },                                         // 1291
  "&NotVerticalBar;": { "codepoints": [8740], "characters": "\u2224" },                                        // 1292
  "&nparallel;": { "codepoints": [8742], "characters": "\u2226" },                                             // 1293
  "&npar;": { "codepoints": [8742], "characters": "\u2226" },                                                  // 1294
  "&nparsl;": { "codepoints": [11005, 8421], "characters": "\u2AFD\u20E5" },                                   // 1295
  "&npart;": { "codepoints": [8706, 824], "characters": "\u2202\u0338" },                                      // 1296
  "&npolint;": { "codepoints": [10772], "characters": "\u2A14" },                                              // 1297
  "&npr;": { "codepoints": [8832], "characters": "\u2280" },                                                   // 1298
  "&nprcue;": { "codepoints": [8928], "characters": "\u22E0" },                                                // 1299
  "&nprec;": { "codepoints": [8832], "characters": "\u2280" },                                                 // 1300
  "&npreceq;": { "codepoints": [10927, 824], "characters": "\u2AAF\u0338" },                                   // 1301
  "&npre;": { "codepoints": [10927, 824], "characters": "\u2AAF\u0338" },                                      // 1302
  "&nrarrc;": { "codepoints": [10547, 824], "characters": "\u2933\u0338" },                                    // 1303
  "&nrarr;": { "codepoints": [8603], "characters": "\u219B" },                                                 // 1304
  "&nrArr;": { "codepoints": [8655], "characters": "\u21CF" },                                                 // 1305
  "&nrarrw;": { "codepoints": [8605, 824], "characters": "\u219D\u0338" },                                     // 1306
  "&nrightarrow;": { "codepoints": [8603], "characters": "\u219B" },                                           // 1307
  "&nRightarrow;": { "codepoints": [8655], "characters": "\u21CF" },                                           // 1308
  "&nrtri;": { "codepoints": [8939], "characters": "\u22EB" },                                                 // 1309
  "&nrtrie;": { "codepoints": [8941], "characters": "\u22ED" },                                                // 1310
  "&nsc;": { "codepoints": [8833], "characters": "\u2281" },                                                   // 1311
  "&nsccue;": { "codepoints": [8929], "characters": "\u22E1" },                                                // 1312
  "&nsce;": { "codepoints": [10928, 824], "characters": "\u2AB0\u0338" },                                      // 1313
  "&Nscr;": { "codepoints": [119977], "characters": "\uD835\uDCA9" },                                          // 1314
  "&nscr;": { "codepoints": [120003], "characters": "\uD835\uDCC3" },                                          // 1315
  "&nshortmid;": { "codepoints": [8740], "characters": "\u2224" },                                             // 1316
  "&nshortparallel;": { "codepoints": [8742], "characters": "\u2226" },                                        // 1317
  "&nsim;": { "codepoints": [8769], "characters": "\u2241" },                                                  // 1318
  "&nsime;": { "codepoints": [8772], "characters": "\u2244" },                                                 // 1319
  "&nsimeq;": { "codepoints": [8772], "characters": "\u2244" },                                                // 1320
  "&nsmid;": { "codepoints": [8740], "characters": "\u2224" },                                                 // 1321
  "&nspar;": { "codepoints": [8742], "characters": "\u2226" },                                                 // 1322
  "&nsqsube;": { "codepoints": [8930], "characters": "\u22E2" },                                               // 1323
  "&nsqsupe;": { "codepoints": [8931], "characters": "\u22E3" },                                               // 1324
  "&nsub;": { "codepoints": [8836], "characters": "\u2284" },                                                  // 1325
  "&nsubE;": { "codepoints": [10949, 824], "characters": "\u2AC5\u0338" },                                     // 1326
  "&nsube;": { "codepoints": [8840], "characters": "\u2288" },                                                 // 1327
  "&nsubset;": { "codepoints": [8834, 8402], "characters": "\u2282\u20D2" },                                   // 1328
  "&nsubseteq;": { "codepoints": [8840], "characters": "\u2288" },                                             // 1329
  "&nsubseteqq;": { "codepoints": [10949, 824], "characters": "\u2AC5\u0338" },                                // 1330
  "&nsucc;": { "codepoints": [8833], "characters": "\u2281" },                                                 // 1331
  "&nsucceq;": { "codepoints": [10928, 824], "characters": "\u2AB0\u0338" },                                   // 1332
  "&nsup;": { "codepoints": [8837], "characters": "\u2285" },                                                  // 1333
  "&nsupE;": { "codepoints": [10950, 824], "characters": "\u2AC6\u0338" },                                     // 1334
  "&nsupe;": { "codepoints": [8841], "characters": "\u2289" },                                                 // 1335
  "&nsupset;": { "codepoints": [8835, 8402], "characters": "\u2283\u20D2" },                                   // 1336
  "&nsupseteq;": { "codepoints": [8841], "characters": "\u2289" },                                             // 1337
  "&nsupseteqq;": { "codepoints": [10950, 824], "characters": "\u2AC6\u0338" },                                // 1338
  "&ntgl;": { "codepoints": [8825], "characters": "\u2279" },                                                  // 1339
  "&Ntilde;": { "codepoints": [209], "characters": "\u00D1" },                                                 // 1340
  "&Ntilde": { "codepoints": [209], "characters": "\u00D1" },                                                  // 1341
  "&ntilde;": { "codepoints": [241], "characters": "\u00F1" },                                                 // 1342
  "&ntilde": { "codepoints": [241], "characters": "\u00F1" },                                                  // 1343
  "&ntlg;": { "codepoints": [8824], "characters": "\u2278" },                                                  // 1344
  "&ntriangleleft;": { "codepoints": [8938], "characters": "\u22EA" },                                         // 1345
  "&ntrianglelefteq;": { "codepoints": [8940], "characters": "\u22EC" },                                       // 1346
  "&ntriangleright;": { "codepoints": [8939], "characters": "\u22EB" },                                        // 1347
  "&ntrianglerighteq;": { "codepoints": [8941], "characters": "\u22ED" },                                      // 1348
  "&Nu;": { "codepoints": [925], "characters": "\u039D" },                                                     // 1349
  "&nu;": { "codepoints": [957], "characters": "\u03BD" },                                                     // 1350
  "&num;": { "codepoints": [35], "characters": "\u0023" },                                                     // 1351
  "&numero;": { "codepoints": [8470], "characters": "\u2116" },                                                // 1352
  "&numsp;": { "codepoints": [8199], "characters": "\u2007" },                                                 // 1353
  "&nvap;": { "codepoints": [8781, 8402], "characters": "\u224D\u20D2" },                                      // 1354
  "&nvdash;": { "codepoints": [8876], "characters": "\u22AC" },                                                // 1355
  "&nvDash;": { "codepoints": [8877], "characters": "\u22AD" },                                                // 1356
  "&nVdash;": { "codepoints": [8878], "characters": "\u22AE" },                                                // 1357
  "&nVDash;": { "codepoints": [8879], "characters": "\u22AF" },                                                // 1358
  "&nvge;": { "codepoints": [8805, 8402], "characters": "\u2265\u20D2" },                                      // 1359
  "&nvgt;": { "codepoints": [62, 8402], "characters": "\u003E\u20D2" },                                        // 1360
  "&nvHarr;": { "codepoints": [10500], "characters": "\u2904" },                                               // 1361
  "&nvinfin;": { "codepoints": [10718], "characters": "\u29DE" },                                              // 1362
  "&nvlArr;": { "codepoints": [10498], "characters": "\u2902" },                                               // 1363
  "&nvle;": { "codepoints": [8804, 8402], "characters": "\u2264\u20D2" },                                      // 1364
  "&nvlt;": { "codepoints": [60, 8402], "characters": "\u003C\u20D2" },                                        // 1365
  "&nvltrie;": { "codepoints": [8884, 8402], "characters": "\u22B4\u20D2" },                                   // 1366
  "&nvrArr;": { "codepoints": [10499], "characters": "\u2903" },                                               // 1367
  "&nvrtrie;": { "codepoints": [8885, 8402], "characters": "\u22B5\u20D2" },                                   // 1368
  "&nvsim;": { "codepoints": [8764, 8402], "characters": "\u223C\u20D2" },                                     // 1369
  "&nwarhk;": { "codepoints": [10531], "characters": "\u2923" },                                               // 1370
  "&nwarr;": { "codepoints": [8598], "characters": "\u2196" },                                                 // 1371
  "&nwArr;": { "codepoints": [8662], "characters": "\u21D6" },                                                 // 1372
  "&nwarrow;": { "codepoints": [8598], "characters": "\u2196" },                                               // 1373
  "&nwnear;": { "codepoints": [10535], "characters": "\u2927" },                                               // 1374
  "&Oacute;": { "codepoints": [211], "characters": "\u00D3" },                                                 // 1375
  "&Oacute": { "codepoints": [211], "characters": "\u00D3" },                                                  // 1376
  "&oacute;": { "codepoints": [243], "characters": "\u00F3" },                                                 // 1377
  "&oacute": { "codepoints": [243], "characters": "\u00F3" },                                                  // 1378
  "&oast;": { "codepoints": [8859], "characters": "\u229B" },                                                  // 1379
  "&Ocirc;": { "codepoints": [212], "characters": "\u00D4" },                                                  // 1380
  "&Ocirc": { "codepoints": [212], "characters": "\u00D4" },                                                   // 1381
  "&ocirc;": { "codepoints": [244], "characters": "\u00F4" },                                                  // 1382
  "&ocirc": { "codepoints": [244], "characters": "\u00F4" },                                                   // 1383
  "&ocir;": { "codepoints": [8858], "characters": "\u229A" },                                                  // 1384
  "&Ocy;": { "codepoints": [1054], "characters": "\u041E" },                                                   // 1385
  "&ocy;": { "codepoints": [1086], "characters": "\u043E" },                                                   // 1386
  "&odash;": { "codepoints": [8861], "characters": "\u229D" },                                                 // 1387
  "&Odblac;": { "codepoints": [336], "characters": "\u0150" },                                                 // 1388
  "&odblac;": { "codepoints": [337], "characters": "\u0151" },                                                 // 1389
  "&odiv;": { "codepoints": [10808], "characters": "\u2A38" },                                                 // 1390
  "&odot;": { "codepoints": [8857], "characters": "\u2299" },                                                  // 1391
  "&odsold;": { "codepoints": [10684], "characters": "\u29BC" },                                               // 1392
  "&OElig;": { "codepoints": [338], "characters": "\u0152" },                                                  // 1393
  "&oelig;": { "codepoints": [339], "characters": "\u0153" },                                                  // 1394
  "&ofcir;": { "codepoints": [10687], "characters": "\u29BF" },                                                // 1395
  "&Ofr;": { "codepoints": [120082], "characters": "\uD835\uDD12" },                                           // 1396
  "&ofr;": { "codepoints": [120108], "characters": "\uD835\uDD2C" },                                           // 1397
  "&ogon;": { "codepoints": [731], "characters": "\u02DB" },                                                   // 1398
  "&Ograve;": { "codepoints": [210], "characters": "\u00D2" },                                                 // 1399
  "&Ograve": { "codepoints": [210], "characters": "\u00D2" },                                                  // 1400
  "&ograve;": { "codepoints": [242], "characters": "\u00F2" },                                                 // 1401
  "&ograve": { "codepoints": [242], "characters": "\u00F2" },                                                  // 1402
  "&ogt;": { "codepoints": [10689], "characters": "\u29C1" },                                                  // 1403
  "&ohbar;": { "codepoints": [10677], "characters": "\u29B5" },                                                // 1404
  "&ohm;": { "codepoints": [937], "characters": "\u03A9" },                                                    // 1405
  "&oint;": { "codepoints": [8750], "characters": "\u222E" },                                                  // 1406
  "&olarr;": { "codepoints": [8634], "characters": "\u21BA" },                                                 // 1407
  "&olcir;": { "codepoints": [10686], "characters": "\u29BE" },                                                // 1408
  "&olcross;": { "codepoints": [10683], "characters": "\u29BB" },                                              // 1409
  "&oline;": { "codepoints": [8254], "characters": "\u203E" },                                                 // 1410
  "&olt;": { "codepoints": [10688], "characters": "\u29C0" },                                                  // 1411
  "&Omacr;": { "codepoints": [332], "characters": "\u014C" },                                                  // 1412
  "&omacr;": { "codepoints": [333], "characters": "\u014D" },                                                  // 1413
  "&Omega;": { "codepoints": [937], "characters": "\u03A9" },                                                  // 1414
  "&omega;": { "codepoints": [969], "characters": "\u03C9" },                                                  // 1415
  "&Omicron;": { "codepoints": [927], "characters": "\u039F" },                                                // 1416
  "&omicron;": { "codepoints": [959], "characters": "\u03BF" },                                                // 1417
  "&omid;": { "codepoints": [10678], "characters": "\u29B6" },                                                 // 1418
  "&ominus;": { "codepoints": [8854], "characters": "\u2296" },                                                // 1419
  "&Oopf;": { "codepoints": [120134], "characters": "\uD835\uDD46" },                                          // 1420
  "&oopf;": { "codepoints": [120160], "characters": "\uD835\uDD60" },                                          // 1421
  "&opar;": { "codepoints": [10679], "characters": "\u29B7" },                                                 // 1422
  "&OpenCurlyDoubleQuote;": { "codepoints": [8220], "characters": "\u201C" },                                  // 1423
  "&OpenCurlyQuote;": { "codepoints": [8216], "characters": "\u2018" },                                        // 1424
  "&operp;": { "codepoints": [10681], "characters": "\u29B9" },                                                // 1425
  "&oplus;": { "codepoints": [8853], "characters": "\u2295" },                                                 // 1426
  "&orarr;": { "codepoints": [8635], "characters": "\u21BB" },                                                 // 1427
  "&Or;": { "codepoints": [10836], "characters": "\u2A54" },                                                   // 1428
  "&or;": { "codepoints": [8744], "characters": "\u2228" },                                                    // 1429
  "&ord;": { "codepoints": [10845], "characters": "\u2A5D" },                                                  // 1430
  "&order;": { "codepoints": [8500], "characters": "\u2134" },                                                 // 1431
  "&orderof;": { "codepoints": [8500], "characters": "\u2134" },                                               // 1432
  "&ordf;": { "codepoints": [170], "characters": "\u00AA" },                                                   // 1433
  "&ordf": { "codepoints": [170], "characters": "\u00AA" },                                                    // 1434
  "&ordm;": { "codepoints": [186], "characters": "\u00BA" },                                                   // 1435
  "&ordm": { "codepoints": [186], "characters": "\u00BA" },                                                    // 1436
  "&origof;": { "codepoints": [8886], "characters": "\u22B6" },                                                // 1437
  "&oror;": { "codepoints": [10838], "characters": "\u2A56" },                                                 // 1438
  "&orslope;": { "codepoints": [10839], "characters": "\u2A57" },                                              // 1439
  "&orv;": { "codepoints": [10843], "characters": "\u2A5B" },                                                  // 1440
  "&oS;": { "codepoints": [9416], "characters": "\u24C8" },                                                    // 1441
  "&Oscr;": { "codepoints": [119978], "characters": "\uD835\uDCAA" },                                          // 1442
  "&oscr;": { "codepoints": [8500], "characters": "\u2134" },                                                  // 1443
  "&Oslash;": { "codepoints": [216], "characters": "\u00D8" },                                                 // 1444
  "&Oslash": { "codepoints": [216], "characters": "\u00D8" },                                                  // 1445
  "&oslash;": { "codepoints": [248], "characters": "\u00F8" },                                                 // 1446
  "&oslash": { "codepoints": [248], "characters": "\u00F8" },                                                  // 1447
  "&osol;": { "codepoints": [8856], "characters": "\u2298" },                                                  // 1448
  "&Otilde;": { "codepoints": [213], "characters": "\u00D5" },                                                 // 1449
  "&Otilde": { "codepoints": [213], "characters": "\u00D5" },                                                  // 1450
  "&otilde;": { "codepoints": [245], "characters": "\u00F5" },                                                 // 1451
  "&otilde": { "codepoints": [245], "characters": "\u00F5" },                                                  // 1452
  "&otimesas;": { "codepoints": [10806], "characters": "\u2A36" },                                             // 1453
  "&Otimes;": { "codepoints": [10807], "characters": "\u2A37" },                                               // 1454
  "&otimes;": { "codepoints": [8855], "characters": "\u2297" },                                                // 1455
  "&Ouml;": { "codepoints": [214], "characters": "\u00D6" },                                                   // 1456
  "&Ouml": { "codepoints": [214], "characters": "\u00D6" },                                                    // 1457
  "&ouml;": { "codepoints": [246], "characters": "\u00F6" },                                                   // 1458
  "&ouml": { "codepoints": [246], "characters": "\u00F6" },                                                    // 1459
  "&ovbar;": { "codepoints": [9021], "characters": "\u233D" },                                                 // 1460
  "&OverBar;": { "codepoints": [8254], "characters": "\u203E" },                                               // 1461
  "&OverBrace;": { "codepoints": [9182], "characters": "\u23DE" },                                             // 1462
  "&OverBracket;": { "codepoints": [9140], "characters": "\u23B4" },                                           // 1463
  "&OverParenthesis;": { "codepoints": [9180], "characters": "\u23DC" },                                       // 1464
  "&para;": { "codepoints": [182], "characters": "\u00B6" },                                                   // 1465
  "&para": { "codepoints": [182], "characters": "\u00B6" },                                                    // 1466
  "&parallel;": { "codepoints": [8741], "characters": "\u2225" },                                              // 1467
  "&par;": { "codepoints": [8741], "characters": "\u2225" },                                                   // 1468
  "&parsim;": { "codepoints": [10995], "characters": "\u2AF3" },                                               // 1469
  "&parsl;": { "codepoints": [11005], "characters": "\u2AFD" },                                                // 1470
  "&part;": { "codepoints": [8706], "characters": "\u2202" },                                                  // 1471
  "&PartialD;": { "codepoints": [8706], "characters": "\u2202" },                                              // 1472
  "&Pcy;": { "codepoints": [1055], "characters": "\u041F" },                                                   // 1473
  "&pcy;": { "codepoints": [1087], "characters": "\u043F" },                                                   // 1474
  "&percnt;": { "codepoints": [37], "characters": "\u0025" },                                                  // 1475
  "&period;": { "codepoints": [46], "characters": "\u002E" },                                                  // 1476
  "&permil;": { "codepoints": [8240], "characters": "\u2030" },                                                // 1477
  "&perp;": { "codepoints": [8869], "characters": "\u22A5" },                                                  // 1478
  "&pertenk;": { "codepoints": [8241], "characters": "\u2031" },                                               // 1479
  "&Pfr;": { "codepoints": [120083], "characters": "\uD835\uDD13" },                                           // 1480
  "&pfr;": { "codepoints": [120109], "characters": "\uD835\uDD2D" },                                           // 1481
  "&Phi;": { "codepoints": [934], "characters": "\u03A6" },                                                    // 1482
  "&phi;": { "codepoints": [966], "characters": "\u03C6" },                                                    // 1483
  "&phiv;": { "codepoints": [981], "characters": "\u03D5" },                                                   // 1484
  "&phmmat;": { "codepoints": [8499], "characters": "\u2133" },                                                // 1485
  "&phone;": { "codepoints": [9742], "characters": "\u260E" },                                                 // 1486
  "&Pi;": { "codepoints": [928], "characters": "\u03A0" },                                                     // 1487
  "&pi;": { "codepoints": [960], "characters": "\u03C0" },                                                     // 1488
  "&pitchfork;": { "codepoints": [8916], "characters": "\u22D4" },                                             // 1489
  "&piv;": { "codepoints": [982], "characters": "\u03D6" },                                                    // 1490
  "&planck;": { "codepoints": [8463], "characters": "\u210F" },                                                // 1491
  "&planckh;": { "codepoints": [8462], "characters": "\u210E" },                                               // 1492
  "&plankv;": { "codepoints": [8463], "characters": "\u210F" },                                                // 1493
  "&plusacir;": { "codepoints": [10787], "characters": "\u2A23" },                                             // 1494
  "&plusb;": { "codepoints": [8862], "characters": "\u229E" },                                                 // 1495
  "&pluscir;": { "codepoints": [10786], "characters": "\u2A22" },                                              // 1496
  "&plus;": { "codepoints": [43], "characters": "\u002B" },                                                    // 1497
  "&plusdo;": { "codepoints": [8724], "characters": "\u2214" },                                                // 1498
  "&plusdu;": { "codepoints": [10789], "characters": "\u2A25" },                                               // 1499
  "&pluse;": { "codepoints": [10866], "characters": "\u2A72" },                                                // 1500
  "&PlusMinus;": { "codepoints": [177], "characters": "\u00B1" },                                              // 1501
  "&plusmn;": { "codepoints": [177], "characters": "\u00B1" },                                                 // 1502
  "&plusmn": { "codepoints": [177], "characters": "\u00B1" },                                                  // 1503
  "&plussim;": { "codepoints": [10790], "characters": "\u2A26" },                                              // 1504
  "&plustwo;": { "codepoints": [10791], "characters": "\u2A27" },                                              // 1505
  "&pm;": { "codepoints": [177], "characters": "\u00B1" },                                                     // 1506
  "&Poincareplane;": { "codepoints": [8460], "characters": "\u210C" },                                         // 1507
  "&pointint;": { "codepoints": [10773], "characters": "\u2A15" },                                             // 1508
  "&popf;": { "codepoints": [120161], "characters": "\uD835\uDD61" },                                          // 1509
  "&Popf;": { "codepoints": [8473], "characters": "\u2119" },                                                  // 1510
  "&pound;": { "codepoints": [163], "characters": "\u00A3" },                                                  // 1511
  "&pound": { "codepoints": [163], "characters": "\u00A3" },                                                   // 1512
  "&prap;": { "codepoints": [10935], "characters": "\u2AB7" },                                                 // 1513
  "&Pr;": { "codepoints": [10939], "characters": "\u2ABB" },                                                   // 1514
  "&pr;": { "codepoints": [8826], "characters": "\u227A" },                                                    // 1515
  "&prcue;": { "codepoints": [8828], "characters": "\u227C" },                                                 // 1516
  "&precapprox;": { "codepoints": [10935], "characters": "\u2AB7" },                                           // 1517
  "&prec;": { "codepoints": [8826], "characters": "\u227A" },                                                  // 1518
  "&preccurlyeq;": { "codepoints": [8828], "characters": "\u227C" },                                           // 1519
  "&Precedes;": { "codepoints": [8826], "characters": "\u227A" },                                              // 1520
  "&PrecedesEqual;": { "codepoints": [10927], "characters": "\u2AAF" },                                        // 1521
  "&PrecedesSlantEqual;": { "codepoints": [8828], "characters": "\u227C" },                                    // 1522
  "&PrecedesTilde;": { "codepoints": [8830], "characters": "\u227E" },                                         // 1523
  "&preceq;": { "codepoints": [10927], "characters": "\u2AAF" },                                               // 1524
  "&precnapprox;": { "codepoints": [10937], "characters": "\u2AB9" },                                          // 1525
  "&precneqq;": { "codepoints": [10933], "characters": "\u2AB5" },                                             // 1526
  "&precnsim;": { "codepoints": [8936], "characters": "\u22E8" },                                              // 1527
  "&pre;": { "codepoints": [10927], "characters": "\u2AAF" },                                                  // 1528
  "&prE;": { "codepoints": [10931], "characters": "\u2AB3" },                                                  // 1529
  "&precsim;": { "codepoints": [8830], "characters": "\u227E" },                                               // 1530
  "&prime;": { "codepoints": [8242], "characters": "\u2032" },                                                 // 1531
  "&Prime;": { "codepoints": [8243], "characters": "\u2033" },                                                 // 1532
  "&primes;": { "codepoints": [8473], "characters": "\u2119" },                                                // 1533
  "&prnap;": { "codepoints": [10937], "characters": "\u2AB9" },                                                // 1534
  "&prnE;": { "codepoints": [10933], "characters": "\u2AB5" },                                                 // 1535
  "&prnsim;": { "codepoints": [8936], "characters": "\u22E8" },                                                // 1536
  "&prod;": { "codepoints": [8719], "characters": "\u220F" },                                                  // 1537
  "&Product;": { "codepoints": [8719], "characters": "\u220F" },                                               // 1538
  "&profalar;": { "codepoints": [9006], "characters": "\u232E" },                                              // 1539
  "&profline;": { "codepoints": [8978], "characters": "\u2312" },                                              // 1540
  "&profsurf;": { "codepoints": [8979], "characters": "\u2313" },                                              // 1541
  "&prop;": { "codepoints": [8733], "characters": "\u221D" },                                                  // 1542
  "&Proportional;": { "codepoints": [8733], "characters": "\u221D" },                                          // 1543
  "&Proportion;": { "codepoints": [8759], "characters": "\u2237" },                                            // 1544
  "&propto;": { "codepoints": [8733], "characters": "\u221D" },                                                // 1545
  "&prsim;": { "codepoints": [8830], "characters": "\u227E" },                                                 // 1546
  "&prurel;": { "codepoints": [8880], "characters": "\u22B0" },                                                // 1547
  "&Pscr;": { "codepoints": [119979], "characters": "\uD835\uDCAB" },                                          // 1548
  "&pscr;": { "codepoints": [120005], "characters": "\uD835\uDCC5" },                                          // 1549
  "&Psi;": { "codepoints": [936], "characters": "\u03A8" },                                                    // 1550
  "&psi;": { "codepoints": [968], "characters": "\u03C8" },                                                    // 1551
  "&puncsp;": { "codepoints": [8200], "characters": "\u2008" },                                                // 1552
  "&Qfr;": { "codepoints": [120084], "characters": "\uD835\uDD14" },                                           // 1553
  "&qfr;": { "codepoints": [120110], "characters": "\uD835\uDD2E" },                                           // 1554
  "&qint;": { "codepoints": [10764], "characters": "\u2A0C" },                                                 // 1555
  "&qopf;": { "codepoints": [120162], "characters": "\uD835\uDD62" },                                          // 1556
  "&Qopf;": { "codepoints": [8474], "characters": "\u211A" },                                                  // 1557
  "&qprime;": { "codepoints": [8279], "characters": "\u2057" },                                                // 1558
  "&Qscr;": { "codepoints": [119980], "characters": "\uD835\uDCAC" },                                          // 1559
  "&qscr;": { "codepoints": [120006], "characters": "\uD835\uDCC6" },                                          // 1560
  "&quaternions;": { "codepoints": [8461], "characters": "\u210D" },                                           // 1561
  "&quatint;": { "codepoints": [10774], "characters": "\u2A16" },                                              // 1562
  "&quest;": { "codepoints": [63], "characters": "\u003F" },                                                   // 1563
  "&questeq;": { "codepoints": [8799], "characters": "\u225F" },                                               // 1564
  "&quot;": { "codepoints": [34], "characters": "\u0022" },                                                    // 1565
  "&quot": { "codepoints": [34], "characters": "\u0022" },                                                     // 1566
  "&QUOT;": { "codepoints": [34], "characters": "\u0022" },                                                    // 1567
  "&QUOT": { "codepoints": [34], "characters": "\u0022" },                                                     // 1568
  "&rAarr;": { "codepoints": [8667], "characters": "\u21DB" },                                                 // 1569
  "&race;": { "codepoints": [8765, 817], "characters": "\u223D\u0331" },                                       // 1570
  "&Racute;": { "codepoints": [340], "characters": "\u0154" },                                                 // 1571
  "&racute;": { "codepoints": [341], "characters": "\u0155" },                                                 // 1572
  "&radic;": { "codepoints": [8730], "characters": "\u221A" },                                                 // 1573
  "&raemptyv;": { "codepoints": [10675], "characters": "\u29B3" },                                             // 1574
  "&rang;": { "codepoints": [10217], "characters": "\u27E9" },                                                 // 1575
  "&Rang;": { "codepoints": [10219], "characters": "\u27EB" },                                                 // 1576
  "&rangd;": { "codepoints": [10642], "characters": "\u2992" },                                                // 1577
  "&range;": { "codepoints": [10661], "characters": "\u29A5" },                                                // 1578
  "&rangle;": { "codepoints": [10217], "characters": "\u27E9" },                                               // 1579
  "&raquo;": { "codepoints": [187], "characters": "\u00BB" },                                                  // 1580
  "&raquo": { "codepoints": [187], "characters": "\u00BB" },                                                   // 1581
  "&rarrap;": { "codepoints": [10613], "characters": "\u2975" },                                               // 1582
  "&rarrb;": { "codepoints": [8677], "characters": "\u21E5" },                                                 // 1583
  "&rarrbfs;": { "codepoints": [10528], "characters": "\u2920" },                                              // 1584
  "&rarrc;": { "codepoints": [10547], "characters": "\u2933" },                                                // 1585
  "&rarr;": { "codepoints": [8594], "characters": "\u2192" },                                                  // 1586
  "&Rarr;": { "codepoints": [8608], "characters": "\u21A0" },                                                  // 1587
  "&rArr;": { "codepoints": [8658], "characters": "\u21D2" },                                                  // 1588
  "&rarrfs;": { "codepoints": [10526], "characters": "\u291E" },                                               // 1589
  "&rarrhk;": { "codepoints": [8618], "characters": "\u21AA" },                                                // 1590
  "&rarrlp;": { "codepoints": [8620], "characters": "\u21AC" },                                                // 1591
  "&rarrpl;": { "codepoints": [10565], "characters": "\u2945" },                                               // 1592
  "&rarrsim;": { "codepoints": [10612], "characters": "\u2974" },                                              // 1593
  "&Rarrtl;": { "codepoints": [10518], "characters": "\u2916" },                                               // 1594
  "&rarrtl;": { "codepoints": [8611], "characters": "\u21A3" },                                                // 1595
  "&rarrw;": { "codepoints": [8605], "characters": "\u219D" },                                                 // 1596
  "&ratail;": { "codepoints": [10522], "characters": "\u291A" },                                               // 1597
  "&rAtail;": { "codepoints": [10524], "characters": "\u291C" },                                               // 1598
  "&ratio;": { "codepoints": [8758], "characters": "\u2236" },                                                 // 1599
  "&rationals;": { "codepoints": [8474], "characters": "\u211A" },                                             // 1600
  "&rbarr;": { "codepoints": [10509], "characters": "\u290D" },                                                // 1601
  "&rBarr;": { "codepoints": [10511], "characters": "\u290F" },                                                // 1602
  "&RBarr;": { "codepoints": [10512], "characters": "\u2910" },                                                // 1603
  "&rbbrk;": { "codepoints": [10099], "characters": "\u2773" },                                                // 1604
  "&rbrace;": { "codepoints": [125], "characters": "\u007D" },                                                 // 1605
  "&rbrack;": { "codepoints": [93], "characters": "\u005D" },                                                  // 1606
  "&rbrke;": { "codepoints": [10636], "characters": "\u298C" },                                                // 1607
  "&rbrksld;": { "codepoints": [10638], "characters": "\u298E" },                                              // 1608
  "&rbrkslu;": { "codepoints": [10640], "characters": "\u2990" },                                              // 1609
  "&Rcaron;": { "codepoints": [344], "characters": "\u0158" },                                                 // 1610
  "&rcaron;": { "codepoints": [345], "characters": "\u0159" },                                                 // 1611
  "&Rcedil;": { "codepoints": [342], "characters": "\u0156" },                                                 // 1612
  "&rcedil;": { "codepoints": [343], "characters": "\u0157" },                                                 // 1613
  "&rceil;": { "codepoints": [8969], "characters": "\u2309" },                                                 // 1614
  "&rcub;": { "codepoints": [125], "characters": "\u007D" },                                                   // 1615
  "&Rcy;": { "codepoints": [1056], "characters": "\u0420" },                                                   // 1616
  "&rcy;": { "codepoints": [1088], "characters": "\u0440" },                                                   // 1617
  "&rdca;": { "codepoints": [10551], "characters": "\u2937" },                                                 // 1618
  "&rdldhar;": { "codepoints": [10601], "characters": "\u2969" },                                              // 1619
  "&rdquo;": { "codepoints": [8221], "characters": "\u201D" },                                                 // 1620
  "&rdquor;": { "codepoints": [8221], "characters": "\u201D" },                                                // 1621
  "&rdsh;": { "codepoints": [8627], "characters": "\u21B3" },                                                  // 1622
  "&real;": { "codepoints": [8476], "characters": "\u211C" },                                                  // 1623
  "&realine;": { "codepoints": [8475], "characters": "\u211B" },                                               // 1624
  "&realpart;": { "codepoints": [8476], "characters": "\u211C" },                                              // 1625
  "&reals;": { "codepoints": [8477], "characters": "\u211D" },                                                 // 1626
  "&Re;": { "codepoints": [8476], "characters": "\u211C" },                                                    // 1627
  "&rect;": { "codepoints": [9645], "characters": "\u25AD" },                                                  // 1628
  "&reg;": { "codepoints": [174], "characters": "\u00AE" },                                                    // 1629
  "&reg": { "codepoints": [174], "characters": "\u00AE" },                                                     // 1630
  "&REG;": { "codepoints": [174], "characters": "\u00AE" },                                                    // 1631
  "&REG": { "codepoints": [174], "characters": "\u00AE" },                                                     // 1632
  "&ReverseElement;": { "codepoints": [8715], "characters": "\u220B" },                                        // 1633
  "&ReverseEquilibrium;": { "codepoints": [8651], "characters": "\u21CB" },                                    // 1634
  "&ReverseUpEquilibrium;": { "codepoints": [10607], "characters": "\u296F" },                                 // 1635
  "&rfisht;": { "codepoints": [10621], "characters": "\u297D" },                                               // 1636
  "&rfloor;": { "codepoints": [8971], "characters": "\u230B" },                                                // 1637
  "&rfr;": { "codepoints": [120111], "characters": "\uD835\uDD2F" },                                           // 1638
  "&Rfr;": { "codepoints": [8476], "characters": "\u211C" },                                                   // 1639
  "&rHar;": { "codepoints": [10596], "characters": "\u2964" },                                                 // 1640
  "&rhard;": { "codepoints": [8641], "characters": "\u21C1" },                                                 // 1641
  "&rharu;": { "codepoints": [8640], "characters": "\u21C0" },                                                 // 1642
  "&rharul;": { "codepoints": [10604], "characters": "\u296C" },                                               // 1643
  "&Rho;": { "codepoints": [929], "characters": "\u03A1" },                                                    // 1644
  "&rho;": { "codepoints": [961], "characters": "\u03C1" },                                                    // 1645
  "&rhov;": { "codepoints": [1009], "characters": "\u03F1" },                                                  // 1646
  "&RightAngleBracket;": { "codepoints": [10217], "characters": "\u27E9" },                                    // 1647
  "&RightArrowBar;": { "codepoints": [8677], "characters": "\u21E5" },                                         // 1648
  "&rightarrow;": { "codepoints": [8594], "characters": "\u2192" },                                            // 1649
  "&RightArrow;": { "codepoints": [8594], "characters": "\u2192" },                                            // 1650
  "&Rightarrow;": { "codepoints": [8658], "characters": "\u21D2" },                                            // 1651
  "&RightArrowLeftArrow;": { "codepoints": [8644], "characters": "\u21C4" },                                   // 1652
  "&rightarrowtail;": { "codepoints": [8611], "characters": "\u21A3" },                                        // 1653
  "&RightCeiling;": { "codepoints": [8969], "characters": "\u2309" },                                          // 1654
  "&RightDoubleBracket;": { "codepoints": [10215], "characters": "\u27E7" },                                   // 1655
  "&RightDownTeeVector;": { "codepoints": [10589], "characters": "\u295D" },                                   // 1656
  "&RightDownVectorBar;": { "codepoints": [10581], "characters": "\u2955" },                                   // 1657
  "&RightDownVector;": { "codepoints": [8642], "characters": "\u21C2" },                                       // 1658
  "&RightFloor;": { "codepoints": [8971], "characters": "\u230B" },                                            // 1659
  "&rightharpoondown;": { "codepoints": [8641], "characters": "\u21C1" },                                      // 1660
  "&rightharpoonup;": { "codepoints": [8640], "characters": "\u21C0" },                                        // 1661
  "&rightleftarrows;": { "codepoints": [8644], "characters": "\u21C4" },                                       // 1662
  "&rightleftharpoons;": { "codepoints": [8652], "characters": "\u21CC" },                                     // 1663
  "&rightrightarrows;": { "codepoints": [8649], "characters": "\u21C9" },                                      // 1664
  "&rightsquigarrow;": { "codepoints": [8605], "characters": "\u219D" },                                       // 1665
  "&RightTeeArrow;": { "codepoints": [8614], "characters": "\u21A6" },                                         // 1666
  "&RightTee;": { "codepoints": [8866], "characters": "\u22A2" },                                              // 1667
  "&RightTeeVector;": { "codepoints": [10587], "characters": "\u295B" },                                       // 1668
  "&rightthreetimes;": { "codepoints": [8908], "characters": "\u22CC" },                                       // 1669
  "&RightTriangleBar;": { "codepoints": [10704], "characters": "\u29D0" },                                     // 1670
  "&RightTriangle;": { "codepoints": [8883], "characters": "\u22B3" },                                         // 1671
  "&RightTriangleEqual;": { "codepoints": [8885], "characters": "\u22B5" },                                    // 1672
  "&RightUpDownVector;": { "codepoints": [10575], "characters": "\u294F" },                                    // 1673
  "&RightUpTeeVector;": { "codepoints": [10588], "characters": "\u295C" },                                     // 1674
  "&RightUpVectorBar;": { "codepoints": [10580], "characters": "\u2954" },                                     // 1675
  "&RightUpVector;": { "codepoints": [8638], "characters": "\u21BE" },                                         // 1676
  "&RightVectorBar;": { "codepoints": [10579], "characters": "\u2953" },                                       // 1677
  "&RightVector;": { "codepoints": [8640], "characters": "\u21C0" },                                           // 1678
  "&ring;": { "codepoints": [730], "characters": "\u02DA" },                                                   // 1679
  "&risingdotseq;": { "codepoints": [8787], "characters": "\u2253" },                                          // 1680
  "&rlarr;": { "codepoints": [8644], "characters": "\u21C4" },                                                 // 1681
  "&rlhar;": { "codepoints": [8652], "characters": "\u21CC" },                                                 // 1682
  "&rlm;": { "codepoints": [8207], "characters": "\u200F" },                                                   // 1683
  "&rmoustache;": { "codepoints": [9137], "characters": "\u23B1" },                                            // 1684
  "&rmoust;": { "codepoints": [9137], "characters": "\u23B1" },                                                // 1685
  "&rnmid;": { "codepoints": [10990], "characters": "\u2AEE" },                                                // 1686
  "&roang;": { "codepoints": [10221], "characters": "\u27ED" },                                                // 1687
  "&roarr;": { "codepoints": [8702], "characters": "\u21FE" },                                                 // 1688
  "&robrk;": { "codepoints": [10215], "characters": "\u27E7" },                                                // 1689
  "&ropar;": { "codepoints": [10630], "characters": "\u2986" },                                                // 1690
  "&ropf;": { "codepoints": [120163], "characters": "\uD835\uDD63" },                                          // 1691
  "&Ropf;": { "codepoints": [8477], "characters": "\u211D" },                                                  // 1692
  "&roplus;": { "codepoints": [10798], "characters": "\u2A2E" },                                               // 1693
  "&rotimes;": { "codepoints": [10805], "characters": "\u2A35" },                                              // 1694
  "&RoundImplies;": { "codepoints": [10608], "characters": "\u2970" },                                         // 1695
  "&rpar;": { "codepoints": [41], "characters": "\u0029" },                                                    // 1696
  "&rpargt;": { "codepoints": [10644], "characters": "\u2994" },                                               // 1697
  "&rppolint;": { "codepoints": [10770], "characters": "\u2A12" },                                             // 1698
  "&rrarr;": { "codepoints": [8649], "characters": "\u21C9" },                                                 // 1699
  "&Rrightarrow;": { "codepoints": [8667], "characters": "\u21DB" },                                           // 1700
  "&rsaquo;": { "codepoints": [8250], "characters": "\u203A" },                                                // 1701
  "&rscr;": { "codepoints": [120007], "characters": "\uD835\uDCC7" },                                          // 1702
  "&Rscr;": { "codepoints": [8475], "characters": "\u211B" },                                                  // 1703
  "&rsh;": { "codepoints": [8625], "characters": "\u21B1" },                                                   // 1704
  "&Rsh;": { "codepoints": [8625], "characters": "\u21B1" },                                                   // 1705
  "&rsqb;": { "codepoints": [93], "characters": "\u005D" },                                                    // 1706
  "&rsquo;": { "codepoints": [8217], "characters": "\u2019" },                                                 // 1707
  "&rsquor;": { "codepoints": [8217], "characters": "\u2019" },                                                // 1708
  "&rthree;": { "codepoints": [8908], "characters": "\u22CC" },                                                // 1709
  "&rtimes;": { "codepoints": [8906], "characters": "\u22CA" },                                                // 1710
  "&rtri;": { "codepoints": [9657], "characters": "\u25B9" },                                                  // 1711
  "&rtrie;": { "codepoints": [8885], "characters": "\u22B5" },                                                 // 1712
  "&rtrif;": { "codepoints": [9656], "characters": "\u25B8" },                                                 // 1713
  "&rtriltri;": { "codepoints": [10702], "characters": "\u29CE" },                                             // 1714
  "&RuleDelayed;": { "codepoints": [10740], "characters": "\u29F4" },                                          // 1715
  "&ruluhar;": { "codepoints": [10600], "characters": "\u2968" },                                              // 1716
  "&rx;": { "codepoints": [8478], "characters": "\u211E" },                                                    // 1717
  "&Sacute;": { "codepoints": [346], "characters": "\u015A" },                                                 // 1718
  "&sacute;": { "codepoints": [347], "characters": "\u015B" },                                                 // 1719
  "&sbquo;": { "codepoints": [8218], "characters": "\u201A" },                                                 // 1720
  "&scap;": { "codepoints": [10936], "characters": "\u2AB8" },                                                 // 1721
  "&Scaron;": { "codepoints": [352], "characters": "\u0160" },                                                 // 1722
  "&scaron;": { "codepoints": [353], "characters": "\u0161" },                                                 // 1723
  "&Sc;": { "codepoints": [10940], "characters": "\u2ABC" },                                                   // 1724
  "&sc;": { "codepoints": [8827], "characters": "\u227B" },                                                    // 1725
  "&sccue;": { "codepoints": [8829], "characters": "\u227D" },                                                 // 1726
  "&sce;": { "codepoints": [10928], "characters": "\u2AB0" },                                                  // 1727
  "&scE;": { "codepoints": [10932], "characters": "\u2AB4" },                                                  // 1728
  "&Scedil;": { "codepoints": [350], "characters": "\u015E" },                                                 // 1729
  "&scedil;": { "codepoints": [351], "characters": "\u015F" },                                                 // 1730
  "&Scirc;": { "codepoints": [348], "characters": "\u015C" },                                                  // 1731
  "&scirc;": { "codepoints": [349], "characters": "\u015D" },                                                  // 1732
  "&scnap;": { "codepoints": [10938], "characters": "\u2ABA" },                                                // 1733
  "&scnE;": { "codepoints": [10934], "characters": "\u2AB6" },                                                 // 1734
  "&scnsim;": { "codepoints": [8937], "characters": "\u22E9" },                                                // 1735
  "&scpolint;": { "codepoints": [10771], "characters": "\u2A13" },                                             // 1736
  "&scsim;": { "codepoints": [8831], "characters": "\u227F" },                                                 // 1737
  "&Scy;": { "codepoints": [1057], "characters": "\u0421" },                                                   // 1738
  "&scy;": { "codepoints": [1089], "characters": "\u0441" },                                                   // 1739
  "&sdotb;": { "codepoints": [8865], "characters": "\u22A1" },                                                 // 1740
  "&sdot;": { "codepoints": [8901], "characters": "\u22C5" },                                                  // 1741
  "&sdote;": { "codepoints": [10854], "characters": "\u2A66" },                                                // 1742
  "&searhk;": { "codepoints": [10533], "characters": "\u2925" },                                               // 1743
  "&searr;": { "codepoints": [8600], "characters": "\u2198" },                                                 // 1744
  "&seArr;": { "codepoints": [8664], "characters": "\u21D8" },                                                 // 1745
  "&searrow;": { "codepoints": [8600], "characters": "\u2198" },                                               // 1746
  "&sect;": { "codepoints": [167], "characters": "\u00A7" },                                                   // 1747
  "&sect": { "codepoints": [167], "characters": "\u00A7" },                                                    // 1748
  "&semi;": { "codepoints": [59], "characters": "\u003B" },                                                    // 1749
  "&seswar;": { "codepoints": [10537], "characters": "\u2929" },                                               // 1750
  "&setminus;": { "codepoints": [8726], "characters": "\u2216" },                                              // 1751
  "&setmn;": { "codepoints": [8726], "characters": "\u2216" },                                                 // 1752
  "&sext;": { "codepoints": [10038], "characters": "\u2736" },                                                 // 1753
  "&Sfr;": { "codepoints": [120086], "characters": "\uD835\uDD16" },                                           // 1754
  "&sfr;": { "codepoints": [120112], "characters": "\uD835\uDD30" },                                           // 1755
  "&sfrown;": { "codepoints": [8994], "characters": "\u2322" },                                                // 1756
  "&sharp;": { "codepoints": [9839], "characters": "\u266F" },                                                 // 1757
  "&SHCHcy;": { "codepoints": [1065], "characters": "\u0429" },                                                // 1758
  "&shchcy;": { "codepoints": [1097], "characters": "\u0449" },                                                // 1759
  "&SHcy;": { "codepoints": [1064], "characters": "\u0428" },                                                  // 1760
  "&shcy;": { "codepoints": [1096], "characters": "\u0448" },                                                  // 1761
  "&ShortDownArrow;": { "codepoints": [8595], "characters": "\u2193" },                                        // 1762
  "&ShortLeftArrow;": { "codepoints": [8592], "characters": "\u2190" },                                        // 1763
  "&shortmid;": { "codepoints": [8739], "characters": "\u2223" },                                              // 1764
  "&shortparallel;": { "codepoints": [8741], "characters": "\u2225" },                                         // 1765
  "&ShortRightArrow;": { "codepoints": [8594], "characters": "\u2192" },                                       // 1766
  "&ShortUpArrow;": { "codepoints": [8593], "characters": "\u2191" },                                          // 1767
  "&shy;": { "codepoints": [173], "characters": "\u00AD" },                                                    // 1768
  "&shy": { "codepoints": [173], "characters": "\u00AD" },                                                     // 1769
  "&Sigma;": { "codepoints": [931], "characters": "\u03A3" },                                                  // 1770
  "&sigma;": { "codepoints": [963], "characters": "\u03C3" },                                                  // 1771
  "&sigmaf;": { "codepoints": [962], "characters": "\u03C2" },                                                 // 1772
  "&sigmav;": { "codepoints": [962], "characters": "\u03C2" },                                                 // 1773
  "&sim;": { "codepoints": [8764], "characters": "\u223C" },                                                   // 1774
  "&simdot;": { "codepoints": [10858], "characters": "\u2A6A" },                                               // 1775
  "&sime;": { "codepoints": [8771], "characters": "\u2243" },                                                  // 1776
  "&simeq;": { "codepoints": [8771], "characters": "\u2243" },                                                 // 1777
  "&simg;": { "codepoints": [10910], "characters": "\u2A9E" },                                                 // 1778
  "&simgE;": { "codepoints": [10912], "characters": "\u2AA0" },                                                // 1779
  "&siml;": { "codepoints": [10909], "characters": "\u2A9D" },                                                 // 1780
  "&simlE;": { "codepoints": [10911], "characters": "\u2A9F" },                                                // 1781
  "&simne;": { "codepoints": [8774], "characters": "\u2246" },                                                 // 1782
  "&simplus;": { "codepoints": [10788], "characters": "\u2A24" },                                              // 1783
  "&simrarr;": { "codepoints": [10610], "characters": "\u2972" },                                              // 1784
  "&slarr;": { "codepoints": [8592], "characters": "\u2190" },                                                 // 1785
  "&SmallCircle;": { "codepoints": [8728], "characters": "\u2218" },                                           // 1786
  "&smallsetminus;": { "codepoints": [8726], "characters": "\u2216" },                                         // 1787
  "&smashp;": { "codepoints": [10803], "characters": "\u2A33" },                                               // 1788
  "&smeparsl;": { "codepoints": [10724], "characters": "\u29E4" },                                             // 1789
  "&smid;": { "codepoints": [8739], "characters": "\u2223" },                                                  // 1790
  "&smile;": { "codepoints": [8995], "characters": "\u2323" },                                                 // 1791
  "&smt;": { "codepoints": [10922], "characters": "\u2AAA" },                                                  // 1792
  "&smte;": { "codepoints": [10924], "characters": "\u2AAC" },                                                 // 1793
  "&smtes;": { "codepoints": [10924, 65024], "characters": "\u2AAC\uFE00" },                                   // 1794
  "&SOFTcy;": { "codepoints": [1068], "characters": "\u042C" },                                                // 1795
  "&softcy;": { "codepoints": [1100], "characters": "\u044C" },                                                // 1796
  "&solbar;": { "codepoints": [9023], "characters": "\u233F" },                                                // 1797
  "&solb;": { "codepoints": [10692], "characters": "\u29C4" },                                                 // 1798
  "&sol;": { "codepoints": [47], "characters": "\u002F" },                                                     // 1799
  "&Sopf;": { "codepoints": [120138], "characters": "\uD835\uDD4A" },                                          // 1800
  "&sopf;": { "codepoints": [120164], "characters": "\uD835\uDD64" },                                          // 1801
  "&spades;": { "codepoints": [9824], "characters": "\u2660" },                                                // 1802
  "&spadesuit;": { "codepoints": [9824], "characters": "\u2660" },                                             // 1803
  "&spar;": { "codepoints": [8741], "characters": "\u2225" },                                                  // 1804
  "&sqcap;": { "codepoints": [8851], "characters": "\u2293" },                                                 // 1805
  "&sqcaps;": { "codepoints": [8851, 65024], "characters": "\u2293\uFE00" },                                   // 1806
  "&sqcup;": { "codepoints": [8852], "characters": "\u2294" },                                                 // 1807
  "&sqcups;": { "codepoints": [8852, 65024], "characters": "\u2294\uFE00" },                                   // 1808
  "&Sqrt;": { "codepoints": [8730], "characters": "\u221A" },                                                  // 1809
  "&sqsub;": { "codepoints": [8847], "characters": "\u228F" },                                                 // 1810
  "&sqsube;": { "codepoints": [8849], "characters": "\u2291" },                                                // 1811
  "&sqsubset;": { "codepoints": [8847], "characters": "\u228F" },                                              // 1812
  "&sqsubseteq;": { "codepoints": [8849], "characters": "\u2291" },                                            // 1813
  "&sqsup;": { "codepoints": [8848], "characters": "\u2290" },                                                 // 1814
  "&sqsupe;": { "codepoints": [8850], "characters": "\u2292" },                                                // 1815
  "&sqsupset;": { "codepoints": [8848], "characters": "\u2290" },                                              // 1816
  "&sqsupseteq;": { "codepoints": [8850], "characters": "\u2292" },                                            // 1817
  "&square;": { "codepoints": [9633], "characters": "\u25A1" },                                                // 1818
  "&Square;": { "codepoints": [9633], "characters": "\u25A1" },                                                // 1819
  "&SquareIntersection;": { "codepoints": [8851], "characters": "\u2293" },                                    // 1820
  "&SquareSubset;": { "codepoints": [8847], "characters": "\u228F" },                                          // 1821
  "&SquareSubsetEqual;": { "codepoints": [8849], "characters": "\u2291" },                                     // 1822
  "&SquareSuperset;": { "codepoints": [8848], "characters": "\u2290" },                                        // 1823
  "&SquareSupersetEqual;": { "codepoints": [8850], "characters": "\u2292" },                                   // 1824
  "&SquareUnion;": { "codepoints": [8852], "characters": "\u2294" },                                           // 1825
  "&squarf;": { "codepoints": [9642], "characters": "\u25AA" },                                                // 1826
  "&squ;": { "codepoints": [9633], "characters": "\u25A1" },                                                   // 1827
  "&squf;": { "codepoints": [9642], "characters": "\u25AA" },                                                  // 1828
  "&srarr;": { "codepoints": [8594], "characters": "\u2192" },                                                 // 1829
  "&Sscr;": { "codepoints": [119982], "characters": "\uD835\uDCAE" },                                          // 1830
  "&sscr;": { "codepoints": [120008], "characters": "\uD835\uDCC8" },                                          // 1831
  "&ssetmn;": { "codepoints": [8726], "characters": "\u2216" },                                                // 1832
  "&ssmile;": { "codepoints": [8995], "characters": "\u2323" },                                                // 1833
  "&sstarf;": { "codepoints": [8902], "characters": "\u22C6" },                                                // 1834
  "&Star;": { "codepoints": [8902], "characters": "\u22C6" },                                                  // 1835
  "&star;": { "codepoints": [9734], "characters": "\u2606" },                                                  // 1836
  "&starf;": { "codepoints": [9733], "characters": "\u2605" },                                                 // 1837
  "&straightepsilon;": { "codepoints": [1013], "characters": "\u03F5" },                                       // 1838
  "&straightphi;": { "codepoints": [981], "characters": "\u03D5" },                                            // 1839
  "&strns;": { "codepoints": [175], "characters": "\u00AF" },                                                  // 1840
  "&sub;": { "codepoints": [8834], "characters": "\u2282" },                                                   // 1841
  "&Sub;": { "codepoints": [8912], "characters": "\u22D0" },                                                   // 1842
  "&subdot;": { "codepoints": [10941], "characters": "\u2ABD" },                                               // 1843
  "&subE;": { "codepoints": [10949], "characters": "\u2AC5" },                                                 // 1844
  "&sube;": { "codepoints": [8838], "characters": "\u2286" },                                                  // 1845
  "&subedot;": { "codepoints": [10947], "characters": "\u2AC3" },                                              // 1846
  "&submult;": { "codepoints": [10945], "characters": "\u2AC1" },                                              // 1847
  "&subnE;": { "codepoints": [10955], "characters": "\u2ACB" },                                                // 1848
  "&subne;": { "codepoints": [8842], "characters": "\u228A" },                                                 // 1849
  "&subplus;": { "codepoints": [10943], "characters": "\u2ABF" },                                              // 1850
  "&subrarr;": { "codepoints": [10617], "characters": "\u2979" },                                              // 1851
  "&subset;": { "codepoints": [8834], "characters": "\u2282" },                                                // 1852
  "&Subset;": { "codepoints": [8912], "characters": "\u22D0" },                                                // 1853
  "&subseteq;": { "codepoints": [8838], "characters": "\u2286" },                                              // 1854
  "&subseteqq;": { "codepoints": [10949], "characters": "\u2AC5" },                                            // 1855
  "&SubsetEqual;": { "codepoints": [8838], "characters": "\u2286" },                                           // 1856
  "&subsetneq;": { "codepoints": [8842], "characters": "\u228A" },                                             // 1857
  "&subsetneqq;": { "codepoints": [10955], "characters": "\u2ACB" },                                           // 1858
  "&subsim;": { "codepoints": [10951], "characters": "\u2AC7" },                                               // 1859
  "&subsub;": { "codepoints": [10965], "characters": "\u2AD5" },                                               // 1860
  "&subsup;": { "codepoints": [10963], "characters": "\u2AD3" },                                               // 1861
  "&succapprox;": { "codepoints": [10936], "characters": "\u2AB8" },                                           // 1862
  "&succ;": { "codepoints": [8827], "characters": "\u227B" },                                                  // 1863
  "&succcurlyeq;": { "codepoints": [8829], "characters": "\u227D" },                                           // 1864
  "&Succeeds;": { "codepoints": [8827], "characters": "\u227B" },                                              // 1865
  "&SucceedsEqual;": { "codepoints": [10928], "characters": "\u2AB0" },                                        // 1866
  "&SucceedsSlantEqual;": { "codepoints": [8829], "characters": "\u227D" },                                    // 1867
  "&SucceedsTilde;": { "codepoints": [8831], "characters": "\u227F" },                                         // 1868
  "&succeq;": { "codepoints": [10928], "characters": "\u2AB0" },                                               // 1869
  "&succnapprox;": { "codepoints": [10938], "characters": "\u2ABA" },                                          // 1870
  "&succneqq;": { "codepoints": [10934], "characters": "\u2AB6" },                                             // 1871
  "&succnsim;": { "codepoints": [8937], "characters": "\u22E9" },                                              // 1872
  "&succsim;": { "codepoints": [8831], "characters": "\u227F" },                                               // 1873
  "&SuchThat;": { "codepoints": [8715], "characters": "\u220B" },                                              // 1874
  "&sum;": { "codepoints": [8721], "characters": "\u2211" },                                                   // 1875
  "&Sum;": { "codepoints": [8721], "characters": "\u2211" },                                                   // 1876
  "&sung;": { "codepoints": [9834], "characters": "\u266A" },                                                  // 1877
  "&sup1;": { "codepoints": [185], "characters": "\u00B9" },                                                   // 1878
  "&sup1": { "codepoints": [185], "characters": "\u00B9" },                                                    // 1879
  "&sup2;": { "codepoints": [178], "characters": "\u00B2" },                                                   // 1880
  "&sup2": { "codepoints": [178], "characters": "\u00B2" },                                                    // 1881
  "&sup3;": { "codepoints": [179], "characters": "\u00B3" },                                                   // 1882
  "&sup3": { "codepoints": [179], "characters": "\u00B3" },                                                    // 1883
  "&sup;": { "codepoints": [8835], "characters": "\u2283" },                                                   // 1884
  "&Sup;": { "codepoints": [8913], "characters": "\u22D1" },                                                   // 1885
  "&supdot;": { "codepoints": [10942], "characters": "\u2ABE" },                                               // 1886
  "&supdsub;": { "codepoints": [10968], "characters": "\u2AD8" },                                              // 1887
  "&supE;": { "codepoints": [10950], "characters": "\u2AC6" },                                                 // 1888
  "&supe;": { "codepoints": [8839], "characters": "\u2287" },                                                  // 1889
  "&supedot;": { "codepoints": [10948], "characters": "\u2AC4" },                                              // 1890
  "&Superset;": { "codepoints": [8835], "characters": "\u2283" },                                              // 1891
  "&SupersetEqual;": { "codepoints": [8839], "characters": "\u2287" },                                         // 1892
  "&suphsol;": { "codepoints": [10185], "characters": "\u27C9" },                                              // 1893
  "&suphsub;": { "codepoints": [10967], "characters": "\u2AD7" },                                              // 1894
  "&suplarr;": { "codepoints": [10619], "characters": "\u297B" },                                              // 1895
  "&supmult;": { "codepoints": [10946], "characters": "\u2AC2" },                                              // 1896
  "&supnE;": { "codepoints": [10956], "characters": "\u2ACC" },                                                // 1897
  "&supne;": { "codepoints": [8843], "characters": "\u228B" },                                                 // 1898
  "&supplus;": { "codepoints": [10944], "characters": "\u2AC0" },                                              // 1899
  "&supset;": { "codepoints": [8835], "characters": "\u2283" },                                                // 1900
  "&Supset;": { "codepoints": [8913], "characters": "\u22D1" },                                                // 1901
  "&supseteq;": { "codepoints": [8839], "characters": "\u2287" },                                              // 1902
  "&supseteqq;": { "codepoints": [10950], "characters": "\u2AC6" },                                            // 1903
  "&supsetneq;": { "codepoints": [8843], "characters": "\u228B" },                                             // 1904
  "&supsetneqq;": { "codepoints": [10956], "characters": "\u2ACC" },                                           // 1905
  "&supsim;": { "codepoints": [10952], "characters": "\u2AC8" },                                               // 1906
  "&supsub;": { "codepoints": [10964], "characters": "\u2AD4" },                                               // 1907
  "&supsup;": { "codepoints": [10966], "characters": "\u2AD6" },                                               // 1908
  "&swarhk;": { "codepoints": [10534], "characters": "\u2926" },                                               // 1909
  "&swarr;": { "codepoints": [8601], "characters": "\u2199" },                                                 // 1910
  "&swArr;": { "codepoints": [8665], "characters": "\u21D9" },                                                 // 1911
  "&swarrow;": { "codepoints": [8601], "characters": "\u2199" },                                               // 1912
  "&swnwar;": { "codepoints": [10538], "characters": "\u292A" },                                               // 1913
  "&szlig;": { "codepoints": [223], "characters": "\u00DF" },                                                  // 1914
  "&szlig": { "codepoints": [223], "characters": "\u00DF" },                                                   // 1915
  "&Tab;": { "codepoints": [9], "characters": "\u0009" },                                                      // 1916
  "&target;": { "codepoints": [8982], "characters": "\u2316" },                                                // 1917
  "&Tau;": { "codepoints": [932], "characters": "\u03A4" },                                                    // 1918
  "&tau;": { "codepoints": [964], "characters": "\u03C4" },                                                    // 1919
  "&tbrk;": { "codepoints": [9140], "characters": "\u23B4" },                                                  // 1920
  "&Tcaron;": { "codepoints": [356], "characters": "\u0164" },                                                 // 1921
  "&tcaron;": { "codepoints": [357], "characters": "\u0165" },                                                 // 1922
  "&Tcedil;": { "codepoints": [354], "characters": "\u0162" },                                                 // 1923
  "&tcedil;": { "codepoints": [355], "characters": "\u0163" },                                                 // 1924
  "&Tcy;": { "codepoints": [1058], "characters": "\u0422" },                                                   // 1925
  "&tcy;": { "codepoints": [1090], "characters": "\u0442" },                                                   // 1926
  "&tdot;": { "codepoints": [8411], "characters": "\u20DB" },                                                  // 1927
  "&telrec;": { "codepoints": [8981], "characters": "\u2315" },                                                // 1928
  "&Tfr;": { "codepoints": [120087], "characters": "\uD835\uDD17" },                                           // 1929
  "&tfr;": { "codepoints": [120113], "characters": "\uD835\uDD31" },                                           // 1930
  "&there4;": { "codepoints": [8756], "characters": "\u2234" },                                                // 1931
  "&therefore;": { "codepoints": [8756], "characters": "\u2234" },                                             // 1932
  "&Therefore;": { "codepoints": [8756], "characters": "\u2234" },                                             // 1933
  "&Theta;": { "codepoints": [920], "characters": "\u0398" },                                                  // 1934
  "&theta;": { "codepoints": [952], "characters": "\u03B8" },                                                  // 1935
  "&thetasym;": { "codepoints": [977], "characters": "\u03D1" },                                               // 1936
  "&thetav;": { "codepoints": [977], "characters": "\u03D1" },                                                 // 1937
  "&thickapprox;": { "codepoints": [8776], "characters": "\u2248" },                                           // 1938
  "&thicksim;": { "codepoints": [8764], "characters": "\u223C" },                                              // 1939
  "&ThickSpace;": { "codepoints": [8287, 8202], "characters": "\u205F\u200A" },                                // 1940
  "&ThinSpace;": { "codepoints": [8201], "characters": "\u2009" },                                             // 1941
  "&thinsp;": { "codepoints": [8201], "characters": "\u2009" },                                                // 1942
  "&thkap;": { "codepoints": [8776], "characters": "\u2248" },                                                 // 1943
  "&thksim;": { "codepoints": [8764], "characters": "\u223C" },                                                // 1944
  "&THORN;": { "codepoints": [222], "characters": "\u00DE" },                                                  // 1945
  "&THORN": { "codepoints": [222], "characters": "\u00DE" },                                                   // 1946
  "&thorn;": { "codepoints": [254], "characters": "\u00FE" },                                                  // 1947
  "&thorn": { "codepoints": [254], "characters": "\u00FE" },                                                   // 1948
  "&tilde;": { "codepoints": [732], "characters": "\u02DC" },                                                  // 1949
  "&Tilde;": { "codepoints": [8764], "characters": "\u223C" },                                                 // 1950
  "&TildeEqual;": { "codepoints": [8771], "characters": "\u2243" },                                            // 1951
  "&TildeFullEqual;": { "codepoints": [8773], "characters": "\u2245" },                                        // 1952
  "&TildeTilde;": { "codepoints": [8776], "characters": "\u2248" },                                            // 1953
  "&timesbar;": { "codepoints": [10801], "characters": "\u2A31" },                                             // 1954
  "&timesb;": { "codepoints": [8864], "characters": "\u22A0" },                                                // 1955
  "&times;": { "codepoints": [215], "characters": "\u00D7" },                                                  // 1956
  "&times": { "codepoints": [215], "characters": "\u00D7" },                                                   // 1957
  "&timesd;": { "codepoints": [10800], "characters": "\u2A30" },                                               // 1958
  "&tint;": { "codepoints": [8749], "characters": "\u222D" },                                                  // 1959
  "&toea;": { "codepoints": [10536], "characters": "\u2928" },                                                 // 1960
  "&topbot;": { "codepoints": [9014], "characters": "\u2336" },                                                // 1961
  "&topcir;": { "codepoints": [10993], "characters": "\u2AF1" },                                               // 1962
  "&top;": { "codepoints": [8868], "characters": "\u22A4" },                                                   // 1963
  "&Topf;": { "codepoints": [120139], "characters": "\uD835\uDD4B" },                                          // 1964
  "&topf;": { "codepoints": [120165], "characters": "\uD835\uDD65" },                                          // 1965
  "&topfork;": { "codepoints": [10970], "characters": "\u2ADA" },                                              // 1966
  "&tosa;": { "codepoints": [10537], "characters": "\u2929" },                                                 // 1967
  "&tprime;": { "codepoints": [8244], "characters": "\u2034" },                                                // 1968
  "&trade;": { "codepoints": [8482], "characters": "\u2122" },                                                 // 1969
  "&TRADE;": { "codepoints": [8482], "characters": "\u2122" },                                                 // 1970
  "&triangle;": { "codepoints": [9653], "characters": "\u25B5" },                                              // 1971
  "&triangledown;": { "codepoints": [9663], "characters": "\u25BF" },                                          // 1972
  "&triangleleft;": { "codepoints": [9667], "characters": "\u25C3" },                                          // 1973
  "&trianglelefteq;": { "codepoints": [8884], "characters": "\u22B4" },                                        // 1974
  "&triangleq;": { "codepoints": [8796], "characters": "\u225C" },                                             // 1975
  "&triangleright;": { "codepoints": [9657], "characters": "\u25B9" },                                         // 1976
  "&trianglerighteq;": { "codepoints": [8885], "characters": "\u22B5" },                                       // 1977
  "&tridot;": { "codepoints": [9708], "characters": "\u25EC" },                                                // 1978
  "&trie;": { "codepoints": [8796], "characters": "\u225C" },                                                  // 1979
  "&triminus;": { "codepoints": [10810], "characters": "\u2A3A" },                                             // 1980
  "&TripleDot;": { "codepoints": [8411], "characters": "\u20DB" },                                             // 1981
  "&triplus;": { "codepoints": [10809], "characters": "\u2A39" },                                              // 1982
  "&trisb;": { "codepoints": [10701], "characters": "\u29CD" },                                                // 1983
  "&tritime;": { "codepoints": [10811], "characters": "\u2A3B" },                                              // 1984
  "&trpezium;": { "codepoints": [9186], "characters": "\u23E2" },                                              // 1985
  "&Tscr;": { "codepoints": [119983], "characters": "\uD835\uDCAF" },                                          // 1986
  "&tscr;": { "codepoints": [120009], "characters": "\uD835\uDCC9" },                                          // 1987
  "&TScy;": { "codepoints": [1062], "characters": "\u0426" },                                                  // 1988
  "&tscy;": { "codepoints": [1094], "characters": "\u0446" },                                                  // 1989
  "&TSHcy;": { "codepoints": [1035], "characters": "\u040B" },                                                 // 1990
  "&tshcy;": { "codepoints": [1115], "characters": "\u045B" },                                                 // 1991
  "&Tstrok;": { "codepoints": [358], "characters": "\u0166" },                                                 // 1992
  "&tstrok;": { "codepoints": [359], "characters": "\u0167" },                                                 // 1993
  "&twixt;": { "codepoints": [8812], "characters": "\u226C" },                                                 // 1994
  "&twoheadleftarrow;": { "codepoints": [8606], "characters": "\u219E" },                                      // 1995
  "&twoheadrightarrow;": { "codepoints": [8608], "characters": "\u21A0" },                                     // 1996
  "&Uacute;": { "codepoints": [218], "characters": "\u00DA" },                                                 // 1997
  "&Uacute": { "codepoints": [218], "characters": "\u00DA" },                                                  // 1998
  "&uacute;": { "codepoints": [250], "characters": "\u00FA" },                                                 // 1999
  "&uacute": { "codepoints": [250], "characters": "\u00FA" },                                                  // 2000
  "&uarr;": { "codepoints": [8593], "characters": "\u2191" },                                                  // 2001
  "&Uarr;": { "codepoints": [8607], "characters": "\u219F" },                                                  // 2002
  "&uArr;": { "codepoints": [8657], "characters": "\u21D1" },                                                  // 2003
  "&Uarrocir;": { "codepoints": [10569], "characters": "\u2949" },                                             // 2004
  "&Ubrcy;": { "codepoints": [1038], "characters": "\u040E" },                                                 // 2005
  "&ubrcy;": { "codepoints": [1118], "characters": "\u045E" },                                                 // 2006
  "&Ubreve;": { "codepoints": [364], "characters": "\u016C" },                                                 // 2007
  "&ubreve;": { "codepoints": [365], "characters": "\u016D" },                                                 // 2008
  "&Ucirc;": { "codepoints": [219], "characters": "\u00DB" },                                                  // 2009
  "&Ucirc": { "codepoints": [219], "characters": "\u00DB" },                                                   // 2010
  "&ucirc;": { "codepoints": [251], "characters": "\u00FB" },                                                  // 2011
  "&ucirc": { "codepoints": [251], "characters": "\u00FB" },                                                   // 2012
  "&Ucy;": { "codepoints": [1059], "characters": "\u0423" },                                                   // 2013
  "&ucy;": { "codepoints": [1091], "characters": "\u0443" },                                                   // 2014
  "&udarr;": { "codepoints": [8645], "characters": "\u21C5" },                                                 // 2015
  "&Udblac;": { "codepoints": [368], "characters": "\u0170" },                                                 // 2016
  "&udblac;": { "codepoints": [369], "characters": "\u0171" },                                                 // 2017
  "&udhar;": { "codepoints": [10606], "characters": "\u296E" },                                                // 2018
  "&ufisht;": { "codepoints": [10622], "characters": "\u297E" },                                               // 2019
  "&Ufr;": { "codepoints": [120088], "characters": "\uD835\uDD18" },                                           // 2020
  "&ufr;": { "codepoints": [120114], "characters": "\uD835\uDD32" },                                           // 2021
  "&Ugrave;": { "codepoints": [217], "characters": "\u00D9" },                                                 // 2022
  "&Ugrave": { "codepoints": [217], "characters": "\u00D9" },                                                  // 2023
  "&ugrave;": { "codepoints": [249], "characters": "\u00F9" },                                                 // 2024
  "&ugrave": { "codepoints": [249], "characters": "\u00F9" },                                                  // 2025
  "&uHar;": { "codepoints": [10595], "characters": "\u2963" },                                                 // 2026
  "&uharl;": { "codepoints": [8639], "characters": "\u21BF" },                                                 // 2027
  "&uharr;": { "codepoints": [8638], "characters": "\u21BE" },                                                 // 2028
  "&uhblk;": { "codepoints": [9600], "characters": "\u2580" },                                                 // 2029
  "&ulcorn;": { "codepoints": [8988], "characters": "\u231C" },                                                // 2030
  "&ulcorner;": { "codepoints": [8988], "characters": "\u231C" },                                              // 2031
  "&ulcrop;": { "codepoints": [8975], "characters": "\u230F" },                                                // 2032
  "&ultri;": { "codepoints": [9720], "characters": "\u25F8" },                                                 // 2033
  "&Umacr;": { "codepoints": [362], "characters": "\u016A" },                                                  // 2034
  "&umacr;": { "codepoints": [363], "characters": "\u016B" },                                                  // 2035
  "&uml;": { "codepoints": [168], "characters": "\u00A8" },                                                    // 2036
  "&uml": { "codepoints": [168], "characters": "\u00A8" },                                                     // 2037
  "&UnderBar;": { "codepoints": [95], "characters": "\u005F" },                                                // 2038
  "&UnderBrace;": { "codepoints": [9183], "characters": "\u23DF" },                                            // 2039
  "&UnderBracket;": { "codepoints": [9141], "characters": "\u23B5" },                                          // 2040
  "&UnderParenthesis;": { "codepoints": [9181], "characters": "\u23DD" },                                      // 2041
  "&Union;": { "codepoints": [8899], "characters": "\u22C3" },                                                 // 2042
  "&UnionPlus;": { "codepoints": [8846], "characters": "\u228E" },                                             // 2043
  "&Uogon;": { "codepoints": [370], "characters": "\u0172" },                                                  // 2044
  "&uogon;": { "codepoints": [371], "characters": "\u0173" },                                                  // 2045
  "&Uopf;": { "codepoints": [120140], "characters": "\uD835\uDD4C" },                                          // 2046
  "&uopf;": { "codepoints": [120166], "characters": "\uD835\uDD66" },                                          // 2047
  "&UpArrowBar;": { "codepoints": [10514], "characters": "\u2912" },                                           // 2048
  "&uparrow;": { "codepoints": [8593], "characters": "\u2191" },                                               // 2049
  "&UpArrow;": { "codepoints": [8593], "characters": "\u2191" },                                               // 2050
  "&Uparrow;": { "codepoints": [8657], "characters": "\u21D1" },                                               // 2051
  "&UpArrowDownArrow;": { "codepoints": [8645], "characters": "\u21C5" },                                      // 2052
  "&updownarrow;": { "codepoints": [8597], "characters": "\u2195" },                                           // 2053
  "&UpDownArrow;": { "codepoints": [8597], "characters": "\u2195" },                                           // 2054
  "&Updownarrow;": { "codepoints": [8661], "characters": "\u21D5" },                                           // 2055
  "&UpEquilibrium;": { "codepoints": [10606], "characters": "\u296E" },                                        // 2056
  "&upharpoonleft;": { "codepoints": [8639], "characters": "\u21BF" },                                         // 2057
  "&upharpoonright;": { "codepoints": [8638], "characters": "\u21BE" },                                        // 2058
  "&uplus;": { "codepoints": [8846], "characters": "\u228E" },                                                 // 2059
  "&UpperLeftArrow;": { "codepoints": [8598], "characters": "\u2196" },                                        // 2060
  "&UpperRightArrow;": { "codepoints": [8599], "characters": "\u2197" },                                       // 2061
  "&upsi;": { "codepoints": [965], "characters": "\u03C5" },                                                   // 2062
  "&Upsi;": { "codepoints": [978], "characters": "\u03D2" },                                                   // 2063
  "&upsih;": { "codepoints": [978], "characters": "\u03D2" },                                                  // 2064
  "&Upsilon;": { "codepoints": [933], "characters": "\u03A5" },                                                // 2065
  "&upsilon;": { "codepoints": [965], "characters": "\u03C5" },                                                // 2066
  "&UpTeeArrow;": { "codepoints": [8613], "characters": "\u21A5" },                                            // 2067
  "&UpTee;": { "codepoints": [8869], "characters": "\u22A5" },                                                 // 2068
  "&upuparrows;": { "codepoints": [8648], "characters": "\u21C8" },                                            // 2069
  "&urcorn;": { "codepoints": [8989], "characters": "\u231D" },                                                // 2070
  "&urcorner;": { "codepoints": [8989], "characters": "\u231D" },                                              // 2071
  "&urcrop;": { "codepoints": [8974], "characters": "\u230E" },                                                // 2072
  "&Uring;": { "codepoints": [366], "characters": "\u016E" },                                                  // 2073
  "&uring;": { "codepoints": [367], "characters": "\u016F" },                                                  // 2074
  "&urtri;": { "codepoints": [9721], "characters": "\u25F9" },                                                 // 2075
  "&Uscr;": { "codepoints": [119984], "characters": "\uD835\uDCB0" },                                          // 2076
  "&uscr;": { "codepoints": [120010], "characters": "\uD835\uDCCA" },                                          // 2077
  "&utdot;": { "codepoints": [8944], "characters": "\u22F0" },                                                 // 2078
  "&Utilde;": { "codepoints": [360], "characters": "\u0168" },                                                 // 2079
  "&utilde;": { "codepoints": [361], "characters": "\u0169" },                                                 // 2080
  "&utri;": { "codepoints": [9653], "characters": "\u25B5" },                                                  // 2081
  "&utrif;": { "codepoints": [9652], "characters": "\u25B4" },                                                 // 2082
  "&uuarr;": { "codepoints": [8648], "characters": "\u21C8" },                                                 // 2083
  "&Uuml;": { "codepoints": [220], "characters": "\u00DC" },                                                   // 2084
  "&Uuml": { "codepoints": [220], "characters": "\u00DC" },                                                    // 2085
  "&uuml;": { "codepoints": [252], "characters": "\u00FC" },                                                   // 2086
  "&uuml": { "codepoints": [252], "characters": "\u00FC" },                                                    // 2087
  "&uwangle;": { "codepoints": [10663], "characters": "\u29A7" },                                              // 2088
  "&vangrt;": { "codepoints": [10652], "characters": "\u299C" },                                               // 2089
  "&varepsilon;": { "codepoints": [1013], "characters": "\u03F5" },                                            // 2090
  "&varkappa;": { "codepoints": [1008], "characters": "\u03F0" },                                              // 2091
  "&varnothing;": { "codepoints": [8709], "characters": "\u2205" },                                            // 2092
  "&varphi;": { "codepoints": [981], "characters": "\u03D5" },                                                 // 2093
  "&varpi;": { "codepoints": [982], "characters": "\u03D6" },                                                  // 2094
  "&varpropto;": { "codepoints": [8733], "characters": "\u221D" },                                             // 2095
  "&varr;": { "codepoints": [8597], "characters": "\u2195" },                                                  // 2096
  "&vArr;": { "codepoints": [8661], "characters": "\u21D5" },                                                  // 2097
  "&varrho;": { "codepoints": [1009], "characters": "\u03F1" },                                                // 2098
  "&varsigma;": { "codepoints": [962], "characters": "\u03C2" },                                               // 2099
  "&varsubsetneq;": { "codepoints": [8842, 65024], "characters": "\u228A\uFE00" },                             // 2100
  "&varsubsetneqq;": { "codepoints": [10955, 65024], "characters": "\u2ACB\uFE00" },                           // 2101
  "&varsupsetneq;": { "codepoints": [8843, 65024], "characters": "\u228B\uFE00" },                             // 2102
  "&varsupsetneqq;": { "codepoints": [10956, 65024], "characters": "\u2ACC\uFE00" },                           // 2103
  "&vartheta;": { "codepoints": [977], "characters": "\u03D1" },                                               // 2104
  "&vartriangleleft;": { "codepoints": [8882], "characters": "\u22B2" },                                       // 2105
  "&vartriangleright;": { "codepoints": [8883], "characters": "\u22B3" },                                      // 2106
  "&vBar;": { "codepoints": [10984], "characters": "\u2AE8" },                                                 // 2107
  "&Vbar;": { "codepoints": [10987], "characters": "\u2AEB" },                                                 // 2108
  "&vBarv;": { "codepoints": [10985], "characters": "\u2AE9" },                                                // 2109
  "&Vcy;": { "codepoints": [1042], "characters": "\u0412" },                                                   // 2110
  "&vcy;": { "codepoints": [1074], "characters": "\u0432" },                                                   // 2111
  "&vdash;": { "codepoints": [8866], "characters": "\u22A2" },                                                 // 2112
  "&vDash;": { "codepoints": [8872], "characters": "\u22A8" },                                                 // 2113
  "&Vdash;": { "codepoints": [8873], "characters": "\u22A9" },                                                 // 2114
  "&VDash;": { "codepoints": [8875], "characters": "\u22AB" },                                                 // 2115
  "&Vdashl;": { "codepoints": [10982], "characters": "\u2AE6" },                                               // 2116
  "&veebar;": { "codepoints": [8891], "characters": "\u22BB" },                                                // 2117
  "&vee;": { "codepoints": [8744], "characters": "\u2228" },                                                   // 2118
  "&Vee;": { "codepoints": [8897], "characters": "\u22C1" },                                                   // 2119
  "&veeeq;": { "codepoints": [8794], "characters": "\u225A" },                                                 // 2120
  "&vellip;": { "codepoints": [8942], "characters": "\u22EE" },                                                // 2121
  "&verbar;": { "codepoints": [124], "characters": "\u007C" },                                                 // 2122
  "&Verbar;": { "codepoints": [8214], "characters": "\u2016" },                                                // 2123
  "&vert;": { "codepoints": [124], "characters": "\u007C" },                                                   // 2124
  "&Vert;": { "codepoints": [8214], "characters": "\u2016" },                                                  // 2125
  "&VerticalBar;": { "codepoints": [8739], "characters": "\u2223" },                                           // 2126
  "&VerticalLine;": { "codepoints": [124], "characters": "\u007C" },                                           // 2127
  "&VerticalSeparator;": { "codepoints": [10072], "characters": "\u2758" },                                    // 2128
  "&VerticalTilde;": { "codepoints": [8768], "characters": "\u2240" },                                         // 2129
  "&VeryThinSpace;": { "codepoints": [8202], "characters": "\u200A" },                                         // 2130
  "&Vfr;": { "codepoints": [120089], "characters": "\uD835\uDD19" },                                           // 2131
  "&vfr;": { "codepoints": [120115], "characters": "\uD835\uDD33" },                                           // 2132
  "&vltri;": { "codepoints": [8882], "characters": "\u22B2" },                                                 // 2133
  "&vnsub;": { "codepoints": [8834, 8402], "characters": "\u2282\u20D2" },                                     // 2134
  "&vnsup;": { "codepoints": [8835, 8402], "characters": "\u2283\u20D2" },                                     // 2135
  "&Vopf;": { "codepoints": [120141], "characters": "\uD835\uDD4D" },                                          // 2136
  "&vopf;": { "codepoints": [120167], "characters": "\uD835\uDD67" },                                          // 2137
  "&vprop;": { "codepoints": [8733], "characters": "\u221D" },                                                 // 2138
  "&vrtri;": { "codepoints": [8883], "characters": "\u22B3" },                                                 // 2139
  "&Vscr;": { "codepoints": [119985], "characters": "\uD835\uDCB1" },                                          // 2140
  "&vscr;": { "codepoints": [120011], "characters": "\uD835\uDCCB" },                                          // 2141
  "&vsubnE;": { "codepoints": [10955, 65024], "characters": "\u2ACB\uFE00" },                                  // 2142
  "&vsubne;": { "codepoints": [8842, 65024], "characters": "\u228A\uFE00" },                                   // 2143
  "&vsupnE;": { "codepoints": [10956, 65024], "characters": "\u2ACC\uFE00" },                                  // 2144
  "&vsupne;": { "codepoints": [8843, 65024], "characters": "\u228B\uFE00" },                                   // 2145
  "&Vvdash;": { "codepoints": [8874], "characters": "\u22AA" },                                                // 2146
  "&vzigzag;": { "codepoints": [10650], "characters": "\u299A" },                                              // 2147
  "&Wcirc;": { "codepoints": [372], "characters": "\u0174" },                                                  // 2148
  "&wcirc;": { "codepoints": [373], "characters": "\u0175" },                                                  // 2149
  "&wedbar;": { "codepoints": [10847], "characters": "\u2A5F" },                                               // 2150
  "&wedge;": { "codepoints": [8743], "characters": "\u2227" },                                                 // 2151
  "&Wedge;": { "codepoints": [8896], "characters": "\u22C0" },                                                 // 2152
  "&wedgeq;": { "codepoints": [8793], "characters": "\u2259" },                                                // 2153
  "&weierp;": { "codepoints": [8472], "characters": "\u2118" },                                                // 2154
  "&Wfr;": { "codepoints": [120090], "characters": "\uD835\uDD1A" },                                           // 2155
  "&wfr;": { "codepoints": [120116], "characters": "\uD835\uDD34" },                                           // 2156
  "&Wopf;": { "codepoints": [120142], "characters": "\uD835\uDD4E" },                                          // 2157
  "&wopf;": { "codepoints": [120168], "characters": "\uD835\uDD68" },                                          // 2158
  "&wp;": { "codepoints": [8472], "characters": "\u2118" },                                                    // 2159
  "&wr;": { "codepoints": [8768], "characters": "\u2240" },                                                    // 2160
  "&wreath;": { "codepoints": [8768], "characters": "\u2240" },                                                // 2161
  "&Wscr;": { "codepoints": [119986], "characters": "\uD835\uDCB2" },                                          // 2162
  "&wscr;": { "codepoints": [120012], "characters": "\uD835\uDCCC" },                                          // 2163
  "&xcap;": { "codepoints": [8898], "characters": "\u22C2" },                                                  // 2164
  "&xcirc;": { "codepoints": [9711], "characters": "\u25EF" },                                                 // 2165
  "&xcup;": { "codepoints": [8899], "characters": "\u22C3" },                                                  // 2166
  "&xdtri;": { "codepoints": [9661], "characters": "\u25BD" },                                                 // 2167
  "&Xfr;": { "codepoints": [120091], "characters": "\uD835\uDD1B" },                                           // 2168
  "&xfr;": { "codepoints": [120117], "characters": "\uD835\uDD35" },                                           // 2169
  "&xharr;": { "codepoints": [10231], "characters": "\u27F7" },                                                // 2170
  "&xhArr;": { "codepoints": [10234], "characters": "\u27FA" },                                                // 2171
  "&Xi;": { "codepoints": [926], "characters": "\u039E" },                                                     // 2172
  "&xi;": { "codepoints": [958], "characters": "\u03BE" },                                                     // 2173
  "&xlarr;": { "codepoints": [10229], "characters": "\u27F5" },                                                // 2174
  "&xlArr;": { "codepoints": [10232], "characters": "\u27F8" },                                                // 2175
  "&xmap;": { "codepoints": [10236], "characters": "\u27FC" },                                                 // 2176
  "&xnis;": { "codepoints": [8955], "characters": "\u22FB" },                                                  // 2177
  "&xodot;": { "codepoints": [10752], "characters": "\u2A00" },                                                // 2178
  "&Xopf;": { "codepoints": [120143], "characters": "\uD835\uDD4F" },                                          // 2179
  "&xopf;": { "codepoints": [120169], "characters": "\uD835\uDD69" },                                          // 2180
  "&xoplus;": { "codepoints": [10753], "characters": "\u2A01" },                                               // 2181
  "&xotime;": { "codepoints": [10754], "characters": "\u2A02" },                                               // 2182
  "&xrarr;": { "codepoints": [10230], "characters": "\u27F6" },                                                // 2183
  "&xrArr;": { "codepoints": [10233], "characters": "\u27F9" },                                                // 2184
  "&Xscr;": { "codepoints": [119987], "characters": "\uD835\uDCB3" },                                          // 2185
  "&xscr;": { "codepoints": [120013], "characters": "\uD835\uDCCD" },                                          // 2186
  "&xsqcup;": { "codepoints": [10758], "characters": "\u2A06" },                                               // 2187
  "&xuplus;": { "codepoints": [10756], "characters": "\u2A04" },                                               // 2188
  "&xutri;": { "codepoints": [9651], "characters": "\u25B3" },                                                 // 2189
  "&xvee;": { "codepoints": [8897], "characters": "\u22C1" },                                                  // 2190
  "&xwedge;": { "codepoints": [8896], "characters": "\u22C0" },                                                // 2191
  "&Yacute;": { "codepoints": [221], "characters": "\u00DD" },                                                 // 2192
  "&Yacute": { "codepoints": [221], "characters": "\u00DD" },                                                  // 2193
  "&yacute;": { "codepoints": [253], "characters": "\u00FD" },                                                 // 2194
  "&yacute": { "codepoints": [253], "characters": "\u00FD" },                                                  // 2195
  "&YAcy;": { "codepoints": [1071], "characters": "\u042F" },                                                  // 2196
  "&yacy;": { "codepoints": [1103], "characters": "\u044F" },                                                  // 2197
  "&Ycirc;": { "codepoints": [374], "characters": "\u0176" },                                                  // 2198
  "&ycirc;": { "codepoints": [375], "characters": "\u0177" },                                                  // 2199
  "&Ycy;": { "codepoints": [1067], "characters": "\u042B" },                                                   // 2200
  "&ycy;": { "codepoints": [1099], "characters": "\u044B" },                                                   // 2201
  "&yen;": { "codepoints": [165], "characters": "\u00A5" },                                                    // 2202
  "&yen": { "codepoints": [165], "characters": "\u00A5" },                                                     // 2203
  "&Yfr;": { "codepoints": [120092], "characters": "\uD835\uDD1C" },                                           // 2204
  "&yfr;": { "codepoints": [120118], "characters": "\uD835\uDD36" },                                           // 2205
  "&YIcy;": { "codepoints": [1031], "characters": "\u0407" },                                                  // 2206
  "&yicy;": { "codepoints": [1111], "characters": "\u0457" },                                                  // 2207
  "&Yopf;": { "codepoints": [120144], "characters": "\uD835\uDD50" },                                          // 2208
  "&yopf;": { "codepoints": [120170], "characters": "\uD835\uDD6A" },                                          // 2209
  "&Yscr;": { "codepoints": [119988], "characters": "\uD835\uDCB4" },                                          // 2210
  "&yscr;": { "codepoints": [120014], "characters": "\uD835\uDCCE" },                                          // 2211
  "&YUcy;": { "codepoints": [1070], "characters": "\u042E" },                                                  // 2212
  "&yucy;": { "codepoints": [1102], "characters": "\u044E" },                                                  // 2213
  "&yuml;": { "codepoints": [255], "characters": "\u00FF" },                                                   // 2214
  "&yuml": { "codepoints": [255], "characters": "\u00FF" },                                                    // 2215
  "&Yuml;": { "codepoints": [376], "characters": "\u0178" },                                                   // 2216
  "&Zacute;": { "codepoints": [377], "characters": "\u0179" },                                                 // 2217
  "&zacute;": { "codepoints": [378], "characters": "\u017A" },                                                 // 2218
  "&Zcaron;": { "codepoints": [381], "characters": "\u017D" },                                                 // 2219
  "&zcaron;": { "codepoints": [382], "characters": "\u017E" },                                                 // 2220
  "&Zcy;": { "codepoints": [1047], "characters": "\u0417" },                                                   // 2221
  "&zcy;": { "codepoints": [1079], "characters": "\u0437" },                                                   // 2222
  "&Zdot;": { "codepoints": [379], "characters": "\u017B" },                                                   // 2223
  "&zdot;": { "codepoints": [380], "characters": "\u017C" },                                                   // 2224
  "&zeetrf;": { "codepoints": [8488], "characters": "\u2128" },                                                // 2225
  "&ZeroWidthSpace;": { "codepoints": [8203], "characters": "\u200B" },                                        // 2226
  "&Zeta;": { "codepoints": [918], "characters": "\u0396" },                                                   // 2227
  "&zeta;": { "codepoints": [950], "characters": "\u03B6" },                                                   // 2228
  "&zfr;": { "codepoints": [120119], "characters": "\uD835\uDD37" },                                           // 2229
  "&Zfr;": { "codepoints": [8488], "characters": "\u2128" },                                                   // 2230
  "&ZHcy;": { "codepoints": [1046], "characters": "\u0416" },                                                  // 2231
  "&zhcy;": { "codepoints": [1078], "characters": "\u0436" },                                                  // 2232
  "&zigrarr;": { "codepoints": [8669], "characters": "\u21DD" },                                               // 2233
  "&zopf;": { "codepoints": [120171], "characters": "\uD835\uDD6B" },                                          // 2234
  "&Zopf;": { "codepoints": [8484], "characters": "\u2124" },                                                  // 2235
  "&Zscr;": { "codepoints": [119989], "characters": "\uD835\uDCB5" },                                          // 2236
  "&zscr;": { "codepoints": [120015], "characters": "\uD835\uDCCF" },                                          // 2237
  "&zwj;": { "codepoints": [8205], "characters": "\u200D" },                                                   // 2238
  "&zwnj;": { "codepoints": [8204], "characters": "\u200C" }                                                   // 2239
};                                                                                                             // 2240
                                                                                                               // 2241
var ALPHANUMERIC = /^[a-zA-Z0-9]/;                                                                             // 2242
var getPossibleNamedEntityStart = makeRegexMatcher(/^&[a-zA-Z0-9]/);                                           // 2243
var getApparentNamedEntity = makeRegexMatcher(/^&[a-zA-Z0-9]+;/);                                              // 2244
                                                                                                               // 2245
var getNamedEntityByFirstChar = {};                                                                            // 2246
(function () {                                                                                                 // 2247
  var namedEntitiesByFirstChar = {};                                                                           // 2248
  for (var ent in ENTITIES) {                                                                                  // 2249
    var chr = ent.charAt(1);                                                                                   // 2250
    namedEntitiesByFirstChar[chr] = (namedEntitiesByFirstChar[chr] || []);                                     // 2251
    namedEntitiesByFirstChar[chr].push(ent.slice(2));                                                          // 2252
  }                                                                                                            // 2253
  for (var chr in namedEntitiesByFirstChar) {                                                                  // 2254
    getNamedEntityByFirstChar[chr] = makeRegexMatcher(                                                         // 2255
      new RegExp('^&' + chr + '(?:' +                                                                          // 2256
                 namedEntitiesByFirstChar[chr].join('|') + ')'));                                              // 2257
  }                                                                                                            // 2258
})();                                                                                                          // 2259
                                                                                                               // 2260
// Run a provided "matcher" function but reset the current position afterwards.                                // 2261
// Fatal failure of the matcher is not suppressed.                                                             // 2262
var peekMatcher = function (scanner, matcher) {                                                                // 2263
  var start = scanner.pos;                                                                                     // 2264
  var result = matcher(scanner);                                                                               // 2265
  scanner.pos = start;                                                                                         // 2266
  return result;                                                                                               // 2267
};                                                                                                             // 2268
                                                                                                               // 2269
// Returns a string like "&amp;" or a falsy value if no match.  Fails fatally                                  // 2270
// if something looks like a named entity but isn't.                                                           // 2271
var getNamedCharRef = function (scanner, inAttribute) {                                                        // 2272
  // look for `&` followed by alphanumeric                                                                     // 2273
  if (! peekMatcher(scanner, getPossibleNamedEntityStart))                                                     // 2274
    return null;                                                                                               // 2275
                                                                                                               // 2276
  var matcher = getNamedEntityByFirstChar[scanner.rest().charAt(1)];                                           // 2277
  var entity = null;                                                                                           // 2278
  if (matcher)                                                                                                 // 2279
    entity = peekMatcher(scanner, matcher);                                                                    // 2280
                                                                                                               // 2281
  if (entity) {                                                                                                // 2282
    if (entity.slice(-1) !== ';') {                                                                            // 2283
      // Certain character references with no semi are an error, like `&lt`.                                   // 2284
      // In attribute values, however, this is not fatal if the next character                                 // 2285
      // is alphanumeric.                                                                                      // 2286
      //                                                                                                       // 2287
      // This rule affects href attributes, for example, deeming "/?foo=bar&ltc=abc"                           // 2288
      // to be ok but "/?foo=bar&lt=abc" to not be.                                                            // 2289
      if (inAttribute && ALPHANUMERIC.test(scanner.rest().charAt(entity.length)))                              // 2290
        return null;                                                                                           // 2291
      scanner.fatal("Character reference requires semicolon: " + entity);                                      // 2292
    } else {                                                                                                   // 2293
      scanner.pos += entity.length;                                                                            // 2294
      return entity;                                                                                           // 2295
    }                                                                                                          // 2296
  } else {                                                                                                     // 2297
    // we couldn't match any real entity, so see if this is a bad entity                                       // 2298
    // or something we can overlook.                                                                           // 2299
    var badEntity = peekMatcher(scanner, getApparentNamedEntity);                                              // 2300
    if (badEntity)                                                                                             // 2301
      scanner.fatal("Invalid character reference: " + badEntity);                                              // 2302
    // `&aaaa` is ok with no semicolon                                                                         // 2303
    return null;                                                                                               // 2304
  }                                                                                                            // 2305
};                                                                                                             // 2306
                                                                                                               // 2307
// Returns the sequence of one or two codepoints making up an entity as an array.                              // 2308
// Codepoints in the array are integers and may be out of the single-char JavaScript                           // 2309
// range.                                                                                                      // 2310
var getCodePoints = function (namedEntity) {                                                                   // 2311
  return ENTITIES[namedEntity].codepoints;                                                                     // 2312
};                                                                                                             // 2313
                                                                                                               // 2314
var ALLOWED_AFTER_AMP = /^[\u0009\u000a\u000c <&]/;                                                            // 2315
                                                                                                               // 2316
var getCharRefNumber = makeRegexMatcher(/^(?:[xX][0-9a-fA-F]+|[0-9]+);/);                                      // 2317
                                                                                                               // 2318
var BIG_BAD_CODEPOINTS = (function (obj) {                                                                     // 2319
  var list = [0x1FFFE, 0x1FFFF, 0x2FFFE, 0x2FFFF, 0x3FFFE, 0x3FFFF,                                            // 2320
              0x4FFFE, 0x4FFFF, 0x5FFFE, 0x5FFFF, 0x6FFFE, 0x6FFFF,                                            // 2321
              0x7FFFE, 0x7FFFF, 0x8FFFE, 0x8FFFF, 0x9FFFE, 0x9FFFF,                                            // 2322
              0xAFFFE, 0xAFFFF, 0xBFFFE, 0xBFFFF, 0xCFFFE, 0xCFFFF,                                            // 2323
              0xDFFFE, 0xDFFFF, 0xEFFFE, 0xEFFFF, 0xFFFFE, 0xFFFFF,                                            // 2324
              0x10FFFE, 0x10FFFF];                                                                             // 2325
  for (var i = 0; i < list.length; i++)                                                                        // 2326
    obj[list[i]] = true;                                                                                       // 2327
                                                                                                               // 2328
  return obj;                                                                                                  // 2329
})({});                                                                                                        // 2330
                                                                                                               // 2331
var isLegalCodepoint = function (cp) {                                                                         // 2332
  if ((cp === 0) ||                                                                                            // 2333
      (cp >= 0x80 && cp <= 0x9f) ||                                                                            // 2334
      (cp >= 0xd800 && cp <= 0xdfff) ||                                                                        // 2335
      (cp >= 0x10ffff) ||                                                                                      // 2336
      (cp >= 0x1 && cp <= 0x8) ||                                                                              // 2337
      (cp === 0xb) ||                                                                                          // 2338
      (cp >= 0xd && cp <= 0x1f) ||                                                                             // 2339
      (cp >= 0x7f && cp <= 0x9f) ||                                                                            // 2340
      (cp >= 0xfdd0 && cp <= 0xfdef) ||                                                                        // 2341
      (cp === 0xfffe) ||                                                                                       // 2342
      (cp === 0xffff) ||                                                                                       // 2343
      (cp >= 0x10000 && BIG_BAD_CODEPOINTS[cp]))                                                               // 2344
    return false;                                                                                              // 2345
                                                                                                               // 2346
  return true;                                                                                                 // 2347
};                                                                                                             // 2348
                                                                                                               // 2349
// http://www.whatwg.org/specs/web-apps/current-work/multipage/tokenization.html#consume-a-character-reference // 2350
//                                                                                                             // 2351
// Matches a character reference if possible, including the initial `&`.                                       // 2352
// Fails fatally in error cases (assuming an initial `&` is matched), like a disallowed codepoint              // 2353
// number or a bad named character reference.                                                                  // 2354
//                                                                                                             // 2355
// `inAttribute` is truthy if we are in an attribute value.                                                    // 2356
//                                                                                                             // 2357
// `allowedChar` is an optional character that,                                                                // 2358
// if found after the initial `&`, aborts parsing silently rather than failing fatally.  In real use it is     // 2359
// either `"`, `'`, or `>` and is supplied when parsing attribute values.  NOTE: In the current spec, the      // 2360
// value of `allowedChar` doesn't actually seem to end up mattering, but there is still some debate about      // 2361
// the right approach to ampersands.                                                                           // 2362
getCharacterReference = HTMLTools.Parse.getCharacterReference = function (scanner, inAttribute, allowedChar) { // 2363
  if (scanner.peek() !== '&')                                                                                  // 2364
    // no ampersand                                                                                            // 2365
    return null;                                                                                               // 2366
                                                                                                               // 2367
  var afterAmp = scanner.rest().charAt(1);                                                                     // 2368
                                                                                                               // 2369
  if (afterAmp === '#') {                                                                                      // 2370
    scanner.pos += 2;                                                                                          // 2371
    // refNumber includes possible initial `x` and final semicolon                                             // 2372
    var refNumber = getCharRefNumber(scanner);                                                                 // 2373
    // At this point we've consumed the input, so we're committed to returning                                 // 2374
    // something or failing fatally.                                                                           // 2375
    if (! refNumber)                                                                                           // 2376
      scanner.fatal("Invalid numerical character reference starting with &#");                                 // 2377
    var codepoint;                                                                                             // 2378
    if (refNumber.charAt(0) === 'x' || refNumber.charAt(0) === 'X') {                                          // 2379
      // hex                                                                                                   // 2380
      var hex = refNumber.slice(1, -1);                                                                        // 2381
      while (hex.charAt(0) === '0')                                                                            // 2382
        hex = hex.slice(1);                                                                                    // 2383
      if (hex.length > 6)                                                                                      // 2384
        scanner.fatal("Numerical character reference too large: 0x" + hex);                                    // 2385
      codepoint = parseInt(hex || "0", 16);                                                                    // 2386
    } else {                                                                                                   // 2387
      var dec = refNumber.slice(0, -1);                                                                        // 2388
      while (dec.charAt(0) === '0')                                                                            // 2389
        dec = dec.slice(1);                                                                                    // 2390
      if (dec.length > 7)                                                                                      // 2391
        scanner.fatal("Numerical character reference too large: " + dec);                                      // 2392
      codepoint = parseInt(dec || "0", 10);                                                                    // 2393
    }                                                                                                          // 2394
    if (! isLegalCodepoint(codepoint))                                                                         // 2395
      scanner.fatal("Illegal codepoint in numerical character reference: &#" + refNumber);                     // 2396
    return { t: 'CharRef',                                                                                     // 2397
             v: '&#' + refNumber,                                                                              // 2398
             cp: [codepoint] };                                                                                // 2399
  } else if ((! afterAmp) // EOF                                                                               // 2400
             || (allowedChar && afterAmp === allowedChar)                                                      // 2401
             || ALLOWED_AFTER_AMP.test(afterAmp)) {                                                            // 2402
    return null;                                                                                               // 2403
  } else {                                                                                                     // 2404
    var namedEntity = getNamedCharRef(scanner, inAttribute);                                                   // 2405
    if (namedEntity) {                                                                                         // 2406
      return { t: 'CharRef',                                                                                   // 2407
               v: namedEntity,                                                                                 // 2408
               cp: getCodePoints(namedEntity) };                                                               // 2409
    } else {                                                                                                   // 2410
      return null;                                                                                             // 2411
    }                                                                                                          // 2412
  }                                                                                                            // 2413
};                                                                                                             // 2414
                                                                                                               // 2415
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                             //
// packages/html-tools/tokenize.js                                                                             //
//                                                                                                             //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                               //
// Token types:                                                                                                // 1
//                                                                                                             // 2
// { t: 'Doctype',                                                                                             // 3
//   v: String (entire Doctype declaration from the source),                                                   // 4
//   name: String,                                                                                             // 5
//   systemId: String (optional),                                                                              // 6
//   publicId: String (optional)                                                                               // 7
// }                                                                                                           // 8
//                                                                                                             // 9
// { t: 'Comment',                                                                                             // 10
//   v: String (not including "<!--" and "-->")                                                                // 11
// }                                                                                                           // 12
//                                                                                                             // 13
// { t: 'Chars',                                                                                               // 14
//   v: String (pure text like you might pass to document.createTextNode,                                      // 15
//              no character references)                                                                       // 16
// }                                                                                                           // 17
//                                                                                                             // 18
// { t: 'Tag',                                                                                                 // 19
//   isEnd: Boolean (optional),                                                                                // 20
//   isSelfClosing: Boolean (optional),                                                                        // 21
//   n: String (tag name, in lowercase or camel case),                                                         // 22
//   attrs: { String: [zero or more 'Chars' or 'CharRef' objects] }                                            // 23
//     (only for start tags; required)                                                                         // 24
// }                                                                                                           // 25
//                                                                                                             // 26
// { t: 'CharRef',                                                                                             // 27
//   v: String (entire character reference from the source, e.g. "&amp;"),                                     // 28
//   cp: [Integer] (array of Unicode code point numbers it expands to)                                         // 29
// }                                                                                                           // 30
//                                                                                                             // 31
// We keep around both the original form of the character reference and its                                    // 32
// expansion so that subsequent processing steps have the option to                                            // 33
// re-emit it (if they are generating HTML) or interpret it.  Named and                                        // 34
// numerical code points may be more than 16 bits, in which case they                                          // 35
// need to passed through codePointToString to make a JavaScript string.                                       // 36
// Most named entities and all numeric character references are one codepoint                                  // 37
// (e.g. "&amp;" is [38]), but a few are two codepoints.                                                       // 38
//                                                                                                             // 39
// { t: 'Special',                                                                                             // 40
//   v: { ... anything ... }                                                                                   // 41
// }                                                                                                           // 42
                                                                                                               // 43
// The HTML tokenization spec says to preprocess the input stream to replace                                   // 44
// CR(LF)? with LF.  However, preprocessing `scanner` would complicate things                                  // 45
// by making indexes not match the input (e.g. for error messages), so we just                                 // 46
// keep in mind as we go along that an LF might be represented by CRLF or CR.                                  // 47
// In most cases, it doesn't actually matter what combination of whitespace                                    // 48
// characters are present (e.g. inside tags).                                                                  // 49
var HTML_SPACE = /^[\f\n\r\t ]/;                                                                               // 50
                                                                                                               // 51
var convertCRLF = function (str) {                                                                             // 52
  return str.replace(/\r\n?/g, '\n');                                                                          // 53
};                                                                                                             // 54
                                                                                                               // 55
getComment = HTMLTools.Parse.getComment = function (scanner) {                                                 // 56
  if (scanner.rest().slice(0, 4) !== '<!--')                                                                   // 57
    return null;                                                                                               // 58
  scanner.pos += 4;                                                                                            // 59
                                                                                                               // 60
  // Valid comments are easy to parse; they end at the first `--`!                                             // 61
  // Our main job is throwing errors.                                                                          // 62
                                                                                                               // 63
  var rest = scanner.rest();                                                                                   // 64
  if (rest.charAt(0) === '>' || rest.slice(0, 2) === '->')                                                     // 65
    scanner.fatal("HTML comment can't start with > or ->");                                                    // 66
                                                                                                               // 67
  var closePos = rest.indexOf('-->');                                                                          // 68
  if (closePos < 0)                                                                                            // 69
    scanner.fatal("Unclosed HTML comment");                                                                    // 70
                                                                                                               // 71
  var commentContents = rest.slice(0, closePos);                                                               // 72
  if (commentContents.slice(-1) === '-')                                                                       // 73
    scanner.fatal("HTML comment must end at first `--`");                                                      // 74
  if (commentContents.indexOf("--") >= 0)                                                                      // 75
    scanner.fatal("HTML comment cannot contain `--` anywhere");                                                // 76
  if (commentContents.indexOf('\u0000') >= 0)                                                                  // 77
    scanner.fatal("HTML comment cannot contain NULL");                                                         // 78
                                                                                                               // 79
  scanner.pos += closePos + 3;                                                                                 // 80
                                                                                                               // 81
  return { t: 'Comment',                                                                                       // 82
           v: convertCRLF(commentContents) };                                                                  // 83
};                                                                                                             // 84
                                                                                                               // 85
var skipSpaces = function (scanner) {                                                                          // 86
  while (HTML_SPACE.test(scanner.peek()))                                                                      // 87
    scanner.pos++;                                                                                             // 88
};                                                                                                             // 89
                                                                                                               // 90
var requireSpaces = function (scanner) {                                                                       // 91
  if (! HTML_SPACE.test(scanner.peek()))                                                                       // 92
    scanner.fatal("Expected space");                                                                           // 93
  skipSpaces(scanner);                                                                                         // 94
};                                                                                                             // 95
                                                                                                               // 96
var getDoctypeQuotedString = function (scanner) {                                                              // 97
  var quote = scanner.peek();                                                                                  // 98
  if (! (quote === '"' || quote === "'"))                                                                      // 99
    scanner.fatal("Expected single or double quote in DOCTYPE");                                               // 100
  scanner.pos++;                                                                                               // 101
                                                                                                               // 102
  if (scanner.peek() === quote)                                                                                // 103
    // prevent a falsy return value (empty string)                                                             // 104
    scanner.fatal("Malformed DOCTYPE");                                                                        // 105
                                                                                                               // 106
  var str = '';                                                                                                // 107
  var ch;                                                                                                      // 108
  while ((ch = scanner.peek()), ch !== quote) {                                                                // 109
    if ((! ch) || (ch === '\u0000') || (ch === '>'))                                                           // 110
      scanner.fatal("Malformed DOCTYPE");                                                                      // 111
    str += ch;                                                                                                 // 112
    scanner.pos++;                                                                                             // 113
  }                                                                                                            // 114
                                                                                                               // 115
  scanner.pos++;                                                                                               // 116
                                                                                                               // 117
  return str;                                                                                                  // 118
};                                                                                                             // 119
                                                                                                               // 120
// See http://www.whatwg.org/specs/web-apps/current-work/multipage/syntax.html#the-doctype.                    // 121
//                                                                                                             // 122
// If `getDocType` sees "<!DOCTYPE" (case-insensitive), it will match or fail fatally.                         // 123
getDoctype = HTMLTools.Parse.getDoctype = function (scanner) {                                                 // 124
  if (HTMLTools.asciiLowerCase(scanner.rest().slice(0, 9)) !== '<!doctype')                                    // 125
    return null;                                                                                               // 126
  var start = scanner.pos;                                                                                     // 127
  scanner.pos += 9;                                                                                            // 128
                                                                                                               // 129
  requireSpaces(scanner);                                                                                      // 130
                                                                                                               // 131
  var ch = scanner.peek();                                                                                     // 132
  if ((! ch) || (ch === '>') || (ch === '\u0000'))                                                             // 133
    scanner.fatal('Malformed DOCTYPE');                                                                        // 134
  var name = ch;                                                                                               // 135
  scanner.pos++;                                                                                               // 136
                                                                                                               // 137
  while ((ch = scanner.peek()), ! (HTML_SPACE.test(ch) || ch === '>')) {                                       // 138
    if ((! ch) || (ch === '\u0000'))                                                                           // 139
      scanner.fatal('Malformed DOCTYPE');                                                                      // 140
    name += ch;                                                                                                // 141
    scanner.pos++;                                                                                             // 142
  }                                                                                                            // 143
  name = HTMLTools.asciiLowerCase(name);                                                                       // 144
                                                                                                               // 145
  // Now we're looking at a space or a `>`.                                                                    // 146
  skipSpaces(scanner);                                                                                         // 147
                                                                                                               // 148
  var systemId = null;                                                                                         // 149
  var publicId = null;                                                                                         // 150
                                                                                                               // 151
  if (scanner.peek() !== '>') {                                                                                // 152
    // Now we're essentially in the "After DOCTYPE name state" of the tokenizer,                               // 153
    // but we're not looking at space or `>`.                                                                  // 154
                                                                                                               // 155
    // this should be "public" or "system".                                                                    // 156
    var publicOrSystem = HTMLTools.asciiLowerCase(scanner.rest().slice(0, 6));                                 // 157
                                                                                                               // 158
    if (publicOrSystem === 'system') {                                                                         // 159
      scanner.pos += 6;                                                                                        // 160
      requireSpaces(scanner);                                                                                  // 161
      systemId = getDoctypeQuotedString(scanner);                                                              // 162
      skipSpaces(scanner);                                                                                     // 163
      if (scanner.peek() !== '>')                                                                              // 164
        scanner.fatal("Malformed DOCTYPE");                                                                    // 165
    } else if (publicOrSystem === 'public') {                                                                  // 166
      scanner.pos += 6;                                                                                        // 167
      requireSpaces(scanner);                                                                                  // 168
      publicId = getDoctypeQuotedString(scanner);                                                              // 169
      if (scanner.peek() !== '>') {                                                                            // 170
        requireSpaces(scanner);                                                                                // 171
        if (scanner.peek() !== '>') {                                                                          // 172
          systemId = getDoctypeQuotedString(scanner);                                                          // 173
          skipSpaces(scanner);                                                                                 // 174
          if (scanner.peek() !== '>')                                                                          // 175
            scanner.fatal("Malformed DOCTYPE");                                                                // 176
        }                                                                                                      // 177
      }                                                                                                        // 178
    } else {                                                                                                   // 179
      scanner.fatal("Expected PUBLIC or SYSTEM in DOCTYPE");                                                   // 180
    }                                                                                                          // 181
  }                                                                                                            // 182
                                                                                                               // 183
  // looking at `>`                                                                                            // 184
  scanner.pos++;                                                                                               // 185
  var result = { t: 'Doctype',                                                                                 // 186
                 v: scanner.input.slice(start, scanner.pos),                                                   // 187
                 name: name };                                                                                 // 188
                                                                                                               // 189
  if (systemId)                                                                                                // 190
    result.systemId = systemId;                                                                                // 191
  if (publicId)                                                                                                // 192
    result.publicId = publicId;                                                                                // 193
                                                                                                               // 194
  return result;                                                                                               // 195
};                                                                                                             // 196
                                                                                                               // 197
// The special character `{` is only allowed as the first character                                            // 198
// of a Chars, so that we have a chance to detect template tags.                                               // 199
var getChars = makeRegexMatcher(/^[^&<\u0000][^&<\u0000{]*/);                                                  // 200
                                                                                                               // 201
// Returns the next HTML token, or `null` if we reach EOF.                                                     // 202
//                                                                                                             // 203
// Note that if we have a `getSpecialTag` function that sometimes                                              // 204
// consumes characters and emits nothing (e.g. in the case of template                                         // 205
// comments), we may go from not-at-EOF to at-EOF and return `null`,                                           // 206
// while otherwise we always find some token to return.                                                        // 207
getHTMLToken = HTMLTools.Parse.getHTMLToken = function (scanner, dataMode) {                                   // 208
  var result = null;                                                                                           // 209
  if (scanner.getSpecialTag) {                                                                                 // 210
    var lastPos = -1;                                                                                          // 211
    // Try to parse a "special tag" by calling out to the provided                                             // 212
    // `getSpecialTag` function.  If the function returns `null` but                                           // 213
    // consumes characters, it must have parsed a comment or something,                                        // 214
    // so we loop and try it again.  If it ever returns `null` without                                         // 215
    // consuming anything, that means it didn't see anything interesting                                       // 216
    // so we look for a normal token.  If it returns a truthy value,                                           // 217
    // the value must be an object.  We wrap it in a Special token.                                            // 218
    while ((! result) && scanner.pos > lastPos) {                                                              // 219
      lastPos = scanner.pos;                                                                                   // 220
      result = scanner.getSpecialTag(                                                                          // 221
        scanner,                                                                                               // 222
        (dataMode === 'rcdata' ? TEMPLATE_TAG_POSITION.IN_RCDATA :                                             // 223
         (dataMode === 'rawtext' ? TEMPLATE_TAG_POSITION.IN_RAWTEXT :                                          // 224
          TEMPLATE_TAG_POSITION.ELEMENT)));                                                                    // 225
    }                                                                                                          // 226
    if (result)                                                                                                // 227
      return { t: 'Special', v: result };                                                                      // 228
  }                                                                                                            // 229
                                                                                                               // 230
  var chars = getChars(scanner);                                                                               // 231
  if (chars)                                                                                                   // 232
    return { t: 'Chars',                                                                                       // 233
             v: convertCRLF(chars) };                                                                          // 234
                                                                                                               // 235
  var ch = scanner.peek();                                                                                     // 236
  if (! ch)                                                                                                    // 237
    return null; // EOF                                                                                        // 238
                                                                                                               // 239
  if (ch === '\u0000')                                                                                         // 240
    scanner.fatal("Illegal NULL character");                                                                   // 241
                                                                                                               // 242
  if (ch === '&') {                                                                                            // 243
    if (dataMode !== 'rawtext') {                                                                              // 244
      var charRef = getCharacterReference(scanner);                                                            // 245
      if (charRef)                                                                                             // 246
        return charRef;                                                                                        // 247
    }                                                                                                          // 248
                                                                                                               // 249
    scanner.pos++;                                                                                             // 250
    return { t: 'Chars',                                                                                       // 251
             v: '&' };                                                                                         // 252
  }                                                                                                            // 253
                                                                                                               // 254
  // If we're here, we're looking at `<`.                                                                      // 255
                                                                                                               // 256
  if (scanner.peek() === '<' && dataMode) {                                                                    // 257
    // don't interpret tags                                                                                    // 258
    scanner.pos++;                                                                                             // 259
    return { t: 'Chars',                                                                                       // 260
             v: '<' };                                                                                         // 261
  }                                                                                                            // 262
                                                                                                               // 263
  // `getTag` will claim anything starting with `<` not followed by `!`.                                       // 264
  // `getComment` takes `<!--` and getDoctype takes `<!doctype`.                                               // 265
  result = (getTagToken(scanner) || getComment(scanner) || getDoctype(scanner));                               // 266
                                                                                                               // 267
  if (result)                                                                                                  // 268
    return result;                                                                                             // 269
                                                                                                               // 270
  scanner.fatal("Unexpected `<!` directive.");                                                                 // 271
};                                                                                                             // 272
                                                                                                               // 273
var getTagName = makeRegexMatcher(/^[a-zA-Z][^\f\n\r\t />{]*/);                                                // 274
var getClangle = makeRegexMatcher(/^>/);                                                                       // 275
var getSlash = makeRegexMatcher(/^\//);                                                                        // 276
var getAttributeName = makeRegexMatcher(/^[^>/\u0000"'<=\f\n\r\t ][^\f\n\r\t /=>"'<\u0000]*/);                 // 277
                                                                                                               // 278
// Try to parse `>` or `/>`, mutating `tag` to be self-closing in the latter                                   // 279
// case (and failing fatally if `/` isn't followed by `>`).                                                    // 280
// Return tag if successful.                                                                                   // 281
var handleEndOfTag = function (scanner, tag) {                                                                 // 282
  if (getClangle(scanner))                                                                                     // 283
    return tag;                                                                                                // 284
                                                                                                               // 285
  if (getSlash(scanner)) {                                                                                     // 286
    if (! getClangle(scanner))                                                                                 // 287
      scanner.fatal("Expected `>` after `/`");                                                                 // 288
    tag.isSelfClosing = true;                                                                                  // 289
    return tag;                                                                                                // 290
  }                                                                                                            // 291
                                                                                                               // 292
  return null;                                                                                                 // 293
};                                                                                                             // 294
                                                                                                               // 295
var getQuotedAttributeValue = function (scanner, quote) {                                                      // 296
  if (scanner.peek() !== quote)                                                                                // 297
    return null;                                                                                               // 298
  scanner.pos++;                                                                                               // 299
                                                                                                               // 300
  var tokens = [];                                                                                             // 301
  var charsTokenToExtend = null;                                                                               // 302
                                                                                                               // 303
  var charRef;                                                                                                 // 304
  while (true) {                                                                                               // 305
    var ch = scanner.peek();                                                                                   // 306
    var special;                                                                                               // 307
    var curPos = scanner.pos;                                                                                  // 308
    if (ch === quote) {                                                                                        // 309
      scanner.pos++;                                                                                           // 310
      return tokens;                                                                                           // 311
    } else if (! ch) {                                                                                         // 312
      scanner.fatal("Unclosed quoted attribute in tag");                                                       // 313
    } else if (ch === '\u0000') {                                                                              // 314
      scanner.fatal("Unexpected NULL character in attribute value");                                           // 315
    } else if (ch === '&' && (charRef = getCharacterReference(scanner, true, quote))) {                        // 316
      tokens.push(charRef);                                                                                    // 317
      charsTokenToExtend = null;                                                                               // 318
    } else if (scanner.getSpecialTag &&                                                                        // 319
               ((special = scanner.getSpecialTag(scanner,                                                      // 320
                                                 TEMPLATE_TAG_POSITION.IN_ATTRIBUTE)) ||                       // 321
                scanner.pos > curPos /* `{{! comment}}` */)) {                                                 // 322
      // note: this code is messy because it turns out to be annoying for getSpecialTag                        // 323
      // to return `null` when it scans a comment.  Also, this code should be de-duped                         // 324
      // with getUnquotedAttributeValue                                                                        // 325
      if (special) {                                                                                           // 326
        tokens.push({t: 'Special', v: special});                                                               // 327
        charsTokenToExtend = null;                                                                             // 328
      }                                                                                                        // 329
    } else {                                                                                                   // 330
      if (! charsTokenToExtend) {                                                                              // 331
        charsTokenToExtend = { t: 'Chars', v: '' };                                                            // 332
        tokens.push(charsTokenToExtend);                                                                       // 333
      }                                                                                                        // 334
      charsTokenToExtend.v += (ch === '\r' ? '\n' : ch);                                                       // 335
      scanner.pos++;                                                                                           // 336
      if (ch === '\r' && scanner.peek() === '\n')                                                              // 337
        scanner.pos++;                                                                                         // 338
    }                                                                                                          // 339
  }                                                                                                            // 340
};                                                                                                             // 341
                                                                                                               // 342
var getUnquotedAttributeValue = function (scanner) {                                                           // 343
  var tokens = [];                                                                                             // 344
  var charsTokenToExtend = null;                                                                               // 345
                                                                                                               // 346
  var charRef;                                                                                                 // 347
  while (true) {                                                                                               // 348
    var ch = scanner.peek();                                                                                   // 349
    var special;                                                                                               // 350
    var curPos = scanner.pos;                                                                                  // 351
    if (HTML_SPACE.test(ch) || ch === '>') {                                                                   // 352
      return tokens;                                                                                           // 353
    } else if (! ch) {                                                                                         // 354
      scanner.fatal("Unclosed attribute in tag");                                                              // 355
    } else if ('\u0000"\'<=`'.indexOf(ch) >= 0) {                                                              // 356
      scanner.fatal("Unexpected character in attribute value");                                                // 357
    } else if (ch === '&' && (charRef = getCharacterReference(scanner, true, '>'))) {                          // 358
      tokens.push(charRef);                                                                                    // 359
      charsTokenToExtend = null;                                                                               // 360
    } else if (scanner.getSpecialTag &&                                                                        // 361
               ((special = scanner.getSpecialTag(scanner,                                                      // 362
                                                 TEMPLATE_TAG_POSITION.IN_ATTRIBUTE)) ||                       // 363
                scanner.pos > curPos /* `{{! comment}}` */)) {                                                 // 364
      if (special) {                                                                                           // 365
        tokens.push({t: 'Special', v: special});                                                               // 366
        charsTokenToExtend = null;                                                                             // 367
      }                                                                                                        // 368
    } else {                                                                                                   // 369
      if (! charsTokenToExtend) {                                                                              // 370
        charsTokenToExtend = { t: 'Chars', v: '' };                                                            // 371
        tokens.push(charsTokenToExtend);                                                                       // 372
      }                                                                                                        // 373
      charsTokenToExtend.v += ch;                                                                              // 374
      scanner.pos++;                                                                                           // 375
    }                                                                                                          // 376
  }                                                                                                            // 377
};                                                                                                             // 378
                                                                                                               // 379
getTagToken = HTMLTools.Parse.getTagToken = function (scanner) {                                               // 380
  if (! (scanner.peek() === '<' && scanner.rest().charAt(1) !== '!'))                                          // 381
    return null;                                                                                               // 382
  scanner.pos++;                                                                                               // 383
                                                                                                               // 384
  var tag = { t: 'Tag' };                                                                                      // 385
                                                                                                               // 386
  // now looking at the character after `<`, which is not a `!`                                                // 387
  if (scanner.peek() === '/') {                                                                                // 388
    tag.isEnd = true;                                                                                          // 389
    scanner.pos++;                                                                                             // 390
  }                                                                                                            // 391
                                                                                                               // 392
  var tagName = getTagName(scanner);                                                                           // 393
  if (! tagName)                                                                                               // 394
    scanner.fatal("Expected tag name after `<`");                                                              // 395
  tag.n = HTMLTools.properCaseTagName(tagName);                                                                // 396
                                                                                                               // 397
  if (scanner.peek() === '/' && tag.isEnd)                                                                     // 398
    scanner.fatal("End tag can't have trailing slash");                                                        // 399
  if (handleEndOfTag(scanner, tag))                                                                            // 400
    return tag;                                                                                                // 401
                                                                                                               // 402
  if (scanner.isEOF())                                                                                         // 403
    scanner.fatal("Unclosed `<`");                                                                             // 404
                                                                                                               // 405
  if (! HTML_SPACE.test(scanner.peek()))                                                                       // 406
    // e.g. `<a{{b}}>`                                                                                         // 407
    scanner.fatal("Expected space after tag name");                                                            // 408
                                                                                                               // 409
  // we're now in "Before attribute name state" of the tokenizer                                               // 410
  skipSpaces(scanner);                                                                                         // 411
                                                                                                               // 412
  if (scanner.peek() === '/' && tag.isEnd)                                                                     // 413
    scanner.fatal("End tag can't have trailing slash");                                                        // 414
  if (handleEndOfTag(scanner, tag))                                                                            // 415
    return tag;                                                                                                // 416
                                                                                                               // 417
  if (tag.isEnd)                                                                                               // 418
    scanner.fatal("End tag can't have attributes");                                                            // 419
                                                                                                               // 420
  tag.attrs = {};                                                                                              // 421
                                                                                                               // 422
  while (true) {                                                                                               // 423
    // Note: at the top of this loop, we've already skipped any spaces.                                        // 424
                                                                                                               // 425
    // This will be set to true if after parsing the attribute, we should                                      // 426
    // require spaces (or else an end of tag, i.e. `>` or `/>`).                                               // 427
    var spacesRequiredAfter = false;                                                                           // 428
                                                                                                               // 429
    // first, try for a special tag.                                                                           // 430
    var curPos = scanner.pos;                                                                                  // 431
    var special = (scanner.getSpecialTag &&                                                                    // 432
                   scanner.getSpecialTag(scanner,                                                              // 433
                                         TEMPLATE_TAG_POSITION.IN_START_TAG));                                 // 434
    if (special || (scanner.pos > curPos)) {                                                                   // 435
      if (special) {                                                                                           // 436
        tag.attrs.$specials = (tag.attrs.$specials || []);                                                     // 437
        tag.attrs.$specials.push({ t: 'Special', v: special });                                                // 438
      } // else, must have scanned a `{{! comment}}`                                                           // 439
                                                                                                               // 440
      spacesRequiredAfter = true;                                                                              // 441
    } else {                                                                                                   // 442
                                                                                                               // 443
      var attributeName = getAttributeName(scanner);                                                           // 444
      if (! attributeName)                                                                                     // 445
        scanner.fatal("Expected attribute name in tag");                                                       // 446
      // Throw error on `{` in attribute name.  This provides *some* error message                             // 447
      // if someone writes `<a x{{y}}>` or `<a x{{y}}=z>`.  The HTML tokenization                              // 448
      // spec doesn't say that `{` is invalid, but the DOM API (setAttribute) won't                            // 449
      // allow it, so who cares.                                                                               // 450
      if (attributeName.indexOf('{') >= 0)                                                                     // 451
        scanner.fatal("Unexpected `{` in attribute name.");                                                    // 452
      attributeName = HTMLTools.properCaseAttributeName(attributeName);                                        // 453
                                                                                                               // 454
      if (tag.attrs.hasOwnProperty(attributeName))                                                             // 455
        scanner.fatal("Duplicate attribute in tag: " + attributeName);                                         // 456
                                                                                                               // 457
      tag.attrs[attributeName] = [];                                                                           // 458
                                                                                                               // 459
      skipSpaces(scanner);                                                                                     // 460
                                                                                                               // 461
      if (handleEndOfTag(scanner, tag))                                                                        // 462
        return tag;                                                                                            // 463
                                                                                                               // 464
      var ch = scanner.peek();                                                                                 // 465
      if (! ch)                                                                                                // 466
        scanner.fatal("Unclosed <");                                                                           // 467
      if ('\u0000"\'<'.indexOf(ch) >= 0)                                                                       // 468
        scanner.fatal("Unexpected character after attribute name in tag");                                     // 469
                                                                                                               // 470
      if (ch === '=') {                                                                                        // 471
        scanner.pos++;                                                                                         // 472
                                                                                                               // 473
        skipSpaces(scanner);                                                                                   // 474
                                                                                                               // 475
        ch = scanner.peek();                                                                                   // 476
        if (! ch)                                                                                              // 477
          scanner.fatal("Unclosed <");                                                                         // 478
        if ('\u0000><=`'.indexOf(ch) >= 0)                                                                     // 479
          scanner.fatal("Unexpected character after = in tag");                                                // 480
                                                                                                               // 481
        if ((ch === '"') || (ch === "'"))                                                                      // 482
          tag.attrs[attributeName] = getQuotedAttributeValue(scanner, ch);                                     // 483
        else                                                                                                   // 484
          tag.attrs[attributeName] = getUnquotedAttributeValue(scanner);                                       // 485
                                                                                                               // 486
        spacesRequiredAfter = true;                                                                            // 487
      }                                                                                                        // 488
    }                                                                                                          // 489
    // now we are in the "post-attribute" position, whether it was a special attribute                         // 490
    // (like `{{x}}`) or a normal one (like `x` or `x=y`).                                                     // 491
                                                                                                               // 492
    if (handleEndOfTag(scanner, tag))                                                                          // 493
      return tag;                                                                                              // 494
                                                                                                               // 495
    if (scanner.isEOF())                                                                                       // 496
      scanner.fatal("Unclosed `<`");                                                                           // 497
                                                                                                               // 498
    if (spacesRequiredAfter)                                                                                   // 499
      requireSpaces(scanner);                                                                                  // 500
    else                                                                                                       // 501
      skipSpaces(scanner);                                                                                     // 502
                                                                                                               // 503
    if (handleEndOfTag(scanner, tag))                                                                          // 504
      return tag;                                                                                              // 505
  }                                                                                                            // 506
};                                                                                                             // 507
                                                                                                               // 508
TEMPLATE_TAG_POSITION = HTMLTools.TEMPLATE_TAG_POSITION = {                                                    // 509
  ELEMENT: 1,                                                                                                  // 510
  IN_START_TAG: 2,                                                                                             // 511
  IN_ATTRIBUTE: 3,                                                                                             // 512
  IN_RCDATA: 4,                                                                                                // 513
  IN_RAWTEXT: 5                                                                                                // 514
};                                                                                                             // 515
                                                                                                               // 516
// tagName must be proper case                                                                                 // 517
isLookingAtEndTag = function (scanner, tagName) {                                                              // 518
  var rest = scanner.rest();                                                                                   // 519
  var pos = 0; // into rest                                                                                    // 520
  var firstPart = /^<\/([a-zA-Z]+)/.exec(rest);                                                                // 521
  if (firstPart &&                                                                                             // 522
      HTMLTools.properCaseTagName(firstPart[1]) === tagName) {                                                 // 523
    // we've seen `</foo`, now see if the end tag continues                                                    // 524
    pos += firstPart[0].length;                                                                                // 525
    while (pos < rest.length && HTML_SPACE.test(rest.charAt(pos)))                                             // 526
      pos++;                                                                                                   // 527
    if (pos < rest.length && rest.charAt(pos) === '>')                                                         // 528
      return true;                                                                                             // 529
  }                                                                                                            // 530
  return false;                                                                                                // 531
};                                                                                                             // 532
                                                                                                               // 533
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                             //
// packages/html-tools/parse.js                                                                                //
//                                                                                                             //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                               //
                                                                                                               // 1
HTMLTools.Special = function (value) {                                                                         // 2
  if (! (this instanceof HTMLTools.Special))                                                                   // 3
    // called without `new`                                                                                    // 4
    return new HTMLTools.Special(value);                                                                       // 5
                                                                                                               // 6
  this.value = value;                                                                                          // 7
};                                                                                                             // 8
HTMLTools.Special.prototype.toJS = function (options) {                                                        // 9
  // XXX this is weird because toJS is defined in spacebars-compiler.                                          // 10
  // Think about where HTMLTools.Special and toJS should go.                                                   // 11
  return HTML.Tag.prototype.toJS.call({tagName: 'HTMLTools.Special',                                           // 12
                                       attrs: this.value,                                                      // 13
                                       children: []},                                                          // 14
                                      options);                                                                // 15
};                                                                                                             // 16
                                                                                                               // 17
// Parse a "fragment" of HTML, up to the end of the input or a particular                                      // 18
// template tag (using the "shouldStop" option).                                                               // 19
HTMLTools.parseFragment = function (input, options) {                                                          // 20
  var scanner;                                                                                                 // 21
  if (typeof input === 'string')                                                                               // 22
    scanner = new Scanner(input);                                                                              // 23
  else                                                                                                         // 24
    // input can be a scanner.  We'd better not have a different                                               // 25
    // value for the "getSpecialTag" option as when the scanner                                                // 26
    // was created, because we don't do anything special to reset                                              // 27
    // the value (which is attached to the scanner).                                                           // 28
    scanner = input;                                                                                           // 29
                                                                                                               // 30
  // ```                                                                                                       // 31
  // { getSpecialTag: function (scanner, templateTagPosition) {                                                // 32
  //     if (templateTagPosition === HTMLTools.TEMPLATE_TAG_POSITION.ELEMENT) {                                // 33
  //       ...                                                                                                 // 34
  // ```                                                                                                       // 35
  if (options && options.getSpecialTag)                                                                        // 36
    scanner.getSpecialTag = options.getSpecialTag;                                                             // 37
                                                                                                               // 38
  // function (scanner) -> boolean                                                                             // 39
  var shouldStop = options && options.shouldStop;                                                              // 40
                                                                                                               // 41
  var result;                                                                                                  // 42
  if (options && options.textMode) {                                                                           // 43
    if (options.textMode === HTML.TEXTMODE.STRING) {                                                           // 44
      result = getRawText(scanner, null, shouldStop);                                                          // 45
    } else if (options.textMode === HTML.TEXTMODE.RCDATA) {                                                    // 46
      result = getRCData(scanner, null, shouldStop);                                                           // 47
    } else {                                                                                                   // 48
      throw new Error("Unsupported textMode: " + options.textMode);                                            // 49
    }                                                                                                          // 50
  } else {                                                                                                     // 51
    result = getContent(scanner, shouldStop);                                                                  // 52
  }                                                                                                            // 53
  if (! scanner.isEOF()) {                                                                                     // 54
    // If we aren't at the end of the input, we either stopped at an unmatched                                 // 55
    // HTML end tag or at a template tag (like `{{else}}` or `{{/if}}`).                                       // 56
    // Detect the former case (stopped at an HTML end tag) and throw a good                                    // 57
    // error.                                                                                                  // 58
                                                                                                               // 59
    var posBefore = scanner.pos;                                                                               // 60
                                                                                                               // 61
    try {                                                                                                      // 62
      var endTag = getHTMLToken(scanner);                                                                      // 63
    } catch (e) {                                                                                              // 64
      // ignore errors from getSpecialTag                                                                      // 65
    }                                                                                                          // 66
                                                                                                               // 67
    // XXX we make some assumptions about shouldStop here, like that it                                        // 68
    // won't tell us to stop at an HTML end tag.  Should refactor                                              // 69
    // `shouldStop` into something more suitable.                                                              // 70
    if (endTag && endTag.t === 'Tag' && endTag.isEnd) {                                                        // 71
      var closeTag = endTag.n;                                                                                 // 72
      var isVoidElement = HTML.isVoidElement(closeTag);                                                        // 73
      scanner.fatal("Unexpected HTML close tag" +                                                              // 74
                    (isVoidElement ?                                                                           // 75
                     '.  <' + endTag.n + '> should have no close tag.' : ''));                                 // 76
    }                                                                                                          // 77
                                                                                                               // 78
    scanner.pos = posBefore; // rewind, we'll continue parsing as usual                                        // 79
                                                                                                               // 80
    // If no "shouldStop" option was provided, we should have consumed the whole                               // 81
    // input.                                                                                                  // 82
    if (! shouldStop)                                                                                          // 83
      scanner.fatal("Expected EOF");                                                                           // 84
  }                                                                                                            // 85
                                                                                                               // 86
  return result;                                                                                               // 87
};                                                                                                             // 88
                                                                                                               // 89
// Take a numeric Unicode code point, which may be larger than 16 bits,                                        // 90
// and encode it as a JavaScript UTF-16 string.                                                                // 91
//                                                                                                             // 92
// Adapted from                                                                                                // 93
// http://stackoverflow.com/questions/7126384/expressing-utf-16-unicode-characters-in-javascript/7126661.      // 94
codePointToString = HTMLTools.codePointToString = function(cp) {                                               // 95
  if (cp >= 0 && cp <= 0xD7FF || cp >= 0xE000 && cp <= 0xFFFF) {                                               // 96
    return String.fromCharCode(cp);                                                                            // 97
  } else if (cp >= 0x10000 && cp <= 0x10FFFF) {                                                                // 98
                                                                                                               // 99
    // we substract 0x10000 from cp to get a 20-bit number                                                     // 100
    // in the range 0..0xFFFF                                                                                  // 101
    cp -= 0x10000;                                                                                             // 102
                                                                                                               // 103
    // we add 0xD800 to the number formed by the first 10 bits                                                 // 104
    // to give the first byte                                                                                  // 105
    var first = ((0xffc00 & cp) >> 10) + 0xD800;                                                               // 106
                                                                                                               // 107
    // we add 0xDC00 to the number formed by the low 10 bits                                                   // 108
    // to give the second byte                                                                                 // 109
    var second = (0x3ff & cp) + 0xDC00;                                                                        // 110
                                                                                                               // 111
    return String.fromCharCode(first) + String.fromCharCode(second);                                           // 112
  } else {                                                                                                     // 113
    return '';                                                                                                 // 114
  }                                                                                                            // 115
};                                                                                                             // 116
                                                                                                               // 117
getContent = HTMLTools.Parse.getContent = function (scanner, shouldStopFunc) {                                 // 118
  var items = [];                                                                                              // 119
                                                                                                               // 120
  while (! scanner.isEOF()) {                                                                                  // 121
    if (shouldStopFunc && shouldStopFunc(scanner))                                                             // 122
      break;                                                                                                   // 123
                                                                                                               // 124
    var posBefore = scanner.pos;                                                                               // 125
    var token = getHTMLToken(scanner);                                                                         // 126
    if (! token)                                                                                               // 127
      // tokenizer reached EOF on its own, e.g. while scanning                                                 // 128
      // template comments like `{{! foo}}`.                                                                   // 129
      continue;                                                                                                // 130
                                                                                                               // 131
    if (token.t === 'Doctype') {                                                                               // 132
      scanner.fatal("Unexpected Doctype");                                                                     // 133
    } else if (token.t === 'Chars') {                                                                          // 134
      pushOrAppendString(items, token.v);                                                                      // 135
    } else if (token.t === 'CharRef') {                                                                        // 136
      items.push(convertCharRef(token));                                                                       // 137
    } else if (token.t === 'Comment') {                                                                        // 138
      items.push(HTML.Comment(token.v));                                                                       // 139
    } else if (token.t === 'Special') {                                                                        // 140
      // token.v is an object `{ ... }`                                                                        // 141
      items.push(HTMLTools.Special(token.v));                                                                  // 142
    } else if (token.t === 'Tag') {                                                                            // 143
      if (token.isEnd) {                                                                                       // 144
        // Stop when we encounter an end tag at the top level.                                                 // 145
        // Rewind; we'll re-parse the end tag later.                                                           // 146
        scanner.pos = posBefore;                                                                               // 147
        break;                                                                                                 // 148
      }                                                                                                        // 149
                                                                                                               // 150
      var tagName = token.n;                                                                                   // 151
      // is this an element with no close tag (a BR, HR, IMG, etc.) based                                      // 152
      // on its name?                                                                                          // 153
      var isVoid = HTML.isVoidElement(tagName);                                                                // 154
      if (token.isSelfClosing) {                                                                               // 155
        if (! (isVoid || HTML.isKnownSVGElement(tagName) || tagName.indexOf(':') >= 0))                        // 156
          scanner.fatal('Only certain elements like BR, HR, IMG, etc. (and foreign elements like SVG) are allowed to self-close');
      }                                                                                                        // 158
                                                                                                               // 159
      // may be null                                                                                           // 160
      var attrs = parseAttrs(token.attrs);                                                                     // 161
                                                                                                               // 162
      var tagFunc = HTML.getTag(tagName);                                                                      // 163
      if (isVoid || token.isSelfClosing) {                                                                     // 164
        items.push(attrs ? tagFunc(attrs) : tagFunc());                                                        // 165
      } else {                                                                                                 // 166
        // parse HTML tag contents.                                                                            // 167
                                                                                                               // 168
        // HTML treats a final `/` in a tag as part of an attribute, as in `<a href=/foo/>`, but the template author who writes `<circle r={{r}}/>`, say, may not be thinking about that, so generate a good error message in the "looks like self-close" case.
        var looksLikeSelfClose = (scanner.input.substr(scanner.pos - 2, 2) === '/>');                          // 170
                                                                                                               // 171
        var content;                                                                                           // 172
        if (token.n === 'textarea') {                                                                          // 173
          if (scanner.peek() === '\n')                                                                         // 174
            scanner.pos++;                                                                                     // 175
          content = getRCData(scanner, token.n, shouldStopFunc);                                               // 176
        } else {                                                                                               // 177
          content = getContent(scanner, shouldStopFunc);                                                       // 178
        }                                                                                                      // 179
                                                                                                               // 180
        var endTag = getHTMLToken(scanner);                                                                    // 181
                                                                                                               // 182
        if (! (endTag && endTag.t === 'Tag' && endTag.isEnd && endTag.n === tagName))                          // 183
          scanner.fatal('Expected "' + tagName + '" end tag' + (looksLikeSelfClose ? ' -- if the "<' + token.n + ' />" tag was supposed to self-close, try adding a space before the "/"' : ''));
                                                                                                               // 185
        // XXX support implied end tags in cases allowed by the spec                                           // 186
                                                                                                               // 187
        // make `content` into an array suitable for applying tag constructor                                  // 188
        // as in `FOO.apply(null, content)`.                                                                   // 189
        if (content == null)                                                                                   // 190
          content = [];                                                                                        // 191
        else if (! (content instanceof Array))                                                                 // 192
          content = [content];                                                                                 // 193
                                                                                                               // 194
        items.push(HTML.getTag(tagName).apply(                                                                 // 195
          null, (attrs ? [attrs] : []).concat(content)));                                                      // 196
      }                                                                                                        // 197
    } else {                                                                                                   // 198
      scanner.fatal("Unknown token type: " + token.t);                                                         // 199
    }                                                                                                          // 200
  }                                                                                                            // 201
                                                                                                               // 202
  if (items.length === 0)                                                                                      // 203
    return null;                                                                                               // 204
  else if (items.length === 1)                                                                                 // 205
    return items[0];                                                                                           // 206
  else                                                                                                         // 207
    return items;                                                                                              // 208
};                                                                                                             // 209
                                                                                                               // 210
var pushOrAppendString = function (items, string) {                                                            // 211
  if (items.length &&                                                                                          // 212
      typeof items[items.length - 1] === 'string')                                                             // 213
    items[items.length - 1] += string;                                                                         // 214
  else                                                                                                         // 215
    items.push(string);                                                                                        // 216
};                                                                                                             // 217
                                                                                                               // 218
// get RCDATA to go in the lowercase (or camel case) tagName (e.g. "textarea")                                 // 219
getRCData = HTMLTools.Parse.getRCData = function (scanner, tagName, shouldStopFunc) {                          // 220
  var items = [];                                                                                              // 221
                                                                                                               // 222
  while (! scanner.isEOF()) {                                                                                  // 223
    // break at appropriate end tag                                                                            // 224
    if (tagName && isLookingAtEndTag(scanner, tagName))                                                        // 225
      break;                                                                                                   // 226
                                                                                                               // 227
    if (shouldStopFunc && shouldStopFunc(scanner))                                                             // 228
      break;                                                                                                   // 229
                                                                                                               // 230
    var token = getHTMLToken(scanner, 'rcdata');                                                               // 231
    if (! token)                                                                                               // 232
      // tokenizer reached EOF on its own, e.g. while scanning                                                 // 233
      // template comments like `{{! foo}}`.                                                                   // 234
      continue;                                                                                                // 235
                                                                                                               // 236
    if (token.t === 'Chars') {                                                                                 // 237
      pushOrAppendString(items, token.v);                                                                      // 238
    } else if (token.t === 'CharRef') {                                                                        // 239
      items.push(convertCharRef(token));                                                                       // 240
    } else if (token.t === 'Special') {                                                                        // 241
      // token.v is an object `{ ... }`                                                                        // 242
      items.push(HTMLTools.Special(token.v));                                                                  // 243
    } else {                                                                                                   // 244
      // (can't happen)                                                                                        // 245
      scanner.fatal("Unknown or unexpected token type: " + token.t);                                           // 246
    }                                                                                                          // 247
  }                                                                                                            // 248
                                                                                                               // 249
  if (items.length === 0)                                                                                      // 250
    return null;                                                                                               // 251
  else if (items.length === 1)                                                                                 // 252
    return items[0];                                                                                           // 253
  else                                                                                                         // 254
    return items;                                                                                              // 255
};                                                                                                             // 256
                                                                                                               // 257
var getRawText = function (scanner, tagName, shouldStopFunc) {                                                 // 258
  var items = [];                                                                                              // 259
                                                                                                               // 260
  while (! scanner.isEOF()) {                                                                                  // 261
    // break at appropriate end tag                                                                            // 262
    if (tagName && isLookingAtEndTag(scanner, tagName))                                                        // 263
      break;                                                                                                   // 264
                                                                                                               // 265
    if (shouldStopFunc && shouldStopFunc(scanner))                                                             // 266
      break;                                                                                                   // 267
                                                                                                               // 268
    var token = getHTMLToken(scanner, 'rawtext');                                                              // 269
    if (! token)                                                                                               // 270
      // tokenizer reached EOF on its own, e.g. while scanning                                                 // 271
      // template comments like `{{! foo}}`.                                                                   // 272
      continue;                                                                                                // 273
                                                                                                               // 274
    if (token.t === 'Chars') {                                                                                 // 275
      pushOrAppendString(items, token.v);                                                                      // 276
    } else if (token.t === 'Special') {                                                                        // 277
      // token.v is an object `{ ... }`                                                                        // 278
      items.push(HTMLTools.Special(token.v));                                                                  // 279
    } else {                                                                                                   // 280
      // (can't happen)                                                                                        // 281
      scanner.fatal("Unknown or unexpected token type: " + token.t);                                           // 282
    }                                                                                                          // 283
  }                                                                                                            // 284
                                                                                                               // 285
  if (items.length === 0)                                                                                      // 286
    return null;                                                                                               // 287
  else if (items.length === 1)                                                                                 // 288
    return items[0];                                                                                           // 289
  else                                                                                                         // 290
    return items;                                                                                              // 291
};                                                                                                             // 292
                                                                                                               // 293
// Input: A token like `{ t: 'CharRef', v: '&amp;', cp: [38] }`.                                               // 294
//                                                                                                             // 295
// Output: A tag like `HTML.CharRef({ html: '&amp;', str: '&' })`.                                             // 296
var convertCharRef = function (token) {                                                                        // 297
  var codePoints = token.cp;                                                                                   // 298
  var str = '';                                                                                                // 299
  for (var i = 0; i < codePoints.length; i++)                                                                  // 300
    str += codePointToString(codePoints[i]);                                                                   // 301
  return HTML.CharRef({ html: token.v, str: str });                                                            // 302
};                                                                                                             // 303
                                                                                                               // 304
// Input is always a dictionary (even if zero attributes) and each                                             // 305
// value in the dictionary is an array of `Chars`, `CharRef`,                                                  // 306
// and maybe `Special` tokens.                                                                                 // 307
//                                                                                                             // 308
// Output is null if there are zero attributes, and otherwise a                                                // 309
// dictionary.  Each value in the dictionary is HTMLjs (e.g. a                                                 // 310
// string or an array of `Chars`, `CharRef`, and `Special`                                                     // 311
// nodes).                                                                                                     // 312
//                                                                                                             // 313
// An attribute value with no input tokens is represented as "",                                               // 314
// not an empty array, in order to prop open empty attributes                                                  // 315
// with no template tags.                                                                                      // 316
var parseAttrs = function (attrs) {                                                                            // 317
  var result = null;                                                                                           // 318
                                                                                                               // 319
  for (var k in attrs) {                                                                                       // 320
    if (! result)                                                                                              // 321
      result = {};                                                                                             // 322
                                                                                                               // 323
    var inValue = attrs[k];                                                                                    // 324
    var outParts = [];                                                                                         // 325
    for (var i = 0; i < inValue.length; i++) {                                                                 // 326
      var token = inValue[i];                                                                                  // 327
      if (token.t === 'CharRef') {                                                                             // 328
        outParts.push(convertCharRef(token));                                                                  // 329
      } else if (token.t === 'Special') {                                                                      // 330
        outParts.push(HTMLTools.Special(token.v));                                                             // 331
      } else if (token.t === 'Chars') {                                                                        // 332
        pushOrAppendString(outParts, token.v);                                                                 // 333
      }                                                                                                        // 334
    }                                                                                                          // 335
                                                                                                               // 336
    if (k === '$specials') {                                                                                   // 337
      // the `$specials` pseudo-attribute should always get an                                                 // 338
      // array, even if there is only one Special.                                                             // 339
      result[k] = outParts;                                                                                    // 340
    } else {                                                                                                   // 341
      var outValue = (inValue.length === 0 ? '' :                                                              // 342
                      (outParts.length === 1 ? outParts[0] : outParts));                                       // 343
      var properKey = HTMLTools.properCaseAttributeName(k);                                                    // 344
      result[properKey] = outValue;                                                                            // 345
    }                                                                                                          // 346
  }                                                                                                            // 347
                                                                                                               // 348
  return result;                                                                                               // 349
};                                                                                                             // 350
                                                                                                               // 351
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);


/* Exports */
if (typeof Package === 'undefined') Package = {};
Package['html-tools'] = {
  HTMLTools: HTMLTools
};

})();

//# sourceMappingURL=82d049e879dee08d0fae4b5ab0d7f9b75148aa13.map
//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
//                                                                      //
// If you are using Chrome, open the Developer Tools and click the gear //
// icon in its lower right corner. In the General Settings panel, turn  //
// on 'Enable source maps'.                                             //
//                                                                      //
// If you are using Firefox 23, go to `about:config` and set the        //
// `devtools.debugger.source-maps-enabled` preference to true.          //
// (The preference should be on by default in Firefox 24; versions      //
// older than 23 do not support source maps.)                           //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

/* Imports */
var Meteor = Package.meteor.Meteor;

/* Package-scope variables */
var HTML, callReactiveFunction, stopWithLater;

(function () {

//////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                      //
// packages/htmljs/utils.js                                                                             //
//                                                                                                      //
//////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                        //
                                                                                                        // 1
HTML = {};                                                                                              // 2
                                                                                                        // 3
HTML.isNully = function (node) {                                                                        // 4
  if (node == null)                                                                                     // 5
    // null or undefined                                                                                // 6
    return true;                                                                                        // 7
                                                                                                        // 8
  if (node instanceof Array) {                                                                          // 9
    // is it an empty array or an array of all nully items?                                             // 10
    for (var i = 0; i < node.length; i++)                                                               // 11
      if (! HTML.isNully(node[i]))                                                                      // 12
        return false;                                                                                   // 13
    return true;                                                                                        // 14
  }                                                                                                     // 15
                                                                                                        // 16
  return false;                                                                                         // 17
};                                                                                                      // 18
                                                                                                        // 19
HTML.escapeData = function (str) {                                                                      // 20
  // string; escape the two special chars in HTML data and RCDATA                                       // 21
  return str.replace(/&/g, '&amp;').replace(/</g, '&lt;');                                              // 22
};                                                                                                      // 23
                                                                                                        // 24
                                                                                                        // 25
// The HTML spec and the DOM API (in particular `setAttribute`) have different                          // 26
// definitions of what characters are legal in an attribute.  The HTML                                  // 27
// parser is extremely permissive (allowing, for example, `<a %=%>`), while                             // 28
// `setAttribute` seems to use something like the XML grammar for names (and                            // 29
// throws an error if a name is invalid, making that attribute unsettable).                             // 30
// If we knew exactly what grammar browsers used for `setAttribute`, we could                           // 31
// include various Unicode ranges in what's legal.  For now, allow ASCII chars                          // 32
// that are known to be valid XML, valid HTML, and settable via `setAttribute`:                         // 33
//                                                                                                      // 34
// * Starts with `:`, `_`, `A-Z` or `a-z`                                                               // 35
// * Consists of any of those plus `-`, `.`, and `0-9`.                                                 // 36
//                                                                                                      // 37
// See <http://www.w3.org/TR/REC-xml/#NT-Name> and                                                      // 38
// <http://dev.w3.org/html5/markup/syntax.html#syntax-attributes>.                                      // 39
HTML.isValidAttributeName = function (name) {                                                           // 40
  return /^[:_A-Za-z][:_A-Za-z0-9.\-]*/.test(name);                                                     // 41
};                                                                                                      // 42
                                                                                                        // 43
//////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

//////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                      //
// packages/htmljs/html.js                                                                              //
//                                                                                                      //
//////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                        //
                                                                                                        // 1
// Tag instances are `instanceof HTML.Tag`.                                                             // 2
//                                                                                                      // 3
// Tag objects should be considered immutable.                                                          // 4
//                                                                                                      // 5
// This is a private constructor of an abstract class; don't call it.                                   // 6
HTML.Tag = function () {};                                                                              // 7
HTML.Tag.prototype.tagName = ''; // this will be set per Tag subclass                                   // 8
HTML.Tag.prototype.attrs = null;                                                                        // 9
HTML.Tag.prototype.children = Object.freeze ? Object.freeze([]) : [];                                   // 10
                                                                                                        // 11
// Given "p", create and assign `HTML.P` if it doesn't already exist.                                   // 12
// Then return it.  `tagName` must have proper case (usually all lowercase).                            // 13
HTML.getTag = function (tagName) {                                                                      // 14
  var symbolName = HTML.getSymbolName(tagName);                                                         // 15
  if (symbolName === tagName) // all-caps tagName                                                       // 16
    throw new Error("Use the lowercase or camelCase form of '" + tagName + "' here");                   // 17
                                                                                                        // 18
  if (! HTML[symbolName])                                                                               // 19
    HTML[symbolName] = makeTagConstructor(tagName);                                                     // 20
                                                                                                        // 21
  return HTML[symbolName];                                                                              // 22
};                                                                                                      // 23
                                                                                                        // 24
// Given "p", make sure `HTML.P` exists.  `tagName` must have proper case                               // 25
// (usually all lowercase).                                                                             // 26
HTML.ensureTag = function (tagName) {                                                                   // 27
  HTML.getTag(tagName); // don't return it                                                              // 28
};                                                                                                      // 29
                                                                                                        // 30
// Given "p" create the function `HTML.P`.                                                              // 31
var makeTagConstructor = function (tagName) {                                                           // 32
  // HTMLTag is the per-tagName constructor of a HTML.Tag subclass                                      // 33
  var HTMLTag = function (/*arguments*/) {                                                              // 34
    // Work with or without `new`.  If not called with `new`,                                           // 35
    // perform instantiation by recursively calling this constructor.                                   // 36
    // We can't pass varargs, so pass no args.                                                          // 37
    var instance = (this instanceof HTML.Tag) ? this : new HTMLTag;                                     // 38
                                                                                                        // 39
    var i = 0;                                                                                          // 40
    var attrs = arguments.length && arguments[0];                                                       // 41
    if (attrs && (typeof attrs === 'object') &&                                                         // 42
        (attrs.constructor === Object)) {                                                               // 43
      instance.attrs = attrs;                                                                           // 44
      i++;                                                                                              // 45
    }                                                                                                   // 46
                                                                                                        // 47
    // If no children, don't create an array at all, use the prototype's                                // 48
    // (frozen, empty) array.  This way we don't create an empty array                                  // 49
    // every time someone creates a tag without `new` and this constructor                              // 50
    // calls itself with no arguments (above).                                                          // 51
    if (i < arguments.length)                                                                           // 52
      instance.children = Array.prototype.slice.call(arguments, i);                                     // 53
                                                                                                        // 54
    return instance;                                                                                    // 55
  };                                                                                                    // 56
  HTMLTag.prototype = new HTML.Tag;                                                                     // 57
  HTMLTag.prototype.constructor = HTMLTag;                                                              // 58
  HTMLTag.prototype.tagName = tagName;                                                                  // 59
                                                                                                        // 60
  return HTMLTag;                                                                                       // 61
};                                                                                                      // 62
                                                                                                        // 63
var CharRef = HTML.CharRef = function (attrs) {                                                         // 64
  if (! (this instanceof CharRef))                                                                      // 65
    // called without `new`                                                                             // 66
    return new CharRef(attrs);                                                                          // 67
                                                                                                        // 68
  if (! (attrs && attrs.html && attrs.str))                                                             // 69
    throw new Error(                                                                                    // 70
      "HTML.CharRef must be constructed with ({html:..., str:...})");                                   // 71
                                                                                                        // 72
  this.html = attrs.html;                                                                               // 73
  this.str = attrs.str;                                                                                 // 74
};                                                                                                      // 75
                                                                                                        // 76
var Comment = HTML.Comment = function (value) {                                                         // 77
  if (! (this instanceof Comment))                                                                      // 78
    // called without `new`                                                                             // 79
    return new Comment(value);                                                                          // 80
                                                                                                        // 81
  if (typeof value !== 'string')                                                                        // 82
    throw new Error('HTML.Comment must be constructed with a string');                                  // 83
                                                                                                        // 84
  this.value = value;                                                                                   // 85
  // Kill illegal hyphens in comment value (no way to escape them in HTML)                              // 86
  this.sanitizedValue = value.replace(/^-|--+|-$/g, '');                                                // 87
};                                                                                                      // 88
                                                                                                        // 89
                                                                                                        // 90
//---------- KNOWN ELEMENTS                                                                             // 91
                                                                                                        // 92
// These lists of known elements are public.  You can use them, for example, to                         // 93
// write a helper that determines the proper case for an SVG element name.                              // 94
// Such helpers that may not be needed at runtime are not provided here.                                // 95
                                                                                                        // 96
HTML.knownElementNames = 'a abbr acronym address applet area b base basefont bdo big blockquote body br button caption center cite code col colgroup dd del dfn dir div dl dt em fieldset font form frame frameset h1 h2 h3 h4 h5 h6 head hr html i iframe img input ins isindex kbd label legend li link map menu meta noframes noscript object ol optgroup option p param pre q s samp script select small span strike strong style sub sup table tbody td textarea tfoot th thead title tr tt u ul var article aside audio bdi canvas command data datagrid datalist details embed eventsource figcaption figure footer header hgroup keygen mark meter nav output progress ruby rp rt section source summary time track video wbr'.split(' ');
                                                                                                        // 98
// omitted because also an HTML element: "a"                                                            // 99
HTML.knownSVGElementNames = 'altGlyph altGlyphDef altGlyphItem animate animateColor animateMotion animateTransform circle clipPath color-profile cursor defs desc ellipse feBlend feColorMatrix feComponentTransfer feComposite feConvolveMatrix feDiffuseLighting feDisplacementMap feDistantLight feFlood feFuncA feFuncB feFuncG feFuncR feGaussianBlur feImage feMerge feMergeNode feMorphology feOffset fePointLight feSpecularLighting feSpotLight feTile feTurbulence filter font font-face font-face-format font-face-name font-face-src font-face-uri foreignObject g glyph glyphRef hkern image line linearGradient marker mask metadata missing-glyph path pattern polygon polyline radialGradient rect script set stop style svg switch symbol text textPath title tref tspan use view vkern'.split(' ');
// Append SVG element names to list of known element names                                              // 101
HTML.knownElementNames = HTML.knownElementNames.concat(HTML.knownSVGElementNames);                      // 102
                                                                                                        // 103
HTML.voidElementNames = 'area base br col command embed hr img input keygen link meta param source track wbr'.split(' ');
                                                                                                        // 105
// Speed up search through lists of known elements by creating internal "sets"                          // 106
// of strings.                                                                                          // 107
var YES = {yes:true};                                                                                   // 108
var makeSet = function (array) {                                                                        // 109
  var set = {};                                                                                         // 110
  for (var i = 0; i < array.length; i++)                                                                // 111
    set[array[i]] = YES;                                                                                // 112
  return set;                                                                                           // 113
};                                                                                                      // 114
var voidElementSet = makeSet(HTML.voidElementNames);                                                    // 115
var knownElementSet = makeSet(HTML.knownElementNames);                                                  // 116
var knownSVGElementSet = makeSet(HTML.knownSVGElementNames);                                            // 117
                                                                                                        // 118
// Is the given element (in proper case) a known HTML element?                                          // 119
// This includes SVG elements.                                                                          // 120
HTML.isKnownElement = function (name) {                                                                 // 121
  return knownElementSet[name] === YES;                                                                 // 122
};                                                                                                      // 123
                                                                                                        // 124
// Is the given element (in proper case) an element with no end tag                                     // 125
// in HTML, like "br", "hr", or "input"?                                                                // 126
HTML.isVoidElement = function (name) {                                                                  // 127
  return voidElementSet[name] === YES;                                                                  // 128
};                                                                                                      // 129
                                                                                                        // 130
// Is the given element (in proper case) a known SVG element?                                           // 131
HTML.isKnownSVGElement = function (name) {                                                              // 132
  return knownSVGElementSet[name] === YES;                                                              // 133
};                                                                                                      // 134
                                                                                                        // 135
// For code generators, is a particular tag (in proper case) guaranteed                                 // 136
// to be available on the HTML object (under the name returned by                                       // 137
// getSymbolName)?                                                                                      // 138
HTML.isTagEnsured = function (t) {                                                                      // 139
  return HTML.isKnownElement(t);                                                                        // 140
};                                                                                                      // 141
                                                                                                        // 142
// For code generators, take a tagName like "p" and return an uppercase                                 // 143
// symbol name like "P" which is available on the "HTML" object for                                     // 144
// known elements or after calling getTag or ensureTag.                                                 // 145
HTML.getSymbolName = function (tagName) {                                                               // 146
  // "foo-bar" -> "FOO_BAR"                                                                             // 147
  return tagName.toUpperCase().replace(/-/g, '_');                                                      // 148
};                                                                                                      // 149
                                                                                                        // 150
// Ensure tags for all known elements                                                                   // 151
for (var i = 0; i < HTML.knownElementNames.length; i++)                                                 // 152
  HTML.ensureTag(HTML.knownElementNames[i]);                                                            // 153
                                                                                                        // 154
////////////////////////////////////////////////////////////////////////////////                        // 155
                                                                                                        // 156
callReactiveFunction = function (func) {                                                                // 157
  var result;                                                                                           // 158
  var cc = Deps.currentComputation;                                                                     // 159
  var h = Deps.autorun(function (c) {                                                                   // 160
    result = func();                                                                                    // 161
  });                                                                                                   // 162
  h.onInvalidate(function () {                                                                          // 163
    if (cc)                                                                                             // 164
      cc.invalidate();                                                                                  // 165
  });                                                                                                   // 166
  if (Deps.active) {                                                                                    // 167
    Deps.onInvalidate(function () {                                                                     // 168
      h.stop();                                                                                         // 169
      func.stop && func.stop();                                                                         // 170
    });                                                                                                 // 171
  } else {                                                                                              // 172
    h.stop();                                                                                           // 173
    func.stop && func.stop();                                                                           // 174
  }                                                                                                     // 175
  return result;                                                                                        // 176
};                                                                                                      // 177
                                                                                                        // 178
stopWithLater = function (instance) {                                                                   // 179
  if (instance.materialized && instance.materialized.isWith) {                                          // 180
    if (Deps.active) {                                                                                  // 181
      instance.materialized();                                                                          // 182
    } else {                                                                                            // 183
      if (instance.data) // `UI.With`                                                                   // 184
        instance.data.stop();                                                                           // 185
      else if (instance.v) // `Spacebars.With`                                                          // 186
        instance.v.stop();                                                                              // 187
    }                                                                                                   // 188
  }                                                                                                     // 189
};                                                                                                      // 190
                                                                                                        // 191
// Call all functions and instantiate all components, when fine-grained                                 // 192
// reactivity is not needed (for example, in attributes).                                               // 193
HTML.evaluate = function (node, parentComponent) {                                                      // 194
  if (node == null) {                                                                                   // 195
    return node;                                                                                        // 196
  } else if (typeof node === 'function') {                                                              // 197
    return HTML.evaluate(callReactiveFunction(node), parentComponent);                                  // 198
  } else if (node instanceof Array) {                                                                   // 199
    var result = [];                                                                                    // 200
    for (var i = 0; i < node.length; i++)                                                               // 201
      result.push(HTML.evaluate(node[i], parentComponent));                                             // 202
    return result;                                                                                      // 203
  } else if (typeof node.instantiate === 'function') {                                                  // 204
    // component                                                                                        // 205
    var instance = node.instantiate(parentComponent || null);                                           // 206
    var content = instance.render('STATIC');                                                            // 207
    stopWithLater(instance);                                                                            // 208
    return HTML.evaluate(content, instance);                                                            // 209
  }  else if (node instanceof HTML.Tag) {                                                               // 210
    var newChildren = [];                                                                               // 211
    for (var i = 0; i < node.children.length; i++)                                                      // 212
      newChildren.push(HTML.evaluate(node.children[i], parentComponent));                               // 213
    var newTag = HTML.getTag(node.tagName).apply(null, newChildren);                                    // 214
    newTag.attrs = {};                                                                                  // 215
    for (var k in node.attrs)                                                                           // 216
      newTag.attrs[k] = HTML.evaluate(node.attrs[k], parentComponent);                                  // 217
    return newTag;                                                                                      // 218
  } else {                                                                                              // 219
    return node;                                                                                        // 220
  }                                                                                                     // 221
};                                                                                                      // 222
                                                                                                        // 223
var extendAttrs = function (tgt, src, parentComponent) {                                                // 224
  for (var k in src) {                                                                                  // 225
    if (k === '$dynamic')                                                                               // 226
      continue;                                                                                         // 227
    if (! HTML.isValidAttributeName(k))                                                                 // 228
      throw new Error("Illegal HTML attribute name: " + k);                                             // 229
    var value = HTML.evaluate(src[k], parentComponent);                                                 // 230
    if (! HTML.isNully(value))                                                                          // 231
      tgt[k] = value;                                                                                   // 232
  }                                                                                                     // 233
};                                                                                                      // 234
                                                                                                        // 235
// Process the `attrs.$dynamic` directive, if present, returning the final                              // 236
// attributes dictionary.  The value of `attrs.$dynamic` must be an array                               // 237
// of attributes dictionaries or functions returning attribute dictionaries.                            // 238
// These attributes are used to extend `attrs` as long as they are non-nully.                           // 239
// All attributes are "evaluated," calling functions and instantiating                                  // 240
// components.                                                                                          // 241
HTML.evaluateAttributes = function (attrs, parentComponent) {                                           // 242
  if (! attrs)                                                                                          // 243
    return attrs;                                                                                       // 244
                                                                                                        // 245
  var result = {};                                                                                      // 246
  extendAttrs(result, attrs, parentComponent);                                                          // 247
                                                                                                        // 248
  if ('$dynamic' in attrs) {                                                                            // 249
    if (! (attrs.$dynamic instanceof Array))                                                            // 250
      throw new Error("$dynamic must be an array");                                                     // 251
    // iterate over attrs.$dynamic, calling each element if it                                          // 252
    // is a function and then using it to extend `result`.                                              // 253
    var dynamics = attrs.$dynamic;                                                                      // 254
    for (var i = 0; i < dynamics.length; i++) {                                                         // 255
      var moreAttrs = dynamics[i];                                                                      // 256
      if (typeof moreAttrs === 'function')                                                              // 257
        moreAttrs = moreAttrs();                                                                        // 258
      extendAttrs(result, moreAttrs, parentComponent);                                                  // 259
    }                                                                                                   // 260
  }                                                                                                     // 261
                                                                                                        // 262
  return result;                                                                                        // 263
};                                                                                                      // 264
                                                                                                        // 265
HTML.Tag.prototype.evaluateAttributes = function (parentComponent) {                                    // 266
  return HTML.evaluateAttributes(this.attrs, parentComponent);                                          // 267
};                                                                                                      // 268
                                                                                                        // 269
HTML.Raw = function (value) {                                                                           // 270
  if (! (this instanceof HTML.Raw))                                                                     // 271
    // called without `new`                                                                             // 272
    return new HTML.Raw(value);                                                                         // 273
                                                                                                        // 274
  if (typeof value !== 'string')                                                                        // 275
    throw new Error('HTML.Raw must be constructed with a string');                                      // 276
                                                                                                        // 277
  this.value = value;                                                                                   // 278
};                                                                                                      // 279
                                                                                                        // 280
HTML.EmitCode = function (value) {                                                                      // 281
  if (! (this instanceof HTML.EmitCode))                                                                // 282
    // called without `new`                                                                             // 283
    return new HTML.EmitCode(value);                                                                    // 284
                                                                                                        // 285
  if (typeof value !== 'string')                                                                        // 286
    throw new Error('HTML.EmitCode must be constructed with a string');                                 // 287
                                                                                                        // 288
  this.value = value;                                                                                   // 289
};                                                                                                      // 290
                                                                                                        // 291
//////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

//////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                      //
// packages/htmljs/tohtml.js                                                                            //
//                                                                                                      //
//////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                        //
                                                                                                        // 1
HTML.toHTML = function (node, parentComponent) {                                                        // 2
  if (node == null) {                                                                                   // 3
    // null or undefined                                                                                // 4
    return '';                                                                                          // 5
  } else if ((typeof node === 'string') || (typeof node === 'boolean') || (typeof node === 'number')) { // 6
    // string; escape special chars                                                                     // 7
    return HTML.escapeData(String(node));                                                               // 8
  } else if (node instanceof Array) {                                                                   // 9
    // array                                                                                            // 10
    var parts = [];                                                                                     // 11
    for (var i = 0; i < node.length; i++)                                                               // 12
      parts.push(HTML.toHTML(node[i], parentComponent));                                                // 13
    return parts.join('');                                                                              // 14
  } else if (typeof node.instantiate === 'function') {                                                  // 15
    // component                                                                                        // 16
    var instance = node.instantiate(parentComponent || null);                                           // 17
    var content = instance.render('STATIC');                                                            // 18
    stopWithLater(instance);                                                                            // 19
    // recurse with a new value for parentComponent                                                     // 20
    return HTML.toHTML(content, instance);                                                              // 21
  } else if (typeof node === 'function') {                                                              // 22
    return HTML.toHTML(callReactiveFunction(node), parentComponent);                                    // 23
  } else if (node.toHTML) {                                                                             // 24
    // Tag or something else                                                                            // 25
    return node.toHTML(parentComponent);                                                                // 26
  } else {                                                                                              // 27
    throw new Error("Expected tag, string, array, component, null, undefined, or " +                    // 28
                    "object with a toHTML method; found: " + node);                                     // 29
  }                                                                                                     // 30
};                                                                                                      // 31
                                                                                                        // 32
HTML.Comment.prototype.toHTML = function () {                                                           // 33
  return '<!--' + this.sanitizedValue + '-->';                                                          // 34
};                                                                                                      // 35
                                                                                                        // 36
HTML.CharRef.prototype.toHTML = function () {                                                           // 37
  return this.html;                                                                                     // 38
};                                                                                                      // 39
                                                                                                        // 40
HTML.Raw.prototype.toHTML = function () {                                                               // 41
  return this.value;                                                                                    // 42
};                                                                                                      // 43
                                                                                                        // 44
HTML.Tag.prototype.toHTML = function (parentComponent) {                                                // 45
  var attrStrs = [];                                                                                    // 46
  var attrs = this.evaluateAttributes(parentComponent);                                                 // 47
  if (attrs) {                                                                                          // 48
    for (var k in attrs) {                                                                              // 49
      var v = HTML.toText(attrs[k], HTML.TEXTMODE.ATTRIBUTE, parentComponent);                          // 50
      attrStrs.push(' ' + k + '="' + v + '"');                                                          // 51
    }                                                                                                   // 52
  }                                                                                                     // 53
                                                                                                        // 54
  var tagName = this.tagName;                                                                           // 55
  var startTag = '<' + tagName + attrStrs.join('') + '>';                                               // 56
                                                                                                        // 57
  var childStrs = [];                                                                                   // 58
  var content;                                                                                          // 59
  if (tagName === 'textarea') {                                                                         // 60
    for (var i = 0; i < this.children.length; i++)                                                      // 61
      childStrs.push(HTML.toText(this.children[i], HTML.TEXTMODE.RCDATA, parentComponent));             // 62
                                                                                                        // 63
    content = childStrs.join('');                                                                       // 64
    if (content.slice(0, 1) === '\n')                                                                   // 65
      // TEXTAREA will absorb a newline, so if we see one, add                                          // 66
      // another one.                                                                                   // 67
      content = '\n' + content;                                                                         // 68
                                                                                                        // 69
  } else {                                                                                              // 70
    for (var i = 0; i < this.children.length; i++)                                                      // 71
      childStrs.push(HTML.toHTML(this.children[i], parentComponent));                                   // 72
                                                                                                        // 73
    content = childStrs.join('');                                                                       // 74
  }                                                                                                     // 75
                                                                                                        // 76
  var result = startTag + content;                                                                      // 77
                                                                                                        // 78
  if (this.children.length || ! HTML.isVoidElement(tagName)) {                                          // 79
    // "Void" elements like BR are the only ones that don't get a close                                 // 80
    // tag in HTML5.  They shouldn't have contents, either, so we could                                 // 81
    // throw an error upon seeing contents here.                                                        // 82
    result += '</' + tagName + '>';                                                                     // 83
  }                                                                                                     // 84
                                                                                                        // 85
  return result;                                                                                        // 86
};                                                                                                      // 87
                                                                                                        // 88
HTML.TEXTMODE = {                                                                                       // 89
  ATTRIBUTE: 1,                                                                                         // 90
  RCDATA: 2,                                                                                            // 91
  STRING: 3                                                                                             // 92
};                                                                                                      // 93
                                                                                                        // 94
HTML.toText = function (node, textMode, parentComponent) {                                              // 95
  if (node == null) {                                                                                   // 96
    // null or undefined                                                                                // 97
    return '';                                                                                          // 98
  } else if ((typeof node === 'string') || (typeof node === 'boolean') || (typeof node === 'number')) { // 99
    node = String(node);                                                                                // 100
    // string                                                                                           // 101
    if (textMode === HTML.TEXTMODE.STRING) {                                                            // 102
      return node;                                                                                      // 103
    } else if (textMode === HTML.TEXTMODE.RCDATA) {                                                     // 104
      return HTML.escapeData(node);                                                                     // 105
    } else if (textMode === HTML.TEXTMODE.ATTRIBUTE) {                                                  // 106
      // escape `&` and `"` this time, not `&` and `<`                                                  // 107
      return node.replace(/&/g, '&amp;').replace(/"/g, '&quot;');                                       // 108
    } else {                                                                                            // 109
      throw new Error("Unknown TEXTMODE: " + textMode);                                                 // 110
    }                                                                                                   // 111
  } else if (node instanceof Array) {                                                                   // 112
    // array                                                                                            // 113
    var parts = [];                                                                                     // 114
    for (var i = 0; i < node.length; i++)                                                               // 115
      parts.push(HTML.toText(node[i], textMode, parentComponent));                                      // 116
    return parts.join('');                                                                              // 117
  } else if (typeof node === 'function') {                                                              // 118
    return HTML.toText(callReactiveFunction(node), textMode, parentComponent);                          // 119
  } else if (typeof node.instantiate === 'function') {                                                  // 120
    // component                                                                                        // 121
    var instance = node.instantiate(parentComponent || null);                                           // 122
    var content = instance.render('STATIC');                                                            // 123
    var result = HTML.toText(content, textMode, instance);                                              // 124
    stopWithLater(instance);                                                                            // 125
    return result;                                                                                      // 126
  } else if (node.toText) {                                                                             // 127
    // Something else                                                                                   // 128
    return node.toText(textMode, parentComponent);                                                      // 129
  } else {                                                                                              // 130
    throw new Error("Expected tag, string, array, component, null, undefined, or " +                    // 131
                    "object with a toText method; found: " + node);                                     // 132
  }                                                                                                     // 133
                                                                                                        // 134
};                                                                                                      // 135
                                                                                                        // 136
HTML.Raw.prototype.toText = function () {                                                               // 137
  return this.value;                                                                                    // 138
};                                                                                                      // 139
                                                                                                        // 140
// used when including templates within {{#markdown}}                                                   // 141
HTML.Tag.prototype.toText = function (textMode, parentComponent) {                                      // 142
  if (textMode === HTML.TEXTMODE.STRING)                                                                // 143
    // stringify the tag as HTML, then convert to text                                                  // 144
    return HTML.toText(this.toHTML(parentComponent), textMode);                                         // 145
  else                                                                                                  // 146
    throw new Error("Can't insert tags in attributes or TEXTAREA elements");                            // 147
};                                                                                                      // 148
                                                                                                        // 149
HTML.CharRef.prototype.toText = function (textMode) {                                                   // 150
  if (textMode === HTML.TEXTMODE.STRING)                                                                // 151
    return this.str;                                                                                    // 152
  else if (textMode === HTML.TEXTMODE.RCDATA)                                                           // 153
    return this.html;                                                                                   // 154
  else if (textMode === HTML.TEXTMODE.ATTRIBUTE)                                                        // 155
    return this.html;                                                                                   // 156
  else                                                                                                  // 157
    throw new Error("Unknown TEXTMODE: " + textMode);                                                   // 158
};                                                                                                      // 159
                                                                                                        // 160
//////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);


/* Exports */
if (typeof Package === 'undefined') Package = {};
Package.htmljs = {
  HTML: HTML
};

})();

//# sourceMappingURL=a0a9082010d25b3fb44e0f56bdd0a7b4e6bbeb93.map
//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
//                                                                      //
// If you are using Chrome, open the Developer Tools and click the gear //
// icon in its lower right corner. In the General Settings panel, turn  //
// on 'Enable source maps'.                                             //
//                                                                      //
// If you are using Firefox 23, go to `about:config` and set the        //
// `devtools.debugger.source-maps-enabled` preference to true.          //
// (The preference should be on by default in Firefox 24; versions      //
// older than 23 do not support source maps.)                           //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

/* Imports */
var Meteor = Package.meteor.Meteor;
var _ = Package.underscore._;
var JSON = Package.json.JSON;
var EJSON = Package.ejson.EJSON;

/* Package-scope variables */
var IdMap;

(function () {

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
// packages/id-map/id-map.js                                                  //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////
                                                                              //
IdMap = function (idStringify, idParse) {                                     // 1
  var self = this;                                                            // 2
  self._map = {};                                                             // 3
  self._idStringify = idStringify || JSON.stringify;                          // 4
  self._idParse = idParse || JSON.parse;                                      // 5
};                                                                            // 6
                                                                              // 7
// Some of these methods are designed to match methods on OrderedDict, since  // 8
// (eg) ObserveMultiplex and _CachingChangeObserver use them interchangeably. // 9
// (Conceivably, this should be replaced with "UnorderedDict" with a specific // 10
// set of methods that overlap between the two.)                              // 11
                                                                              // 12
_.extend(IdMap.prototype, {                                                   // 13
  get: function (id) {                                                        // 14
    var self = this;                                                          // 15
    var key = self._idStringify(id);                                          // 16
    return self._map[key];                                                    // 17
  },                                                                          // 18
  set: function (id, value) {                                                 // 19
    var self = this;                                                          // 20
    var key = self._idStringify(id);                                          // 21
    self._map[key] = value;                                                   // 22
  },                                                                          // 23
  remove: function (id) {                                                     // 24
    var self = this;                                                          // 25
    var key = self._idStringify(id);                                          // 26
    delete self._map[key];                                                    // 27
  },                                                                          // 28
  has: function (id) {                                                        // 29
    var self = this;                                                          // 30
    var key = self._idStringify(id);                                          // 31
    return _.has(self._map, key);                                             // 32
  },                                                                          // 33
  empty: function () {                                                        // 34
    var self = this;                                                          // 35
    return _.isEmpty(self._map);                                              // 36
  },                                                                          // 37
  clear: function () {                                                        // 38
    var self = this;                                                          // 39
    self._map = {};                                                           // 40
  },                                                                          // 41
  // Iterates over the items in the map. Return `false` to break the loop.    // 42
  forEach: function (iterator) {                                              // 43
    var self = this;                                                          // 44
    // don't use _.each, because we can't break out of it.                    // 45
    var keys = _.keys(self._map);                                             // 46
    for (var i = 0; i < keys.length; i++) {                                   // 47
      var breakIfFalse = iterator.call(null, self._map[keys[i]],              // 48
                                       self._idParse(keys[i]));               // 49
      if (breakIfFalse === false)                                             // 50
        return;                                                               // 51
    }                                                                         // 52
  },                                                                          // 53
  size: function () {                                                         // 54
    var self = this;                                                          // 55
    return _.size(self._map);                                                 // 56
  },                                                                          // 57
  setDefault: function (id, def) {                                            // 58
    var self = this;                                                          // 59
    var key = self._idStringify(id);                                          // 60
    if (_.has(self._map, key))                                                // 61
      return self._map[key];                                                  // 62
    self._map[key] = def;                                                     // 63
    return def;                                                               // 64
  },                                                                          // 65
  // Assumes that values are EJSON-cloneable, and that we don't need to clone // 66
  // IDs (ie, that nobody is going to mutate an ObjectId).                    // 67
  clone: function () {                                                        // 68
    var self = this;                                                          // 69
    var clone = new IdMap(self._idStringify, self._idParse);                  // 70
    self.forEach(function (value, id) {                                       // 71
      clone.set(id, EJSON.clone(value));                                      // 72
    });                                                                       // 73
    return clone;                                                             // 74
  }                                                                           // 75
});                                                                           // 76
                                                                              // 77
                                                                              // 78
////////////////////////////////////////////////////////////////////////////////

}).call(this);


/* Exports */
if (typeof Package === 'undefined') Package = {};
Package['id-map'] = {
  IdMap: IdMap
};

})();

//# sourceMappingURL=9ea6eaae8d74693ce2505a858d9a5e60cf191298.map
//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
//                                                                      //
// If you are using Chrome, open the Developer Tools and click the gear //
// icon in its lower right corner. In the General Settings panel, turn  //
// on 'Enable source maps'.                                             //
//                                                                      //
// If you are using Firefox 23, go to `about:config` and set the        //
// `devtools.debugger.source-maps-enabled` preference to true.          //
// (The preference should be on by default in Firefox 24; versions      //
// older than 23 do not support source maps.)                           //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

/* Imports */
var Meteor = Package.meteor.Meteor;



/* Exports */
if (typeof Package === 'undefined') Package = {};
Package.insecure = {};

})();

//# sourceMappingURL=3dc9d4a2dad55999b5b15a447d57f3d5fb66b290.map
//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
//                                                                      //
// If you are using Chrome, open the Developer Tools and click the gear //
// icon in its lower right corner. In the General Settings panel, turn  //
// on 'Enable source maps'.                                             //
//                                                                      //
// If you are using Firefox 23, go to `about:config` and set the        //
// `devtools.debugger.source-maps-enabled` preference to true.          //
// (The preference should be on by default in Firefox 24; versions      //
// older than 23 do not support source maps.)                           //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

/* Imports */
var Meteor = Package.meteor.Meteor;

/* Package-scope variables */
var $, jQuery;

(function () {

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                   //
// packages/jquery/jquery.js                                                                                         //
//                                                                                                                   //
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                     //
/*!                                                                                                                  // 1
 * jQuery JavaScript Library v1.11.0                                                                                 // 2
 * http://jquery.com/                                                                                                // 3
 *                                                                                                                   // 4
 * Includes Sizzle.js                                                                                                // 5
 * http://sizzlejs.com/                                                                                              // 6
 *                                                                                                                   // 7
 * Copyright 2005, 2014 jQuery Foundation, Inc. and other contributors                                               // 8
 * Released under the MIT license                                                                                    // 9
 * http://jquery.org/license                                                                                         // 10
 *                                                                                                                   // 11
 * Date: 2014-01-23T21:02Z                                                                                           // 12
 */                                                                                                                  // 13
                                                                                                                     // 14
(function( global, factory ) {                                                                                       // 15
                                                                                                                     // 16
	if ( typeof module === "object" && typeof module.exports === "object" ) {                                           // 17
		// For CommonJS and CommonJS-like environments where a proper window is present,                                   // 18
		// execute the factory and get jQuery                                                                              // 19
		// For environments that do not inherently posses a window with a document                                         // 20
		// (such as Node.js), expose a jQuery-making factory as module.exports                                             // 21
		// This accentuates the need for the creation of a real window                                                     // 22
		// e.g. var jQuery = require("jquery")(window);                                                                    // 23
		// See ticket #14549 for more info                                                                                 // 24
		module.exports = global.document ?                                                                                 // 25
			factory( global, true ) :                                                                                         // 26
			function( w ) {                                                                                                   // 27
				if ( !w.document ) {                                                                                             // 28
					throw new Error( "jQuery requires a window with a document" );                                                  // 29
				}                                                                                                                // 30
				return factory( w );                                                                                             // 31
			};                                                                                                                // 32
	} else {                                                                                                            // 33
		factory( global );                                                                                                 // 34
	}                                                                                                                   // 35
                                                                                                                     // 36
// Pass this if window is not defined yet                                                                            // 37
}(typeof window !== "undefined" ? window : this, function( window, noGlobal ) {                                      // 38
                                                                                                                     // 39
// Can't do this because several apps including ASP.NET trace                                                        // 40
// the stack via arguments.caller.callee and Firefox dies if                                                         // 41
// you try to trace through "use strict" call chains. (#13335)                                                       // 42
// Support: Firefox 18+                                                                                              // 43
//                                                                                                                   // 44
                                                                                                                     // 45
var deletedIds = [];                                                                                                 // 46
                                                                                                                     // 47
var slice = deletedIds.slice;                                                                                        // 48
                                                                                                                     // 49
var concat = deletedIds.concat;                                                                                      // 50
                                                                                                                     // 51
var push = deletedIds.push;                                                                                          // 52
                                                                                                                     // 53
var indexOf = deletedIds.indexOf;                                                                                    // 54
                                                                                                                     // 55
var class2type = {};                                                                                                 // 56
                                                                                                                     // 57
var toString = class2type.toString;                                                                                  // 58
                                                                                                                     // 59
var hasOwn = class2type.hasOwnProperty;                                                                              // 60
                                                                                                                     // 61
var trim = "".trim;                                                                                                  // 62
                                                                                                                     // 63
var support = {};                                                                                                    // 64
                                                                                                                     // 65
                                                                                                                     // 66
                                                                                                                     // 67
var                                                                                                                  // 68
	version = "1.11.0",                                                                                                 // 69
                                                                                                                     // 70
	// Define a local copy of jQuery                                                                                    // 71
	jQuery = function( selector, context ) {                                                                            // 72
		// The jQuery object is actually just the init constructor 'enhanced'                                              // 73
		// Need init if jQuery is called (just allow error to be thrown if not included)                                   // 74
		return new jQuery.fn.init( selector, context );                                                                    // 75
	},                                                                                                                  // 76
                                                                                                                     // 77
	// Make sure we trim BOM and NBSP (here's looking at you, Safari 5.0 and IE)                                        // 78
	rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,                                                                       // 79
                                                                                                                     // 80
	// Matches dashed string for camelizing                                                                             // 81
	rmsPrefix = /^-ms-/,                                                                                                // 82
	rdashAlpha = /-([\da-z])/gi,                                                                                        // 83
                                                                                                                     // 84
	// Used by jQuery.camelCase as callback to replace()                                                                // 85
	fcamelCase = function( all, letter ) {                                                                              // 86
		return letter.toUpperCase();                                                                                       // 87
	};                                                                                                                  // 88
                                                                                                                     // 89
jQuery.fn = jQuery.prototype = {                                                                                     // 90
	// The current version of jQuery being used                                                                         // 91
	jquery: version,                                                                                                    // 92
                                                                                                                     // 93
	constructor: jQuery,                                                                                                // 94
                                                                                                                     // 95
	// Start with an empty selector                                                                                     // 96
	selector: "",                                                                                                       // 97
                                                                                                                     // 98
	// The default length of a jQuery object is 0                                                                       // 99
	length: 0,                                                                                                          // 100
                                                                                                                     // 101
	toArray: function() {                                                                                               // 102
		return slice.call( this );                                                                                         // 103
	},                                                                                                                  // 104
                                                                                                                     // 105
	// Get the Nth element in the matched element set OR                                                                // 106
	// Get the whole matched element set as a clean array                                                               // 107
	get: function( num ) {                                                                                              // 108
		return num != null ?                                                                                               // 109
                                                                                                                     // 110
			// Return a 'clean' array                                                                                         // 111
			( num < 0 ? this[ num + this.length ] : this[ num ] ) :                                                           // 112
                                                                                                                     // 113
			// Return just the object                                                                                         // 114
			slice.call( this );                                                                                               // 115
	},                                                                                                                  // 116
                                                                                                                     // 117
	// Take an array of elements and push it onto the stack                                                             // 118
	// (returning the new matched element set)                                                                          // 119
	pushStack: function( elems ) {                                                                                      // 120
                                                                                                                     // 121
		// Build a new jQuery matched element set                                                                          // 122
		var ret = jQuery.merge( this.constructor(), elems );                                                               // 123
                                                                                                                     // 124
		// Add the old object onto the stack (as a reference)                                                              // 125
		ret.prevObject = this;                                                                                             // 126
		ret.context = this.context;                                                                                        // 127
                                                                                                                     // 128
		// Return the newly-formed element set                                                                             // 129
		return ret;                                                                                                        // 130
	},                                                                                                                  // 131
                                                                                                                     // 132
	// Execute a callback for every element in the matched set.                                                         // 133
	// (You can seed the arguments with an array of args, but this is                                                   // 134
	// only used internally.)                                                                                           // 135
	each: function( callback, args ) {                                                                                  // 136
		return jQuery.each( this, callback, args );                                                                        // 137
	},                                                                                                                  // 138
                                                                                                                     // 139
	map: function( callback ) {                                                                                         // 140
		return this.pushStack( jQuery.map(this, function( elem, i ) {                                                      // 141
			return callback.call( elem, i, elem );                                                                            // 142
		}));                                                                                                               // 143
	},                                                                                                                  // 144
                                                                                                                     // 145
	slice: function() {                                                                                                 // 146
		return this.pushStack( slice.apply( this, arguments ) );                                                           // 147
	},                                                                                                                  // 148
                                                                                                                     // 149
	first: function() {                                                                                                 // 150
		return this.eq( 0 );                                                                                               // 151
	},                                                                                                                  // 152
                                                                                                                     // 153
	last: function() {                                                                                                  // 154
		return this.eq( -1 );                                                                                              // 155
	},                                                                                                                  // 156
                                                                                                                     // 157
	eq: function( i ) {                                                                                                 // 158
		var len = this.length,                                                                                             // 159
			j = +i + ( i < 0 ? len : 0 );                                                                                     // 160
		return this.pushStack( j >= 0 && j < len ? [ this[j] ] : [] );                                                     // 161
	},                                                                                                                  // 162
                                                                                                                     // 163
	end: function() {                                                                                                   // 164
		return this.prevObject || this.constructor(null);                                                                  // 165
	},                                                                                                                  // 166
                                                                                                                     // 167
	// For internal use only.                                                                                           // 168
	// Behaves like an Array's method, not like a jQuery method.                                                        // 169
	push: push,                                                                                                         // 170
	sort: deletedIds.sort,                                                                                              // 171
	splice: deletedIds.splice                                                                                           // 172
};                                                                                                                   // 173
                                                                                                                     // 174
jQuery.extend = jQuery.fn.extend = function() {                                                                      // 175
	var src, copyIsArray, copy, name, options, clone,                                                                   // 176
		target = arguments[0] || {},                                                                                       // 177
		i = 1,                                                                                                             // 178
		length = arguments.length,                                                                                         // 179
		deep = false;                                                                                                      // 180
                                                                                                                     // 181
	// Handle a deep copy situation                                                                                     // 182
	if ( typeof target === "boolean" ) {                                                                                // 183
		deep = target;                                                                                                     // 184
                                                                                                                     // 185
		// skip the boolean and the target                                                                                 // 186
		target = arguments[ i ] || {};                                                                                     // 187
		i++;                                                                                                               // 188
	}                                                                                                                   // 189
                                                                                                                     // 190
	// Handle case when target is a string or something (possible in deep copy)                                         // 191
	if ( typeof target !== "object" && !jQuery.isFunction(target) ) {                                                   // 192
		target = {};                                                                                                       // 193
	}                                                                                                                   // 194
                                                                                                                     // 195
	// extend jQuery itself if only one argument is passed                                                              // 196
	if ( i === length ) {                                                                                               // 197
		target = this;                                                                                                     // 198
		i--;                                                                                                               // 199
	}                                                                                                                   // 200
                                                                                                                     // 201
	for ( ; i < length; i++ ) {                                                                                         // 202
		// Only deal with non-null/undefined values                                                                        // 203
		if ( (options = arguments[ i ]) != null ) {                                                                        // 204
			// Extend the base object                                                                                         // 205
			for ( name in options ) {                                                                                         // 206
				src = target[ name ];                                                                                            // 207
				copy = options[ name ];                                                                                          // 208
                                                                                                                     // 209
				// Prevent never-ending loop                                                                                     // 210
				if ( target === copy ) {                                                                                         // 211
					continue;                                                                                                       // 212
				}                                                                                                                // 213
                                                                                                                     // 214
				// Recurse if we're merging plain objects or arrays                                                              // 215
				if ( deep && copy && ( jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy)) ) ) {                  // 216
					if ( copyIsArray ) {                                                                                            // 217
						copyIsArray = false;                                                                                           // 218
						clone = src && jQuery.isArray(src) ? src : [];                                                                 // 219
                                                                                                                     // 220
					} else {                                                                                                        // 221
						clone = src && jQuery.isPlainObject(src) ? src : {};                                                           // 222
					}                                                                                                               // 223
                                                                                                                     // 224
					// Never move original objects, clone them                                                                      // 225
					target[ name ] = jQuery.extend( deep, clone, copy );                                                            // 226
                                                                                                                     // 227
				// Don't bring in undefined values                                                                               // 228
				} else if ( copy !== undefined ) {                                                                               // 229
					target[ name ] = copy;                                                                                          // 230
				}                                                                                                                // 231
			}                                                                                                                 // 232
		}                                                                                                                  // 233
	}                                                                                                                   // 234
                                                                                                                     // 235
	// Return the modified object                                                                                       // 236
	return target;                                                                                                      // 237
};                                                                                                                   // 238
                                                                                                                     // 239
jQuery.extend({                                                                                                      // 240
	// Unique for each copy of jQuery on the page                                                                       // 241
	expando: "jQuery" + ( version + Math.random() ).replace( /\D/g, "" ),                                               // 242
                                                                                                                     // 243
	// Assume jQuery is ready without the ready module                                                                  // 244
	isReady: true,                                                                                                      // 245
                                                                                                                     // 246
	error: function( msg ) {                                                                                            // 247
		throw new Error( msg );                                                                                            // 248
	},                                                                                                                  // 249
                                                                                                                     // 250
	noop: function() {},                                                                                                // 251
                                                                                                                     // 252
	// See test/unit/core.js for details concerning isFunction.                                                         // 253
	// Since version 1.3, DOM methods and functions like alert                                                          // 254
	// aren't supported. They return false on IE (#2968).                                                               // 255
	isFunction: function( obj ) {                                                                                       // 256
		return jQuery.type(obj) === "function";                                                                            // 257
	},                                                                                                                  // 258
                                                                                                                     // 259
	isArray: Array.isArray || function( obj ) {                                                                         // 260
		return jQuery.type(obj) === "array";                                                                               // 261
	},                                                                                                                  // 262
                                                                                                                     // 263
	isWindow: function( obj ) {                                                                                         // 264
		/* jshint eqeqeq: false */                                                                                         // 265
		return obj != null && obj == obj.window;                                                                           // 266
	},                                                                                                                  // 267
                                                                                                                     // 268
	isNumeric: function( obj ) {                                                                                        // 269
		// parseFloat NaNs numeric-cast false positives (null|true|false|"")                                               // 270
		// ...but misinterprets leading-number strings, particularly hex literals ("0x...")                                // 271
		// subtraction forces infinities to NaN                                                                            // 272
		return obj - parseFloat( obj ) >= 0;                                                                               // 273
	},                                                                                                                  // 274
                                                                                                                     // 275
	isEmptyObject: function( obj ) {                                                                                    // 276
		var name;                                                                                                          // 277
		for ( name in obj ) {                                                                                              // 278
			return false;                                                                                                     // 279
		}                                                                                                                  // 280
		return true;                                                                                                       // 281
	},                                                                                                                  // 282
                                                                                                                     // 283
	isPlainObject: function( obj ) {                                                                                    // 284
		var key;                                                                                                           // 285
                                                                                                                     // 286
		// Must be an Object.                                                                                              // 287
		// Because of IE, we also have to check the presence of the constructor property.                                  // 288
		// Make sure that DOM nodes and window objects don't pass through, as well                                         // 289
		if ( !obj || jQuery.type(obj) !== "object" || obj.nodeType || jQuery.isWindow( obj ) ) {                           // 290
			return false;                                                                                                     // 291
		}                                                                                                                  // 292
                                                                                                                     // 293
		try {                                                                                                              // 294
			// Not own constructor property must be Object                                                                    // 295
			if ( obj.constructor &&                                                                                           // 296
				!hasOwn.call(obj, "constructor") &&                                                                              // 297
				!hasOwn.call(obj.constructor.prototype, "isPrototypeOf") ) {                                                     // 298
				return false;                                                                                                    // 299
			}                                                                                                                 // 300
		} catch ( e ) {                                                                                                    // 301
			// IE8,9 Will throw exceptions on certain host objects #9897                                                      // 302
			return false;                                                                                                     // 303
		}                                                                                                                  // 304
                                                                                                                     // 305
		// Support: IE<9                                                                                                   // 306
		// Handle iteration over inherited properties before own properties.                                               // 307
		if ( support.ownLast ) {                                                                                           // 308
			for ( key in obj ) {                                                                                              // 309
				return hasOwn.call( obj, key );                                                                                  // 310
			}                                                                                                                 // 311
		}                                                                                                                  // 312
                                                                                                                     // 313
		// Own properties are enumerated firstly, so to speed up,                                                          // 314
		// if last one is own, then all properties are own.                                                                // 315
		for ( key in obj ) {}                                                                                              // 316
                                                                                                                     // 317
		return key === undefined || hasOwn.call( obj, key );                                                               // 318
	},                                                                                                                  // 319
                                                                                                                     // 320
	type: function( obj ) {                                                                                             // 321
		if ( obj == null ) {                                                                                               // 322
			return obj + "";                                                                                                  // 323
		}                                                                                                                  // 324
		return typeof obj === "object" || typeof obj === "function" ?                                                      // 325
			class2type[ toString.call(obj) ] || "object" :                                                                    // 326
			typeof obj;                                                                                                       // 327
	},                                                                                                                  // 328
                                                                                                                     // 329
	// Evaluates a script in a global context                                                                           // 330
	// Workarounds based on findings by Jim Driscoll                                                                    // 331
	// http://weblogs.java.net/blog/driscoll/archive/2009/09/08/eval-javascript-global-context                          // 332
	globalEval: function( data ) {                                                                                      // 333
		if ( data && jQuery.trim( data ) ) {                                                                               // 334
			// We use execScript on Internet Explorer                                                                         // 335
			// We use an anonymous function so that context is window                                                         // 336
			// rather than jQuery in Firefox                                                                                  // 337
			( window.execScript || function( data ) {                                                                         // 338
				window[ "eval" ].call( window, data );                                                                           // 339
			} )( data );                                                                                                      // 340
		}                                                                                                                  // 341
	},                                                                                                                  // 342
                                                                                                                     // 343
	// Convert dashed to camelCase; used by the css and data modules                                                    // 344
	// Microsoft forgot to hump their vendor prefix (#9572)                                                             // 345
	camelCase: function( string ) {                                                                                     // 346
		return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );                                       // 347
	},                                                                                                                  // 348
                                                                                                                     // 349
	nodeName: function( elem, name ) {                                                                                  // 350
		return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();                                        // 351
	},                                                                                                                  // 352
                                                                                                                     // 353
	// args is for internal usage only                                                                                  // 354
	each: function( obj, callback, args ) {                                                                             // 355
		var value,                                                                                                         // 356
			i = 0,                                                                                                            // 357
			length = obj.length,                                                                                              // 358
			isArray = isArraylike( obj );                                                                                     // 359
                                                                                                                     // 360
		if ( args ) {                                                                                                      // 361
			if ( isArray ) {                                                                                                  // 362
				for ( ; i < length; i++ ) {                                                                                      // 363
					value = callback.apply( obj[ i ], args );                                                                       // 364
                                                                                                                     // 365
					if ( value === false ) {                                                                                        // 366
						break;                                                                                                         // 367
					}                                                                                                               // 368
				}                                                                                                                // 369
			} else {                                                                                                          // 370
				for ( i in obj ) {                                                                                               // 371
					value = callback.apply( obj[ i ], args );                                                                       // 372
                                                                                                                     // 373
					if ( value === false ) {                                                                                        // 374
						break;                                                                                                         // 375
					}                                                                                                               // 376
				}                                                                                                                // 377
			}                                                                                                                 // 378
                                                                                                                     // 379
		// A special, fast, case for the most common use of each                                                           // 380
		} else {                                                                                                           // 381
			if ( isArray ) {                                                                                                  // 382
				for ( ; i < length; i++ ) {                                                                                      // 383
					value = callback.call( obj[ i ], i, obj[ i ] );                                                                 // 384
                                                                                                                     // 385
					if ( value === false ) {                                                                                        // 386
						break;                                                                                                         // 387
					}                                                                                                               // 388
				}                                                                                                                // 389
			} else {                                                                                                          // 390
				for ( i in obj ) {                                                                                               // 391
					value = callback.call( obj[ i ], i, obj[ i ] );                                                                 // 392
                                                                                                                     // 393
					if ( value === false ) {                                                                                        // 394
						break;                                                                                                         // 395
					}                                                                                                               // 396
				}                                                                                                                // 397
			}                                                                                                                 // 398
		}                                                                                                                  // 399
                                                                                                                     // 400
		return obj;                                                                                                        // 401
	},                                                                                                                  // 402
                                                                                                                     // 403
	// Use native String.trim function wherever possible                                                                // 404
	trim: trim && !trim.call("\uFEFF\xA0") ?                                                                            // 405
		function( text ) {                                                                                                 // 406
			return text == null ?                                                                                             // 407
				"" :                                                                                                             // 408
				trim.call( text );                                                                                               // 409
		} :                                                                                                                // 410
                                                                                                                     // 411
		// Otherwise use our own trimming functionality                                                                    // 412
		function( text ) {                                                                                                 // 413
			return text == null ?                                                                                             // 414
				"" :                                                                                                             // 415
				( text + "" ).replace( rtrim, "" );                                                                              // 416
		},                                                                                                                 // 417
                                                                                                                     // 418
	// results is for internal usage only                                                                               // 419
	makeArray: function( arr, results ) {                                                                               // 420
		var ret = results || [];                                                                                           // 421
                                                                                                                     // 422
		if ( arr != null ) {                                                                                               // 423
			if ( isArraylike( Object(arr) ) ) {                                                                               // 424
				jQuery.merge( ret,                                                                                               // 425
					typeof arr === "string" ?                                                                                       // 426
					[ arr ] : arr                                                                                                   // 427
				);                                                                                                               // 428
			} else {                                                                                                          // 429
				push.call( ret, arr );                                                                                           // 430
			}                                                                                                                 // 431
		}                                                                                                                  // 432
                                                                                                                     // 433
		return ret;                                                                                                        // 434
	},                                                                                                                  // 435
                                                                                                                     // 436
	inArray: function( elem, arr, i ) {                                                                                 // 437
		var len;                                                                                                           // 438
                                                                                                                     // 439
		if ( arr ) {                                                                                                       // 440
			if ( indexOf ) {                                                                                                  // 441
				return indexOf.call( arr, elem, i );                                                                             // 442
			}                                                                                                                 // 443
                                                                                                                     // 444
			len = arr.length;                                                                                                 // 445
			i = i ? i < 0 ? Math.max( 0, len + i ) : i : 0;                                                                   // 446
                                                                                                                     // 447
			for ( ; i < len; i++ ) {                                                                                          // 448
				// Skip accessing in sparse arrays                                                                               // 449
				if ( i in arr && arr[ i ] === elem ) {                                                                           // 450
					return i;                                                                                                       // 451
				}                                                                                                                // 452
			}                                                                                                                 // 453
		}                                                                                                                  // 454
                                                                                                                     // 455
		return -1;                                                                                                         // 456
	},                                                                                                                  // 457
                                                                                                                     // 458
	merge: function( first, second ) {                                                                                  // 459
		var len = +second.length,                                                                                          // 460
			j = 0,                                                                                                            // 461
			i = first.length;                                                                                                 // 462
                                                                                                                     // 463
		while ( j < len ) {                                                                                                // 464
			first[ i++ ] = second[ j++ ];                                                                                     // 465
		}                                                                                                                  // 466
                                                                                                                     // 467
		// Support: IE<9                                                                                                   // 468
		// Workaround casting of .length to NaN on otherwise arraylike objects (e.g., NodeLists)                           // 469
		if ( len !== len ) {                                                                                               // 470
			while ( second[j] !== undefined ) {                                                                               // 471
				first[ i++ ] = second[ j++ ];                                                                                    // 472
			}                                                                                                                 // 473
		}                                                                                                                  // 474
                                                                                                                     // 475
		first.length = i;                                                                                                  // 476
                                                                                                                     // 477
		return first;                                                                                                      // 478
	},                                                                                                                  // 479
                                                                                                                     // 480
	grep: function( elems, callback, invert ) {                                                                         // 481
		var callbackInverse,                                                                                               // 482
			matches = [],                                                                                                     // 483
			i = 0,                                                                                                            // 484
			length = elems.length,                                                                                            // 485
			callbackExpect = !invert;                                                                                         // 486
                                                                                                                     // 487
		// Go through the array, only saving the items                                                                     // 488
		// that pass the validator function                                                                                // 489
		for ( ; i < length; i++ ) {                                                                                        // 490
			callbackInverse = !callback( elems[ i ], i );                                                                     // 491
			if ( callbackInverse !== callbackExpect ) {                                                                       // 492
				matches.push( elems[ i ] );                                                                                      // 493
			}                                                                                                                 // 494
		}                                                                                                                  // 495
                                                                                                                     // 496
		return matches;                                                                                                    // 497
	},                                                                                                                  // 498
                                                                                                                     // 499
	// arg is for internal usage only                                                                                   // 500
	map: function( elems, callback, arg ) {                                                                             // 501
		var value,                                                                                                         // 502
			i = 0,                                                                                                            // 503
			length = elems.length,                                                                                            // 504
			isArray = isArraylike( elems ),                                                                                   // 505
			ret = [];                                                                                                         // 506
                                                                                                                     // 507
		// Go through the array, translating each of the items to their new values                                         // 508
		if ( isArray ) {                                                                                                   // 509
			for ( ; i < length; i++ ) {                                                                                       // 510
				value = callback( elems[ i ], i, arg );                                                                          // 511
                                                                                                                     // 512
				if ( value != null ) {                                                                                           // 513
					ret.push( value );                                                                                              // 514
				}                                                                                                                // 515
			}                                                                                                                 // 516
                                                                                                                     // 517
		// Go through every key on the object,                                                                             // 518
		} else {                                                                                                           // 519
			for ( i in elems ) {                                                                                              // 520
				value = callback( elems[ i ], i, arg );                                                                          // 521
                                                                                                                     // 522
				if ( value != null ) {                                                                                           // 523
					ret.push( value );                                                                                              // 524
				}                                                                                                                // 525
			}                                                                                                                 // 526
		}                                                                                                                  // 527
                                                                                                                     // 528
		// Flatten any nested arrays                                                                                       // 529
		return concat.apply( [], ret );                                                                                    // 530
	},                                                                                                                  // 531
                                                                                                                     // 532
	// A global GUID counter for objects                                                                                // 533
	guid: 1,                                                                                                            // 534
                                                                                                                     // 535
	// Bind a function to a context, optionally partially applying any                                                  // 536
	// arguments.                                                                                                       // 537
	proxy: function( fn, context ) {                                                                                    // 538
		var args, proxy, tmp;                                                                                              // 539
                                                                                                                     // 540
		if ( typeof context === "string" ) {                                                                               // 541
			tmp = fn[ context ];                                                                                              // 542
			context = fn;                                                                                                     // 543
			fn = tmp;                                                                                                         // 544
		}                                                                                                                  // 545
                                                                                                                     // 546
		// Quick check to determine if target is callable, in the spec                                                     // 547
		// this throws a TypeError, but we will just return undefined.                                                     // 548
		if ( !jQuery.isFunction( fn ) ) {                                                                                  // 549
			return undefined;                                                                                                 // 550
		}                                                                                                                  // 551
                                                                                                                     // 552
		// Simulated bind                                                                                                  // 553
		args = slice.call( arguments, 2 );                                                                                 // 554
		proxy = function() {                                                                                               // 555
			return fn.apply( context || this, args.concat( slice.call( arguments ) ) );                                       // 556
		};                                                                                                                 // 557
                                                                                                                     // 558
		// Set the guid of unique handler to the same of original handler, so it can be removed                            // 559
		proxy.guid = fn.guid = fn.guid || jQuery.guid++;                                                                   // 560
                                                                                                                     // 561
		return proxy;                                                                                                      // 562
	},                                                                                                                  // 563
                                                                                                                     // 564
	now: function() {                                                                                                   // 565
		return +( new Date() );                                                                                            // 566
	},                                                                                                                  // 567
                                                                                                                     // 568
	// jQuery.support is not used in Core but other projects attach their                                               // 569
	// properties to it so it needs to exist.                                                                           // 570
	support: support                                                                                                    // 571
});                                                                                                                  // 572
                                                                                                                     // 573
// Populate the class2type map                                                                                       // 574
jQuery.each("Boolean Number String Function Array Date RegExp Object Error".split(" "), function(i, name) {          // 575
	class2type[ "[object " + name + "]" ] = name.toLowerCase();                                                         // 576
});                                                                                                                  // 577
                                                                                                                     // 578
function isArraylike( obj ) {                                                                                        // 579
	var length = obj.length,                                                                                            // 580
		type = jQuery.type( obj );                                                                                         // 581
                                                                                                                     // 582
	if ( type === "function" || jQuery.isWindow( obj ) ) {                                                              // 583
		return false;                                                                                                      // 584
	}                                                                                                                   // 585
                                                                                                                     // 586
	if ( obj.nodeType === 1 && length ) {                                                                               // 587
		return true;                                                                                                       // 588
	}                                                                                                                   // 589
                                                                                                                     // 590
	return type === "array" || length === 0 ||                                                                          // 591
		typeof length === "number" && length > 0 && ( length - 1 ) in obj;                                                 // 592
}                                                                                                                    // 593
var Sizzle =                                                                                                         // 594
/*!                                                                                                                  // 595
 * Sizzle CSS Selector Engine v1.10.16                                                                               // 596
 * http://sizzlejs.com/                                                                                              // 597
 *                                                                                                                   // 598
 * Copyright 2013 jQuery Foundation, Inc. and other contributors                                                     // 599
 * Released under the MIT license                                                                                    // 600
 * http://jquery.org/license                                                                                         // 601
 *                                                                                                                   // 602
 * Date: 2014-01-13                                                                                                  // 603
 */                                                                                                                  // 604
(function( window ) {                                                                                                // 605
                                                                                                                     // 606
var i,                                                                                                               // 607
	support,                                                                                                            // 608
	Expr,                                                                                                               // 609
	getText,                                                                                                            // 610
	isXML,                                                                                                              // 611
	compile,                                                                                                            // 612
	outermostContext,                                                                                                   // 613
	sortInput,                                                                                                          // 614
	hasDuplicate,                                                                                                       // 615
                                                                                                                     // 616
	// Local document vars                                                                                              // 617
	setDocument,                                                                                                        // 618
	document,                                                                                                           // 619
	docElem,                                                                                                            // 620
	documentIsHTML,                                                                                                     // 621
	rbuggyQSA,                                                                                                          // 622
	rbuggyMatches,                                                                                                      // 623
	matches,                                                                                                            // 624
	contains,                                                                                                           // 625
                                                                                                                     // 626
	// Instance-specific data                                                                                           // 627
	expando = "sizzle" + -(new Date()),                                                                                 // 628
	preferredDoc = window.document,                                                                                     // 629
	dirruns = 0,                                                                                                        // 630
	done = 0,                                                                                                           // 631
	classCache = createCache(),                                                                                         // 632
	tokenCache = createCache(),                                                                                         // 633
	compilerCache = createCache(),                                                                                      // 634
	sortOrder = function( a, b ) {                                                                                      // 635
		if ( a === b ) {                                                                                                   // 636
			hasDuplicate = true;                                                                                              // 637
		}                                                                                                                  // 638
		return 0;                                                                                                          // 639
	},                                                                                                                  // 640
                                                                                                                     // 641
	// General-purpose constants                                                                                        // 642
	strundefined = typeof undefined,                                                                                    // 643
	MAX_NEGATIVE = 1 << 31,                                                                                             // 644
                                                                                                                     // 645
	// Instance methods                                                                                                 // 646
	hasOwn = ({}).hasOwnProperty,                                                                                       // 647
	arr = [],                                                                                                           // 648
	pop = arr.pop,                                                                                                      // 649
	push_native = arr.push,                                                                                             // 650
	push = arr.push,                                                                                                    // 651
	slice = arr.slice,                                                                                                  // 652
	// Use a stripped-down indexOf if we can't use a native one                                                         // 653
	indexOf = arr.indexOf || function( elem ) {                                                                         // 654
		var i = 0,                                                                                                         // 655
			len = this.length;                                                                                                // 656
		for ( ; i < len; i++ ) {                                                                                           // 657
			if ( this[i] === elem ) {                                                                                         // 658
				return i;                                                                                                        // 659
			}                                                                                                                 // 660
		}                                                                                                                  // 661
		return -1;                                                                                                         // 662
	},                                                                                                                  // 663
                                                                                                                     // 664
	booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",
                                                                                                                     // 666
	// Regular expressions                                                                                              // 667
                                                                                                                     // 668
	// Whitespace characters http://www.w3.org/TR/css3-selectors/#whitespace                                            // 669
	whitespace = "[\\x20\\t\\r\\n\\f]",                                                                                 // 670
	// http://www.w3.org/TR/css3-syntax/#characters                                                                     // 671
	characterEncoding = "(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",                                                             // 672
                                                                                                                     // 673
	// Loosely modeled on CSS identifier characters                                                                     // 674
	// An unquoted value should be a CSS identifier http://www.w3.org/TR/css3-selectors/#attribute-selectors            // 675
	// Proper syntax: http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier                                      // 676
	identifier = characterEncoding.replace( "w", "w#" ),                                                                // 677
                                                                                                                     // 678
	// Acceptable operators http://www.w3.org/TR/selectors/#attribute-selectors                                         // 679
	attributes = "\\[" + whitespace + "*(" + characterEncoding + ")" + whitespace +                                     // 680
		"*(?:([*^$|!~]?=)" + whitespace + "*(?:(['\"])((?:\\\\.|[^\\\\])*?)\\3|(" + identifier + ")|)|)" + whitespace + "*\\]",
                                                                                                                     // 682
	// Prefer arguments quoted,                                                                                         // 683
	//   then not containing pseudos/brackets,                                                                          // 684
	//   then attribute selectors/non-parenthetical expressions,                                                        // 685
	//   then anything else                                                                                             // 686
	// These preferences are here to reduce the number of selectors                                                     // 687
	//   needing tokenize in the PSEUDO preFilter                                                                       // 688
	pseudos = ":(" + characterEncoding + ")(?:\\(((['\"])((?:\\\\.|[^\\\\])*?)\\3|((?:\\\\.|[^\\\\()[\\]]|" + attributes.replace( 3, 8 ) + ")*)|.*)\\)|)",
                                                                                                                     // 690
	// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter       // 691
	rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g" ),                    // 692
                                                                                                                     // 693
	rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),                                                  // 694
	rcombinators = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*" ),                   // 695
                                                                                                                     // 696
	rattributeQuotes = new RegExp( "=" + whitespace + "*([^\\]'\"]*?)" + whitespace + "*\\]", "g" ),                    // 697
                                                                                                                     // 698
	rpseudo = new RegExp( pseudos ),                                                                                    // 699
	ridentifier = new RegExp( "^" + identifier + "$" ),                                                                 // 700
                                                                                                                     // 701
	matchExpr = {                                                                                                       // 702
		"ID": new RegExp( "^#(" + characterEncoding + ")" ),                                                               // 703
		"CLASS": new RegExp( "^\\.(" + characterEncoding + ")" ),                                                          // 704
		"TAG": new RegExp( "^(" + characterEncoding.replace( "w", "w*" ) + ")" ),                                          // 705
		"ATTR": new RegExp( "^" + attributes ),                                                                            // 706
		"PSEUDO": new RegExp( "^" + pseudos ),                                                                             // 707
		"CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace +                       // 708
			"*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +                                        // 709
			"*(\\d+)|))" + whitespace + "*\\)|)", "i" ),                                                                      // 710
		"bool": new RegExp( "^(?:" + booleans + ")$", "i" ),                                                               // 711
		// For use in libraries implementing .is()                                                                         // 712
		// We use this for POS matching in `select`                                                                        // 713
		"needsContext": new RegExp( "^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" +                // 714
			whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )                                          // 715
	},                                                                                                                  // 716
                                                                                                                     // 717
	rinputs = /^(?:input|select|textarea|button)$/i,                                                                    // 718
	rheader = /^h\d$/i,                                                                                                 // 719
                                                                                                                     // 720
	rnative = /^[^{]+\{\s*\[native \w/,                                                                                 // 721
                                                                                                                     // 722
	// Easily-parseable/retrievable ID or TAG or CLASS selectors                                                        // 723
	rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,                                                                    // 724
                                                                                                                     // 725
	rsibling = /[+~]/,                                                                                                  // 726
	rescape = /'|\\/g,                                                                                                  // 727
                                                                                                                     // 728
	// CSS escapes http://www.w3.org/TR/CSS21/syndata.html#escaped-characters                                           // 729
	runescape = new RegExp( "\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig" ),                    // 730
	funescape = function( _, escaped, escapedWhitespace ) {                                                             // 731
		var high = "0x" + escaped - 0x10000;                                                                               // 732
		// NaN means non-codepoint                                                                                         // 733
		// Support: Firefox                                                                                                // 734
		// Workaround erroneous numeric interpretation of +"0x"                                                            // 735
		return high !== high || escapedWhitespace ?                                                                        // 736
			escaped :                                                                                                         // 737
			high < 0 ?                                                                                                        // 738
				// BMP codepoint                                                                                                 // 739
				String.fromCharCode( high + 0x10000 ) :                                                                          // 740
				// Supplemental Plane codepoint (surrogate pair)                                                                 // 741
				String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );                                               // 742
	};                                                                                                                  // 743
                                                                                                                     // 744
// Optimize for push.apply( _, NodeList )                                                                            // 745
try {                                                                                                                // 746
	push.apply(                                                                                                         // 747
		(arr = slice.call( preferredDoc.childNodes )),                                                                     // 748
		preferredDoc.childNodes                                                                                            // 749
	);                                                                                                                  // 750
	// Support: Android<4.0                                                                                             // 751
	// Detect silently failing push.apply                                                                               // 752
	arr[ preferredDoc.childNodes.length ].nodeType;                                                                     // 753
} catch ( e ) {                                                                                                      // 754
	push = { apply: arr.length ?                                                                                        // 755
                                                                                                                     // 756
		// Leverage slice if possible                                                                                      // 757
		function( target, els ) {                                                                                          // 758
			push_native.apply( target, slice.call(els) );                                                                     // 759
		} :                                                                                                                // 760
                                                                                                                     // 761
		// Support: IE<9                                                                                                   // 762
		// Otherwise append directly                                                                                       // 763
		function( target, els ) {                                                                                          // 764
			var j = target.length,                                                                                            // 765
				i = 0;                                                                                                           // 766
			// Can't trust NodeList.length                                                                                    // 767
			while ( (target[j++] = els[i++]) ) {}                                                                             // 768
			target.length = j - 1;                                                                                            // 769
		}                                                                                                                  // 770
	};                                                                                                                  // 771
}                                                                                                                    // 772
                                                                                                                     // 773
function Sizzle( selector, context, results, seed ) {                                                                // 774
	var match, elem, m, nodeType,                                                                                       // 775
		// QSA vars                                                                                                        // 776
		i, groups, old, nid, newContext, newSelector;                                                                      // 777
                                                                                                                     // 778
	if ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {                                 // 779
		setDocument( context );                                                                                            // 780
	}                                                                                                                   // 781
                                                                                                                     // 782
	context = context || document;                                                                                      // 783
	results = results || [];                                                                                            // 784
                                                                                                                     // 785
	if ( !selector || typeof selector !== "string" ) {                                                                  // 786
		return results;                                                                                                    // 787
	}                                                                                                                   // 788
                                                                                                                     // 789
	if ( (nodeType = context.nodeType) !== 1 && nodeType !== 9 ) {                                                      // 790
		return [];                                                                                                         // 791
	}                                                                                                                   // 792
                                                                                                                     // 793
	if ( documentIsHTML && !seed ) {                                                                                    // 794
                                                                                                                     // 795
		// Shortcuts                                                                                                       // 796
		if ( (match = rquickExpr.exec( selector )) ) {                                                                     // 797
			// Speed-up: Sizzle("#ID")                                                                                        // 798
			if ( (m = match[1]) ) {                                                                                           // 799
				if ( nodeType === 9 ) {                                                                                          // 800
					elem = context.getElementById( m );                                                                             // 801
					// Check parentNode to catch when Blackberry 4.6 returns                                                        // 802
					// nodes that are no longer in the document (jQuery #6963)                                                      // 803
					if ( elem && elem.parentNode ) {                                                                                // 804
						// Handle the case where IE, Opera, and Webkit return items                                                    // 805
						// by name instead of ID                                                                                       // 806
						if ( elem.id === m ) {                                                                                         // 807
							results.push( elem );                                                                                         // 808
							return results;                                                                                               // 809
						}                                                                                                              // 810
					} else {                                                                                                        // 811
						return results;                                                                                                // 812
					}                                                                                                               // 813
				} else {                                                                                                         // 814
					// Context is not a document                                                                                    // 815
					if ( context.ownerDocument && (elem = context.ownerDocument.getElementById( m )) &&                             // 816
						contains( context, elem ) && elem.id === m ) {                                                                 // 817
						results.push( elem );                                                                                          // 818
						return results;                                                                                                // 819
					}                                                                                                               // 820
				}                                                                                                                // 821
                                                                                                                     // 822
			// Speed-up: Sizzle("TAG")                                                                                        // 823
			} else if ( match[2] ) {                                                                                          // 824
				push.apply( results, context.getElementsByTagName( selector ) );                                                 // 825
				return results;                                                                                                  // 826
                                                                                                                     // 827
			// Speed-up: Sizzle(".CLASS")                                                                                     // 828
			} else if ( (m = match[3]) && support.getElementsByClassName && context.getElementsByClassName ) {                // 829
				push.apply( results, context.getElementsByClassName( m ) );                                                      // 830
				return results;                                                                                                  // 831
			}                                                                                                                 // 832
		}                                                                                                                  // 833
                                                                                                                     // 834
		// QSA path                                                                                                        // 835
		if ( support.qsa && (!rbuggyQSA || !rbuggyQSA.test( selector )) ) {                                                // 836
			nid = old = expando;                                                                                              // 837
			newContext = context;                                                                                             // 838
			newSelector = nodeType === 9 && selector;                                                                         // 839
                                                                                                                     // 840
			// qSA works strangely on Element-rooted queries                                                                  // 841
			// We can work around this by specifying an extra ID on the root                                                  // 842
			// and working up from there (Thanks to Andrew Dupont for the technique)                                          // 843
			// IE 8 doesn't work on object elements                                                                           // 844
			if ( nodeType === 1 && context.nodeName.toLowerCase() !== "object" ) {                                            // 845
				groups = tokenize( selector );                                                                                   // 846
                                                                                                                     // 847
				if ( (old = context.getAttribute("id")) ) {                                                                      // 848
					nid = old.replace( rescape, "\\$&" );                                                                           // 849
				} else {                                                                                                         // 850
					context.setAttribute( "id", nid );                                                                              // 851
				}                                                                                                                // 852
				nid = "[id='" + nid + "'] ";                                                                                     // 853
                                                                                                                     // 854
				i = groups.length;                                                                                               // 855
				while ( i-- ) {                                                                                                  // 856
					groups[i] = nid + toSelector( groups[i] );                                                                      // 857
				}                                                                                                                // 858
				newContext = rsibling.test( selector ) && testContext( context.parentNode ) || context;                          // 859
				newSelector = groups.join(",");                                                                                  // 860
			}                                                                                                                 // 861
                                                                                                                     // 862
			if ( newSelector ) {                                                                                              // 863
				try {                                                                                                            // 864
					push.apply( results,                                                                                            // 865
						newContext.querySelectorAll( newSelector )                                                                     // 866
					);                                                                                                              // 867
					return results;                                                                                                 // 868
				} catch(qsaError) {                                                                                              // 869
				} finally {                                                                                                      // 870
					if ( !old ) {                                                                                                   // 871
						context.removeAttribute("id");                                                                                 // 872
					}                                                                                                               // 873
				}                                                                                                                // 874
			}                                                                                                                 // 875
		}                                                                                                                  // 876
	}                                                                                                                   // 877
                                                                                                                     // 878
	// All others                                                                                                       // 879
	return select( selector.replace( rtrim, "$1" ), context, results, seed );                                           // 880
}                                                                                                                    // 881
                                                                                                                     // 882
/**                                                                                                                  // 883
 * Create key-value caches of limited size                                                                           // 884
 * @returns {Function(string, Object)} Returns the Object data after storing it on itself with                       // 885
 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)                      // 886
 *	deleting the oldest entry                                                                                         // 887
 */                                                                                                                  // 888
function createCache() {                                                                                             // 889
	var keys = [];                                                                                                      // 890
                                                                                                                     // 891
	function cache( key, value ) {                                                                                      // 892
		// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)                            // 893
		if ( keys.push( key + " " ) > Expr.cacheLength ) {                                                                 // 894
			// Only keep the most recent entries                                                                              // 895
			delete cache[ keys.shift() ];                                                                                     // 896
		}                                                                                                                  // 897
		return (cache[ key + " " ] = value);                                                                               // 898
	}                                                                                                                   // 899
	return cache;                                                                                                       // 900
}                                                                                                                    // 901
                                                                                                                     // 902
/**                                                                                                                  // 903
 * Mark a function for special use by Sizzle                                                                         // 904
 * @param {Function} fn The function to mark                                                                         // 905
 */                                                                                                                  // 906
function markFunction( fn ) {                                                                                        // 907
	fn[ expando ] = true;                                                                                               // 908
	return fn;                                                                                                          // 909
}                                                                                                                    // 910
                                                                                                                     // 911
/**                                                                                                                  // 912
 * Support testing using an element                                                                                  // 913
 * @param {Function} fn Passed the created div and expects a boolean result                                          // 914
 */                                                                                                                  // 915
function assert( fn ) {                                                                                              // 916
	var div = document.createElement("div");                                                                            // 917
                                                                                                                     // 918
	try {                                                                                                               // 919
		return !!fn( div );                                                                                                // 920
	} catch (e) {                                                                                                       // 921
		return false;                                                                                                      // 922
	} finally {                                                                                                         // 923
		// Remove from its parent by default                                                                               // 924
		if ( div.parentNode ) {                                                                                            // 925
			div.parentNode.removeChild( div );                                                                                // 926
		}                                                                                                                  // 927
		// release memory in IE                                                                                            // 928
		div = null;                                                                                                        // 929
	}                                                                                                                   // 930
}                                                                                                                    // 931
                                                                                                                     // 932
/**                                                                                                                  // 933
 * Adds the same handler for all of the specified attrs                                                              // 934
 * @param {String} attrs Pipe-separated list of attributes                                                           // 935
 * @param {Function} handler The method that will be applied                                                         // 936
 */                                                                                                                  // 937
function addHandle( attrs, handler ) {                                                                               // 938
	var arr = attrs.split("|"),                                                                                         // 939
		i = attrs.length;                                                                                                  // 940
                                                                                                                     // 941
	while ( i-- ) {                                                                                                     // 942
		Expr.attrHandle[ arr[i] ] = handler;                                                                               // 943
	}                                                                                                                   // 944
}                                                                                                                    // 945
                                                                                                                     // 946
/**                                                                                                                  // 947
 * Checks document order of two siblings                                                                             // 948
 * @param {Element} a                                                                                                // 949
 * @param {Element} b                                                                                                // 950
 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b                              // 951
 */                                                                                                                  // 952
function siblingCheck( a, b ) {                                                                                      // 953
	var cur = b && a,                                                                                                   // 954
		diff = cur && a.nodeType === 1 && b.nodeType === 1 &&                                                              // 955
			( ~b.sourceIndex || MAX_NEGATIVE ) -                                                                              // 956
			( ~a.sourceIndex || MAX_NEGATIVE );                                                                               // 957
                                                                                                                     // 958
	// Use IE sourceIndex if available on both nodes                                                                    // 959
	if ( diff ) {                                                                                                       // 960
		return diff;                                                                                                       // 961
	}                                                                                                                   // 962
                                                                                                                     // 963
	// Check if b follows a                                                                                             // 964
	if ( cur ) {                                                                                                        // 965
		while ( (cur = cur.nextSibling) ) {                                                                                // 966
			if ( cur === b ) {                                                                                                // 967
				return -1;                                                                                                       // 968
			}                                                                                                                 // 969
		}                                                                                                                  // 970
	}                                                                                                                   // 971
                                                                                                                     // 972
	return a ? 1 : -1;                                                                                                  // 973
}                                                                                                                    // 974
                                                                                                                     // 975
/**                                                                                                                  // 976
 * Returns a function to use in pseudos for input types                                                              // 977
 * @param {String} type                                                                                              // 978
 */                                                                                                                  // 979
function createInputPseudo( type ) {                                                                                 // 980
	return function( elem ) {                                                                                           // 981
		var name = elem.nodeName.toLowerCase();                                                                            // 982
		return name === "input" && elem.type === type;                                                                     // 983
	};                                                                                                                  // 984
}                                                                                                                    // 985
                                                                                                                     // 986
/**                                                                                                                  // 987
 * Returns a function to use in pseudos for buttons                                                                  // 988
 * @param {String} type                                                                                              // 989
 */                                                                                                                  // 990
function createButtonPseudo( type ) {                                                                                // 991
	return function( elem ) {                                                                                           // 992
		var name = elem.nodeName.toLowerCase();                                                                            // 993
		return (name === "input" || name === "button") && elem.type === type;                                              // 994
	};                                                                                                                  // 995
}                                                                                                                    // 996
                                                                                                                     // 997
/**                                                                                                                  // 998
 * Returns a function to use in pseudos for positionals                                                              // 999
 * @param {Function} fn                                                                                              // 1000
 */                                                                                                                  // 1001
function createPositionalPseudo( fn ) {                                                                              // 1002
	return markFunction(function( argument ) {                                                                          // 1003
		argument = +argument;                                                                                              // 1004
		return markFunction(function( seed, matches ) {                                                                    // 1005
			var j,                                                                                                            // 1006
				matchIndexes = fn( [], seed.length, argument ),                                                                  // 1007
				i = matchIndexes.length;                                                                                         // 1008
                                                                                                                     // 1009
			// Match elements found at the specified indexes                                                                  // 1010
			while ( i-- ) {                                                                                                   // 1011
				if ( seed[ (j = matchIndexes[i]) ] ) {                                                                           // 1012
					seed[j] = !(matches[j] = seed[j]);                                                                              // 1013
				}                                                                                                                // 1014
			}                                                                                                                 // 1015
		});                                                                                                                // 1016
	});                                                                                                                 // 1017
}                                                                                                                    // 1018
                                                                                                                     // 1019
/**                                                                                                                  // 1020
 * Checks a node for validity as a Sizzle context                                                                    // 1021
 * @param {Element|Object=} context                                                                                  // 1022
 * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value                           // 1023
 */                                                                                                                  // 1024
function testContext( context ) {                                                                                    // 1025
	return context && typeof context.getElementsByTagName !== strundefined && context;                                  // 1026
}                                                                                                                    // 1027
                                                                                                                     // 1028
// Expose support vars for convenience                                                                               // 1029
support = Sizzle.support = {};                                                                                       // 1030
                                                                                                                     // 1031
/**                                                                                                                  // 1032
 * Detects XML nodes                                                                                                 // 1033
 * @param {Element|Object} elem An element or a document                                                             // 1034
 * @returns {Boolean} True iff elem is a non-HTML XML node                                                           // 1035
 */                                                                                                                  // 1036
isXML = Sizzle.isXML = function( elem ) {                                                                            // 1037
	// documentElement is verified for cases where it doesn't yet exist                                                 // 1038
	// (such as loading iframes in IE - #4833)                                                                          // 1039
	var documentElement = elem && (elem.ownerDocument || elem).documentElement;                                         // 1040
	return documentElement ? documentElement.nodeName !== "HTML" : false;                                               // 1041
};                                                                                                                   // 1042
                                                                                                                     // 1043
/**                                                                                                                  // 1044
 * Sets document-related variables once based on the current document                                                // 1045
 * @param {Element|Object} [doc] An element or document object to use to set the document                            // 1046
 * @returns {Object} Returns the current document                                                                    // 1047
 */                                                                                                                  // 1048
setDocument = Sizzle.setDocument = function( node ) {                                                                // 1049
	var hasCompare,                                                                                                     // 1050
		doc = node ? node.ownerDocument || node : preferredDoc,                                                            // 1051
		parent = doc.defaultView;                                                                                          // 1052
                                                                                                                     // 1053
	// If no document and documentElement is available, return                                                          // 1054
	if ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {                                             // 1055
		return document;                                                                                                   // 1056
	}                                                                                                                   // 1057
                                                                                                                     // 1058
	// Set our document                                                                                                 // 1059
	document = doc;                                                                                                     // 1060
	docElem = doc.documentElement;                                                                                      // 1061
                                                                                                                     // 1062
	// Support tests                                                                                                    // 1063
	documentIsHTML = !isXML( doc );                                                                                     // 1064
                                                                                                                     // 1065
	// Support: IE>8                                                                                                    // 1066
	// If iframe document is assigned to "document" variable and if iframe has been reloaded,                           // 1067
	// IE will throw "permission denied" error when accessing "document" variable, see jQuery #13936                    // 1068
	// IE6-8 do not support the defaultView property so parent will be undefined                                        // 1069
	if ( parent && parent !== parent.top ) {                                                                            // 1070
		// IE11 does not have attachEvent, so all must suffer                                                              // 1071
		if ( parent.addEventListener ) {                                                                                   // 1072
			parent.addEventListener( "unload", function() {                                                                   // 1073
				setDocument();                                                                                                   // 1074
			}, false );                                                                                                       // 1075
		} else if ( parent.attachEvent ) {                                                                                 // 1076
			parent.attachEvent( "onunload", function() {                                                                      // 1077
				setDocument();                                                                                                   // 1078
			});                                                                                                               // 1079
		}                                                                                                                  // 1080
	}                                                                                                                   // 1081
                                                                                                                     // 1082
	/* Attributes                                                                                                       // 1083
	---------------------------------------------------------------------- */                                           // 1084
                                                                                                                     // 1085
	// Support: IE<8                                                                                                    // 1086
	// Verify that getAttribute really returns attributes and not properties (excepting IE8 booleans)                   // 1087
	support.attributes = assert(function( div ) {                                                                       // 1088
		div.className = "i";                                                                                               // 1089
		return !div.getAttribute("className");                                                                             // 1090
	});                                                                                                                 // 1091
                                                                                                                     // 1092
	/* getElement(s)By*                                                                                                 // 1093
	---------------------------------------------------------------------- */                                           // 1094
                                                                                                                     // 1095
	// Check if getElementsByTagName("*") returns only elements                                                         // 1096
	support.getElementsByTagName = assert(function( div ) {                                                             // 1097
		div.appendChild( doc.createComment("") );                                                                          // 1098
		return !div.getElementsByTagName("*").length;                                                                      // 1099
	});                                                                                                                 // 1100
                                                                                                                     // 1101
	// Check if getElementsByClassName can be trusted                                                                   // 1102
	support.getElementsByClassName = rnative.test( doc.getElementsByClassName ) && assert(function( div ) {             // 1103
		div.innerHTML = "<div class='a'></div><div class='a i'></div>";                                                    // 1104
                                                                                                                     // 1105
		// Support: Safari<4                                                                                               // 1106
		// Catch class over-caching                                                                                        // 1107
		div.firstChild.className = "i";                                                                                    // 1108
		// Support: Opera<10                                                                                               // 1109
		// Catch gEBCN failure to find non-leading classes                                                                 // 1110
		return div.getElementsByClassName("i").length === 2;                                                               // 1111
	});                                                                                                                 // 1112
                                                                                                                     // 1113
	// Support: IE<10                                                                                                   // 1114
	// Check if getElementById returns elements by name                                                                 // 1115
	// The broken getElementById methods don't pick up programatically-set names,                                       // 1116
	// so use a roundabout getElementsByName test                                                                       // 1117
	support.getById = assert(function( div ) {                                                                          // 1118
		docElem.appendChild( div ).id = expando;                                                                           // 1119
		return !doc.getElementsByName || !doc.getElementsByName( expando ).length;                                         // 1120
	});                                                                                                                 // 1121
                                                                                                                     // 1122
	// ID find and filter                                                                                               // 1123
	if ( support.getById ) {                                                                                            // 1124
		Expr.find["ID"] = function( id, context ) {                                                                        // 1125
			if ( typeof context.getElementById !== strundefined && documentIsHTML ) {                                         // 1126
				var m = context.getElementById( id );                                                                            // 1127
				// Check parentNode to catch when Blackberry 4.6 returns                                                         // 1128
				// nodes that are no longer in the document #6963                                                                // 1129
				return m && m.parentNode ? [m] : [];                                                                             // 1130
			}                                                                                                                 // 1131
		};                                                                                                                 // 1132
		Expr.filter["ID"] = function( id ) {                                                                               // 1133
			var attrId = id.replace( runescape, funescape );                                                                  // 1134
			return function( elem ) {                                                                                         // 1135
				return elem.getAttribute("id") === attrId;                                                                       // 1136
			};                                                                                                                // 1137
		};                                                                                                                 // 1138
	} else {                                                                                                            // 1139
		// Support: IE6/7                                                                                                  // 1140
		// getElementById is not reliable as a find shortcut                                                               // 1141
		delete Expr.find["ID"];                                                                                            // 1142
                                                                                                                     // 1143
		Expr.filter["ID"] =  function( id ) {                                                                              // 1144
			var attrId = id.replace( runescape, funescape );                                                                  // 1145
			return function( elem ) {                                                                                         // 1146
				var node = typeof elem.getAttributeNode !== strundefined && elem.getAttributeNode("id");                         // 1147
				return node && node.value === attrId;                                                                            // 1148
			};                                                                                                                // 1149
		};                                                                                                                 // 1150
	}                                                                                                                   // 1151
                                                                                                                     // 1152
	// Tag                                                                                                              // 1153
	Expr.find["TAG"] = support.getElementsByTagName ?                                                                   // 1154
		function( tag, context ) {                                                                                         // 1155
			if ( typeof context.getElementsByTagName !== strundefined ) {                                                     // 1156
				return context.getElementsByTagName( tag );                                                                      // 1157
			}                                                                                                                 // 1158
		} :                                                                                                                // 1159
		function( tag, context ) {                                                                                         // 1160
			var elem,                                                                                                         // 1161
				tmp = [],                                                                                                        // 1162
				i = 0,                                                                                                           // 1163
				results = context.getElementsByTagName( tag );                                                                   // 1164
                                                                                                                     // 1165
			// Filter out possible comments                                                                                   // 1166
			if ( tag === "*" ) {                                                                                              // 1167
				while ( (elem = results[i++]) ) {                                                                                // 1168
					if ( elem.nodeType === 1 ) {                                                                                    // 1169
						tmp.push( elem );                                                                                              // 1170
					}                                                                                                               // 1171
				}                                                                                                                // 1172
                                                                                                                     // 1173
				return tmp;                                                                                                      // 1174
			}                                                                                                                 // 1175
			return results;                                                                                                   // 1176
		};                                                                                                                 // 1177
                                                                                                                     // 1178
	// Class                                                                                                            // 1179
	Expr.find["CLASS"] = support.getElementsByClassName && function( className, context ) {                             // 1180
		if ( typeof context.getElementsByClassName !== strundefined && documentIsHTML ) {                                  // 1181
			return context.getElementsByClassName( className );                                                               // 1182
		}                                                                                                                  // 1183
	};                                                                                                                  // 1184
                                                                                                                     // 1185
	/* QSA/matchesSelector                                                                                              // 1186
	---------------------------------------------------------------------- */                                           // 1187
                                                                                                                     // 1188
	// QSA and matchesSelector support                                                                                  // 1189
                                                                                                                     // 1190
	// matchesSelector(:active) reports false when true (IE9/Opera 11.5)                                                // 1191
	rbuggyMatches = [];                                                                                                 // 1192
                                                                                                                     // 1193
	// qSa(:focus) reports false when true (Chrome 21)                                                                  // 1194
	// We allow this because of a bug in IE8/9 that throws an error                                                     // 1195
	// whenever `document.activeElement` is accessed on an iframe                                                       // 1196
	// So, we allow :focus to pass through QSA all the time to avoid the IE error                                       // 1197
	// See http://bugs.jquery.com/ticket/13378                                                                          // 1198
	rbuggyQSA = [];                                                                                                     // 1199
                                                                                                                     // 1200
	if ( (support.qsa = rnative.test( doc.querySelectorAll )) ) {                                                       // 1201
		// Build QSA regex                                                                                                 // 1202
		// Regex strategy adopted from Diego Perini                                                                        // 1203
		assert(function( div ) {                                                                                           // 1204
			// Select is set to empty string on purpose                                                                       // 1205
			// This is to test IE's treatment of not explicitly                                                               // 1206
			// setting a boolean content attribute,                                                                           // 1207
			// since its presence should be enough                                                                            // 1208
			// http://bugs.jquery.com/ticket/12359                                                                            // 1209
			div.innerHTML = "<select t=''><option selected=''></option></select>";                                            // 1210
                                                                                                                     // 1211
			// Support: IE8, Opera 10-12                                                                                      // 1212
			// Nothing should be selected when empty strings follow ^= or $= or *=                                            // 1213
			if ( div.querySelectorAll("[t^='']").length ) {                                                                   // 1214
				rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:''|\"\")" );                                                        // 1215
			}                                                                                                                 // 1216
                                                                                                                     // 1217
			// Support: IE8                                                                                                   // 1218
			// Boolean attributes and "value" are not treated correctly                                                       // 1219
			if ( !div.querySelectorAll("[selected]").length ) {                                                               // 1220
				rbuggyQSA.push( "\\[" + whitespace + "*(?:value|" + booleans + ")" );                                            // 1221
			}                                                                                                                 // 1222
                                                                                                                     // 1223
			// Webkit/Opera - :checked should return selected option elements                                                 // 1224
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked                                                 // 1225
			// IE8 throws error here and will not see later tests                                                             // 1226
			if ( !div.querySelectorAll(":checked").length ) {                                                                 // 1227
				rbuggyQSA.push(":checked");                                                                                      // 1228
			}                                                                                                                 // 1229
		});                                                                                                                // 1230
                                                                                                                     // 1231
		assert(function( div ) {                                                                                           // 1232
			// Support: Windows 8 Native Apps                                                                                 // 1233
			// The type and name attributes are restricted during .innerHTML assignment                                       // 1234
			var input = doc.createElement("input");                                                                           // 1235
			input.setAttribute( "type", "hidden" );                                                                           // 1236
			div.appendChild( input ).setAttribute( "name", "D" );                                                             // 1237
                                                                                                                     // 1238
			// Support: IE8                                                                                                   // 1239
			// Enforce case-sensitivity of name attribute                                                                     // 1240
			if ( div.querySelectorAll("[name=d]").length ) {                                                                  // 1241
				rbuggyQSA.push( "name" + whitespace + "*[*^$|!~]?=" );                                                           // 1242
			}                                                                                                                 // 1243
                                                                                                                     // 1244
			// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)                            // 1245
			// IE8 throws error here and will not see later tests                                                             // 1246
			if ( !div.querySelectorAll(":enabled").length ) {                                                                 // 1247
				rbuggyQSA.push( ":enabled", ":disabled" );                                                                       // 1248
			}                                                                                                                 // 1249
                                                                                                                     // 1250
			// Opera 10-11 does not throw on post-comma invalid pseudos                                                       // 1251
			div.querySelectorAll("*,:x");                                                                                     // 1252
			rbuggyQSA.push(",.*:");                                                                                           // 1253
		});                                                                                                                // 1254
	}                                                                                                                   // 1255
                                                                                                                     // 1256
	if ( (support.matchesSelector = rnative.test( (matches = docElem.webkitMatchesSelector ||                           // 1257
		docElem.mozMatchesSelector ||                                                                                      // 1258
		docElem.oMatchesSelector ||                                                                                        // 1259
		docElem.msMatchesSelector) )) ) {                                                                                  // 1260
                                                                                                                     // 1261
		assert(function( div ) {                                                                                           // 1262
			// Check to see if it's possible to do matchesSelector                                                            // 1263
			// on a disconnected node (IE 9)                                                                                  // 1264
			support.disconnectedMatch = matches.call( div, "div" );                                                           // 1265
                                                                                                                     // 1266
			// This should fail with an exception                                                                             // 1267
			// Gecko does not error, returns false instead                                                                    // 1268
			matches.call( div, "[s!='']:x" );                                                                                 // 1269
			rbuggyMatches.push( "!=", pseudos );                                                                              // 1270
		});                                                                                                                // 1271
	}                                                                                                                   // 1272
                                                                                                                     // 1273
	rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join("|") );                                                  // 1274
	rbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join("|") );                                      // 1275
                                                                                                                     // 1276
	/* Contains                                                                                                         // 1277
	---------------------------------------------------------------------- */                                           // 1278
	hasCompare = rnative.test( docElem.compareDocumentPosition );                                                       // 1279
                                                                                                                     // 1280
	// Element contains another                                                                                         // 1281
	// Purposefully does not implement inclusive descendent                                                             // 1282
	// As in, an element does not contain itself                                                                        // 1283
	contains = hasCompare || rnative.test( docElem.contains ) ?                                                         // 1284
		function( a, b ) {                                                                                                 // 1285
			var adown = a.nodeType === 9 ? a.documentElement : a,                                                             // 1286
				bup = b && b.parentNode;                                                                                         // 1287
			return a === bup || !!( bup && bup.nodeType === 1 && (                                                            // 1288
				adown.contains ?                                                                                                 // 1289
					adown.contains( bup ) :                                                                                         // 1290
					a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16                                              // 1291
			));                                                                                                               // 1292
		} :                                                                                                                // 1293
		function( a, b ) {                                                                                                 // 1294
			if ( b ) {                                                                                                        // 1295
				while ( (b = b.parentNode) ) {                                                                                   // 1296
					if ( b === a ) {                                                                                                // 1297
						return true;                                                                                                   // 1298
					}                                                                                                               // 1299
				}                                                                                                                // 1300
			}                                                                                                                 // 1301
			return false;                                                                                                     // 1302
		};                                                                                                                 // 1303
                                                                                                                     // 1304
	/* Sorting                                                                                                          // 1305
	---------------------------------------------------------------------- */                                           // 1306
                                                                                                                     // 1307
	// Document order sorting                                                                                           // 1308
	sortOrder = hasCompare ?                                                                                            // 1309
	function( a, b ) {                                                                                                  // 1310
                                                                                                                     // 1311
		// Flag for duplicate removal                                                                                      // 1312
		if ( a === b ) {                                                                                                   // 1313
			hasDuplicate = true;                                                                                              // 1314
			return 0;                                                                                                         // 1315
		}                                                                                                                  // 1316
                                                                                                                     // 1317
		// Sort on method existence if only one input has compareDocumentPosition                                          // 1318
		var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;                                             // 1319
		if ( compare ) {                                                                                                   // 1320
			return compare;                                                                                                   // 1321
		}                                                                                                                  // 1322
                                                                                                                     // 1323
		// Calculate position if both inputs belong to the same document                                                   // 1324
		compare = ( a.ownerDocument || a ) === ( b.ownerDocument || b ) ?                                                  // 1325
			a.compareDocumentPosition( b ) :                                                                                  // 1326
                                                                                                                     // 1327
			// Otherwise we know they are disconnected                                                                        // 1328
			1;                                                                                                                // 1329
                                                                                                                     // 1330
		// Disconnected nodes                                                                                              // 1331
		if ( compare & 1 ||                                                                                                // 1332
			(!support.sortDetached && b.compareDocumentPosition( a ) === compare) ) {                                         // 1333
                                                                                                                     // 1334
			// Choose the first element that is related to our preferred document                                             // 1335
			if ( a === doc || a.ownerDocument === preferredDoc && contains(preferredDoc, a) ) {                               // 1336
				return -1;                                                                                                       // 1337
			}                                                                                                                 // 1338
			if ( b === doc || b.ownerDocument === preferredDoc && contains(preferredDoc, b) ) {                               // 1339
				return 1;                                                                                                        // 1340
			}                                                                                                                 // 1341
                                                                                                                     // 1342
			// Maintain original order                                                                                        // 1343
			return sortInput ?                                                                                                // 1344
				( indexOf.call( sortInput, a ) - indexOf.call( sortInput, b ) ) :                                                // 1345
				0;                                                                                                               // 1346
		}                                                                                                                  // 1347
                                                                                                                     // 1348
		return compare & 4 ? -1 : 1;                                                                                       // 1349
	} :                                                                                                                 // 1350
	function( a, b ) {                                                                                                  // 1351
		// Exit early if the nodes are identical                                                                           // 1352
		if ( a === b ) {                                                                                                   // 1353
			hasDuplicate = true;                                                                                              // 1354
			return 0;                                                                                                         // 1355
		}                                                                                                                  // 1356
                                                                                                                     // 1357
		var cur,                                                                                                           // 1358
			i = 0,                                                                                                            // 1359
			aup = a.parentNode,                                                                                               // 1360
			bup = b.parentNode,                                                                                               // 1361
			ap = [ a ],                                                                                                       // 1362
			bp = [ b ];                                                                                                       // 1363
                                                                                                                     // 1364
		// Parentless nodes are either documents or disconnected                                                           // 1365
		if ( !aup || !bup ) {                                                                                              // 1366
			return a === doc ? -1 :                                                                                           // 1367
				b === doc ? 1 :                                                                                                  // 1368
				aup ? -1 :                                                                                                       // 1369
				bup ? 1 :                                                                                                        // 1370
				sortInput ?                                                                                                      // 1371
				( indexOf.call( sortInput, a ) - indexOf.call( sortInput, b ) ) :                                                // 1372
				0;                                                                                                               // 1373
                                                                                                                     // 1374
		// If the nodes are siblings, we can do a quick check                                                              // 1375
		} else if ( aup === bup ) {                                                                                        // 1376
			return siblingCheck( a, b );                                                                                      // 1377
		}                                                                                                                  // 1378
                                                                                                                     // 1379
		// Otherwise we need full lists of their ancestors for comparison                                                  // 1380
		cur = a;                                                                                                           // 1381
		while ( (cur = cur.parentNode) ) {                                                                                 // 1382
			ap.unshift( cur );                                                                                                // 1383
		}                                                                                                                  // 1384
		cur = b;                                                                                                           // 1385
		while ( (cur = cur.parentNode) ) {                                                                                 // 1386
			bp.unshift( cur );                                                                                                // 1387
		}                                                                                                                  // 1388
                                                                                                                     // 1389
		// Walk down the tree looking for a discrepancy                                                                    // 1390
		while ( ap[i] === bp[i] ) {                                                                                        // 1391
			i++;                                                                                                              // 1392
		}                                                                                                                  // 1393
                                                                                                                     // 1394
		return i ?                                                                                                         // 1395
			// Do a sibling check if the nodes have a common ancestor                                                         // 1396
			siblingCheck( ap[i], bp[i] ) :                                                                                    // 1397
                                                                                                                     // 1398
			// Otherwise nodes in our document sort first                                                                     // 1399
			ap[i] === preferredDoc ? -1 :                                                                                     // 1400
			bp[i] === preferredDoc ? 1 :                                                                                      // 1401
			0;                                                                                                                // 1402
	};                                                                                                                  // 1403
                                                                                                                     // 1404
	return doc;                                                                                                         // 1405
};                                                                                                                   // 1406
                                                                                                                     // 1407
Sizzle.matches = function( expr, elements ) {                                                                        // 1408
	return Sizzle( expr, null, null, elements );                                                                        // 1409
};                                                                                                                   // 1410
                                                                                                                     // 1411
Sizzle.matchesSelector = function( elem, expr ) {                                                                    // 1412
	// Set document vars if needed                                                                                      // 1413
	if ( ( elem.ownerDocument || elem ) !== document ) {                                                                // 1414
		setDocument( elem );                                                                                               // 1415
	}                                                                                                                   // 1416
                                                                                                                     // 1417
	// Make sure that attribute selectors are quoted                                                                    // 1418
	expr = expr.replace( rattributeQuotes, "='$1']" );                                                                  // 1419
                                                                                                                     // 1420
	if ( support.matchesSelector && documentIsHTML &&                                                                   // 1421
		( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&                                                               // 1422
		( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {                                                                  // 1423
                                                                                                                     // 1424
		try {                                                                                                              // 1425
			var ret = matches.call( elem, expr );                                                                             // 1426
                                                                                                                     // 1427
			// IE 9's matchesSelector returns false on disconnected nodes                                                     // 1428
			if ( ret || support.disconnectedMatch ||                                                                          // 1429
					// As well, disconnected nodes are said to be in a document                                                     // 1430
					// fragment in IE 9                                                                                             // 1431
					elem.document && elem.document.nodeType !== 11 ) {                                                              // 1432
				return ret;                                                                                                      // 1433
			}                                                                                                                 // 1434
		} catch(e) {}                                                                                                      // 1435
	}                                                                                                                   // 1436
                                                                                                                     // 1437
	return Sizzle( expr, document, null, [elem] ).length > 0;                                                           // 1438
};                                                                                                                   // 1439
                                                                                                                     // 1440
Sizzle.contains = function( context, elem ) {                                                                        // 1441
	// Set document vars if needed                                                                                      // 1442
	if ( ( context.ownerDocument || context ) !== document ) {                                                          // 1443
		setDocument( context );                                                                                            // 1444
	}                                                                                                                   // 1445
	return contains( context, elem );                                                                                   // 1446
};                                                                                                                   // 1447
                                                                                                                     // 1448
Sizzle.attr = function( elem, name ) {                                                                               // 1449
	// Set document vars if needed                                                                                      // 1450
	if ( ( elem.ownerDocument || elem ) !== document ) {                                                                // 1451
		setDocument( elem );                                                                                               // 1452
	}                                                                                                                   // 1453
                                                                                                                     // 1454
	var fn = Expr.attrHandle[ name.toLowerCase() ],                                                                     // 1455
		// Don't get fooled by Object.prototype properties (jQuery #13807)                                                 // 1456
		val = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?                                                   // 1457
			fn( elem, name, !documentIsHTML ) :                                                                               // 1458
			undefined;                                                                                                        // 1459
                                                                                                                     // 1460
	return val !== undefined ?                                                                                          // 1461
		val :                                                                                                              // 1462
		support.attributes || !documentIsHTML ?                                                                            // 1463
			elem.getAttribute( name ) :                                                                                       // 1464
			(val = elem.getAttributeNode(name)) && val.specified ?                                                            // 1465
				val.value :                                                                                                      // 1466
				null;                                                                                                            // 1467
};                                                                                                                   // 1468
                                                                                                                     // 1469
Sizzle.error = function( msg ) {                                                                                     // 1470
	throw new Error( "Syntax error, unrecognized expression: " + msg );                                                 // 1471
};                                                                                                                   // 1472
                                                                                                                     // 1473
/**                                                                                                                  // 1474
 * Document sorting and removing duplicates                                                                          // 1475
 * @param {ArrayLike} results                                                                                        // 1476
 */                                                                                                                  // 1477
Sizzle.uniqueSort = function( results ) {                                                                            // 1478
	var elem,                                                                                                           // 1479
		duplicates = [],                                                                                                   // 1480
		j = 0,                                                                                                             // 1481
		i = 0;                                                                                                             // 1482
                                                                                                                     // 1483
	// Unless we *know* we can detect duplicates, assume their presence                                                 // 1484
	hasDuplicate = !support.detectDuplicates;                                                                           // 1485
	sortInput = !support.sortStable && results.slice( 0 );                                                              // 1486
	results.sort( sortOrder );                                                                                          // 1487
                                                                                                                     // 1488
	if ( hasDuplicate ) {                                                                                               // 1489
		while ( (elem = results[i++]) ) {                                                                                  // 1490
			if ( elem === results[ i ] ) {                                                                                    // 1491
				j = duplicates.push( i );                                                                                        // 1492
			}                                                                                                                 // 1493
		}                                                                                                                  // 1494
		while ( j-- ) {                                                                                                    // 1495
			results.splice( duplicates[ j ], 1 );                                                                             // 1496
		}                                                                                                                  // 1497
	}                                                                                                                   // 1498
                                                                                                                     // 1499
	// Clear input after sorting to release objects                                                                     // 1500
	// See https://github.com/jquery/sizzle/pull/225                                                                    // 1501
	sortInput = null;                                                                                                   // 1502
                                                                                                                     // 1503
	return results;                                                                                                     // 1504
};                                                                                                                   // 1505
                                                                                                                     // 1506
/**                                                                                                                  // 1507
 * Utility function for retrieving the text value of an array of DOM nodes                                           // 1508
 * @param {Array|Element} elem                                                                                       // 1509
 */                                                                                                                  // 1510
getText = Sizzle.getText = function( elem ) {                                                                        // 1511
	var node,                                                                                                           // 1512
		ret = "",                                                                                                          // 1513
		i = 0,                                                                                                             // 1514
		nodeType = elem.nodeType;                                                                                          // 1515
                                                                                                                     // 1516
	if ( !nodeType ) {                                                                                                  // 1517
		// If no nodeType, this is expected to be an array                                                                 // 1518
		while ( (node = elem[i++]) ) {                                                                                     // 1519
			// Do not traverse comment nodes                                                                                  // 1520
			ret += getText( node );                                                                                           // 1521
		}                                                                                                                  // 1522
	} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {                                                 // 1523
		// Use textContent for elements                                                                                    // 1524
		// innerText usage removed for consistency of new lines (jQuery #11153)                                            // 1525
		if ( typeof elem.textContent === "string" ) {                                                                      // 1526
			return elem.textContent;                                                                                          // 1527
		} else {                                                                                                           // 1528
			// Traverse its children                                                                                          // 1529
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {                                                   // 1530
				ret += getText( elem );                                                                                          // 1531
			}                                                                                                                 // 1532
		}                                                                                                                  // 1533
	} else if ( nodeType === 3 || nodeType === 4 ) {                                                                    // 1534
		return elem.nodeValue;                                                                                             // 1535
	}                                                                                                                   // 1536
	// Do not include comment or processing instruction nodes                                                           // 1537
                                                                                                                     // 1538
	return ret;                                                                                                         // 1539
};                                                                                                                   // 1540
                                                                                                                     // 1541
Expr = Sizzle.selectors = {                                                                                          // 1542
                                                                                                                     // 1543
	// Can be adjusted by the user                                                                                      // 1544
	cacheLength: 50,                                                                                                    // 1545
                                                                                                                     // 1546
	createPseudo: markFunction,                                                                                         // 1547
                                                                                                                     // 1548
	match: matchExpr,                                                                                                   // 1549
                                                                                                                     // 1550
	attrHandle: {},                                                                                                     // 1551
                                                                                                                     // 1552
	find: {},                                                                                                           // 1553
                                                                                                                     // 1554
	relative: {                                                                                                         // 1555
		">": { dir: "parentNode", first: true },                                                                           // 1556
		" ": { dir: "parentNode" },                                                                                        // 1557
		"+": { dir: "previousSibling", first: true },                                                                      // 1558
		"~": { dir: "previousSibling" }                                                                                    // 1559
	},                                                                                                                  // 1560
                                                                                                                     // 1561
	preFilter: {                                                                                                        // 1562
		"ATTR": function( match ) {                                                                                        // 1563
			match[1] = match[1].replace( runescape, funescape );                                                              // 1564
                                                                                                                     // 1565
			// Move the given value to match[3] whether quoted or unquoted                                                    // 1566
			match[3] = ( match[4] || match[5] || "" ).replace( runescape, funescape );                                        // 1567
                                                                                                                     // 1568
			if ( match[2] === "~=" ) {                                                                                        // 1569
				match[3] = " " + match[3] + " ";                                                                                 // 1570
			}                                                                                                                 // 1571
                                                                                                                     // 1572
			return match.slice( 0, 4 );                                                                                       // 1573
		},                                                                                                                 // 1574
                                                                                                                     // 1575
		"CHILD": function( match ) {                                                                                       // 1576
			/* matches from matchExpr["CHILD"]                                                                                // 1577
				1 type (only|nth|...)                                                                                            // 1578
				2 what (child|of-type)                                                                                           // 1579
				3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)                                                                     // 1580
				4 xn-component of xn+y argument ([+-]?\d*n|)                                                                     // 1581
				5 sign of xn-component                                                                                           // 1582
				6 x of xn-component                                                                                              // 1583
				7 sign of y-component                                                                                            // 1584
				8 y of y-component                                                                                               // 1585
			*/                                                                                                                // 1586
			match[1] = match[1].toLowerCase();                                                                                // 1587
                                                                                                                     // 1588
			if ( match[1].slice( 0, 3 ) === "nth" ) {                                                                         // 1589
				// nth-* requires argument                                                                                       // 1590
				if ( !match[3] ) {                                                                                               // 1591
					Sizzle.error( match[0] );                                                                                       // 1592
				}                                                                                                                // 1593
                                                                                                                     // 1594
				// numeric x and y parameters for Expr.filter.CHILD                                                              // 1595
				// remember that false/true cast respectively to 0/1                                                             // 1596
				match[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === "even" || match[3] === "odd" ) );       // 1597
				match[5] = +( ( match[7] + match[8] ) || match[3] === "odd" );                                                   // 1598
                                                                                                                     // 1599
			// other types prohibit arguments                                                                                 // 1600
			} else if ( match[3] ) {                                                                                          // 1601
				Sizzle.error( match[0] );                                                                                        // 1602
			}                                                                                                                 // 1603
                                                                                                                     // 1604
			return match;                                                                                                     // 1605
		},                                                                                                                 // 1606
                                                                                                                     // 1607
		"PSEUDO": function( match ) {                                                                                      // 1608
			var excess,                                                                                                       // 1609
				unquoted = !match[5] && match[2];                                                                                // 1610
                                                                                                                     // 1611
			if ( matchExpr["CHILD"].test( match[0] ) ) {                                                                      // 1612
				return null;                                                                                                     // 1613
			}                                                                                                                 // 1614
                                                                                                                     // 1615
			// Accept quoted arguments as-is                                                                                  // 1616
			if ( match[3] && match[4] !== undefined ) {                                                                       // 1617
				match[2] = match[4];                                                                                             // 1618
                                                                                                                     // 1619
			// Strip excess characters from unquoted arguments                                                                // 1620
			} else if ( unquoted && rpseudo.test( unquoted ) &&                                                               // 1621
				// Get excess from tokenize (recursively)                                                                        // 1622
				(excess = tokenize( unquoted, true )) &&                                                                         // 1623
				// advance to the next closing parenthesis                                                                       // 1624
				(excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length) ) {                               // 1625
                                                                                                                     // 1626
				// excess is a negative index                                                                                    // 1627
				match[0] = match[0].slice( 0, excess );                                                                          // 1628
				match[2] = unquoted.slice( 0, excess );                                                                          // 1629
			}                                                                                                                 // 1630
                                                                                                                     // 1631
			// Return only captures needed by the pseudo filter method (type and argument)                                    // 1632
			return match.slice( 0, 3 );                                                                                       // 1633
		}                                                                                                                  // 1634
	},                                                                                                                  // 1635
                                                                                                                     // 1636
	filter: {                                                                                                           // 1637
                                                                                                                     // 1638
		"TAG": function( nodeNameSelector ) {                                                                              // 1639
			var nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();                                    // 1640
			return nodeNameSelector === "*" ?                                                                                 // 1641
				function() { return true; } :                                                                                    // 1642
				function( elem ) {                                                                                               // 1643
					return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;                                               // 1644
				};                                                                                                               // 1645
		},                                                                                                                 // 1646
                                                                                                                     // 1647
		"CLASS": function( className ) {                                                                                   // 1648
			var pattern = classCache[ className + " " ];                                                                      // 1649
                                                                                                                     // 1650
			return pattern ||                                                                                                 // 1651
				(pattern = new RegExp( "(^|" + whitespace + ")" + className + "(" + whitespace + "|$)" )) &&                     // 1652
				classCache( className, function( elem ) {                                                                        // 1653
					return pattern.test( typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== strundefined && elem.getAttribute("class") || "" );
				});                                                                                                              // 1655
		},                                                                                                                 // 1656
                                                                                                                     // 1657
		"ATTR": function( name, operator, check ) {                                                                        // 1658
			return function( elem ) {                                                                                         // 1659
				var result = Sizzle.attr( elem, name );                                                                          // 1660
                                                                                                                     // 1661
				if ( result == null ) {                                                                                          // 1662
					return operator === "!=";                                                                                       // 1663
				}                                                                                                                // 1664
				if ( !operator ) {                                                                                               // 1665
					return true;                                                                                                    // 1666
				}                                                                                                                // 1667
                                                                                                                     // 1668
				result += "";                                                                                                    // 1669
                                                                                                                     // 1670
				return operator === "=" ? result === check :                                                                     // 1671
					operator === "!=" ? result !== check :                                                                          // 1672
					operator === "^=" ? check && result.indexOf( check ) === 0 :                                                    // 1673
					operator === "*=" ? check && result.indexOf( check ) > -1 :                                                     // 1674
					operator === "$=" ? check && result.slice( -check.length ) === check :                                          // 1675
					operator === "~=" ? ( " " + result + " " ).indexOf( check ) > -1 :                                              // 1676
					operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :                   // 1677
					false;                                                                                                          // 1678
			};                                                                                                                // 1679
		},                                                                                                                 // 1680
                                                                                                                     // 1681
		"CHILD": function( type, what, argument, first, last ) {                                                           // 1682
			var simple = type.slice( 0, 3 ) !== "nth",                                                                        // 1683
				forward = type.slice( -4 ) !== "last",                                                                           // 1684
				ofType = what === "of-type";                                                                                     // 1685
                                                                                                                     // 1686
			return first === 1 && last === 0 ?                                                                                // 1687
                                                                                                                     // 1688
				// Shortcut for :nth-*(n)                                                                                        // 1689
				function( elem ) {                                                                                               // 1690
					return !!elem.parentNode;                                                                                       // 1691
				} :                                                                                                              // 1692
                                                                                                                     // 1693
				function( elem, context, xml ) {                                                                                 // 1694
					var cache, outerCache, node, diff, nodeIndex, start,                                                            // 1695
						dir = simple !== forward ? "nextSibling" : "previousSibling",                                                  // 1696
						parent = elem.parentNode,                                                                                      // 1697
						name = ofType && elem.nodeName.toLowerCase(),                                                                  // 1698
						useCache = !xml && !ofType;                                                                                    // 1699
                                                                                                                     // 1700
					if ( parent ) {                                                                                                 // 1701
                                                                                                                     // 1702
						// :(first|last|only)-(child|of-type)                                                                          // 1703
						if ( simple ) {                                                                                                // 1704
							while ( dir ) {                                                                                               // 1705
								node = elem;                                                                                                 // 1706
								while ( (node = node[ dir ]) ) {                                                                             // 1707
									if ( ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1 ) {                                // 1708
										return false;                                                                                              // 1709
									}                                                                                                           // 1710
								}                                                                                                            // 1711
								// Reverse direction for :only-* (if we haven't yet done so)                                                 // 1712
								start = dir = type === "only" && !start && "nextSibling";                                                    // 1713
							}                                                                                                             // 1714
							return true;                                                                                                  // 1715
						}                                                                                                              // 1716
                                                                                                                     // 1717
						start = [ forward ? parent.firstChild : parent.lastChild ];                                                    // 1718
                                                                                                                     // 1719
						// non-xml :nth-child(...) stores cache data on `parent`                                                       // 1720
						if ( forward && useCache ) {                                                                                   // 1721
							// Seek `elem` from a previously-cached index                                                                 // 1722
							outerCache = parent[ expando ] || (parent[ expando ] = {});                                                   // 1723
							cache = outerCache[ type ] || [];                                                                             // 1724
							nodeIndex = cache[0] === dirruns && cache[1];                                                                 // 1725
							diff = cache[0] === dirruns && cache[2];                                                                      // 1726
							node = nodeIndex && parent.childNodes[ nodeIndex ];                                                           // 1727
                                                                                                                     // 1728
							while ( (node = ++nodeIndex && node && node[ dir ] ||                                                         // 1729
                                                                                                                     // 1730
								// Fallback to seeking `elem` from the start                                                                 // 1731
								(diff = nodeIndex = 0) || start.pop()) ) {                                                                   // 1732
                                                                                                                     // 1733
								// When found, cache indexes on `parent` and break                                                           // 1734
								if ( node.nodeType === 1 && ++diff && node === elem ) {                                                      // 1735
									outerCache[ type ] = [ dirruns, nodeIndex, diff ];                                                          // 1736
									break;                                                                                                      // 1737
								}                                                                                                            // 1738
							}                                                                                                             // 1739
                                                                                                                     // 1740
						// Use previously-cached element index if available                                                            // 1741
						} else if ( useCache && (cache = (elem[ expando ] || (elem[ expando ] = {}))[ type ]) && cache[0] === dirruns ) {
							diff = cache[1];                                                                                              // 1743
                                                                                                                     // 1744
						// xml :nth-child(...) or :nth-last-child(...) or :nth(-last)?-of-type(...)                                    // 1745
						} else {                                                                                                       // 1746
							// Use the same loop as above to seek `elem` from the start                                                   // 1747
							while ( (node = ++nodeIndex && node && node[ dir ] ||                                                         // 1748
								(diff = nodeIndex = 0) || start.pop()) ) {                                                                   // 1749
                                                                                                                     // 1750
								if ( ( ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1 ) && ++diff ) {                   // 1751
									// Cache the index of each encountered element                                                              // 1752
									if ( useCache ) {                                                                                           // 1753
										(node[ expando ] || (node[ expando ] = {}))[ type ] = [ dirruns, diff ];                                   // 1754
									}                                                                                                           // 1755
                                                                                                                     // 1756
									if ( node === elem ) {                                                                                      // 1757
										break;                                                                                                     // 1758
									}                                                                                                           // 1759
								}                                                                                                            // 1760
							}                                                                                                             // 1761
						}                                                                                                              // 1762
                                                                                                                     // 1763
						// Incorporate the offset, then check against cycle size                                                       // 1764
						diff -= last;                                                                                                  // 1765
						return diff === first || ( diff % first === 0 && diff / first >= 0 );                                          // 1766
					}                                                                                                               // 1767
				};                                                                                                               // 1768
		},                                                                                                                 // 1769
                                                                                                                     // 1770
		"PSEUDO": function( pseudo, argument ) {                                                                           // 1771
			// pseudo-class names are case-insensitive                                                                        // 1772
			// http://www.w3.org/TR/selectors/#pseudo-classes                                                                 // 1773
			// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters                         // 1774
			// Remember that setFilters inherits from pseudos                                                                 // 1775
			var args,                                                                                                         // 1776
				fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||                                        // 1777
					Sizzle.error( "unsupported pseudo: " + pseudo );                                                                // 1778
                                                                                                                     // 1779
			// The user may use createPseudo to indicate that                                                                 // 1780
			// arguments are needed to create the filter function                                                             // 1781
			// just as Sizzle does                                                                                            // 1782
			if ( fn[ expando ] ) {                                                                                            // 1783
				return fn( argument );                                                                                           // 1784
			}                                                                                                                 // 1785
                                                                                                                     // 1786
			// But maintain support for old signatures                                                                        // 1787
			if ( fn.length > 1 ) {                                                                                            // 1788
				args = [ pseudo, pseudo, "", argument ];                                                                         // 1789
				return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?                                                  // 1790
					markFunction(function( seed, matches ) {                                                                        // 1791
						var idx,                                                                                                       // 1792
							matched = fn( seed, argument ),                                                                               // 1793
							i = matched.length;                                                                                           // 1794
						while ( i-- ) {                                                                                                // 1795
							idx = indexOf.call( seed, matched[i] );                                                                       // 1796
							seed[ idx ] = !( matches[ idx ] = matched[i] );                                                               // 1797
						}                                                                                                              // 1798
					}) :                                                                                                            // 1799
					function( elem ) {                                                                                              // 1800
						return fn( elem, 0, args );                                                                                    // 1801
					};                                                                                                              // 1802
			}                                                                                                                 // 1803
                                                                                                                     // 1804
			return fn;                                                                                                        // 1805
		}                                                                                                                  // 1806
	},                                                                                                                  // 1807
                                                                                                                     // 1808
	pseudos: {                                                                                                          // 1809
		// Potentially complex pseudos                                                                                     // 1810
		"not": markFunction(function( selector ) {                                                                         // 1811
			// Trim the selector passed to compile                                                                            // 1812
			// to avoid treating leading and trailing                                                                         // 1813
			// spaces as combinators                                                                                          // 1814
			var input = [],                                                                                                   // 1815
				results = [],                                                                                                    // 1816
				matcher = compile( selector.replace( rtrim, "$1" ) );                                                            // 1817
                                                                                                                     // 1818
			return matcher[ expando ] ?                                                                                       // 1819
				markFunction(function( seed, matches, context, xml ) {                                                           // 1820
					var elem,                                                                                                       // 1821
						unmatched = matcher( seed, null, xml, [] ),                                                                    // 1822
						i = seed.length;                                                                                               // 1823
                                                                                                                     // 1824
					// Match elements unmatched by `matcher`                                                                        // 1825
					while ( i-- ) {                                                                                                 // 1826
						if ( (elem = unmatched[i]) ) {                                                                                 // 1827
							seed[i] = !(matches[i] = elem);                                                                               // 1828
						}                                                                                                              // 1829
					}                                                                                                               // 1830
				}) :                                                                                                             // 1831
				function( elem, context, xml ) {                                                                                 // 1832
					input[0] = elem;                                                                                                // 1833
					matcher( input, null, xml, results );                                                                           // 1834
					return !results.pop();                                                                                          // 1835
				};                                                                                                               // 1836
		}),                                                                                                                // 1837
                                                                                                                     // 1838
		"has": markFunction(function( selector ) {                                                                         // 1839
			return function( elem ) {                                                                                         // 1840
				return Sizzle( selector, elem ).length > 0;                                                                      // 1841
			};                                                                                                                // 1842
		}),                                                                                                                // 1843
                                                                                                                     // 1844
		"contains": markFunction(function( text ) {                                                                        // 1845
			return function( elem ) {                                                                                         // 1846
				return ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;                           // 1847
			};                                                                                                                // 1848
		}),                                                                                                                // 1849
                                                                                                                     // 1850
		// "Whether an element is represented by a :lang() selector                                                        // 1851
		// is based solely on the element's language value                                                                 // 1852
		// being equal to the identifier C,                                                                                // 1853
		// or beginning with the identifier C immediately followed by "-".                                                 // 1854
		// The matching of C against the element's language value is performed case-insensitively.                         // 1855
		// The identifier C does not have to be a valid language name."                                                    // 1856
		// http://www.w3.org/TR/selectors/#lang-pseudo                                                                     // 1857
		"lang": markFunction( function( lang ) {                                                                           // 1858
			// lang value must be a valid identifier                                                                          // 1859
			if ( !ridentifier.test(lang || "") ) {                                                                            // 1860
				Sizzle.error( "unsupported lang: " + lang );                                                                     // 1861
			}                                                                                                                 // 1862
			lang = lang.replace( runescape, funescape ).toLowerCase();                                                        // 1863
			return function( elem ) {                                                                                         // 1864
				var elemLang;                                                                                                    // 1865
				do {                                                                                                             // 1866
					if ( (elemLang = documentIsHTML ?                                                                               // 1867
						elem.lang :                                                                                                    // 1868
						elem.getAttribute("xml:lang") || elem.getAttribute("lang")) ) {                                                // 1869
                                                                                                                     // 1870
						elemLang = elemLang.toLowerCase();                                                                             // 1871
						return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;                                              // 1872
					}                                                                                                               // 1873
				} while ( (elem = elem.parentNode) && elem.nodeType === 1 );                                                     // 1874
				return false;                                                                                                    // 1875
			};                                                                                                                // 1876
		}),                                                                                                                // 1877
                                                                                                                     // 1878
		// Miscellaneous                                                                                                   // 1879
		"target": function( elem ) {                                                                                       // 1880
			var hash = window.location && window.location.hash;                                                               // 1881
			return hash && hash.slice( 1 ) === elem.id;                                                                       // 1882
		},                                                                                                                 // 1883
                                                                                                                     // 1884
		"root": function( elem ) {                                                                                         // 1885
			return elem === docElem;                                                                                          // 1886
		},                                                                                                                 // 1887
                                                                                                                     // 1888
		"focus": function( elem ) {                                                                                        // 1889
			return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
		},                                                                                                                 // 1891
                                                                                                                     // 1892
		// Boolean properties                                                                                              // 1893
		"enabled": function( elem ) {                                                                                      // 1894
			return elem.disabled === false;                                                                                   // 1895
		},                                                                                                                 // 1896
                                                                                                                     // 1897
		"disabled": function( elem ) {                                                                                     // 1898
			return elem.disabled === true;                                                                                    // 1899
		},                                                                                                                 // 1900
                                                                                                                     // 1901
		"checked": function( elem ) {                                                                                      // 1902
			// In CSS3, :checked should return both checked and selected elements                                             // 1903
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked                                                 // 1904
			var nodeName = elem.nodeName.toLowerCase();                                                                       // 1905
			return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);                    // 1906
		},                                                                                                                 // 1907
                                                                                                                     // 1908
		"selected": function( elem ) {                                                                                     // 1909
			// Accessing this property makes selected-by-default                                                              // 1910
			// options in Safari work properly                                                                                // 1911
			if ( elem.parentNode ) {                                                                                          // 1912
				elem.parentNode.selectedIndex;                                                                                   // 1913
			}                                                                                                                 // 1914
                                                                                                                     // 1915
			return elem.selected === true;                                                                                    // 1916
		},                                                                                                                 // 1917
                                                                                                                     // 1918
		// Contents                                                                                                        // 1919
		"empty": function( elem ) {                                                                                        // 1920
			// http://www.w3.org/TR/selectors/#empty-pseudo                                                                   // 1921
			// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),                          // 1922
			//   but not by others (comment: 8; processing instruction: 7; etc.)                                              // 1923
			// nodeType < 6 works because attributes (2) do not appear as children                                            // 1924
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {                                                   // 1925
				if ( elem.nodeType < 6 ) {                                                                                       // 1926
					return false;                                                                                                   // 1927
				}                                                                                                                // 1928
			}                                                                                                                 // 1929
			return true;                                                                                                      // 1930
		},                                                                                                                 // 1931
                                                                                                                     // 1932
		"parent": function( elem ) {                                                                                       // 1933
			return !Expr.pseudos["empty"]( elem );                                                                            // 1934
		},                                                                                                                 // 1935
                                                                                                                     // 1936
		// Element/input types                                                                                             // 1937
		"header": function( elem ) {                                                                                       // 1938
			return rheader.test( elem.nodeName );                                                                             // 1939
		},                                                                                                                 // 1940
                                                                                                                     // 1941
		"input": function( elem ) {                                                                                        // 1942
			return rinputs.test( elem.nodeName );                                                                             // 1943
		},                                                                                                                 // 1944
                                                                                                                     // 1945
		"button": function( elem ) {                                                                                       // 1946
			var name = elem.nodeName.toLowerCase();                                                                           // 1947
			return name === "input" && elem.type === "button" || name === "button";                                           // 1948
		},                                                                                                                 // 1949
                                                                                                                     // 1950
		"text": function( elem ) {                                                                                         // 1951
			var attr;                                                                                                         // 1952
			return elem.nodeName.toLowerCase() === "input" &&                                                                 // 1953
				elem.type === "text" &&                                                                                          // 1954
                                                                                                                     // 1955
				// Support: IE<8                                                                                                 // 1956
				// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"                                  // 1957
				( (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text" );                                 // 1958
		},                                                                                                                 // 1959
                                                                                                                     // 1960
		// Position-in-collection                                                                                          // 1961
		"first": createPositionalPseudo(function() {                                                                       // 1962
			return [ 0 ];                                                                                                     // 1963
		}),                                                                                                                // 1964
                                                                                                                     // 1965
		"last": createPositionalPseudo(function( matchIndexes, length ) {                                                  // 1966
			return [ length - 1 ];                                                                                            // 1967
		}),                                                                                                                // 1968
                                                                                                                     // 1969
		"eq": createPositionalPseudo(function( matchIndexes, length, argument ) {                                          // 1970
			return [ argument < 0 ? argument + length : argument ];                                                           // 1971
		}),                                                                                                                // 1972
                                                                                                                     // 1973
		"even": createPositionalPseudo(function( matchIndexes, length ) {                                                  // 1974
			var i = 0;                                                                                                        // 1975
			for ( ; i < length; i += 2 ) {                                                                                    // 1976
				matchIndexes.push( i );                                                                                          // 1977
			}                                                                                                                 // 1978
			return matchIndexes;                                                                                              // 1979
		}),                                                                                                                // 1980
                                                                                                                     // 1981
		"odd": createPositionalPseudo(function( matchIndexes, length ) {                                                   // 1982
			var i = 1;                                                                                                        // 1983
			for ( ; i < length; i += 2 ) {                                                                                    // 1984
				matchIndexes.push( i );                                                                                          // 1985
			}                                                                                                                 // 1986
			return matchIndexes;                                                                                              // 1987
		}),                                                                                                                // 1988
                                                                                                                     // 1989
		"lt": createPositionalPseudo(function( matchIndexes, length, argument ) {                                          // 1990
			var i = argument < 0 ? argument + length : argument;                                                              // 1991
			for ( ; --i >= 0; ) {                                                                                             // 1992
				matchIndexes.push( i );                                                                                          // 1993
			}                                                                                                                 // 1994
			return matchIndexes;                                                                                              // 1995
		}),                                                                                                                // 1996
                                                                                                                     // 1997
		"gt": createPositionalPseudo(function( matchIndexes, length, argument ) {                                          // 1998
			var i = argument < 0 ? argument + length : argument;                                                              // 1999
			for ( ; ++i < length; ) {                                                                                         // 2000
				matchIndexes.push( i );                                                                                          // 2001
			}                                                                                                                 // 2002
			return matchIndexes;                                                                                              // 2003
		})                                                                                                                 // 2004
	}                                                                                                                   // 2005
};                                                                                                                   // 2006
                                                                                                                     // 2007
Expr.pseudos["nth"] = Expr.pseudos["eq"];                                                                            // 2008
                                                                                                                     // 2009
// Add button/input type pseudos                                                                                     // 2010
for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {                              // 2011
	Expr.pseudos[ i ] = createInputPseudo( i );                                                                         // 2012
}                                                                                                                    // 2013
for ( i in { submit: true, reset: true } ) {                                                                         // 2014
	Expr.pseudos[ i ] = createButtonPseudo( i );                                                                        // 2015
}                                                                                                                    // 2016
                                                                                                                     // 2017
// Easy API for creating new setFilters                                                                              // 2018
function setFilters() {}                                                                                             // 2019
setFilters.prototype = Expr.filters = Expr.pseudos;                                                                  // 2020
Expr.setFilters = new setFilters();                                                                                  // 2021
                                                                                                                     // 2022
function tokenize( selector, parseOnly ) {                                                                           // 2023
	var matched, match, tokens, type,                                                                                   // 2024
		soFar, groups, preFilters,                                                                                         // 2025
		cached = tokenCache[ selector + " " ];                                                                             // 2026
                                                                                                                     // 2027
	if ( cached ) {                                                                                                     // 2028
		return parseOnly ? 0 : cached.slice( 0 );                                                                          // 2029
	}                                                                                                                   // 2030
                                                                                                                     // 2031
	soFar = selector;                                                                                                   // 2032
	groups = [];                                                                                                        // 2033
	preFilters = Expr.preFilter;                                                                                        // 2034
                                                                                                                     // 2035
	while ( soFar ) {                                                                                                   // 2036
                                                                                                                     // 2037
		// Comma and first run                                                                                             // 2038
		if ( !matched || (match = rcomma.exec( soFar )) ) {                                                                // 2039
			if ( match ) {                                                                                                    // 2040
				// Don't consume trailing commas as valid                                                                        // 2041
				soFar = soFar.slice( match[0].length ) || soFar;                                                                 // 2042
			}                                                                                                                 // 2043
			groups.push( (tokens = []) );                                                                                     // 2044
		}                                                                                                                  // 2045
                                                                                                                     // 2046
		matched = false;                                                                                                   // 2047
                                                                                                                     // 2048
		// Combinators                                                                                                     // 2049
		if ( (match = rcombinators.exec( soFar )) ) {                                                                      // 2050
			matched = match.shift();                                                                                          // 2051
			tokens.push({                                                                                                     // 2052
				value: matched,                                                                                                  // 2053
				// Cast descendant combinators to space                                                                          // 2054
				type: match[0].replace( rtrim, " " )                                                                             // 2055
			});                                                                                                               // 2056
			soFar = soFar.slice( matched.length );                                                                            // 2057
		}                                                                                                                  // 2058
                                                                                                                     // 2059
		// Filters                                                                                                         // 2060
		for ( type in Expr.filter ) {                                                                                      // 2061
			if ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||                                         // 2062
				(match = preFilters[ type ]( match ))) ) {                                                                       // 2063
				matched = match.shift();                                                                                         // 2064
				tokens.push({                                                                                                    // 2065
					value: matched,                                                                                                 // 2066
					type: type,                                                                                                     // 2067
					matches: match                                                                                                  // 2068
				});                                                                                                              // 2069
				soFar = soFar.slice( matched.length );                                                                           // 2070
			}                                                                                                                 // 2071
		}                                                                                                                  // 2072
                                                                                                                     // 2073
		if ( !matched ) {                                                                                                  // 2074
			break;                                                                                                            // 2075
		}                                                                                                                  // 2076
	}                                                                                                                   // 2077
                                                                                                                     // 2078
	// Return the length of the invalid excess                                                                          // 2079
	// if we're just parsing                                                                                            // 2080
	// Otherwise, throw an error or return tokens                                                                       // 2081
	return parseOnly ?                                                                                                  // 2082
		soFar.length :                                                                                                     // 2083
		soFar ?                                                                                                            // 2084
			Sizzle.error( selector ) :                                                                                        // 2085
			// Cache the tokens                                                                                               // 2086
			tokenCache( selector, groups ).slice( 0 );                                                                        // 2087
}                                                                                                                    // 2088
                                                                                                                     // 2089
function toSelector( tokens ) {                                                                                      // 2090
	var i = 0,                                                                                                          // 2091
		len = tokens.length,                                                                                               // 2092
		selector = "";                                                                                                     // 2093
	for ( ; i < len; i++ ) {                                                                                            // 2094
		selector += tokens[i].value;                                                                                       // 2095
	}                                                                                                                   // 2096
	return selector;                                                                                                    // 2097
}                                                                                                                    // 2098
                                                                                                                     // 2099
function addCombinator( matcher, combinator, base ) {                                                                // 2100
	var dir = combinator.dir,                                                                                           // 2101
		checkNonElements = base && dir === "parentNode",                                                                   // 2102
		doneName = done++;                                                                                                 // 2103
                                                                                                                     // 2104
	return combinator.first ?                                                                                           // 2105
		// Check against closest ancestor/preceding element                                                                // 2106
		function( elem, context, xml ) {                                                                                   // 2107
			while ( (elem = elem[ dir ]) ) {                                                                                  // 2108
				if ( elem.nodeType === 1 || checkNonElements ) {                                                                 // 2109
					return matcher( elem, context, xml );                                                                           // 2110
				}                                                                                                                // 2111
			}                                                                                                                 // 2112
		} :                                                                                                                // 2113
                                                                                                                     // 2114
		// Check against all ancestor/preceding elements                                                                   // 2115
		function( elem, context, xml ) {                                                                                   // 2116
			var oldCache, outerCache,                                                                                         // 2117
				newCache = [ dirruns, doneName ];                                                                                // 2118
                                                                                                                     // 2119
			// We can't set arbitrary data on XML nodes, so they don't benefit from dir caching                               // 2120
			if ( xml ) {                                                                                                      // 2121
				while ( (elem = elem[ dir ]) ) {                                                                                 // 2122
					if ( elem.nodeType === 1 || checkNonElements ) {                                                                // 2123
						if ( matcher( elem, context, xml ) ) {                                                                         // 2124
							return true;                                                                                                  // 2125
						}                                                                                                              // 2126
					}                                                                                                               // 2127
				}                                                                                                                // 2128
			} else {                                                                                                          // 2129
				while ( (elem = elem[ dir ]) ) {                                                                                 // 2130
					if ( elem.nodeType === 1 || checkNonElements ) {                                                                // 2131
						outerCache = elem[ expando ] || (elem[ expando ] = {});                                                        // 2132
						if ( (oldCache = outerCache[ dir ]) &&                                                                         // 2133
							oldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {                                                   // 2134
                                                                                                                     // 2135
							// Assign to newCache so results back-propagate to previous elements                                          // 2136
							return (newCache[ 2 ] = oldCache[ 2 ]);                                                                       // 2137
						} else {                                                                                                       // 2138
							// Reuse newcache so results back-propagate to previous elements                                              // 2139
							outerCache[ dir ] = newCache;                                                                                 // 2140
                                                                                                                     // 2141
							// A match means we're done; a fail means we have to keep checking                                            // 2142
							if ( (newCache[ 2 ] = matcher( elem, context, xml )) ) {                                                      // 2143
								return true;                                                                                                 // 2144
							}                                                                                                             // 2145
						}                                                                                                              // 2146
					}                                                                                                               // 2147
				}                                                                                                                // 2148
			}                                                                                                                 // 2149
		};                                                                                                                 // 2150
}                                                                                                                    // 2151
                                                                                                                     // 2152
function elementMatcher( matchers ) {                                                                                // 2153
	return matchers.length > 1 ?                                                                                        // 2154
		function( elem, context, xml ) {                                                                                   // 2155
			var i = matchers.length;                                                                                          // 2156
			while ( i-- ) {                                                                                                   // 2157
				if ( !matchers[i]( elem, context, xml ) ) {                                                                      // 2158
					return false;                                                                                                   // 2159
				}                                                                                                                // 2160
			}                                                                                                                 // 2161
			return true;                                                                                                      // 2162
		} :                                                                                                                // 2163
		matchers[0];                                                                                                       // 2164
}                                                                                                                    // 2165
                                                                                                                     // 2166
function condense( unmatched, map, filter, context, xml ) {                                                          // 2167
	var elem,                                                                                                           // 2168
		newUnmatched = [],                                                                                                 // 2169
		i = 0,                                                                                                             // 2170
		len = unmatched.length,                                                                                            // 2171
		mapped = map != null;                                                                                              // 2172
                                                                                                                     // 2173
	for ( ; i < len; i++ ) {                                                                                            // 2174
		if ( (elem = unmatched[i]) ) {                                                                                     // 2175
			if ( !filter || filter( elem, context, xml ) ) {                                                                  // 2176
				newUnmatched.push( elem );                                                                                       // 2177
				if ( mapped ) {                                                                                                  // 2178
					map.push( i );                                                                                                  // 2179
				}                                                                                                                // 2180
			}                                                                                                                 // 2181
		}                                                                                                                  // 2182
	}                                                                                                                   // 2183
                                                                                                                     // 2184
	return newUnmatched;                                                                                                // 2185
}                                                                                                                    // 2186
                                                                                                                     // 2187
function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {                          // 2188
	if ( postFilter && !postFilter[ expando ] ) {                                                                       // 2189
		postFilter = setMatcher( postFilter );                                                                             // 2190
	}                                                                                                                   // 2191
	if ( postFinder && !postFinder[ expando ] ) {                                                                       // 2192
		postFinder = setMatcher( postFinder, postSelector );                                                               // 2193
	}                                                                                                                   // 2194
	return markFunction(function( seed, results, context, xml ) {                                                       // 2195
		var temp, i, elem,                                                                                                 // 2196
			preMap = [],                                                                                                      // 2197
			postMap = [],                                                                                                     // 2198
			preexisting = results.length,                                                                                     // 2199
                                                                                                                     // 2200
			// Get initial elements from seed or context                                                                      // 2201
			elems = seed || multipleContexts( selector || "*", context.nodeType ? [ context ] : context, [] ),                // 2202
                                                                                                                     // 2203
			// Prefilter to get matcher input, preserving a map for seed-results synchronization                              // 2204
			matcherIn = preFilter && ( seed || !selector ) ?                                                                  // 2205
				condense( elems, preMap, preFilter, context, xml ) :                                                             // 2206
				elems,                                                                                                           // 2207
                                                                                                                     // 2208
			matcherOut = matcher ?                                                                                            // 2209
				// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,                     // 2210
				postFinder || ( seed ? preFilter : preexisting || postFilter ) ?                                                 // 2211
                                                                                                                     // 2212
					// ...intermediate processing is necessary                                                                      // 2213
					[] :                                                                                                            // 2214
                                                                                                                     // 2215
					// ...otherwise use results directly                                                                            // 2216
					results :                                                                                                       // 2217
				matcherIn;                                                                                                       // 2218
                                                                                                                     // 2219
		// Find primary matches                                                                                            // 2220
		if ( matcher ) {                                                                                                   // 2221
			matcher( matcherIn, matcherOut, context, xml );                                                                   // 2222
		}                                                                                                                  // 2223
                                                                                                                     // 2224
		// Apply postFilter                                                                                                // 2225
		if ( postFilter ) {                                                                                                // 2226
			temp = condense( matcherOut, postMap );                                                                           // 2227
			postFilter( temp, [], context, xml );                                                                             // 2228
                                                                                                                     // 2229
			// Un-match failing elements by moving them back to matcherIn                                                     // 2230
			i = temp.length;                                                                                                  // 2231
			while ( i-- ) {                                                                                                   // 2232
				if ( (elem = temp[i]) ) {                                                                                        // 2233
					matcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);                                                   // 2234
				}                                                                                                                // 2235
			}                                                                                                                 // 2236
		}                                                                                                                  // 2237
                                                                                                                     // 2238
		if ( seed ) {                                                                                                      // 2239
			if ( postFinder || preFilter ) {                                                                                  // 2240
				if ( postFinder ) {                                                                                              // 2241
					// Get the final matcherOut by condensing this intermediate into postFinder contexts                            // 2242
					temp = [];                                                                                                      // 2243
					i = matcherOut.length;                                                                                          // 2244
					while ( i-- ) {                                                                                                 // 2245
						if ( (elem = matcherOut[i]) ) {                                                                                // 2246
							// Restore matcherIn since elem is not yet a final match                                                      // 2247
							temp.push( (matcherIn[i] = elem) );                                                                           // 2248
						}                                                                                                              // 2249
					}                                                                                                               // 2250
					postFinder( null, (matcherOut = []), temp, xml );                                                               // 2251
				}                                                                                                                // 2252
                                                                                                                     // 2253
				// Move matched elements from seed to results to keep them synchronized                                          // 2254
				i = matcherOut.length;                                                                                           // 2255
				while ( i-- ) {                                                                                                  // 2256
					if ( (elem = matcherOut[i]) &&                                                                                  // 2257
						(temp = postFinder ? indexOf.call( seed, elem ) : preMap[i]) > -1 ) {                                          // 2258
                                                                                                                     // 2259
						seed[temp] = !(results[temp] = elem);                                                                          // 2260
					}                                                                                                               // 2261
				}                                                                                                                // 2262
			}                                                                                                                 // 2263
                                                                                                                     // 2264
		// Add elements to results, through postFinder if defined                                                          // 2265
		} else {                                                                                                           // 2266
			matcherOut = condense(                                                                                            // 2267
				matcherOut === results ?                                                                                         // 2268
					matcherOut.splice( preexisting, matcherOut.length ) :                                                           // 2269
					matcherOut                                                                                                      // 2270
			);                                                                                                                // 2271
			if ( postFinder ) {                                                                                               // 2272
				postFinder( null, results, matcherOut, xml );                                                                    // 2273
			} else {                                                                                                          // 2274
				push.apply( results, matcherOut );                                                                               // 2275
			}                                                                                                                 // 2276
		}                                                                                                                  // 2277
	});                                                                                                                 // 2278
}                                                                                                                    // 2279
                                                                                                                     // 2280
function matcherFromTokens( tokens ) {                                                                               // 2281
	var checkContext, matcher, j,                                                                                       // 2282
		len = tokens.length,                                                                                               // 2283
		leadingRelative = Expr.relative[ tokens[0].type ],                                                                 // 2284
		implicitRelative = leadingRelative || Expr.relative[" "],                                                          // 2285
		i = leadingRelative ? 1 : 0,                                                                                       // 2286
                                                                                                                     // 2287
		// The foundational matcher ensures that elements are reachable from top-level context(s)                          // 2288
		matchContext = addCombinator( function( elem ) {                                                                   // 2289
			return elem === checkContext;                                                                                     // 2290
		}, implicitRelative, true ),                                                                                       // 2291
		matchAnyContext = addCombinator( function( elem ) {                                                                // 2292
			return indexOf.call( checkContext, elem ) > -1;                                                                   // 2293
		}, implicitRelative, true ),                                                                                       // 2294
		matchers = [ function( elem, context, xml ) {                                                                      // 2295
			return ( !leadingRelative && ( xml || context !== outermostContext ) ) || (                                       // 2296
				(checkContext = context).nodeType ?                                                                              // 2297
					matchContext( elem, context, xml ) :                                                                            // 2298
					matchAnyContext( elem, context, xml ) );                                                                        // 2299
		} ];                                                                                                               // 2300
                                                                                                                     // 2301
	for ( ; i < len; i++ ) {                                                                                            // 2302
		if ( (matcher = Expr.relative[ tokens[i].type ]) ) {                                                               // 2303
			matchers = [ addCombinator(elementMatcher( matchers ), matcher) ];                                                // 2304
		} else {                                                                                                           // 2305
			matcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );                                         // 2306
                                                                                                                     // 2307
			// Return special upon seeing a positional matcher                                                                // 2308
			if ( matcher[ expando ] ) {                                                                                       // 2309
				// Find the next relative operator (if any) for proper handling                                                  // 2310
				j = ++i;                                                                                                         // 2311
				for ( ; j < len; j++ ) {                                                                                         // 2312
					if ( Expr.relative[ tokens[j].type ] ) {                                                                        // 2313
						break;                                                                                                         // 2314
					}                                                                                                               // 2315
				}                                                                                                                // 2316
				return setMatcher(                                                                                               // 2317
					i > 1 && elementMatcher( matchers ),                                                                            // 2318
					i > 1 && toSelector(                                                                                            // 2319
						// If the preceding token was a descendant combinator, insert an implicit any-element `*`                      // 2320
						tokens.slice( 0, i - 1 ).concat({ value: tokens[ i - 2 ].type === " " ? "*" : "" })                            // 2321
					).replace( rtrim, "$1" ),                                                                                       // 2322
					matcher,                                                                                                        // 2323
					i < j && matcherFromTokens( tokens.slice( i, j ) ),                                                             // 2324
					j < len && matcherFromTokens( (tokens = tokens.slice( j )) ),                                                   // 2325
					j < len && toSelector( tokens )                                                                                 // 2326
				);                                                                                                               // 2327
			}                                                                                                                 // 2328
			matchers.push( matcher );                                                                                         // 2329
		}                                                                                                                  // 2330
	}                                                                                                                   // 2331
                                                                                                                     // 2332
	return elementMatcher( matchers );                                                                                  // 2333
}                                                                                                                    // 2334
                                                                                                                     // 2335
function matcherFromGroupMatchers( elementMatchers, setMatchers ) {                                                  // 2336
	var bySet = setMatchers.length > 0,                                                                                 // 2337
		byElement = elementMatchers.length > 0,                                                                            // 2338
		superMatcher = function( seed, context, xml, results, outermost ) {                                                // 2339
			var elem, j, matcher,                                                                                             // 2340
				matchedCount = 0,                                                                                                // 2341
				i = "0",                                                                                                         // 2342
				unmatched = seed && [],                                                                                          // 2343
				setMatched = [],                                                                                                 // 2344
				contextBackup = outermostContext,                                                                                // 2345
				// We must always have either seed elements or outermost context                                                 // 2346
				elems = seed || byElement && Expr.find["TAG"]( "*", outermost ),                                                 // 2347
				// Use integer dirruns iff this is the outermost matcher                                                         // 2348
				dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1),                                   // 2349
				len = elems.length;                                                                                              // 2350
                                                                                                                     // 2351
			if ( outermost ) {                                                                                                // 2352
				outermostContext = context !== document && context;                                                              // 2353
			}                                                                                                                 // 2354
                                                                                                                     // 2355
			// Add elements passing elementMatchers directly to results                                                       // 2356
			// Keep `i` a string if there are no elements so `matchedCount` will be "00" below                                // 2357
			// Support: IE<9, Safari                                                                                          // 2358
			// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id                          // 2359
			for ( ; i !== len && (elem = elems[i]) != null; i++ ) {                                                           // 2360
				if ( byElement && elem ) {                                                                                       // 2361
					j = 0;                                                                                                          // 2362
					while ( (matcher = elementMatchers[j++]) ) {                                                                    // 2363
						if ( matcher( elem, context, xml ) ) {                                                                         // 2364
							results.push( elem );                                                                                         // 2365
							break;                                                                                                        // 2366
						}                                                                                                              // 2367
					}                                                                                                               // 2368
					if ( outermost ) {                                                                                              // 2369
						dirruns = dirrunsUnique;                                                                                       // 2370
					}                                                                                                               // 2371
				}                                                                                                                // 2372
                                                                                                                     // 2373
				// Track unmatched elements for set filters                                                                      // 2374
				if ( bySet ) {                                                                                                   // 2375
					// They will have gone through all possible matchers                                                            // 2376
					if ( (elem = !matcher && elem) ) {                                                                              // 2377
						matchedCount--;                                                                                                // 2378
					}                                                                                                               // 2379
                                                                                                                     // 2380
					// Lengthen the array for every element, matched or not                                                         // 2381
					if ( seed ) {                                                                                                   // 2382
						unmatched.push( elem );                                                                                        // 2383
					}                                                                                                               // 2384
				}                                                                                                                // 2385
			}                                                                                                                 // 2386
                                                                                                                     // 2387
			// Apply set filters to unmatched elements                                                                        // 2388
			matchedCount += i;                                                                                                // 2389
			if ( bySet && i !== matchedCount ) {                                                                              // 2390
				j = 0;                                                                                                           // 2391
				while ( (matcher = setMatchers[j++]) ) {                                                                         // 2392
					matcher( unmatched, setMatched, context, xml );                                                                 // 2393
				}                                                                                                                // 2394
                                                                                                                     // 2395
				if ( seed ) {                                                                                                    // 2396
					// Reintegrate element matches to eliminate the need for sorting                                                // 2397
					if ( matchedCount > 0 ) {                                                                                       // 2398
						while ( i-- ) {                                                                                                // 2399
							if ( !(unmatched[i] || setMatched[i]) ) {                                                                     // 2400
								setMatched[i] = pop.call( results );                                                                         // 2401
							}                                                                                                             // 2402
						}                                                                                                              // 2403
					}                                                                                                               // 2404
                                                                                                                     // 2405
					// Discard index placeholder values to get only actual matches                                                  // 2406
					setMatched = condense( setMatched );                                                                            // 2407
				}                                                                                                                // 2408
                                                                                                                     // 2409
				// Add matches to results                                                                                        // 2410
				push.apply( results, setMatched );                                                                               // 2411
                                                                                                                     // 2412
				// Seedless set matches succeeding multiple successful matchers stipulate sorting                                // 2413
				if ( outermost && !seed && setMatched.length > 0 &&                                                              // 2414
					( matchedCount + setMatchers.length ) > 1 ) {                                                                   // 2415
                                                                                                                     // 2416
					Sizzle.uniqueSort( results );                                                                                   // 2417
				}                                                                                                                // 2418
			}                                                                                                                 // 2419
                                                                                                                     // 2420
			// Override manipulation of globals by nested matchers                                                            // 2421
			if ( outermost ) {                                                                                                // 2422
				dirruns = dirrunsUnique;                                                                                         // 2423
				outermostContext = contextBackup;                                                                                // 2424
			}                                                                                                                 // 2425
                                                                                                                     // 2426
			return unmatched;                                                                                                 // 2427
		};                                                                                                                 // 2428
                                                                                                                     // 2429
	return bySet ?                                                                                                      // 2430
		markFunction( superMatcher ) :                                                                                     // 2431
		superMatcher;                                                                                                      // 2432
}                                                                                                                    // 2433
                                                                                                                     // 2434
compile = Sizzle.compile = function( selector, group /* Internal Use Only */ ) {                                     // 2435
	var i,                                                                                                              // 2436
		setMatchers = [],                                                                                                  // 2437
		elementMatchers = [],                                                                                              // 2438
		cached = compilerCache[ selector + " " ];                                                                          // 2439
                                                                                                                     // 2440
	if ( !cached ) {                                                                                                    // 2441
		// Generate a function of recursive functions that can be used to check each element                               // 2442
		if ( !group ) {                                                                                                    // 2443
			group = tokenize( selector );                                                                                     // 2444
		}                                                                                                                  // 2445
		i = group.length;                                                                                                  // 2446
		while ( i-- ) {                                                                                                    // 2447
			cached = matcherFromTokens( group[i] );                                                                           // 2448
			if ( cached[ expando ] ) {                                                                                        // 2449
				setMatchers.push( cached );                                                                                      // 2450
			} else {                                                                                                          // 2451
				elementMatchers.push( cached );                                                                                  // 2452
			}                                                                                                                 // 2453
		}                                                                                                                  // 2454
                                                                                                                     // 2455
		// Cache the compiled function                                                                                     // 2456
		cached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );                      // 2457
	}                                                                                                                   // 2458
	return cached;                                                                                                      // 2459
};                                                                                                                   // 2460
                                                                                                                     // 2461
function multipleContexts( selector, contexts, results ) {                                                           // 2462
	var i = 0,                                                                                                          // 2463
		len = contexts.length;                                                                                             // 2464
	for ( ; i < len; i++ ) {                                                                                            // 2465
		Sizzle( selector, contexts[i], results );                                                                          // 2466
	}                                                                                                                   // 2467
	return results;                                                                                                     // 2468
}                                                                                                                    // 2469
                                                                                                                     // 2470
function select( selector, context, results, seed ) {                                                                // 2471
	var i, tokens, token, type, find,                                                                                   // 2472
		match = tokenize( selector );                                                                                      // 2473
                                                                                                                     // 2474
	if ( !seed ) {                                                                                                      // 2475
		// Try to minimize operations if there is only one group                                                           // 2476
		if ( match.length === 1 ) {                                                                                        // 2477
                                                                                                                     // 2478
			// Take a shortcut and set the context if the root selector is an ID                                              // 2479
			tokens = match[0] = match[0].slice( 0 );                                                                          // 2480
			if ( tokens.length > 2 && (token = tokens[0]).type === "ID" &&                                                    // 2481
					support.getById && context.nodeType === 9 && documentIsHTML &&                                                  // 2482
					Expr.relative[ tokens[1].type ] ) {                                                                             // 2483
                                                                                                                     // 2484
				context = ( Expr.find["ID"]( token.matches[0].replace(runescape, funescape), context ) || [] )[0];               // 2485
				if ( !context ) {                                                                                                // 2486
					return results;                                                                                                 // 2487
				}                                                                                                                // 2488
				selector = selector.slice( tokens.shift().value.length );                                                        // 2489
			}                                                                                                                 // 2490
                                                                                                                     // 2491
			// Fetch a seed set for right-to-left matching                                                                    // 2492
			i = matchExpr["needsContext"].test( selector ) ? 0 : tokens.length;                                               // 2493
			while ( i-- ) {                                                                                                   // 2494
				token = tokens[i];                                                                                               // 2495
                                                                                                                     // 2496
				// Abort if we hit a combinator                                                                                  // 2497
				if ( Expr.relative[ (type = token.type) ] ) {                                                                    // 2498
					break;                                                                                                          // 2499
				}                                                                                                                // 2500
				if ( (find = Expr.find[ type ]) ) {                                                                              // 2501
					// Search, expanding context for leading sibling combinators                                                    // 2502
					if ( (seed = find(                                                                                              // 2503
						token.matches[0].replace( runescape, funescape ),                                                              // 2504
						rsibling.test( tokens[0].type ) && testContext( context.parentNode ) || context                                // 2505
					)) ) {                                                                                                          // 2506
                                                                                                                     // 2507
						// If seed is empty or no tokens remain, we can return early                                                   // 2508
						tokens.splice( i, 1 );                                                                                         // 2509
						selector = seed.length && toSelector( tokens );                                                                // 2510
						if ( !selector ) {                                                                                             // 2511
							push.apply( results, seed );                                                                                  // 2512
							return results;                                                                                               // 2513
						}                                                                                                              // 2514
                                                                                                                     // 2515
						break;                                                                                                         // 2516
					}                                                                                                               // 2517
				}                                                                                                                // 2518
			}                                                                                                                 // 2519
		}                                                                                                                  // 2520
	}                                                                                                                   // 2521
                                                                                                                     // 2522
	// Compile and execute a filtering function                                                                         // 2523
	// Provide `match` to avoid retokenization if we modified the selector above                                        // 2524
	compile( selector, match )(                                                                                         // 2525
		seed,                                                                                                              // 2526
		context,                                                                                                           // 2527
		!documentIsHTML,                                                                                                   // 2528
		results,                                                                                                           // 2529
		rsibling.test( selector ) && testContext( context.parentNode ) || context                                          // 2530
	);                                                                                                                  // 2531
	return results;                                                                                                     // 2532
}                                                                                                                    // 2533
                                                                                                                     // 2534
// One-time assignments                                                                                              // 2535
                                                                                                                     // 2536
// Sort stability                                                                                                    // 2537
support.sortStable = expando.split("").sort( sortOrder ).join("") === expando;                                       // 2538
                                                                                                                     // 2539
// Support: Chrome<14                                                                                                // 2540
// Always assume duplicates if they aren't passed to the comparison function                                         // 2541
support.detectDuplicates = !!hasDuplicate;                                                                           // 2542
                                                                                                                     // 2543
// Initialize against the default document                                                                           // 2544
setDocument();                                                                                                       // 2545
                                                                                                                     // 2546
// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)                                              // 2547
// Detached nodes confoundingly follow *each other*                                                                  // 2548
support.sortDetached = assert(function( div1 ) {                                                                     // 2549
	// Should return 1, but returns 4 (following)                                                                       // 2550
	return div1.compareDocumentPosition( document.createElement("div") ) & 1;                                           // 2551
});                                                                                                                  // 2552
                                                                                                                     // 2553
// Support: IE<8                                                                                                     // 2554
// Prevent attribute/property "interpolation"                                                                        // 2555
// http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx                                                  // 2556
if ( !assert(function( div ) {                                                                                       // 2557
	div.innerHTML = "<a href='#'></a>";                                                                                 // 2558
	return div.firstChild.getAttribute("href") === "#" ;                                                                // 2559
}) ) {                                                                                                               // 2560
	addHandle( "type|href|height|width", function( elem, name, isXML ) {                                                // 2561
		if ( !isXML ) {                                                                                                    // 2562
			return elem.getAttribute( name, name.toLowerCase() === "type" ? 1 : 2 );                                          // 2563
		}                                                                                                                  // 2564
	});                                                                                                                 // 2565
}                                                                                                                    // 2566
                                                                                                                     // 2567
// Support: IE<9                                                                                                     // 2568
// Use defaultValue in place of getAttribute("value")                                                                // 2569
if ( !support.attributes || !assert(function( div ) {                                                                // 2570
	div.innerHTML = "<input/>";                                                                                         // 2571
	div.firstChild.setAttribute( "value", "" );                                                                         // 2572
	return div.firstChild.getAttribute( "value" ) === "";                                                               // 2573
}) ) {                                                                                                               // 2574
	addHandle( "value", function( elem, name, isXML ) {                                                                 // 2575
		if ( !isXML && elem.nodeName.toLowerCase() === "input" ) {                                                         // 2576
			return elem.defaultValue;                                                                                         // 2577
		}                                                                                                                  // 2578
	});                                                                                                                 // 2579
}                                                                                                                    // 2580
                                                                                                                     // 2581
// Support: IE<9                                                                                                     // 2582
// Use getAttributeNode to fetch booleans when getAttribute lies                                                     // 2583
if ( !assert(function( div ) {                                                                                       // 2584
	return div.getAttribute("disabled") == null;                                                                        // 2585
}) ) {                                                                                                               // 2586
	addHandle( booleans, function( elem, name, isXML ) {                                                                // 2587
		var val;                                                                                                           // 2588
		if ( !isXML ) {                                                                                                    // 2589
			return elem[ name ] === true ? name.toLowerCase() :                                                               // 2590
					(val = elem.getAttributeNode( name )) && val.specified ?                                                        // 2591
					val.value :                                                                                                     // 2592
				null;                                                                                                            // 2593
		}                                                                                                                  // 2594
	});                                                                                                                 // 2595
}                                                                                                                    // 2596
                                                                                                                     // 2597
return Sizzle;                                                                                                       // 2598
                                                                                                                     // 2599
})( window );                                                                                                        // 2600
                                                                                                                     // 2601
                                                                                                                     // 2602
                                                                                                                     // 2603
jQuery.find = Sizzle;                                                                                                // 2604
jQuery.expr = Sizzle.selectors;                                                                                      // 2605
jQuery.expr[":"] = jQuery.expr.pseudos;                                                                              // 2606
jQuery.unique = Sizzle.uniqueSort;                                                                                   // 2607
jQuery.text = Sizzle.getText;                                                                                        // 2608
jQuery.isXMLDoc = Sizzle.isXML;                                                                                      // 2609
jQuery.contains = Sizzle.contains;                                                                                   // 2610
                                                                                                                     // 2611
                                                                                                                     // 2612
                                                                                                                     // 2613
var rneedsContext = jQuery.expr.match.needsContext;                                                                  // 2614
                                                                                                                     // 2615
var rsingleTag = (/^<(\w+)\s*\/?>(?:<\/\1>|)$/);                                                                     // 2616
                                                                                                                     // 2617
                                                                                                                     // 2618
                                                                                                                     // 2619
var risSimple = /^.[^:#\[\.,]*$/;                                                                                    // 2620
                                                                                                                     // 2621
// Implement the identical functionality for filter and not                                                          // 2622
function winnow( elements, qualifier, not ) {                                                                        // 2623
	if ( jQuery.isFunction( qualifier ) ) {                                                                             // 2624
		return jQuery.grep( elements, function( elem, i ) {                                                                // 2625
			/* jshint -W018 */                                                                                                // 2626
			return !!qualifier.call( elem, i, elem ) !== not;                                                                 // 2627
		});                                                                                                                // 2628
                                                                                                                     // 2629
	}                                                                                                                   // 2630
                                                                                                                     // 2631
	if ( qualifier.nodeType ) {                                                                                         // 2632
		return jQuery.grep( elements, function( elem ) {                                                                   // 2633
			return ( elem === qualifier ) !== not;                                                                            // 2634
		});                                                                                                                // 2635
                                                                                                                     // 2636
	}                                                                                                                   // 2637
                                                                                                                     // 2638
	if ( typeof qualifier === "string" ) {                                                                              // 2639
		if ( risSimple.test( qualifier ) ) {                                                                               // 2640
			return jQuery.filter( qualifier, elements, not );                                                                 // 2641
		}                                                                                                                  // 2642
                                                                                                                     // 2643
		qualifier = jQuery.filter( qualifier, elements );                                                                  // 2644
	}                                                                                                                   // 2645
                                                                                                                     // 2646
	return jQuery.grep( elements, function( elem ) {                                                                    // 2647
		return ( jQuery.inArray( elem, qualifier ) >= 0 ) !== not;                                                         // 2648
	});                                                                                                                 // 2649
}                                                                                                                    // 2650
                                                                                                                     // 2651
jQuery.filter = function( expr, elems, not ) {                                                                       // 2652
	var elem = elems[ 0 ];                                                                                              // 2653
                                                                                                                     // 2654
	if ( not ) {                                                                                                        // 2655
		expr = ":not(" + expr + ")";                                                                                       // 2656
	}                                                                                                                   // 2657
                                                                                                                     // 2658
	return elems.length === 1 && elem.nodeType === 1 ?                                                                  // 2659
		jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [] :                                                        // 2660
		jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {                                                  // 2661
			return elem.nodeType === 1;                                                                                       // 2662
		}));                                                                                                               // 2663
};                                                                                                                   // 2664
                                                                                                                     // 2665
jQuery.fn.extend({                                                                                                   // 2666
	find: function( selector ) {                                                                                        // 2667
		var i,                                                                                                             // 2668
			ret = [],                                                                                                         // 2669
			self = this,                                                                                                      // 2670
			len = self.length;                                                                                                // 2671
                                                                                                                     // 2672
		if ( typeof selector !== "string" ) {                                                                              // 2673
			return this.pushStack( jQuery( selector ).filter(function() {                                                     // 2674
				for ( i = 0; i < len; i++ ) {                                                                                    // 2675
					if ( jQuery.contains( self[ i ], this ) ) {                                                                     // 2676
						return true;                                                                                                   // 2677
					}                                                                                                               // 2678
				}                                                                                                                // 2679
			}) );                                                                                                             // 2680
		}                                                                                                                  // 2681
                                                                                                                     // 2682
		for ( i = 0; i < len; i++ ) {                                                                                      // 2683
			jQuery.find( selector, self[ i ], ret );                                                                          // 2684
		}                                                                                                                  // 2685
                                                                                                                     // 2686
		// Needed because $( selector, context ) becomes $( context ).find( selector )                                     // 2687
		ret = this.pushStack( len > 1 ? jQuery.unique( ret ) : ret );                                                      // 2688
		ret.selector = this.selector ? this.selector + " " + selector : selector;                                          // 2689
		return ret;                                                                                                        // 2690
	},                                                                                                                  // 2691
	filter: function( selector ) {                                                                                      // 2692
		return this.pushStack( winnow(this, selector || [], false) );                                                      // 2693
	},                                                                                                                  // 2694
	not: function( selector ) {                                                                                         // 2695
		return this.pushStack( winnow(this, selector || [], true) );                                                       // 2696
	},                                                                                                                  // 2697
	is: function( selector ) {                                                                                          // 2698
		return !!winnow(                                                                                                   // 2699
			this,                                                                                                             // 2700
                                                                                                                     // 2701
			// If this is a positional/relative selector, check membership in the returned set                                // 2702
			// so $("p:first").is("p:last") won't return true for a doc with two "p".                                         // 2703
			typeof selector === "string" && rneedsContext.test( selector ) ?                                                  // 2704
				jQuery( selector ) :                                                                                             // 2705
				selector || [],                                                                                                  // 2706
			false                                                                                                             // 2707
		).length;                                                                                                          // 2708
	}                                                                                                                   // 2709
});                                                                                                                  // 2710
                                                                                                                     // 2711
                                                                                                                     // 2712
// Initialize a jQuery object                                                                                        // 2713
                                                                                                                     // 2714
                                                                                                                     // 2715
// A central reference to the root jQuery(document)                                                                  // 2716
var rootjQuery,                                                                                                      // 2717
                                                                                                                     // 2718
	// Use the correct document accordingly with window argument (sandbox)                                              // 2719
	document = window.document,                                                                                         // 2720
                                                                                                                     // 2721
	// A simple way to check for HTML strings                                                                           // 2722
	// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)                                                 // 2723
	// Strict HTML recognition (#11290: must start with <)                                                              // 2724
	rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,                                                                 // 2725
                                                                                                                     // 2726
	init = jQuery.fn.init = function( selector, context ) {                                                             // 2727
		var match, elem;                                                                                                   // 2728
                                                                                                                     // 2729
		// HANDLE: $(""), $(null), $(undefined), $(false)                                                                  // 2730
		if ( !selector ) {                                                                                                 // 2731
			return this;                                                                                                      // 2732
		}                                                                                                                  // 2733
                                                                                                                     // 2734
		// Handle HTML strings                                                                                             // 2735
		if ( typeof selector === "string" ) {                                                                              // 2736
			if ( selector.charAt(0) === "<" && selector.charAt( selector.length - 1 ) === ">" && selector.length >= 3 ) {     // 2737
				// Assume that strings that start and end with <> are HTML and skip the regex check                              // 2738
				match = [ null, selector, null ];                                                                                // 2739
                                                                                                                     // 2740
			} else {                                                                                                          // 2741
				match = rquickExpr.exec( selector );                                                                             // 2742
			}                                                                                                                 // 2743
                                                                                                                     // 2744
			// Match html or make sure no context is specified for #id                                                        // 2745
			if ( match && (match[1] || !context) ) {                                                                          // 2746
                                                                                                                     // 2747
				// HANDLE: $(html) -> $(array)                                                                                   // 2748
				if ( match[1] ) {                                                                                                // 2749
					context = context instanceof jQuery ? context[0] : context;                                                     // 2750
                                                                                                                     // 2751
					// scripts is true for back-compat                                                                              // 2752
					// Intentionally let the error be thrown if parseHTML is not present                                            // 2753
					jQuery.merge( this, jQuery.parseHTML(                                                                           // 2754
						match[1],                                                                                                      // 2755
						context && context.nodeType ? context.ownerDocument || context : document,                                     // 2756
						true                                                                                                           // 2757
					) );                                                                                                            // 2758
                                                                                                                     // 2759
					// HANDLE: $(html, props)                                                                                       // 2760
					if ( rsingleTag.test( match[1] ) && jQuery.isPlainObject( context ) ) {                                         // 2761
						for ( match in context ) {                                                                                     // 2762
							// Properties of context are called as methods if possible                                                    // 2763
							if ( jQuery.isFunction( this[ match ] ) ) {                                                                   // 2764
								this[ match ]( context[ match ] );                                                                           // 2765
                                                                                                                     // 2766
							// ...and otherwise set as attributes                                                                         // 2767
							} else {                                                                                                      // 2768
								this.attr( match, context[ match ] );                                                                        // 2769
							}                                                                                                             // 2770
						}                                                                                                              // 2771
					}                                                                                                               // 2772
                                                                                                                     // 2773
					return this;                                                                                                    // 2774
                                                                                                                     // 2775
				// HANDLE: $(#id)                                                                                                // 2776
				} else {                                                                                                         // 2777
					elem = document.getElementById( match[2] );                                                                     // 2778
                                                                                                                     // 2779
					// Check parentNode to catch when Blackberry 4.6 returns                                                        // 2780
					// nodes that are no longer in the document #6963                                                               // 2781
					if ( elem && elem.parentNode ) {                                                                                // 2782
						// Handle the case where IE and Opera return items                                                             // 2783
						// by name instead of ID                                                                                       // 2784
						if ( elem.id !== match[2] ) {                                                                                  // 2785
							return rootjQuery.find( selector );                                                                           // 2786
						}                                                                                                              // 2787
                                                                                                                     // 2788
						// Otherwise, we inject the element directly into the jQuery object                                            // 2789
						this.length = 1;                                                                                               // 2790
						this[0] = elem;                                                                                                // 2791
					}                                                                                                               // 2792
                                                                                                                     // 2793
					this.context = document;                                                                                        // 2794
					this.selector = selector;                                                                                       // 2795
					return this;                                                                                                    // 2796
				}                                                                                                                // 2797
                                                                                                                     // 2798
			// HANDLE: $(expr, $(...))                                                                                        // 2799
			} else if ( !context || context.jquery ) {                                                                        // 2800
				return ( context || rootjQuery ).find( selector );                                                               // 2801
                                                                                                                     // 2802
			// HANDLE: $(expr, context)                                                                                       // 2803
			// (which is just equivalent to: $(context).find(expr)                                                            // 2804
			} else {                                                                                                          // 2805
				return this.constructor( context ).find( selector );                                                             // 2806
			}                                                                                                                 // 2807
                                                                                                                     // 2808
		// HANDLE: $(DOMElement)                                                                                           // 2809
		} else if ( selector.nodeType ) {                                                                                  // 2810
			this.context = this[0] = selector;                                                                                // 2811
			this.length = 1;                                                                                                  // 2812
			return this;                                                                                                      // 2813
                                                                                                                     // 2814
		// HANDLE: $(function)                                                                                             // 2815
		// Shortcut for document ready                                                                                     // 2816
		} else if ( jQuery.isFunction( selector ) ) {                                                                      // 2817
			return typeof rootjQuery.ready !== "undefined" ?                                                                  // 2818
				rootjQuery.ready( selector ) :                                                                                   // 2819
				// Execute immediately if ready is not present                                                                   // 2820
				selector( jQuery );                                                                                              // 2821
		}                                                                                                                  // 2822
                                                                                                                     // 2823
		if ( selector.selector !== undefined ) {                                                                           // 2824
			this.selector = selector.selector;                                                                                // 2825
			this.context = selector.context;                                                                                  // 2826
		}                                                                                                                  // 2827
                                                                                                                     // 2828
		return jQuery.makeArray( selector, this );                                                                         // 2829
	};                                                                                                                  // 2830
                                                                                                                     // 2831
// Give the init function the jQuery prototype for later instantiation                                               // 2832
init.prototype = jQuery.fn;                                                                                          // 2833
                                                                                                                     // 2834
// Initialize central reference                                                                                      // 2835
rootjQuery = jQuery( document );                                                                                     // 2836
                                                                                                                     // 2837
                                                                                                                     // 2838
var rparentsprev = /^(?:parents|prev(?:Until|All))/,                                                                 // 2839
	// methods guaranteed to produce a unique set when starting from a unique set                                       // 2840
	guaranteedUnique = {                                                                                                // 2841
		children: true,                                                                                                    // 2842
		contents: true,                                                                                                    // 2843
		next: true,                                                                                                        // 2844
		prev: true                                                                                                         // 2845
	};                                                                                                                  // 2846
                                                                                                                     // 2847
jQuery.extend({                                                                                                      // 2848
	dir: function( elem, dir, until ) {                                                                                 // 2849
		var matched = [],                                                                                                  // 2850
			cur = elem[ dir ];                                                                                                // 2851
                                                                                                                     // 2852
		while ( cur && cur.nodeType !== 9 && (until === undefined || cur.nodeType !== 1 || !jQuery( cur ).is( until )) ) { // 2853
			if ( cur.nodeType === 1 ) {                                                                                       // 2854
				matched.push( cur );                                                                                             // 2855
			}                                                                                                                 // 2856
			cur = cur[dir];                                                                                                   // 2857
		}                                                                                                                  // 2858
		return matched;                                                                                                    // 2859
	},                                                                                                                  // 2860
                                                                                                                     // 2861
	sibling: function( n, elem ) {                                                                                      // 2862
		var r = [];                                                                                                        // 2863
                                                                                                                     // 2864
		for ( ; n; n = n.nextSibling ) {                                                                                   // 2865
			if ( n.nodeType === 1 && n !== elem ) {                                                                           // 2866
				r.push( n );                                                                                                     // 2867
			}                                                                                                                 // 2868
		}                                                                                                                  // 2869
                                                                                                                     // 2870
		return r;                                                                                                          // 2871
	}                                                                                                                   // 2872
});                                                                                                                  // 2873
                                                                                                                     // 2874
jQuery.fn.extend({                                                                                                   // 2875
	has: function( target ) {                                                                                           // 2876
		var i,                                                                                                             // 2877
			targets = jQuery( target, this ),                                                                                 // 2878
			len = targets.length;                                                                                             // 2879
                                                                                                                     // 2880
		return this.filter(function() {                                                                                    // 2881
			for ( i = 0; i < len; i++ ) {                                                                                     // 2882
				if ( jQuery.contains( this, targets[i] ) ) {                                                                     // 2883
					return true;                                                                                                    // 2884
				}                                                                                                                // 2885
			}                                                                                                                 // 2886
		});                                                                                                                // 2887
	},                                                                                                                  // 2888
                                                                                                                     // 2889
	closest: function( selectors, context ) {                                                                           // 2890
		var cur,                                                                                                           // 2891
			i = 0,                                                                                                            // 2892
			l = this.length,                                                                                                  // 2893
			matched = [],                                                                                                     // 2894
			pos = rneedsContext.test( selectors ) || typeof selectors !== "string" ?                                          // 2895
				jQuery( selectors, context || this.context ) :                                                                   // 2896
				0;                                                                                                               // 2897
                                                                                                                     // 2898
		for ( ; i < l; i++ ) {                                                                                             // 2899
			for ( cur = this[i]; cur && cur !== context; cur = cur.parentNode ) {                                             // 2900
				// Always skip document fragments                                                                                // 2901
				if ( cur.nodeType < 11 && (pos ?                                                                                 // 2902
					pos.index(cur) > -1 :                                                                                           // 2903
                                                                                                                     // 2904
					// Don't pass non-elements to Sizzle                                                                            // 2905
					cur.nodeType === 1 &&                                                                                           // 2906
						jQuery.find.matchesSelector(cur, selectors)) ) {                                                               // 2907
                                                                                                                     // 2908
					matched.push( cur );                                                                                            // 2909
					break;                                                                                                          // 2910
				}                                                                                                                // 2911
			}                                                                                                                 // 2912
		}                                                                                                                  // 2913
                                                                                                                     // 2914
		return this.pushStack( matched.length > 1 ? jQuery.unique( matched ) : matched );                                  // 2915
	},                                                                                                                  // 2916
                                                                                                                     // 2917
	// Determine the position of an element within                                                                      // 2918
	// the matched set of elements                                                                                      // 2919
	index: function( elem ) {                                                                                           // 2920
                                                                                                                     // 2921
		// No argument, return index in parent                                                                             // 2922
		if ( !elem ) {                                                                                                     // 2923
			return ( this[0] && this[0].parentNode ) ? this.first().prevAll().length : -1;                                    // 2924
		}                                                                                                                  // 2925
                                                                                                                     // 2926
		// index in selector                                                                                               // 2927
		if ( typeof elem === "string" ) {                                                                                  // 2928
			return jQuery.inArray( this[0], jQuery( elem ) );                                                                 // 2929
		}                                                                                                                  // 2930
                                                                                                                     // 2931
		// Locate the position of the desired element                                                                      // 2932
		return jQuery.inArray(                                                                                             // 2933
			// If it receives a jQuery object, the first element is used                                                      // 2934
			elem.jquery ? elem[0] : elem, this );                                                                             // 2935
	},                                                                                                                  // 2936
                                                                                                                     // 2937
	add: function( selector, context ) {                                                                                // 2938
		return this.pushStack(                                                                                             // 2939
			jQuery.unique(                                                                                                    // 2940
				jQuery.merge( this.get(), jQuery( selector, context ) )                                                          // 2941
			)                                                                                                                 // 2942
		);                                                                                                                 // 2943
	},                                                                                                                  // 2944
                                                                                                                     // 2945
	addBack: function( selector ) {                                                                                     // 2946
		return this.add( selector == null ?                                                                                // 2947
			this.prevObject : this.prevObject.filter(selector)                                                                // 2948
		);                                                                                                                 // 2949
	}                                                                                                                   // 2950
});                                                                                                                  // 2951
                                                                                                                     // 2952
function sibling( cur, dir ) {                                                                                       // 2953
	do {                                                                                                                // 2954
		cur = cur[ dir ];                                                                                                  // 2955
	} while ( cur && cur.nodeType !== 1 );                                                                              // 2956
                                                                                                                     // 2957
	return cur;                                                                                                         // 2958
}                                                                                                                    // 2959
                                                                                                                     // 2960
jQuery.each({                                                                                                        // 2961
	parent: function( elem ) {                                                                                          // 2962
		var parent = elem.parentNode;                                                                                      // 2963
		return parent && parent.nodeType !== 11 ? parent : null;                                                           // 2964
	},                                                                                                                  // 2965
	parents: function( elem ) {                                                                                         // 2966
		return jQuery.dir( elem, "parentNode" );                                                                           // 2967
	},                                                                                                                  // 2968
	parentsUntil: function( elem, i, until ) {                                                                          // 2969
		return jQuery.dir( elem, "parentNode", until );                                                                    // 2970
	},                                                                                                                  // 2971
	next: function( elem ) {                                                                                            // 2972
		return sibling( elem, "nextSibling" );                                                                             // 2973
	},                                                                                                                  // 2974
	prev: function( elem ) {                                                                                            // 2975
		return sibling( elem, "previousSibling" );                                                                         // 2976
	},                                                                                                                  // 2977
	nextAll: function( elem ) {                                                                                         // 2978
		return jQuery.dir( elem, "nextSibling" );                                                                          // 2979
	},                                                                                                                  // 2980
	prevAll: function( elem ) {                                                                                         // 2981
		return jQuery.dir( elem, "previousSibling" );                                                                      // 2982
	},                                                                                                                  // 2983
	nextUntil: function( elem, i, until ) {                                                                             // 2984
		return jQuery.dir( elem, "nextSibling", until );                                                                   // 2985
	},                                                                                                                  // 2986
	prevUntil: function( elem, i, until ) {                                                                             // 2987
		return jQuery.dir( elem, "previousSibling", until );                                                               // 2988
	},                                                                                                                  // 2989
	siblings: function( elem ) {                                                                                        // 2990
		return jQuery.sibling( ( elem.parentNode || {} ).firstChild, elem );                                               // 2991
	},                                                                                                                  // 2992
	children: function( elem ) {                                                                                        // 2993
		return jQuery.sibling( elem.firstChild );                                                                          // 2994
	},                                                                                                                  // 2995
	contents: function( elem ) {                                                                                        // 2996
		return jQuery.nodeName( elem, "iframe" ) ?                                                                         // 2997
			elem.contentDocument || elem.contentWindow.document :                                                             // 2998
			jQuery.merge( [], elem.childNodes );                                                                              // 2999
	}                                                                                                                   // 3000
}, function( name, fn ) {                                                                                            // 3001
	jQuery.fn[ name ] = function( until, selector ) {                                                                   // 3002
		var ret = jQuery.map( this, fn, until );                                                                           // 3003
                                                                                                                     // 3004
		if ( name.slice( -5 ) !== "Until" ) {                                                                              // 3005
			selector = until;                                                                                                 // 3006
		}                                                                                                                  // 3007
                                                                                                                     // 3008
		if ( selector && typeof selector === "string" ) {                                                                  // 3009
			ret = jQuery.filter( selector, ret );                                                                             // 3010
		}                                                                                                                  // 3011
                                                                                                                     // 3012
		if ( this.length > 1 ) {                                                                                           // 3013
			// Remove duplicates                                                                                              // 3014
			if ( !guaranteedUnique[ name ] ) {                                                                                // 3015
				ret = jQuery.unique( ret );                                                                                      // 3016
			}                                                                                                                 // 3017
                                                                                                                     // 3018
			// Reverse order for parents* and prev-derivatives                                                                // 3019
			if ( rparentsprev.test( name ) ) {                                                                                // 3020
				ret = ret.reverse();                                                                                             // 3021
			}                                                                                                                 // 3022
		}                                                                                                                  // 3023
                                                                                                                     // 3024
		return this.pushStack( ret );                                                                                      // 3025
	};                                                                                                                  // 3026
});                                                                                                                  // 3027
var rnotwhite = (/\S+/g);                                                                                            // 3028
                                                                                                                     // 3029
                                                                                                                     // 3030
                                                                                                                     // 3031
// String to Object options format cache                                                                             // 3032
var optionsCache = {};                                                                                               // 3033
                                                                                                                     // 3034
// Convert String-formatted options into Object-formatted ones and store in cache                                    // 3035
function createOptions( options ) {                                                                                  // 3036
	var object = optionsCache[ options ] = {};                                                                          // 3037
	jQuery.each( options.match( rnotwhite ) || [], function( _, flag ) {                                                // 3038
		object[ flag ] = true;                                                                                             // 3039
	});                                                                                                                 // 3040
	return object;                                                                                                      // 3041
}                                                                                                                    // 3042
                                                                                                                     // 3043
/*                                                                                                                   // 3044
 * Create a callback list using the following parameters:                                                            // 3045
 *                                                                                                                   // 3046
 *	options: an optional list of space-separated options that will change how                                         // 3047
 *			the callback list behaves or a more traditional option object                                                   // 3048
 *                                                                                                                   // 3049
 * By default a callback list will act like an event callback list and can be                                        // 3050
 * "fired" multiple times.                                                                                           // 3051
 *                                                                                                                   // 3052
 * Possible options:                                                                                                 // 3053
 *                                                                                                                   // 3054
 *	once:			will ensure the callback list can only be fired once (like a Deferred)                                    // 3055
 *                                                                                                                   // 3056
 *	memory:			will keep track of previous values and will call any callback added                                     // 3057
 *					after the list has been fired right away with the latest "memorized"                                          // 3058
 *					values (like a Deferred)                                                                                      // 3059
 *                                                                                                                   // 3060
 *	unique:			will ensure a callback can only be added once (no duplicate in the list)                                // 3061
 *                                                                                                                   // 3062
 *	stopOnFalse:	interrupt callings when a callback returns false                                                     // 3063
 *                                                                                                                   // 3064
 */                                                                                                                  // 3065
jQuery.Callbacks = function( options ) {                                                                             // 3066
                                                                                                                     // 3067
	// Convert options from String-formatted to Object-formatted if needed                                              // 3068
	// (we check in cache first)                                                                                        // 3069
	options = typeof options === "string" ?                                                                             // 3070
		( optionsCache[ options ] || createOptions( options ) ) :                                                          // 3071
		jQuery.extend( {}, options );                                                                                      // 3072
                                                                                                                     // 3073
	var // Flag to know if list is currently firing                                                                     // 3074
		firing,                                                                                                            // 3075
		// Last fire value (for non-forgettable lists)                                                                     // 3076
		memory,                                                                                                            // 3077
		// Flag to know if list was already fired                                                                          // 3078
		fired,                                                                                                             // 3079
		// End of the loop when firing                                                                                     // 3080
		firingLength,                                                                                                      // 3081
		// Index of currently firing callback (modified by remove if needed)                                               // 3082
		firingIndex,                                                                                                       // 3083
		// First callback to fire (used internally by add and fireWith)                                                    // 3084
		firingStart,                                                                                                       // 3085
		// Actual callback list                                                                                            // 3086
		list = [],                                                                                                         // 3087
		// Stack of fire calls for repeatable lists                                                                        // 3088
		stack = !options.once && [],                                                                                       // 3089
		// Fire callbacks                                                                                                  // 3090
		fire = function( data ) {                                                                                          // 3091
			memory = options.memory && data;                                                                                  // 3092
			fired = true;                                                                                                     // 3093
			firingIndex = firingStart || 0;                                                                                   // 3094
			firingStart = 0;                                                                                                  // 3095
			firingLength = list.length;                                                                                       // 3096
			firing = true;                                                                                                    // 3097
			for ( ; list && firingIndex < firingLength; firingIndex++ ) {                                                     // 3098
				if ( list[ firingIndex ].apply( data[ 0 ], data[ 1 ] ) === false && options.stopOnFalse ) {                      // 3099
					memory = false; // To prevent further calls using add                                                           // 3100
					break;                                                                                                          // 3101
				}                                                                                                                // 3102
			}                                                                                                                 // 3103
			firing = false;                                                                                                   // 3104
			if ( list ) {                                                                                                     // 3105
				if ( stack ) {                                                                                                   // 3106
					if ( stack.length ) {                                                                                           // 3107
						fire( stack.shift() );                                                                                         // 3108
					}                                                                                                               // 3109
				} else if ( memory ) {                                                                                           // 3110
					list = [];                                                                                                      // 3111
				} else {                                                                                                         // 3112
					self.disable();                                                                                                 // 3113
				}                                                                                                                // 3114
			}                                                                                                                 // 3115
		},                                                                                                                 // 3116
		// Actual Callbacks object                                                                                         // 3117
		self = {                                                                                                           // 3118
			// Add a callback or a collection of callbacks to the list                                                        // 3119
			add: function() {                                                                                                 // 3120
				if ( list ) {                                                                                                    // 3121
					// First, we save the current length                                                                            // 3122
					var start = list.length;                                                                                        // 3123
					(function add( args ) {                                                                                         // 3124
						jQuery.each( args, function( _, arg ) {                                                                        // 3125
							var type = jQuery.type( arg );                                                                                // 3126
							if ( type === "function" ) {                                                                                  // 3127
								if ( !options.unique || !self.has( arg ) ) {                                                                 // 3128
									list.push( arg );                                                                                           // 3129
								}                                                                                                            // 3130
							} else if ( arg && arg.length && type !== "string" ) {                                                        // 3131
								// Inspect recursively                                                                                       // 3132
								add( arg );                                                                                                  // 3133
							}                                                                                                             // 3134
						});                                                                                                            // 3135
					})( arguments );                                                                                                // 3136
					// Do we need to add the callbacks to the                                                                       // 3137
					// current firing batch?                                                                                        // 3138
					if ( firing ) {                                                                                                 // 3139
						firingLength = list.length;                                                                                    // 3140
					// With memory, if we're not firing then                                                                        // 3141
					// we should call right away                                                                                    // 3142
					} else if ( memory ) {                                                                                          // 3143
						firingStart = start;                                                                                           // 3144
						fire( memory );                                                                                                // 3145
					}                                                                                                               // 3146
				}                                                                                                                // 3147
				return this;                                                                                                     // 3148
			},                                                                                                                // 3149
			// Remove a callback from the list                                                                                // 3150
			remove: function() {                                                                                              // 3151
				if ( list ) {                                                                                                    // 3152
					jQuery.each( arguments, function( _, arg ) {                                                                    // 3153
						var index;                                                                                                     // 3154
						while ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {                                                // 3155
							list.splice( index, 1 );                                                                                      // 3156
							// Handle firing indexes                                                                                      // 3157
							if ( firing ) {                                                                                               // 3158
								if ( index <= firingLength ) {                                                                               // 3159
									firingLength--;                                                                                             // 3160
								}                                                                                                            // 3161
								if ( index <= firingIndex ) {                                                                                // 3162
									firingIndex--;                                                                                              // 3163
								}                                                                                                            // 3164
							}                                                                                                             // 3165
						}                                                                                                              // 3166
					});                                                                                                             // 3167
				}                                                                                                                // 3168
				return this;                                                                                                     // 3169
			},                                                                                                                // 3170
			// Check if a given callback is in the list.                                                                      // 3171
			// If no argument is given, return whether or not list has callbacks attached.                                    // 3172
			has: function( fn ) {                                                                                             // 3173
				return fn ? jQuery.inArray( fn, list ) > -1 : !!( list && list.length );                                         // 3174
			},                                                                                                                // 3175
			// Remove all callbacks from the list                                                                             // 3176
			empty: function() {                                                                                               // 3177
				list = [];                                                                                                       // 3178
				firingLength = 0;                                                                                                // 3179
				return this;                                                                                                     // 3180
			},                                                                                                                // 3181
			// Have the list do nothing anymore                                                                               // 3182
			disable: function() {                                                                                             // 3183
				list = stack = memory = undefined;                                                                               // 3184
				return this;                                                                                                     // 3185
			},                                                                                                                // 3186
			// Is it disabled?                                                                                                // 3187
			disabled: function() {                                                                                            // 3188
				return !list;                                                                                                    // 3189
			},                                                                                                                // 3190
			// Lock the list in its current state                                                                             // 3191
			lock: function() {                                                                                                // 3192
				stack = undefined;                                                                                               // 3193
				if ( !memory ) {                                                                                                 // 3194
					self.disable();                                                                                                 // 3195
				}                                                                                                                // 3196
				return this;                                                                                                     // 3197
			},                                                                                                                // 3198
			// Is it locked?                                                                                                  // 3199
			locked: function() {                                                                                              // 3200
				return !stack;                                                                                                   // 3201
			},                                                                                                                // 3202
			// Call all callbacks with the given context and arguments                                                        // 3203
			fireWith: function( context, args ) {                                                                             // 3204
				if ( list && ( !fired || stack ) ) {                                                                             // 3205
					args = args || [];                                                                                              // 3206
					args = [ context, args.slice ? args.slice() : args ];                                                           // 3207
					if ( firing ) {                                                                                                 // 3208
						stack.push( args );                                                                                            // 3209
					} else {                                                                                                        // 3210
						fire( args );                                                                                                  // 3211
					}                                                                                                               // 3212
				}                                                                                                                // 3213
				return this;                                                                                                     // 3214
			},                                                                                                                // 3215
			// Call all the callbacks with the given arguments                                                                // 3216
			fire: function() {                                                                                                // 3217
				self.fireWith( this, arguments );                                                                                // 3218
				return this;                                                                                                     // 3219
			},                                                                                                                // 3220
			// To know if the callbacks have already been called at least once                                                // 3221
			fired: function() {                                                                                               // 3222
				return !!fired;                                                                                                  // 3223
			}                                                                                                                 // 3224
		};                                                                                                                 // 3225
                                                                                                                     // 3226
	return self;                                                                                                        // 3227
};                                                                                                                   // 3228
                                                                                                                     // 3229
                                                                                                                     // 3230
jQuery.extend({                                                                                                      // 3231
                                                                                                                     // 3232
	Deferred: function( func ) {                                                                                        // 3233
		var tuples = [                                                                                                     // 3234
				// action, add listener, listener list, final state                                                              // 3235
				[ "resolve", "done", jQuery.Callbacks("once memory"), "resolved" ],                                              // 3236
				[ "reject", "fail", jQuery.Callbacks("once memory"), "rejected" ],                                               // 3237
				[ "notify", "progress", jQuery.Callbacks("memory") ]                                                             // 3238
			],                                                                                                                // 3239
			state = "pending",                                                                                                // 3240
			promise = {                                                                                                       // 3241
				state: function() {                                                                                              // 3242
					return state;                                                                                                   // 3243
				},                                                                                                               // 3244
				always: function() {                                                                                             // 3245
					deferred.done( arguments ).fail( arguments );                                                                   // 3246
					return this;                                                                                                    // 3247
				},                                                                                                               // 3248
				then: function( /* fnDone, fnFail, fnProgress */ ) {                                                             // 3249
					var fns = arguments;                                                                                            // 3250
					return jQuery.Deferred(function( newDefer ) {                                                                   // 3251
						jQuery.each( tuples, function( i, tuple ) {                                                                    // 3252
							var fn = jQuery.isFunction( fns[ i ] ) && fns[ i ];                                                           // 3253
							// deferred[ done | fail | progress ] for forwarding actions to newDefer                                      // 3254
							deferred[ tuple[1] ](function() {                                                                             // 3255
								var returned = fn && fn.apply( this, arguments );                                                            // 3256
								if ( returned && jQuery.isFunction( returned.promise ) ) {                                                   // 3257
									returned.promise()                                                                                          // 3258
										.done( newDefer.resolve )                                                                                  // 3259
										.fail( newDefer.reject )                                                                                   // 3260
										.progress( newDefer.notify );                                                                              // 3261
								} else {                                                                                                     // 3262
									newDefer[ tuple[ 0 ] + "With" ]( this === promise ? newDefer.promise() : this, fn ? [ returned ] : arguments );
								}                                                                                                            // 3264
							});                                                                                                           // 3265
						});                                                                                                            // 3266
						fns = null;                                                                                                    // 3267
					}).promise();                                                                                                   // 3268
				},                                                                                                               // 3269
				// Get a promise for this deferred                                                                               // 3270
				// If obj is provided, the promise aspect is added to the object                                                 // 3271
				promise: function( obj ) {                                                                                       // 3272
					return obj != null ? jQuery.extend( obj, promise ) : promise;                                                   // 3273
				}                                                                                                                // 3274
			},                                                                                                                // 3275
			deferred = {};                                                                                                    // 3276
                                                                                                                     // 3277
		// Keep pipe for back-compat                                                                                       // 3278
		promise.pipe = promise.then;                                                                                       // 3279
                                                                                                                     // 3280
		// Add list-specific methods                                                                                       // 3281
		jQuery.each( tuples, function( i, tuple ) {                                                                        // 3282
			var list = tuple[ 2 ],                                                                                            // 3283
				stateString = tuple[ 3 ];                                                                                        // 3284
                                                                                                                     // 3285
			// promise[ done | fail | progress ] = list.add                                                                   // 3286
			promise[ tuple[1] ] = list.add;                                                                                   // 3287
                                                                                                                     // 3288
			// Handle state                                                                                                   // 3289
			if ( stateString ) {                                                                                              // 3290
				list.add(function() {                                                                                            // 3291
					// state = [ resolved | rejected ]                                                                              // 3292
					state = stateString;                                                                                            // 3293
                                                                                                                     // 3294
				// [ reject_list | resolve_list ].disable; progress_list.lock                                                    // 3295
				}, tuples[ i ^ 1 ][ 2 ].disable, tuples[ 2 ][ 2 ].lock );                                                        // 3296
			}                                                                                                                 // 3297
                                                                                                                     // 3298
			// deferred[ resolve | reject | notify ]                                                                          // 3299
			deferred[ tuple[0] ] = function() {                                                                               // 3300
				deferred[ tuple[0] + "With" ]( this === deferred ? promise : this, arguments );                                  // 3301
				return this;                                                                                                     // 3302
			};                                                                                                                // 3303
			deferred[ tuple[0] + "With" ] = list.fireWith;                                                                    // 3304
		});                                                                                                                // 3305
                                                                                                                     // 3306
		// Make the deferred a promise                                                                                     // 3307
		promise.promise( deferred );                                                                                       // 3308
                                                                                                                     // 3309
		// Call given func if any                                                                                          // 3310
		if ( func ) {                                                                                                      // 3311
			func.call( deferred, deferred );                                                                                  // 3312
		}                                                                                                                  // 3313
                                                                                                                     // 3314
		// All done!                                                                                                       // 3315
		return deferred;                                                                                                   // 3316
	},                                                                                                                  // 3317
                                                                                                                     // 3318
	// Deferred helper                                                                                                  // 3319
	when: function( subordinate /* , ..., subordinateN */ ) {                                                           // 3320
		var i = 0,                                                                                                         // 3321
			resolveValues = slice.call( arguments ),                                                                          // 3322
			length = resolveValues.length,                                                                                    // 3323
                                                                                                                     // 3324
			// the count of uncompleted subordinates                                                                          // 3325
			remaining = length !== 1 || ( subordinate && jQuery.isFunction( subordinate.promise ) ) ? length : 0,             // 3326
                                                                                                                     // 3327
			// the master Deferred. If resolveValues consist of only a single Deferred, just use that.                        // 3328
			deferred = remaining === 1 ? subordinate : jQuery.Deferred(),                                                     // 3329
                                                                                                                     // 3330
			// Update function for both resolve and progress values                                                           // 3331
			updateFunc = function( i, contexts, values ) {                                                                    // 3332
				return function( value ) {                                                                                       // 3333
					contexts[ i ] = this;                                                                                           // 3334
					values[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;                                           // 3335
					if ( values === progressValues ) {                                                                              // 3336
						deferred.notifyWith( contexts, values );                                                                       // 3337
                                                                                                                     // 3338
					} else if ( !(--remaining) ) {                                                                                  // 3339
						deferred.resolveWith( contexts, values );                                                                      // 3340
					}                                                                                                               // 3341
				};                                                                                                               // 3342
			},                                                                                                                // 3343
                                                                                                                     // 3344
			progressValues, progressContexts, resolveContexts;                                                                // 3345
                                                                                                                     // 3346
		// add listeners to Deferred subordinates; treat others as resolved                                                // 3347
		if ( length > 1 ) {                                                                                                // 3348
			progressValues = new Array( length );                                                                             // 3349
			progressContexts = new Array( length );                                                                           // 3350
			resolveContexts = new Array( length );                                                                            // 3351
			for ( ; i < length; i++ ) {                                                                                       // 3352
				if ( resolveValues[ i ] && jQuery.isFunction( resolveValues[ i ].promise ) ) {                                   // 3353
					resolveValues[ i ].promise()                                                                                    // 3354
						.done( updateFunc( i, resolveContexts, resolveValues ) )                                                       // 3355
						.fail( deferred.reject )                                                                                       // 3356
						.progress( updateFunc( i, progressContexts, progressValues ) );                                                // 3357
				} else {                                                                                                         // 3358
					--remaining;                                                                                                    // 3359
				}                                                                                                                // 3360
			}                                                                                                                 // 3361
		}                                                                                                                  // 3362
                                                                                                                     // 3363
		// if we're not waiting on anything, resolve the master                                                            // 3364
		if ( !remaining ) {                                                                                                // 3365
			deferred.resolveWith( resolveContexts, resolveValues );                                                           // 3366
		}                                                                                                                  // 3367
                                                                                                                     // 3368
		return deferred.promise();                                                                                         // 3369
	}                                                                                                                   // 3370
});                                                                                                                  // 3371
                                                                                                                     // 3372
                                                                                                                     // 3373
// The deferred used on DOM ready                                                                                    // 3374
var readyList;                                                                                                       // 3375
                                                                                                                     // 3376
jQuery.fn.ready = function( fn ) {                                                                                   // 3377
	// Add the callback                                                                                                 // 3378
	jQuery.ready.promise().done( fn );                                                                                  // 3379
                                                                                                                     // 3380
	return this;                                                                                                        // 3381
};                                                                                                                   // 3382
                                                                                                                     // 3383
jQuery.extend({                                                                                                      // 3384
	// Is the DOM ready to be used? Set to true once it occurs.                                                         // 3385
	isReady: false,                                                                                                     // 3386
                                                                                                                     // 3387
	// A counter to track how many items to wait for before                                                             // 3388
	// the ready event fires. See #6781                                                                                 // 3389
	readyWait: 1,                                                                                                       // 3390
                                                                                                                     // 3391
	// Hold (or release) the ready event                                                                                // 3392
	holdReady: function( hold ) {                                                                                       // 3393
		if ( hold ) {                                                                                                      // 3394
			jQuery.readyWait++;                                                                                               // 3395
		} else {                                                                                                           // 3396
			jQuery.ready( true );                                                                                             // 3397
		}                                                                                                                  // 3398
	},                                                                                                                  // 3399
                                                                                                                     // 3400
	// Handle when the DOM is ready                                                                                     // 3401
	ready: function( wait ) {                                                                                           // 3402
                                                                                                                     // 3403
		// Abort if there are pending holds or we're already ready                                                         // 3404
		if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {                                                       // 3405
			return;                                                                                                           // 3406
		}                                                                                                                  // 3407
                                                                                                                     // 3408
		// Make sure body exists, at least, in case IE gets a little overzealous (ticket #5443).                           // 3409
		if ( !document.body ) {                                                                                            // 3410
			return setTimeout( jQuery.ready );                                                                                // 3411
		}                                                                                                                  // 3412
                                                                                                                     // 3413
		// Remember that the DOM is ready                                                                                  // 3414
		jQuery.isReady = true;                                                                                             // 3415
                                                                                                                     // 3416
		// If a normal DOM Ready event fired, decrement, and wait if need be                                               // 3417
		if ( wait !== true && --jQuery.readyWait > 0 ) {                                                                   // 3418
			return;                                                                                                           // 3419
		}                                                                                                                  // 3420
                                                                                                                     // 3421
		// If there are functions bound, to execute                                                                        // 3422
		readyList.resolveWith( document, [ jQuery ] );                                                                     // 3423
                                                                                                                     // 3424
		// Trigger any bound ready events                                                                                  // 3425
		if ( jQuery.fn.trigger ) {                                                                                         // 3426
			jQuery( document ).trigger("ready").off("ready");                                                                 // 3427
		}                                                                                                                  // 3428
	}                                                                                                                   // 3429
});                                                                                                                  // 3430
                                                                                                                     // 3431
/**                                                                                                                  // 3432
 * Clean-up method for dom ready events                                                                              // 3433
 */                                                                                                                  // 3434
function detach() {                                                                                                  // 3435
	if ( document.addEventListener ) {                                                                                  // 3436
		document.removeEventListener( "DOMContentLoaded", completed, false );                                              // 3437
		window.removeEventListener( "load", completed, false );                                                            // 3438
                                                                                                                     // 3439
	} else {                                                                                                            // 3440
		document.detachEvent( "onreadystatechange", completed );                                                           // 3441
		window.detachEvent( "onload", completed );                                                                         // 3442
	}                                                                                                                   // 3443
}                                                                                                                    // 3444
                                                                                                                     // 3445
/**                                                                                                                  // 3446
 * The ready event handler and self cleanup method                                                                   // 3447
 */                                                                                                                  // 3448
function completed() {                                                                                               // 3449
	// readyState === "complete" is good enough for us to call the dom ready in oldIE                                   // 3450
	if ( document.addEventListener || event.type === "load" || document.readyState === "complete" ) {                   // 3451
		detach();                                                                                                          // 3452
		jQuery.ready();                                                                                                    // 3453
	}                                                                                                                   // 3454
}                                                                                                                    // 3455
                                                                                                                     // 3456
jQuery.ready.promise = function( obj ) {                                                                             // 3457
	if ( !readyList ) {                                                                                                 // 3458
                                                                                                                     // 3459
		readyList = jQuery.Deferred();                                                                                     // 3460
                                                                                                                     // 3461
		// Catch cases where $(document).ready() is called after the browser event has already occurred.                   // 3462
		// we once tried to use readyState "interactive" here, but it caused issues like the one                           // 3463
		// discovered by ChrisS here: http://bugs.jquery.com/ticket/12282#comment:15                                       // 3464
		if ( document.readyState === "complete" ) {                                                                        // 3465
			// Handle it asynchronously to allow scripts the opportunity to delay ready                                       // 3466
			setTimeout( jQuery.ready );                                                                                       // 3467
                                                                                                                     // 3468
		// Standards-based browsers support DOMContentLoaded                                                               // 3469
		} else if ( document.addEventListener ) {                                                                          // 3470
			// Use the handy event callback                                                                                   // 3471
			document.addEventListener( "DOMContentLoaded", completed, false );                                                // 3472
                                                                                                                     // 3473
			// A fallback to window.onload, that will always work                                                             // 3474
			window.addEventListener( "load", completed, false );                                                              // 3475
                                                                                                                     // 3476
		// If IE event model is used                                                                                       // 3477
		} else {                                                                                                           // 3478
			// Ensure firing before onload, maybe late but safe also for iframes                                              // 3479
			document.attachEvent( "onreadystatechange", completed );                                                          // 3480
                                                                                                                     // 3481
			// A fallback to window.onload, that will always work                                                             // 3482
			window.attachEvent( "onload", completed );                                                                        // 3483
                                                                                                                     // 3484
			// If IE and not a frame                                                                                          // 3485
			// continually check to see if the document is ready                                                              // 3486
			var top = false;                                                                                                  // 3487
                                                                                                                     // 3488
			try {                                                                                                             // 3489
				top = window.frameElement == null && document.documentElement;                                                   // 3490
			} catch(e) {}                                                                                                     // 3491
                                                                                                                     // 3492
			if ( top && top.doScroll ) {                                                                                      // 3493
				(function doScrollCheck() {                                                                                      // 3494
					if ( !jQuery.isReady ) {                                                                                        // 3495
                                                                                                                     // 3496
						try {                                                                                                          // 3497
							// Use the trick by Diego Perini                                                                              // 3498
							// http://javascript.nwbox.com/IEContentLoaded/                                                               // 3499
							top.doScroll("left");                                                                                         // 3500
						} catch(e) {                                                                                                   // 3501
							return setTimeout( doScrollCheck, 50 );                                                                       // 3502
						}                                                                                                              // 3503
                                                                                                                     // 3504
						// detach all dom ready events                                                                                 // 3505
						detach();                                                                                                      // 3506
                                                                                                                     // 3507
						// and execute any waiting functions                                                                           // 3508
						jQuery.ready();                                                                                                // 3509
					}                                                                                                               // 3510
				})();                                                                                                            // 3511
			}                                                                                                                 // 3512
		}                                                                                                                  // 3513
	}                                                                                                                   // 3514
	return readyList.promise( obj );                                                                                    // 3515
};                                                                                                                   // 3516
                                                                                                                     // 3517
                                                                                                                     // 3518
var strundefined = typeof undefined;                                                                                 // 3519
                                                                                                                     // 3520
                                                                                                                     // 3521
                                                                                                                     // 3522
// Support: IE<9                                                                                                     // 3523
// Iteration over object's inherited properties before its own                                                       // 3524
var i;                                                                                                               // 3525
for ( i in jQuery( support ) ) {                                                                                     // 3526
	break;                                                                                                              // 3527
}                                                                                                                    // 3528
support.ownLast = i !== "0";                                                                                         // 3529
                                                                                                                     // 3530
// Note: most support tests are defined in their respective modules.                                                 // 3531
// false until the test is run                                                                                       // 3532
support.inlineBlockNeedsLayout = false;                                                                              // 3533
                                                                                                                     // 3534
jQuery(function() {                                                                                                  // 3535
	// We need to execute this one support test ASAP because we need to know                                            // 3536
	// if body.style.zoom needs to be set.                                                                              // 3537
                                                                                                                     // 3538
	var container, div,                                                                                                 // 3539
		body = document.getElementsByTagName("body")[0];                                                                   // 3540
                                                                                                                     // 3541
	if ( !body ) {                                                                                                      // 3542
		// Return for frameset docs that don't have a body                                                                 // 3543
		return;                                                                                                            // 3544
	}                                                                                                                   // 3545
                                                                                                                     // 3546
	// Setup                                                                                                            // 3547
	container = document.createElement( "div" );                                                                        // 3548
	container.style.cssText = "border:0;width:0;height:0;position:absolute;top:0;left:-9999px;margin-top:1px";          // 3549
                                                                                                                     // 3550
	div = document.createElement( "div" );                                                                              // 3551
	body.appendChild( container ).appendChild( div );                                                                   // 3552
                                                                                                                     // 3553
	if ( typeof div.style.zoom !== strundefined ) {                                                                     // 3554
		// Support: IE<8                                                                                                   // 3555
		// Check if natively block-level elements act like inline-block                                                    // 3556
		// elements when setting their display to 'inline' and giving                                                      // 3557
		// them layout                                                                                                     // 3558
		div.style.cssText = "border:0;margin:0;width:1px;padding:1px;display:inline;zoom:1";                               // 3559
                                                                                                                     // 3560
		if ( (support.inlineBlockNeedsLayout = ( div.offsetWidth === 3 )) ) {                                              // 3561
			// Prevent IE 6 from affecting layout for positioned elements #11048                                              // 3562
			// Prevent IE from shrinking the body in IE 7 mode #12869                                                         // 3563
			// Support: IE<8                                                                                                  // 3564
			body.style.zoom = 1;                                                                                              // 3565
		}                                                                                                                  // 3566
	}                                                                                                                   // 3567
                                                                                                                     // 3568
	body.removeChild( container );                                                                                      // 3569
                                                                                                                     // 3570
	// Null elements to avoid leaks in IE                                                                               // 3571
	container = div = null;                                                                                             // 3572
});                                                                                                                  // 3573
                                                                                                                     // 3574
                                                                                                                     // 3575
                                                                                                                     // 3576
                                                                                                                     // 3577
(function() {                                                                                                        // 3578
	var div = document.createElement( "div" );                                                                          // 3579
                                                                                                                     // 3580
	// Execute the test only if not already executed in another module.                                                 // 3581
	if (support.deleteExpando == null) {                                                                                // 3582
		// Support: IE<9                                                                                                   // 3583
		support.deleteExpando = true;                                                                                      // 3584
		try {                                                                                                              // 3585
			delete div.test;                                                                                                  // 3586
		} catch( e ) {                                                                                                     // 3587
			support.deleteExpando = false;                                                                                    // 3588
		}                                                                                                                  // 3589
	}                                                                                                                   // 3590
                                                                                                                     // 3591
	// Null elements to avoid leaks in IE.                                                                              // 3592
	div = null;                                                                                                         // 3593
})();                                                                                                                // 3594
                                                                                                                     // 3595
                                                                                                                     // 3596
/**                                                                                                                  // 3597
 * Determines whether an object can have data                                                                        // 3598
 */                                                                                                                  // 3599
jQuery.acceptData = function( elem ) {                                                                               // 3600
	var noData = jQuery.noData[ (elem.nodeName + " ").toLowerCase() ],                                                  // 3601
		nodeType = +elem.nodeType || 1;                                                                                    // 3602
                                                                                                                     // 3603
	// Do not set data on non-element DOM nodes because it will not be cleared (#8335).                                 // 3604
	return nodeType !== 1 && nodeType !== 9 ?                                                                           // 3605
		false :                                                                                                            // 3606
                                                                                                                     // 3607
		// Nodes accept data unless otherwise specified; rejection can be conditional                                      // 3608
		!noData || noData !== true && elem.getAttribute("classid") === noData;                                             // 3609
};                                                                                                                   // 3610
                                                                                                                     // 3611
                                                                                                                     // 3612
var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,                                                                        // 3613
	rmultiDash = /([A-Z])/g;                                                                                            // 3614
                                                                                                                     // 3615
function dataAttr( elem, key, data ) {                                                                               // 3616
	// If nothing was found internally, try to fetch any                                                                // 3617
	// data from the HTML5 data-* attribute                                                                             // 3618
	if ( data === undefined && elem.nodeType === 1 ) {                                                                  // 3619
                                                                                                                     // 3620
		var name = "data-" + key.replace( rmultiDash, "-$1" ).toLowerCase();                                               // 3621
                                                                                                                     // 3622
		data = elem.getAttribute( name );                                                                                  // 3623
                                                                                                                     // 3624
		if ( typeof data === "string" ) {                                                                                  // 3625
			try {                                                                                                             // 3626
				data = data === "true" ? true :                                                                                  // 3627
					data === "false" ? false :                                                                                      // 3628
					data === "null" ? null :                                                                                        // 3629
					// Only convert to a number if it doesn't change the string                                                     // 3630
					+data + "" === data ? +data :                                                                                   // 3631
					rbrace.test( data ) ? jQuery.parseJSON( data ) :                                                                // 3632
					data;                                                                                                           // 3633
			} catch( e ) {}                                                                                                   // 3634
                                                                                                                     // 3635
			// Make sure we set the data so it isn't changed later                                                            // 3636
			jQuery.data( elem, key, data );                                                                                   // 3637
                                                                                                                     // 3638
		} else {                                                                                                           // 3639
			data = undefined;                                                                                                 // 3640
		}                                                                                                                  // 3641
	}                                                                                                                   // 3642
                                                                                                                     // 3643
	return data;                                                                                                        // 3644
}                                                                                                                    // 3645
                                                                                                                     // 3646
// checks a cache object for emptiness                                                                               // 3647
function isEmptyDataObject( obj ) {                                                                                  // 3648
	var name;                                                                                                           // 3649
	for ( name in obj ) {                                                                                               // 3650
                                                                                                                     // 3651
		// if the public data object is empty, the private is still empty                                                  // 3652
		if ( name === "data" && jQuery.isEmptyObject( obj[name] ) ) {                                                      // 3653
			continue;                                                                                                         // 3654
		}                                                                                                                  // 3655
		if ( name !== "toJSON" ) {                                                                                         // 3656
			return false;                                                                                                     // 3657
		}                                                                                                                  // 3658
	}                                                                                                                   // 3659
                                                                                                                     // 3660
	return true;                                                                                                        // 3661
}                                                                                                                    // 3662
                                                                                                                     // 3663
function internalData( elem, name, data, pvt /* Internal Use Only */ ) {                                             // 3664
	if ( !jQuery.acceptData( elem ) ) {                                                                                 // 3665
		return;                                                                                                            // 3666
	}                                                                                                                   // 3667
                                                                                                                     // 3668
	var ret, thisCache,                                                                                                 // 3669
		internalKey = jQuery.expando,                                                                                      // 3670
                                                                                                                     // 3671
		// We have to handle DOM nodes and JS objects differently because IE6-7                                            // 3672
		// can't GC object references properly across the DOM-JS boundary                                                  // 3673
		isNode = elem.nodeType,                                                                                            // 3674
                                                                                                                     // 3675
		// Only DOM nodes need the global jQuery cache; JS object data is                                                  // 3676
		// attached directly to the object so GC can occur automatically                                                   // 3677
		cache = isNode ? jQuery.cache : elem,                                                                              // 3678
                                                                                                                     // 3679
		// Only defining an ID for JS objects if its cache already exists allows                                           // 3680
		// the code to shortcut on the same path as a DOM node with no cache                                               // 3681
		id = isNode ? elem[ internalKey ] : elem[ internalKey ] && internalKey;                                            // 3682
                                                                                                                     // 3683
	// Avoid doing any more work than we need to when trying to get data on an                                          // 3684
	// object that has no data at all                                                                                   // 3685
	if ( (!id || !cache[id] || (!pvt && !cache[id].data)) && data === undefined && typeof name === "string" ) {         // 3686
		return;                                                                                                            // 3687
	}                                                                                                                   // 3688
                                                                                                                     // 3689
	if ( !id ) {                                                                                                        // 3690
		// Only DOM nodes need a new unique ID for each element since their data                                           // 3691
		// ends up in the global cache                                                                                     // 3692
		if ( isNode ) {                                                                                                    // 3693
			id = elem[ internalKey ] = deletedIds.pop() || jQuery.guid++;                                                     // 3694
		} else {                                                                                                           // 3695
			id = internalKey;                                                                                                 // 3696
		}                                                                                                                  // 3697
	}                                                                                                                   // 3698
                                                                                                                     // 3699
	if ( !cache[ id ] ) {                                                                                               // 3700
		// Avoid exposing jQuery metadata on plain JS objects when the object                                              // 3701
		// is serialized using JSON.stringify                                                                              // 3702
		cache[ id ] = isNode ? {} : { toJSON: jQuery.noop };                                                               // 3703
	}                                                                                                                   // 3704
                                                                                                                     // 3705
	// An object can be passed to jQuery.data instead of a key/value pair; this gets                                    // 3706
	// shallow copied over onto the existing cache                                                                      // 3707
	if ( typeof name === "object" || typeof name === "function" ) {                                                     // 3708
		if ( pvt ) {                                                                                                       // 3709
			cache[ id ] = jQuery.extend( cache[ id ], name );                                                                 // 3710
		} else {                                                                                                           // 3711
			cache[ id ].data = jQuery.extend( cache[ id ].data, name );                                                       // 3712
		}                                                                                                                  // 3713
	}                                                                                                                   // 3714
                                                                                                                     // 3715
	thisCache = cache[ id ];                                                                                            // 3716
                                                                                                                     // 3717
	// jQuery data() is stored in a separate object inside the object's internal data                                   // 3718
	// cache in order to avoid key collisions between internal data and user-defined                                    // 3719
	// data.                                                                                                            // 3720
	if ( !pvt ) {                                                                                                       // 3721
		if ( !thisCache.data ) {                                                                                           // 3722
			thisCache.data = {};                                                                                              // 3723
		}                                                                                                                  // 3724
                                                                                                                     // 3725
		thisCache = thisCache.data;                                                                                        // 3726
	}                                                                                                                   // 3727
                                                                                                                     // 3728
	if ( data !== undefined ) {                                                                                         // 3729
		thisCache[ jQuery.camelCase( name ) ] = data;                                                                      // 3730
	}                                                                                                                   // 3731
                                                                                                                     // 3732
	// Check for both converted-to-camel and non-converted data property names                                          // 3733
	// If a data property was specified                                                                                 // 3734
	if ( typeof name === "string" ) {                                                                                   // 3735
                                                                                                                     // 3736
		// First Try to find as-is property data                                                                           // 3737
		ret = thisCache[ name ];                                                                                           // 3738
                                                                                                                     // 3739
		// Test for null|undefined property data                                                                           // 3740
		if ( ret == null ) {                                                                                               // 3741
                                                                                                                     // 3742
			// Try to find the camelCased property                                                                            // 3743
			ret = thisCache[ jQuery.camelCase( name ) ];                                                                      // 3744
		}                                                                                                                  // 3745
	} else {                                                                                                            // 3746
		ret = thisCache;                                                                                                   // 3747
	}                                                                                                                   // 3748
                                                                                                                     // 3749
	return ret;                                                                                                         // 3750
}                                                                                                                    // 3751
                                                                                                                     // 3752
function internalRemoveData( elem, name, pvt ) {                                                                     // 3753
	if ( !jQuery.acceptData( elem ) ) {                                                                                 // 3754
		return;                                                                                                            // 3755
	}                                                                                                                   // 3756
                                                                                                                     // 3757
	var thisCache, i,                                                                                                   // 3758
		isNode = elem.nodeType,                                                                                            // 3759
                                                                                                                     // 3760
		// See jQuery.data for more information                                                                            // 3761
		cache = isNode ? jQuery.cache : elem,                                                                              // 3762
		id = isNode ? elem[ jQuery.expando ] : jQuery.expando;                                                             // 3763
                                                                                                                     // 3764
	// If there is already no cache entry for this object, there is no                                                  // 3765
	// purpose in continuing                                                                                            // 3766
	if ( !cache[ id ] ) {                                                                                               // 3767
		return;                                                                                                            // 3768
	}                                                                                                                   // 3769
                                                                                                                     // 3770
	if ( name ) {                                                                                                       // 3771
                                                                                                                     // 3772
		thisCache = pvt ? cache[ id ] : cache[ id ].data;                                                                  // 3773
                                                                                                                     // 3774
		if ( thisCache ) {                                                                                                 // 3775
                                                                                                                     // 3776
			// Support array or space separated string names for data keys                                                    // 3777
			if ( !jQuery.isArray( name ) ) {                                                                                  // 3778
                                                                                                                     // 3779
				// try the string as a key before any manipulation                                                               // 3780
				if ( name in thisCache ) {                                                                                       // 3781
					name = [ name ];                                                                                                // 3782
				} else {                                                                                                         // 3783
                                                                                                                     // 3784
					// split the camel cased version by spaces unless a key with the spaces exists                                  // 3785
					name = jQuery.camelCase( name );                                                                                // 3786
					if ( name in thisCache ) {                                                                                      // 3787
						name = [ name ];                                                                                               // 3788
					} else {                                                                                                        // 3789
						name = name.split(" ");                                                                                        // 3790
					}                                                                                                               // 3791
				}                                                                                                                // 3792
			} else {                                                                                                          // 3793
				// If "name" is an array of keys...                                                                              // 3794
				// When data is initially created, via ("key", "val") signature,                                                 // 3795
				// keys will be converted to camelCase.                                                                          // 3796
				// Since there is no way to tell _how_ a key was added, remove                                                   // 3797
				// both plain key and camelCase key. #12786                                                                      // 3798
				// This will only penalize the array argument path.                                                              // 3799
				name = name.concat( jQuery.map( name, jQuery.camelCase ) );                                                      // 3800
			}                                                                                                                 // 3801
                                                                                                                     // 3802
			i = name.length;                                                                                                  // 3803
			while ( i-- ) {                                                                                                   // 3804
				delete thisCache[ name[i] ];                                                                                     // 3805
			}                                                                                                                 // 3806
                                                                                                                     // 3807
			// If there is no data left in the cache, we want to continue                                                     // 3808
			// and let the cache object itself get destroyed                                                                  // 3809
			if ( pvt ? !isEmptyDataObject(thisCache) : !jQuery.isEmptyObject(thisCache) ) {                                   // 3810
				return;                                                                                                          // 3811
			}                                                                                                                 // 3812
		}                                                                                                                  // 3813
	}                                                                                                                   // 3814
                                                                                                                     // 3815
	// See jQuery.data for more information                                                                             // 3816
	if ( !pvt ) {                                                                                                       // 3817
		delete cache[ id ].data;                                                                                           // 3818
                                                                                                                     // 3819
		// Don't destroy the parent cache unless the internal data object                                                  // 3820
		// had been the only thing left in it                                                                              // 3821
		if ( !isEmptyDataObject( cache[ id ] ) ) {                                                                         // 3822
			return;                                                                                                           // 3823
		}                                                                                                                  // 3824
	}                                                                                                                   // 3825
                                                                                                                     // 3826
	// Destroy the cache                                                                                                // 3827
	if ( isNode ) {                                                                                                     // 3828
		jQuery.cleanData( [ elem ], true );                                                                                // 3829
                                                                                                                     // 3830
	// Use delete when supported for expandos or `cache` is not a window per isWindow (#10080)                          // 3831
	/* jshint eqeqeq: false */                                                                                          // 3832
	} else if ( support.deleteExpando || cache != cache.window ) {                                                      // 3833
		/* jshint eqeqeq: true */                                                                                          // 3834
		delete cache[ id ];                                                                                                // 3835
                                                                                                                     // 3836
	// When all else fails, null                                                                                        // 3837
	} else {                                                                                                            // 3838
		cache[ id ] = null;                                                                                                // 3839
	}                                                                                                                   // 3840
}                                                                                                                    // 3841
                                                                                                                     // 3842
jQuery.extend({                                                                                                      // 3843
	cache: {},                                                                                                          // 3844
                                                                                                                     // 3845
	// The following elements (space-suffixed to avoid Object.prototype collisions)                                     // 3846
	// throw uncatchable exceptions if you attempt to set expando properties                                            // 3847
	noData: {                                                                                                           // 3848
		"applet ": true,                                                                                                   // 3849
		"embed ": true,                                                                                                    // 3850
		// ...but Flash objects (which have this classid) *can* handle expandos                                            // 3851
		"object ": "clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"                                                            // 3852
	},                                                                                                                  // 3853
                                                                                                                     // 3854
	hasData: function( elem ) {                                                                                         // 3855
		elem = elem.nodeType ? jQuery.cache[ elem[jQuery.expando] ] : elem[ jQuery.expando ];                              // 3856
		return !!elem && !isEmptyDataObject( elem );                                                                       // 3857
	},                                                                                                                  // 3858
                                                                                                                     // 3859
	data: function( elem, name, data ) {                                                                                // 3860
		return internalData( elem, name, data );                                                                           // 3861
	},                                                                                                                  // 3862
                                                                                                                     // 3863
	removeData: function( elem, name ) {                                                                                // 3864
		return internalRemoveData( elem, name );                                                                           // 3865
	},                                                                                                                  // 3866
                                                                                                                     // 3867
	// For internal use only.                                                                                           // 3868
	_data: function( elem, name, data ) {                                                                               // 3869
		return internalData( elem, name, data, true );                                                                     // 3870
	},                                                                                                                  // 3871
                                                                                                                     // 3872
	_removeData: function( elem, name ) {                                                                               // 3873
		return internalRemoveData( elem, name, true );                                                                     // 3874
	}                                                                                                                   // 3875
});                                                                                                                  // 3876
                                                                                                                     // 3877
jQuery.fn.extend({                                                                                                   // 3878
	data: function( key, value ) {                                                                                      // 3879
		var i, name, data,                                                                                                 // 3880
			elem = this[0],                                                                                                   // 3881
			attrs = elem && elem.attributes;                                                                                  // 3882
                                                                                                                     // 3883
		// Special expections of .data basically thwart jQuery.access,                                                     // 3884
		// so implement the relevant behavior ourselves                                                                    // 3885
                                                                                                                     // 3886
		// Gets all values                                                                                                 // 3887
		if ( key === undefined ) {                                                                                         // 3888
			if ( this.length ) {                                                                                              // 3889
				data = jQuery.data( elem );                                                                                      // 3890
                                                                                                                     // 3891
				if ( elem.nodeType === 1 && !jQuery._data( elem, "parsedAttrs" ) ) {                                             // 3892
					i = attrs.length;                                                                                               // 3893
					while ( i-- ) {                                                                                                 // 3894
						name = attrs[i].name;                                                                                          // 3895
                                                                                                                     // 3896
						if ( name.indexOf("data-") === 0 ) {                                                                           // 3897
							name = jQuery.camelCase( name.slice(5) );                                                                     // 3898
                                                                                                                     // 3899
							dataAttr( elem, name, data[ name ] );                                                                         // 3900
						}                                                                                                              // 3901
					}                                                                                                               // 3902
					jQuery._data( elem, "parsedAttrs", true );                                                                      // 3903
				}                                                                                                                // 3904
			}                                                                                                                 // 3905
                                                                                                                     // 3906
			return data;                                                                                                      // 3907
		}                                                                                                                  // 3908
                                                                                                                     // 3909
		// Sets multiple values                                                                                            // 3910
		if ( typeof key === "object" ) {                                                                                   // 3911
			return this.each(function() {                                                                                     // 3912
				jQuery.data( this, key );                                                                                        // 3913
			});                                                                                                               // 3914
		}                                                                                                                  // 3915
                                                                                                                     // 3916
		return arguments.length > 1 ?                                                                                      // 3917
                                                                                                                     // 3918
			// Sets one value                                                                                                 // 3919
			this.each(function() {                                                                                            // 3920
				jQuery.data( this, key, value );                                                                                 // 3921
			}) :                                                                                                              // 3922
                                                                                                                     // 3923
			// Gets one value                                                                                                 // 3924
			// Try to fetch any internally stored data first                                                                  // 3925
			elem ? dataAttr( elem, key, jQuery.data( elem, key ) ) : undefined;                                               // 3926
	},                                                                                                                  // 3927
                                                                                                                     // 3928
	removeData: function( key ) {                                                                                       // 3929
		return this.each(function() {                                                                                      // 3930
			jQuery.removeData( this, key );                                                                                   // 3931
		});                                                                                                                // 3932
	}                                                                                                                   // 3933
});                                                                                                                  // 3934
                                                                                                                     // 3935
                                                                                                                     // 3936
jQuery.extend({                                                                                                      // 3937
	queue: function( elem, type, data ) {                                                                               // 3938
		var queue;                                                                                                         // 3939
                                                                                                                     // 3940
		if ( elem ) {                                                                                                      // 3941
			type = ( type || "fx" ) + "queue";                                                                                // 3942
			queue = jQuery._data( elem, type );                                                                               // 3943
                                                                                                                     // 3944
			// Speed up dequeue by getting out quickly if this is just a lookup                                               // 3945
			if ( data ) {                                                                                                     // 3946
				if ( !queue || jQuery.isArray(data) ) {                                                                          // 3947
					queue = jQuery._data( elem, type, jQuery.makeArray(data) );                                                     // 3948
				} else {                                                                                                         // 3949
					queue.push( data );                                                                                             // 3950
				}                                                                                                                // 3951
			}                                                                                                                 // 3952
			return queue || [];                                                                                               // 3953
		}                                                                                                                  // 3954
	},                                                                                                                  // 3955
                                                                                                                     // 3956
	dequeue: function( elem, type ) {                                                                                   // 3957
		type = type || "fx";                                                                                               // 3958
                                                                                                                     // 3959
		var queue = jQuery.queue( elem, type ),                                                                            // 3960
			startLength = queue.length,                                                                                       // 3961
			fn = queue.shift(),                                                                                               // 3962
			hooks = jQuery._queueHooks( elem, type ),                                                                         // 3963
			next = function() {                                                                                               // 3964
				jQuery.dequeue( elem, type );                                                                                    // 3965
			};                                                                                                                // 3966
                                                                                                                     // 3967
		// If the fx queue is dequeued, always remove the progress sentinel                                                // 3968
		if ( fn === "inprogress" ) {                                                                                       // 3969
			fn = queue.shift();                                                                                               // 3970
			startLength--;                                                                                                    // 3971
		}                                                                                                                  // 3972
                                                                                                                     // 3973
		if ( fn ) {                                                                                                        // 3974
                                                                                                                     // 3975
			// Add a progress sentinel to prevent the fx queue from being                                                     // 3976
			// automatically dequeued                                                                                         // 3977
			if ( type === "fx" ) {                                                                                            // 3978
				queue.unshift( "inprogress" );                                                                                   // 3979
			}                                                                                                                 // 3980
                                                                                                                     // 3981
			// clear up the last queue stop function                                                                          // 3982
			delete hooks.stop;                                                                                                // 3983
			fn.call( elem, next, hooks );                                                                                     // 3984
		}                                                                                                                  // 3985
                                                                                                                     // 3986
		if ( !startLength && hooks ) {                                                                                     // 3987
			hooks.empty.fire();                                                                                               // 3988
		}                                                                                                                  // 3989
	},                                                                                                                  // 3990
                                                                                                                     // 3991
	// not intended for public consumption - generates a queueHooks object, or returns the current one                  // 3992
	_queueHooks: function( elem, type ) {                                                                               // 3993
		var key = type + "queueHooks";                                                                                     // 3994
		return jQuery._data( elem, key ) || jQuery._data( elem, key, {                                                     // 3995
			empty: jQuery.Callbacks("once memory").add(function() {                                                           // 3996
				jQuery._removeData( elem, type + "queue" );                                                                      // 3997
				jQuery._removeData( elem, key );                                                                                 // 3998
			})                                                                                                                // 3999
		});                                                                                                                // 4000
	}                                                                                                                   // 4001
});                                                                                                                  // 4002
                                                                                                                     // 4003
jQuery.fn.extend({                                                                                                   // 4004
	queue: function( type, data ) {                                                                                     // 4005
		var setter = 2;                                                                                                    // 4006
                                                                                                                     // 4007
		if ( typeof type !== "string" ) {                                                                                  // 4008
			data = type;                                                                                                      // 4009
			type = "fx";                                                                                                      // 4010
			setter--;                                                                                                         // 4011
		}                                                                                                                  // 4012
                                                                                                                     // 4013
		if ( arguments.length < setter ) {                                                                                 // 4014
			return jQuery.queue( this[0], type );                                                                             // 4015
		}                                                                                                                  // 4016
                                                                                                                     // 4017
		return data === undefined ?                                                                                        // 4018
			this :                                                                                                            // 4019
			this.each(function() {                                                                                            // 4020
				var queue = jQuery.queue( this, type, data );                                                                    // 4021
                                                                                                                     // 4022
				// ensure a hooks for this queue                                                                                 // 4023
				jQuery._queueHooks( this, type );                                                                                // 4024
                                                                                                                     // 4025
				if ( type === "fx" && queue[0] !== "inprogress" ) {                                                              // 4026
					jQuery.dequeue( this, type );                                                                                   // 4027
				}                                                                                                                // 4028
			});                                                                                                               // 4029
	},                                                                                                                  // 4030
	dequeue: function( type ) {                                                                                         // 4031
		return this.each(function() {                                                                                      // 4032
			jQuery.dequeue( this, type );                                                                                     // 4033
		});                                                                                                                // 4034
	},                                                                                                                  // 4035
	clearQueue: function( type ) {                                                                                      // 4036
		return this.queue( type || "fx", [] );                                                                             // 4037
	},                                                                                                                  // 4038
	// Get a promise resolved when queues of a certain type                                                             // 4039
	// are emptied (fx is the type by default)                                                                          // 4040
	promise: function( type, obj ) {                                                                                    // 4041
		var tmp,                                                                                                           // 4042
			count = 1,                                                                                                        // 4043
			defer = jQuery.Deferred(),                                                                                        // 4044
			elements = this,                                                                                                  // 4045
			i = this.length,                                                                                                  // 4046
			resolve = function() {                                                                                            // 4047
				if ( !( --count ) ) {                                                                                            // 4048
					defer.resolveWith( elements, [ elements ] );                                                                    // 4049
				}                                                                                                                // 4050
			};                                                                                                                // 4051
                                                                                                                     // 4052
		if ( typeof type !== "string" ) {                                                                                  // 4053
			obj = type;                                                                                                       // 4054
			type = undefined;                                                                                                 // 4055
		}                                                                                                                  // 4056
		type = type || "fx";                                                                                               // 4057
                                                                                                                     // 4058
		while ( i-- ) {                                                                                                    // 4059
			tmp = jQuery._data( elements[ i ], type + "queueHooks" );                                                         // 4060
			if ( tmp && tmp.empty ) {                                                                                         // 4061
				count++;                                                                                                         // 4062
				tmp.empty.add( resolve );                                                                                        // 4063
			}                                                                                                                 // 4064
		}                                                                                                                  // 4065
		resolve();                                                                                                         // 4066
		return defer.promise( obj );                                                                                       // 4067
	}                                                                                                                   // 4068
});                                                                                                                  // 4069
var pnum = (/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/).source;                                                           // 4070
                                                                                                                     // 4071
var cssExpand = [ "Top", "Right", "Bottom", "Left" ];                                                                // 4072
                                                                                                                     // 4073
var isHidden = function( elem, el ) {                                                                                // 4074
		// isHidden might be called from jQuery#filter function;                                                           // 4075
		// in that case, element will be second argument                                                                   // 4076
		elem = el || elem;                                                                                                 // 4077
		return jQuery.css( elem, "display" ) === "none" || !jQuery.contains( elem.ownerDocument, elem );                   // 4078
	};                                                                                                                  // 4079
                                                                                                                     // 4080
                                                                                                                     // 4081
                                                                                                                     // 4082
// Multifunctional method to get and set values of a collection                                                      // 4083
// The value/s can optionally be executed if it's a function                                                         // 4084
var access = jQuery.access = function( elems, fn, key, value, chainable, emptyGet, raw ) {                           // 4085
	var i = 0,                                                                                                          // 4086
		length = elems.length,                                                                                             // 4087
		bulk = key == null;                                                                                                // 4088
                                                                                                                     // 4089
	// Sets many values                                                                                                 // 4090
	if ( jQuery.type( key ) === "object" ) {                                                                            // 4091
		chainable = true;                                                                                                  // 4092
		for ( i in key ) {                                                                                                 // 4093
			jQuery.access( elems, fn, i, key[i], true, emptyGet, raw );                                                       // 4094
		}                                                                                                                  // 4095
                                                                                                                     // 4096
	// Sets one value                                                                                                   // 4097
	} else if ( value !== undefined ) {                                                                                 // 4098
		chainable = true;                                                                                                  // 4099
                                                                                                                     // 4100
		if ( !jQuery.isFunction( value ) ) {                                                                               // 4101
			raw = true;                                                                                                       // 4102
		}                                                                                                                  // 4103
                                                                                                                     // 4104
		if ( bulk ) {                                                                                                      // 4105
			// Bulk operations run against the entire set                                                                     // 4106
			if ( raw ) {                                                                                                      // 4107
				fn.call( elems, value );                                                                                         // 4108
				fn = null;                                                                                                       // 4109
                                                                                                                     // 4110
			// ...except when executing function values                                                                       // 4111
			} else {                                                                                                          // 4112
				bulk = fn;                                                                                                       // 4113
				fn = function( elem, key, value ) {                                                                              // 4114
					return bulk.call( jQuery( elem ), value );                                                                      // 4115
				};                                                                                                               // 4116
			}                                                                                                                 // 4117
		}                                                                                                                  // 4118
                                                                                                                     // 4119
		if ( fn ) {                                                                                                        // 4120
			for ( ; i < length; i++ ) {                                                                                       // 4121
				fn( elems[i], key, raw ? value : value.call( elems[i], i, fn( elems[i], key ) ) );                               // 4122
			}                                                                                                                 // 4123
		}                                                                                                                  // 4124
	}                                                                                                                   // 4125
                                                                                                                     // 4126
	return chainable ?                                                                                                  // 4127
		elems :                                                                                                            // 4128
                                                                                                                     // 4129
		// Gets                                                                                                            // 4130
		bulk ?                                                                                                             // 4131
			fn.call( elems ) :                                                                                                // 4132
			length ? fn( elems[0], key ) : emptyGet;                                                                          // 4133
};                                                                                                                   // 4134
var rcheckableType = (/^(?:checkbox|radio)$/i);                                                                      // 4135
                                                                                                                     // 4136
                                                                                                                     // 4137
                                                                                                                     // 4138
(function() {                                                                                                        // 4139
	var fragment = document.createDocumentFragment(),                                                                   // 4140
		div = document.createElement("div"),                                                                               // 4141
		input = document.createElement("input");                                                                           // 4142
                                                                                                                     // 4143
	// Setup                                                                                                            // 4144
	div.setAttribute( "className", "t" );                                                                               // 4145
	div.innerHTML = "  <link/><table></table><a href='/a'>a</a>";                                                       // 4146
                                                                                                                     // 4147
	// IE strips leading whitespace when .innerHTML is used                                                             // 4148
	support.leadingWhitespace = div.firstChild.nodeType === 3;                                                          // 4149
                                                                                                                     // 4150
	// Make sure that tbody elements aren't automatically inserted                                                      // 4151
	// IE will insert them into empty tables                                                                            // 4152
	support.tbody = !div.getElementsByTagName( "tbody" ).length;                                                        // 4153
                                                                                                                     // 4154
	// Make sure that link elements get serialized correctly by innerHTML                                               // 4155
	// This requires a wrapper element in IE                                                                            // 4156
	support.htmlSerialize = !!div.getElementsByTagName( "link" ).length;                                                // 4157
                                                                                                                     // 4158
	// Makes sure cloning an html5 element does not cause problems                                                      // 4159
	// Where outerHTML is undefined, this still works                                                                   // 4160
	support.html5Clone =                                                                                                // 4161
		document.createElement( "nav" ).cloneNode( true ).outerHTML !== "<:nav></:nav>";                                   // 4162
                                                                                                                     // 4163
	// Check if a disconnected checkbox will retain its checked                                                         // 4164
	// value of true after appended to the DOM (IE6/7)                                                                  // 4165
	input.type = "checkbox";                                                                                            // 4166
	input.checked = true;                                                                                               // 4167
	fragment.appendChild( input );                                                                                      // 4168
	support.appendChecked = input.checked;                                                                              // 4169
                                                                                                                     // 4170
	// Make sure textarea (and checkbox) defaultValue is properly cloned                                                // 4171
	// Support: IE6-IE11+                                                                                               // 4172
	div.innerHTML = "<textarea>x</textarea>";                                                                           // 4173
	support.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;                                            // 4174
                                                                                                                     // 4175
	// #11217 - WebKit loses check when the name is after the checked attribute                                         // 4176
	fragment.appendChild( div );                                                                                        // 4177
	div.innerHTML = "<input type='radio' checked='checked' name='t'/>";                                                 // 4178
                                                                                                                     // 4179
	// Support: Safari 5.1, iOS 5.1, Android 4.x, Android 2.3                                                           // 4180
	// old WebKit doesn't clone checked state correctly in fragments                                                    // 4181
	support.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;                                     // 4182
                                                                                                                     // 4183
	// Support: IE<9                                                                                                    // 4184
	// Opera does not clone events (and typeof div.attachEvent === undefined).                                          // 4185
	// IE9-10 clones events bound via attachEvent, but they don't trigger with .click()                                 // 4186
	support.noCloneEvent = true;                                                                                        // 4187
	if ( div.attachEvent ) {                                                                                            // 4188
		div.attachEvent( "onclick", function() {                                                                           // 4189
			support.noCloneEvent = false;                                                                                     // 4190
		});                                                                                                                // 4191
                                                                                                                     // 4192
		div.cloneNode( true ).click();                                                                                     // 4193
	}                                                                                                                   // 4194
                                                                                                                     // 4195
	// Execute the test only if not already executed in another module.                                                 // 4196
	if (support.deleteExpando == null) {                                                                                // 4197
		// Support: IE<9                                                                                                   // 4198
		support.deleteExpando = true;                                                                                      // 4199
		try {                                                                                                              // 4200
			delete div.test;                                                                                                  // 4201
		} catch( e ) {                                                                                                     // 4202
			support.deleteExpando = false;                                                                                    // 4203
		}                                                                                                                  // 4204
	}                                                                                                                   // 4205
                                                                                                                     // 4206
	// Null elements to avoid leaks in IE.                                                                              // 4207
	fragment = div = input = null;                                                                                      // 4208
})();                                                                                                                // 4209
                                                                                                                     // 4210
                                                                                                                     // 4211
(function() {                                                                                                        // 4212
	var i, eventName,                                                                                                   // 4213
		div = document.createElement( "div" );                                                                             // 4214
                                                                                                                     // 4215
	// Support: IE<9 (lack submit/change bubble), Firefox 23+ (lack focusin event)                                      // 4216
	for ( i in { submit: true, change: true, focusin: true }) {                                                         // 4217
		eventName = "on" + i;                                                                                              // 4218
                                                                                                                     // 4219
		if ( !(support[ i + "Bubbles" ] = eventName in window) ) {                                                         // 4220
			// Beware of CSP restrictions (https://developer.mozilla.org/en/Security/CSP)                                     // 4221
			div.setAttribute( eventName, "t" );                                                                               // 4222
			support[ i + "Bubbles" ] = div.attributes[ eventName ].expando === false;                                         // 4223
		}                                                                                                                  // 4224
	}                                                                                                                   // 4225
                                                                                                                     // 4226
	// Null elements to avoid leaks in IE.                                                                              // 4227
	div = null;                                                                                                         // 4228
})();                                                                                                                // 4229
                                                                                                                     // 4230
                                                                                                                     // 4231
var rformElems = /^(?:input|select|textarea)$/i,                                                                     // 4232
	rkeyEvent = /^key/,                                                                                                 // 4233
	rmouseEvent = /^(?:mouse|contextmenu)|click/,                                                                       // 4234
	rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,                                                                    // 4235
	rtypenamespace = /^([^.]*)(?:\.(.+)|)$/;                                                                            // 4236
                                                                                                                     // 4237
function returnTrue() {                                                                                              // 4238
	return true;                                                                                                        // 4239
}                                                                                                                    // 4240
                                                                                                                     // 4241
function returnFalse() {                                                                                             // 4242
	return false;                                                                                                       // 4243
}                                                                                                                    // 4244
                                                                                                                     // 4245
function safeActiveElement() {                                                                                       // 4246
	try {                                                                                                               // 4247
		return document.activeElement;                                                                                     // 4248
	} catch ( err ) { }                                                                                                 // 4249
}                                                                                                                    // 4250
                                                                                                                     // 4251
/*                                                                                                                   // 4252
 * Helper functions for managing events -- not part of the public interface.                                         // 4253
 * Props to Dean Edwards' addEvent library for many of the ideas.                                                    // 4254
 */                                                                                                                  // 4255
jQuery.event = {                                                                                                     // 4256
                                                                                                                     // 4257
	global: {},                                                                                                         // 4258
                                                                                                                     // 4259
	add: function( elem, types, handler, data, selector ) {                                                             // 4260
		var tmp, events, t, handleObjIn,                                                                                   // 4261
			special, eventHandle, handleObj,                                                                                  // 4262
			handlers, type, namespaces, origType,                                                                             // 4263
			elemData = jQuery._data( elem );                                                                                  // 4264
                                                                                                                     // 4265
		// Don't attach events to noData or text/comment nodes (but allow plain objects)                                   // 4266
		if ( !elemData ) {                                                                                                 // 4267
			return;                                                                                                           // 4268
		}                                                                                                                  // 4269
                                                                                                                     // 4270
		// Caller can pass in an object of custom data in lieu of the handler                                              // 4271
		if ( handler.handler ) {                                                                                           // 4272
			handleObjIn = handler;                                                                                            // 4273
			handler = handleObjIn.handler;                                                                                    // 4274
			selector = handleObjIn.selector;                                                                                  // 4275
		}                                                                                                                  // 4276
                                                                                                                     // 4277
		// Make sure that the handler has a unique ID, used to find/remove it later                                        // 4278
		if ( !handler.guid ) {                                                                                             // 4279
			handler.guid = jQuery.guid++;                                                                                     // 4280
		}                                                                                                                  // 4281
                                                                                                                     // 4282
		// Init the element's event structure and main handler, if this is the first                                       // 4283
		if ( !(events = elemData.events) ) {                                                                               // 4284
			events = elemData.events = {};                                                                                    // 4285
		}                                                                                                                  // 4286
		if ( !(eventHandle = elemData.handle) ) {                                                                          // 4287
			eventHandle = elemData.handle = function( e ) {                                                                   // 4288
				// Discard the second event of a jQuery.event.trigger() and                                                      // 4289
				// when an event is called after a page has unloaded                                                             // 4290
				return typeof jQuery !== strundefined && (!e || jQuery.event.triggered !== e.type) ?                             // 4291
					jQuery.event.dispatch.apply( eventHandle.elem, arguments ) :                                                    // 4292
					undefined;                                                                                                      // 4293
			};                                                                                                                // 4294
			// Add elem as a property of the handle fn to prevent a memory leak with IE non-native events                     // 4295
			eventHandle.elem = elem;                                                                                          // 4296
		}                                                                                                                  // 4297
                                                                                                                     // 4298
		// Handle multiple events separated by a space                                                                     // 4299
		types = ( types || "" ).match( rnotwhite ) || [ "" ];                                                              // 4300
		t = types.length;                                                                                                  // 4301
		while ( t-- ) {                                                                                                    // 4302
			tmp = rtypenamespace.exec( types[t] ) || [];                                                                      // 4303
			type = origType = tmp[1];                                                                                         // 4304
			namespaces = ( tmp[2] || "" ).split( "." ).sort();                                                                // 4305
                                                                                                                     // 4306
			// There *must* be a type, no attaching namespace-only handlers                                                   // 4307
			if ( !type ) {                                                                                                    // 4308
				continue;                                                                                                        // 4309
			}                                                                                                                 // 4310
                                                                                                                     // 4311
			// If event changes its type, use the special event handlers for the changed type                                 // 4312
			special = jQuery.event.special[ type ] || {};                                                                     // 4313
                                                                                                                     // 4314
			// If selector defined, determine special event api type, otherwise given type                                    // 4315
			type = ( selector ? special.delegateType : special.bindType ) || type;                                            // 4316
                                                                                                                     // 4317
			// Update special based on newly reset type                                                                       // 4318
			special = jQuery.event.special[ type ] || {};                                                                     // 4319
                                                                                                                     // 4320
			// handleObj is passed to all event handlers                                                                      // 4321
			handleObj = jQuery.extend({                                                                                       // 4322
				type: type,                                                                                                      // 4323
				origType: origType,                                                                                              // 4324
				data: data,                                                                                                      // 4325
				handler: handler,                                                                                                // 4326
				guid: handler.guid,                                                                                              // 4327
				selector: selector,                                                                                              // 4328
				needsContext: selector && jQuery.expr.match.needsContext.test( selector ),                                       // 4329
				namespace: namespaces.join(".")                                                                                  // 4330
			}, handleObjIn );                                                                                                 // 4331
                                                                                                                     // 4332
			// Init the event handler queue if we're the first                                                                // 4333
			if ( !(handlers = events[ type ]) ) {                                                                             // 4334
				handlers = events[ type ] = [];                                                                                  // 4335
				handlers.delegateCount = 0;                                                                                      // 4336
                                                                                                                     // 4337
				// Only use addEventListener/attachEvent if the special events handler returns false                             // 4338
				if ( !special.setup || special.setup.call( elem, data, namespaces, eventHandle ) === false ) {                   // 4339
					// Bind the global event handler to the element                                                                 // 4340
					if ( elem.addEventListener ) {                                                                                  // 4341
						elem.addEventListener( type, eventHandle, false );                                                             // 4342
                                                                                                                     // 4343
					} else if ( elem.attachEvent ) {                                                                                // 4344
						elem.attachEvent( "on" + type, eventHandle );                                                                  // 4345
					}                                                                                                               // 4346
				}                                                                                                                // 4347
			}                                                                                                                 // 4348
                                                                                                                     // 4349
			if ( special.add ) {                                                                                              // 4350
				special.add.call( elem, handleObj );                                                                             // 4351
                                                                                                                     // 4352
				if ( !handleObj.handler.guid ) {                                                                                 // 4353
					handleObj.handler.guid = handler.guid;                                                                          // 4354
				}                                                                                                                // 4355
			}                                                                                                                 // 4356
                                                                                                                     // 4357
			// Add to the element's handler list, delegates in front                                                          // 4358
			if ( selector ) {                                                                                                 // 4359
				handlers.splice( handlers.delegateCount++, 0, handleObj );                                                       // 4360
			} else {                                                                                                          // 4361
				handlers.push( handleObj );                                                                                      // 4362
			}                                                                                                                 // 4363
                                                                                                                     // 4364
			// Keep track of which events have ever been used, for event optimization                                         // 4365
			jQuery.event.global[ type ] = true;                                                                               // 4366
		}                                                                                                                  // 4367
                                                                                                                     // 4368
		// Nullify elem to prevent memory leaks in IE                                                                      // 4369
		elem = null;                                                                                                       // 4370
	},                                                                                                                  // 4371
                                                                                                                     // 4372
	// Detach an event or set of events from an element                                                                 // 4373
	remove: function( elem, types, handler, selector, mappedTypes ) {                                                   // 4374
		var j, handleObj, tmp,                                                                                             // 4375
			origCount, t, events,                                                                                             // 4376
			special, handlers, type,                                                                                          // 4377
			namespaces, origType,                                                                                             // 4378
			elemData = jQuery.hasData( elem ) && jQuery._data( elem );                                                        // 4379
                                                                                                                     // 4380
		if ( !elemData || !(events = elemData.events) ) {                                                                  // 4381
			return;                                                                                                           // 4382
		}                                                                                                                  // 4383
                                                                                                                     // 4384
		// Once for each type.namespace in types; type may be omitted                                                      // 4385
		types = ( types || "" ).match( rnotwhite ) || [ "" ];                                                              // 4386
		t = types.length;                                                                                                  // 4387
		while ( t-- ) {                                                                                                    // 4388
			tmp = rtypenamespace.exec( types[t] ) || [];                                                                      // 4389
			type = origType = tmp[1];                                                                                         // 4390
			namespaces = ( tmp[2] || "" ).split( "." ).sort();                                                                // 4391
                                                                                                                     // 4392
			// Unbind all events (on this namespace, if provided) for the element                                             // 4393
			if ( !type ) {                                                                                                    // 4394
				for ( type in events ) {                                                                                         // 4395
					jQuery.event.remove( elem, type + types[ t ], handler, selector, true );                                        // 4396
				}                                                                                                                // 4397
				continue;                                                                                                        // 4398
			}                                                                                                                 // 4399
                                                                                                                     // 4400
			special = jQuery.event.special[ type ] || {};                                                                     // 4401
			type = ( selector ? special.delegateType : special.bindType ) || type;                                            // 4402
			handlers = events[ type ] || [];                                                                                  // 4403
			tmp = tmp[2] && new RegExp( "(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)" );                           // 4404
                                                                                                                     // 4405
			// Remove matching events                                                                                         // 4406
			origCount = j = handlers.length;                                                                                  // 4407
			while ( j-- ) {                                                                                                   // 4408
				handleObj = handlers[ j ];                                                                                       // 4409
                                                                                                                     // 4410
				if ( ( mappedTypes || origType === handleObj.origType ) &&                                                       // 4411
					( !handler || handler.guid === handleObj.guid ) &&                                                              // 4412
					( !tmp || tmp.test( handleObj.namespace ) ) &&                                                                  // 4413
					( !selector || selector === handleObj.selector || selector === "**" && handleObj.selector ) ) {                 // 4414
					handlers.splice( j, 1 );                                                                                        // 4415
                                                                                                                     // 4416
					if ( handleObj.selector ) {                                                                                     // 4417
						handlers.delegateCount--;                                                                                      // 4418
					}                                                                                                               // 4419
					if ( special.remove ) {                                                                                         // 4420
						special.remove.call( elem, handleObj );                                                                        // 4421
					}                                                                                                               // 4422
				}                                                                                                                // 4423
			}                                                                                                                 // 4424
                                                                                                                     // 4425
			// Remove generic event handler if we removed something and no more handlers exist                                // 4426
			// (avoids potential for endless recursion during removal of special event handlers)                              // 4427
			if ( origCount && !handlers.length ) {                                                                            // 4428
				if ( !special.teardown || special.teardown.call( elem, namespaces, elemData.handle ) === false ) {               // 4429
					jQuery.removeEvent( elem, type, elemData.handle );                                                              // 4430
				}                                                                                                                // 4431
                                                                                                                     // 4432
				delete events[ type ];                                                                                           // 4433
			}                                                                                                                 // 4434
		}                                                                                                                  // 4435
                                                                                                                     // 4436
		// Remove the expando if it's no longer used                                                                       // 4437
		if ( jQuery.isEmptyObject( events ) ) {                                                                            // 4438
			delete elemData.handle;                                                                                           // 4439
                                                                                                                     // 4440
			// removeData also checks for emptiness and clears the expando if empty                                           // 4441
			// so use it instead of delete                                                                                    // 4442
			jQuery._removeData( elem, "events" );                                                                             // 4443
		}                                                                                                                  // 4444
	},                                                                                                                  // 4445
                                                                                                                     // 4446
	trigger: function( event, data, elem, onlyHandlers ) {                                                              // 4447
		var handle, ontype, cur,                                                                                           // 4448
			bubbleType, special, tmp, i,                                                                                      // 4449
			eventPath = [ elem || document ],                                                                                 // 4450
			type = hasOwn.call( event, "type" ) ? event.type : event,                                                         // 4451
			namespaces = hasOwn.call( event, "namespace" ) ? event.namespace.split(".") : [];                                 // 4452
                                                                                                                     // 4453
		cur = tmp = elem = elem || document;                                                                               // 4454
                                                                                                                     // 4455
		// Don't do events on text and comment nodes                                                                       // 4456
		if ( elem.nodeType === 3 || elem.nodeType === 8 ) {                                                                // 4457
			return;                                                                                                           // 4458
		}                                                                                                                  // 4459
                                                                                                                     // 4460
		// focus/blur morphs to focusin/out; ensure we're not firing them right now                                        // 4461
		if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {                                                         // 4462
			return;                                                                                                           // 4463
		}                                                                                                                  // 4464
                                                                                                                     // 4465
		if ( type.indexOf(".") >= 0 ) {                                                                                    // 4466
			// Namespaced trigger; create a regexp to match event type in handle()                                            // 4467
			namespaces = type.split(".");                                                                                     // 4468
			type = namespaces.shift();                                                                                        // 4469
			namespaces.sort();                                                                                                // 4470
		}                                                                                                                  // 4471
		ontype = type.indexOf(":") < 0 && "on" + type;                                                                     // 4472
                                                                                                                     // 4473
		// Caller can pass in a jQuery.Event object, Object, or just an event type string                                  // 4474
		event = event[ jQuery.expando ] ?                                                                                  // 4475
			event :                                                                                                           // 4476
			new jQuery.Event( type, typeof event === "object" && event );                                                     // 4477
                                                                                                                     // 4478
		// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)                                          // 4479
		event.isTrigger = onlyHandlers ? 2 : 3;                                                                            // 4480
		event.namespace = namespaces.join(".");                                                                            // 4481
		event.namespace_re = event.namespace ?                                                                             // 4482
			new RegExp( "(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)" ) :                                          // 4483
			null;                                                                                                             // 4484
                                                                                                                     // 4485
		// Clean up the event in case it is being reused                                                                   // 4486
		event.result = undefined;                                                                                          // 4487
		if ( !event.target ) {                                                                                             // 4488
			event.target = elem;                                                                                              // 4489
		}                                                                                                                  // 4490
                                                                                                                     // 4491
		// Clone any incoming data and prepend the event, creating the handler arg list                                    // 4492
		data = data == null ?                                                                                              // 4493
			[ event ] :                                                                                                       // 4494
			jQuery.makeArray( data, [ event ] );                                                                              // 4495
                                                                                                                     // 4496
		// Allow special events to draw outside the lines                                                                  // 4497
		special = jQuery.event.special[ type ] || {};                                                                      // 4498
		if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {                         // 4499
			return;                                                                                                           // 4500
		}                                                                                                                  // 4501
                                                                                                                     // 4502
		// Determine event propagation path in advance, per W3C events spec (#9951)                                        // 4503
		// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)                             // 4504
		if ( !onlyHandlers && !special.noBubble && !jQuery.isWindow( elem ) ) {                                            // 4505
                                                                                                                     // 4506
			bubbleType = special.delegateType || type;                                                                        // 4507
			if ( !rfocusMorph.test( bubbleType + type ) ) {                                                                   // 4508
				cur = cur.parentNode;                                                                                            // 4509
			}                                                                                                                 // 4510
			for ( ; cur; cur = cur.parentNode ) {                                                                             // 4511
				eventPath.push( cur );                                                                                           // 4512
				tmp = cur;                                                                                                       // 4513
			}                                                                                                                 // 4514
                                                                                                                     // 4515
			// Only add window if we got to document (e.g., not plain obj or detached DOM)                                    // 4516
			if ( tmp === (elem.ownerDocument || document) ) {                                                                 // 4517
				eventPath.push( tmp.defaultView || tmp.parentWindow || window );                                                 // 4518
			}                                                                                                                 // 4519
		}                                                                                                                  // 4520
                                                                                                                     // 4521
		// Fire handlers on the event path                                                                                 // 4522
		i = 0;                                                                                                             // 4523
		while ( (cur = eventPath[i++]) && !event.isPropagationStopped() ) {                                                // 4524
                                                                                                                     // 4525
			event.type = i > 1 ?                                                                                              // 4526
				bubbleType :                                                                                                     // 4527
				special.bindType || type;                                                                                        // 4528
                                                                                                                     // 4529
			// jQuery handler                                                                                                 // 4530
			handle = ( jQuery._data( cur, "events" ) || {} )[ event.type ] && jQuery._data( cur, "handle" );                  // 4531
			if ( handle ) {                                                                                                   // 4532
				handle.apply( cur, data );                                                                                       // 4533
			}                                                                                                                 // 4534
                                                                                                                     // 4535
			// Native handler                                                                                                 // 4536
			handle = ontype && cur[ ontype ];                                                                                 // 4537
			if ( handle && handle.apply && jQuery.acceptData( cur ) ) {                                                       // 4538
				event.result = handle.apply( cur, data );                                                                        // 4539
				if ( event.result === false ) {                                                                                  // 4540
					event.preventDefault();                                                                                         // 4541
				}                                                                                                                // 4542
			}                                                                                                                 // 4543
		}                                                                                                                  // 4544
		event.type = type;                                                                                                 // 4545
                                                                                                                     // 4546
		// If nobody prevented the default action, do it now                                                               // 4547
		if ( !onlyHandlers && !event.isDefaultPrevented() ) {                                                              // 4548
                                                                                                                     // 4549
			if ( (!special._default || special._default.apply( eventPath.pop(), data ) === false) &&                          // 4550
				jQuery.acceptData( elem ) ) {                                                                                    // 4551
                                                                                                                     // 4552
				// Call a native DOM method on the target with the same name name as the event.                                  // 4553
				// Can't use an .isFunction() check here because IE6/7 fails that test.                                          // 4554
				// Don't do default actions on window, that's where global variables be (#6170)                                  // 4555
				if ( ontype && elem[ type ] && !jQuery.isWindow( elem ) ) {                                                      // 4556
                                                                                                                     // 4557
					// Don't re-trigger an onFOO event when we call its FOO() method                                                // 4558
					tmp = elem[ ontype ];                                                                                           // 4559
                                                                                                                     // 4560
					if ( tmp ) {                                                                                                    // 4561
						elem[ ontype ] = null;                                                                                         // 4562
					}                                                                                                               // 4563
                                                                                                                     // 4564
					// Prevent re-triggering of the same event, since we already bubbled it above                                   // 4565
					jQuery.event.triggered = type;                                                                                  // 4566
					try {                                                                                                           // 4567
						elem[ type ]();                                                                                                // 4568
					} catch ( e ) {                                                                                                 // 4569
						// IE<9 dies on focus/blur to hidden element (#1486,#12518)                                                    // 4570
						// only reproducible on winXP IE8 native, not IE9 in IE8 mode                                                  // 4571
					}                                                                                                               // 4572
					jQuery.event.triggered = undefined;                                                                             // 4573
                                                                                                                     // 4574
					if ( tmp ) {                                                                                                    // 4575
						elem[ ontype ] = tmp;                                                                                          // 4576
					}                                                                                                               // 4577
				}                                                                                                                // 4578
			}                                                                                                                 // 4579
		}                                                                                                                  // 4580
                                                                                                                     // 4581
		return event.result;                                                                                               // 4582
	},                                                                                                                  // 4583
                                                                                                                     // 4584
	dispatch: function( event ) {                                                                                       // 4585
                                                                                                                     // 4586
		// Make a writable jQuery.Event from the native event object                                                       // 4587
		event = jQuery.event.fix( event );                                                                                 // 4588
                                                                                                                     // 4589
		var i, ret, handleObj, matched, j,                                                                                 // 4590
			handlerQueue = [],                                                                                                // 4591
			args = slice.call( arguments ),                                                                                   // 4592
			handlers = ( jQuery._data( this, "events" ) || {} )[ event.type ] || [],                                          // 4593
			special = jQuery.event.special[ event.type ] || {};                                                               // 4594
                                                                                                                     // 4595
		// Use the fix-ed jQuery.Event rather than the (read-only) native event                                            // 4596
		args[0] = event;                                                                                                   // 4597
		event.delegateTarget = this;                                                                                       // 4598
                                                                                                                     // 4599
		// Call the preDispatch hook for the mapped type, and let it bail if desired                                       // 4600
		if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {                                  // 4601
			return;                                                                                                           // 4602
		}                                                                                                                  // 4603
                                                                                                                     // 4604
		// Determine handlers                                                                                              // 4605
		handlerQueue = jQuery.event.handlers.call( this, event, handlers );                                                // 4606
                                                                                                                     // 4607
		// Run delegates first; they may want to stop propagation beneath us                                               // 4608
		i = 0;                                                                                                             // 4609
		while ( (matched = handlerQueue[ i++ ]) && !event.isPropagationStopped() ) {                                       // 4610
			event.currentTarget = matched.elem;                                                                               // 4611
                                                                                                                     // 4612
			j = 0;                                                                                                            // 4613
			while ( (handleObj = matched.handlers[ j++ ]) && !event.isImmediatePropagationStopped() ) {                       // 4614
                                                                                                                     // 4615
				// Triggered event must either 1) have no namespace, or                                                          // 4616
				// 2) have namespace(s) a subset or equal to those in the bound event (both can have no namespace).              // 4617
				if ( !event.namespace_re || event.namespace_re.test( handleObj.namespace ) ) {                                   // 4618
                                                                                                                     // 4619
					event.handleObj = handleObj;                                                                                    // 4620
					event.data = handleObj.data;                                                                                    // 4621
                                                                                                                     // 4622
					ret = ( (jQuery.event.special[ handleObj.origType ] || {}).handle || handleObj.handler )                        // 4623
							.apply( matched.elem, args );                                                                                 // 4624
                                                                                                                     // 4625
					if ( ret !== undefined ) {                                                                                      // 4626
						if ( (event.result = ret) === false ) {                                                                        // 4627
							event.preventDefault();                                                                                       // 4628
							event.stopPropagation();                                                                                      // 4629
						}                                                                                                              // 4630
					}                                                                                                               // 4631
				}                                                                                                                // 4632
			}                                                                                                                 // 4633
		}                                                                                                                  // 4634
                                                                                                                     // 4635
		// Call the postDispatch hook for the mapped type                                                                  // 4636
		if ( special.postDispatch ) {                                                                                      // 4637
			special.postDispatch.call( this, event );                                                                         // 4638
		}                                                                                                                  // 4639
                                                                                                                     // 4640
		return event.result;                                                                                               // 4641
	},                                                                                                                  // 4642
                                                                                                                     // 4643
	handlers: function( event, handlers ) {                                                                             // 4644
		var sel, handleObj, matches, i,                                                                                    // 4645
			handlerQueue = [],                                                                                                // 4646
			delegateCount = handlers.delegateCount,                                                                           // 4647
			cur = event.target;                                                                                               // 4648
                                                                                                                     // 4649
		// Find delegate handlers                                                                                          // 4650
		// Black-hole SVG <use> instance trees (#13180)                                                                    // 4651
		// Avoid non-left-click bubbling in Firefox (#3861)                                                                // 4652
		if ( delegateCount && cur.nodeType && (!event.button || event.type !== "click") ) {                                // 4653
                                                                                                                     // 4654
			/* jshint eqeqeq: false */                                                                                        // 4655
			for ( ; cur != this; cur = cur.parentNode || this ) {                                                             // 4656
				/* jshint eqeqeq: true */                                                                                        // 4657
                                                                                                                     // 4658
				// Don't check non-elements (#13208)                                                                             // 4659
				// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)                                      // 4660
				if ( cur.nodeType === 1 && (cur.disabled !== true || event.type !== "click") ) {                                 // 4661
					matches = [];                                                                                                   // 4662
					for ( i = 0; i < delegateCount; i++ ) {                                                                         // 4663
						handleObj = handlers[ i ];                                                                                     // 4664
                                                                                                                     // 4665
						// Don't conflict with Object.prototype properties (#13203)                                                    // 4666
						sel = handleObj.selector + " ";                                                                                // 4667
                                                                                                                     // 4668
						if ( matches[ sel ] === undefined ) {                                                                          // 4669
							matches[ sel ] = handleObj.needsContext ?                                                                     // 4670
								jQuery( sel, this ).index( cur ) >= 0 :                                                                      // 4671
								jQuery.find( sel, this, null, [ cur ] ).length;                                                              // 4672
						}                                                                                                              // 4673
						if ( matches[ sel ] ) {                                                                                        // 4674
							matches.push( handleObj );                                                                                    // 4675
						}                                                                                                              // 4676
					}                                                                                                               // 4677
					if ( matches.length ) {                                                                                         // 4678
						handlerQueue.push({ elem: cur, handlers: matches });                                                           // 4679
					}                                                                                                               // 4680
				}                                                                                                                // 4681
			}                                                                                                                 // 4682
		}                                                                                                                  // 4683
                                                                                                                     // 4684
		// Add the remaining (directly-bound) handlers                                                                     // 4685
		if ( delegateCount < handlers.length ) {                                                                           // 4686
			handlerQueue.push({ elem: this, handlers: handlers.slice( delegateCount ) });                                     // 4687
		}                                                                                                                  // 4688
                                                                                                                     // 4689
		return handlerQueue;                                                                                               // 4690
	},                                                                                                                  // 4691
                                                                                                                     // 4692
	fix: function( event ) {                                                                                            // 4693
		if ( event[ jQuery.expando ] ) {                                                                                   // 4694
			return event;                                                                                                     // 4695
		}                                                                                                                  // 4696
                                                                                                                     // 4697
		// Create a writable copy of the event object and normalize some properties                                        // 4698
		var i, prop, copy,                                                                                                 // 4699
			type = event.type,                                                                                                // 4700
			originalEvent = event,                                                                                            // 4701
			fixHook = this.fixHooks[ type ];                                                                                  // 4702
                                                                                                                     // 4703
		if ( !fixHook ) {                                                                                                  // 4704
			this.fixHooks[ type ] = fixHook =                                                                                 // 4705
				rmouseEvent.test( type ) ? this.mouseHooks :                                                                     // 4706
				rkeyEvent.test( type ) ? this.keyHooks :                                                                         // 4707
				{};                                                                                                              // 4708
		}                                                                                                                  // 4709
		copy = fixHook.props ? this.props.concat( fixHook.props ) : this.props;                                            // 4710
                                                                                                                     // 4711
		event = new jQuery.Event( originalEvent );                                                                         // 4712
                                                                                                                     // 4713
		i = copy.length;                                                                                                   // 4714
		while ( i-- ) {                                                                                                    // 4715
			prop = copy[ i ];                                                                                                 // 4716
			event[ prop ] = originalEvent[ prop ];                                                                            // 4717
		}                                                                                                                  // 4718
                                                                                                                     // 4719
		// Support: IE<9                                                                                                   // 4720
		// Fix target property (#1925)                                                                                     // 4721
		if ( !event.target ) {                                                                                             // 4722
			event.target = originalEvent.srcElement || document;                                                              // 4723
		}                                                                                                                  // 4724
                                                                                                                     // 4725
		// Support: Chrome 23+, Safari?                                                                                    // 4726
		// Target should not be a text node (#504, #13143)                                                                 // 4727
		if ( event.target.nodeType === 3 ) {                                                                               // 4728
			event.target = event.target.parentNode;                                                                           // 4729
		}                                                                                                                  // 4730
                                                                                                                     // 4731
		// Support: IE<9                                                                                                   // 4732
		// For mouse/key events, metaKey==false if it's undefined (#3368, #11328)                                          // 4733
		event.metaKey = !!event.metaKey;                                                                                   // 4734
                                                                                                                     // 4735
		return fixHook.filter ? fixHook.filter( event, originalEvent ) : event;                                            // 4736
	},                                                                                                                  // 4737
                                                                                                                     // 4738
	// Includes some event props shared by KeyEvent and MouseEvent                                                      // 4739
	props: "altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),
                                                                                                                     // 4741
	fixHooks: {},                                                                                                       // 4742
                                                                                                                     // 4743
	keyHooks: {                                                                                                         // 4744
		props: "char charCode key keyCode".split(" "),                                                                     // 4745
		filter: function( event, original ) {                                                                              // 4746
                                                                                                                     // 4747
			// Add which for key events                                                                                       // 4748
			if ( event.which == null ) {                                                                                      // 4749
				event.which = original.charCode != null ? original.charCode : original.keyCode;                                  // 4750
			}                                                                                                                 // 4751
                                                                                                                     // 4752
			return event;                                                                                                     // 4753
		}                                                                                                                  // 4754
	},                                                                                                                  // 4755
                                                                                                                     // 4756
	mouseHooks: {                                                                                                       // 4757
		props: "button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement".split(" "),
		filter: function( event, original ) {                                                                              // 4759
			var body, eventDoc, doc,                                                                                          // 4760
				button = original.button,                                                                                        // 4761
				fromElement = original.fromElement;                                                                              // 4762
                                                                                                                     // 4763
			// Calculate pageX/Y if missing and clientX/Y available                                                           // 4764
			if ( event.pageX == null && original.clientX != null ) {                                                          // 4765
				eventDoc = event.target.ownerDocument || document;                                                               // 4766
				doc = eventDoc.documentElement;                                                                                  // 4767
				body = eventDoc.body;                                                                                            // 4768
                                                                                                                     // 4769
				event.pageX = original.clientX + ( doc && doc.scrollLeft || body && body.scrollLeft || 0 ) - ( doc && doc.clientLeft || body && body.clientLeft || 0 );
				event.pageY = original.clientY + ( doc && doc.scrollTop  || body && body.scrollTop  || 0 ) - ( doc && doc.clientTop  || body && body.clientTop  || 0 );
			}                                                                                                                 // 4772
                                                                                                                     // 4773
			// Add relatedTarget, if necessary                                                                                // 4774
			if ( !event.relatedTarget && fromElement ) {                                                                      // 4775
				event.relatedTarget = fromElement === event.target ? original.toElement : fromElement;                           // 4776
			}                                                                                                                 // 4777
                                                                                                                     // 4778
			// Add which for click: 1 === left; 2 === middle; 3 === right                                                     // 4779
			// Note: button is not normalized, so don't use it                                                                // 4780
			if ( !event.which && button !== undefined ) {                                                                     // 4781
				event.which = ( button & 1 ? 1 : ( button & 2 ? 3 : ( button & 4 ? 2 : 0 ) ) );                                  // 4782
			}                                                                                                                 // 4783
                                                                                                                     // 4784
			return event;                                                                                                     // 4785
		}                                                                                                                  // 4786
	},                                                                                                                  // 4787
                                                                                                                     // 4788
	special: {                                                                                                          // 4789
		load: {                                                                                                            // 4790
			// Prevent triggered image.load events from bubbling to window.load                                               // 4791
			noBubble: true                                                                                                    // 4792
		},                                                                                                                 // 4793
		focus: {                                                                                                           // 4794
			// Fire native event if possible so blur/focus sequence is correct                                                // 4795
			trigger: function() {                                                                                             // 4796
				if ( this !== safeActiveElement() && this.focus ) {                                                              // 4797
					try {                                                                                                           // 4798
						this.focus();                                                                                                  // 4799
						return false;                                                                                                  // 4800
					} catch ( e ) {                                                                                                 // 4801
						// Support: IE<9                                                                                               // 4802
						// If we error on focus to hidden element (#1486, #12518),                                                     // 4803
						// let .trigger() run the handlers                                                                             // 4804
					}                                                                                                               // 4805
				}                                                                                                                // 4806
			},                                                                                                                // 4807
			delegateType: "focusin"                                                                                           // 4808
		},                                                                                                                 // 4809
		blur: {                                                                                                            // 4810
			trigger: function() {                                                                                             // 4811
				if ( this === safeActiveElement() && this.blur ) {                                                               // 4812
					this.blur();                                                                                                    // 4813
					return false;                                                                                                   // 4814
				}                                                                                                                // 4815
			},                                                                                                                // 4816
			delegateType: "focusout"                                                                                          // 4817
		},                                                                                                                 // 4818
		click: {                                                                                                           // 4819
			// For checkbox, fire native event so checked state will be right                                                 // 4820
			trigger: function() {                                                                                             // 4821
				if ( jQuery.nodeName( this, "input" ) && this.type === "checkbox" && this.click ) {                              // 4822
					this.click();                                                                                                   // 4823
					return false;                                                                                                   // 4824
				}                                                                                                                // 4825
			},                                                                                                                // 4826
                                                                                                                     // 4827
			// For cross-browser consistency, don't fire native .click() on links                                             // 4828
			_default: function( event ) {                                                                                     // 4829
				return jQuery.nodeName( event.target, "a" );                                                                     // 4830
			}                                                                                                                 // 4831
		},                                                                                                                 // 4832
                                                                                                                     // 4833
		beforeunload: {                                                                                                    // 4834
			postDispatch: function( event ) {                                                                                 // 4835
                                                                                                                     // 4836
				// Even when returnValue equals to undefined Firefox will still show alert                                       // 4837
				if ( event.result !== undefined ) {                                                                              // 4838
					event.originalEvent.returnValue = event.result;                                                                 // 4839
				}                                                                                                                // 4840
			}                                                                                                                 // 4841
		}                                                                                                                  // 4842
	},                                                                                                                  // 4843
                                                                                                                     // 4844
	simulate: function( type, elem, event, bubble ) {                                                                   // 4845
		// Piggyback on a donor event to simulate a different one.                                                         // 4846
		// Fake originalEvent to avoid donor's stopPropagation, but if the                                                 // 4847
		// simulated event prevents default then we do the same on the donor.                                              // 4848
		var e = jQuery.extend(                                                                                             // 4849
			new jQuery.Event(),                                                                                               // 4850
			event,                                                                                                            // 4851
			{                                                                                                                 // 4852
				type: type,                                                                                                      // 4853
				isSimulated: true,                                                                                               // 4854
				originalEvent: {}                                                                                                // 4855
			}                                                                                                                 // 4856
		);                                                                                                                 // 4857
		if ( bubble ) {                                                                                                    // 4858
			jQuery.event.trigger( e, null, elem );                                                                            // 4859
		} else {                                                                                                           // 4860
			jQuery.event.dispatch.call( elem, e );                                                                            // 4861
		}                                                                                                                  // 4862
		if ( e.isDefaultPrevented() ) {                                                                                    // 4863
			event.preventDefault();                                                                                           // 4864
		}                                                                                                                  // 4865
	}                                                                                                                   // 4866
};                                                                                                                   // 4867
                                                                                                                     // 4868
jQuery.removeEvent = document.removeEventListener ?                                                                  // 4869
	function( elem, type, handle ) {                                                                                    // 4870
		if ( elem.removeEventListener ) {                                                                                  // 4871
			elem.removeEventListener( type, handle, false );                                                                  // 4872
		}                                                                                                                  // 4873
	} :                                                                                                                 // 4874
	function( elem, type, handle ) {                                                                                    // 4875
		var name = "on" + type;                                                                                            // 4876
                                                                                                                     // 4877
		if ( elem.detachEvent ) {                                                                                          // 4878
                                                                                                                     // 4879
			// #8545, #7054, preventing memory leaks for custom events in IE6-8                                               // 4880
			// detachEvent needed property on element, by name of that event, to properly expose it to GC                     // 4881
			if ( typeof elem[ name ] === strundefined ) {                                                                     // 4882
				elem[ name ] = null;                                                                                             // 4883
			}                                                                                                                 // 4884
                                                                                                                     // 4885
			elem.detachEvent( name, handle );                                                                                 // 4886
		}                                                                                                                  // 4887
	};                                                                                                                  // 4888
                                                                                                                     // 4889
jQuery.Event = function( src, props ) {                                                                              // 4890
	// Allow instantiation without the 'new' keyword                                                                    // 4891
	if ( !(this instanceof jQuery.Event) ) {                                                                            // 4892
		return new jQuery.Event( src, props );                                                                             // 4893
	}                                                                                                                   // 4894
                                                                                                                     // 4895
	// Event object                                                                                                     // 4896
	if ( src && src.type ) {                                                                                            // 4897
		this.originalEvent = src;                                                                                          // 4898
		this.type = src.type;                                                                                              // 4899
                                                                                                                     // 4900
		// Events bubbling up the document may have been marked as prevented                                               // 4901
		// by a handler lower down the tree; reflect the correct value.                                                    // 4902
		this.isDefaultPrevented = src.defaultPrevented ||                                                                  // 4903
				src.defaultPrevented === undefined && (                                                                          // 4904
				// Support: IE < 9                                                                                               // 4905
				src.returnValue === false ||                                                                                     // 4906
				// Support: Android < 4.0                                                                                        // 4907
				src.getPreventDefault && src.getPreventDefault() ) ?                                                             // 4908
			returnTrue :                                                                                                      // 4909
			returnFalse;                                                                                                      // 4910
                                                                                                                     // 4911
	// Event type                                                                                                       // 4912
	} else {                                                                                                            // 4913
		this.type = src;                                                                                                   // 4914
	}                                                                                                                   // 4915
                                                                                                                     // 4916
	// Put explicitly provided properties onto the event object                                                         // 4917
	if ( props ) {                                                                                                      // 4918
		jQuery.extend( this, props );                                                                                      // 4919
	}                                                                                                                   // 4920
                                                                                                                     // 4921
	// Create a timestamp if incoming event doesn't have one                                                            // 4922
	this.timeStamp = src && src.timeStamp || jQuery.now();                                                              // 4923
                                                                                                                     // 4924
	// Mark it as fixed                                                                                                 // 4925
	this[ jQuery.expando ] = true;                                                                                      // 4926
};                                                                                                                   // 4927
                                                                                                                     // 4928
// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding                              // 4929
// http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html                                 // 4930
jQuery.Event.prototype = {                                                                                           // 4931
	isDefaultPrevented: returnFalse,                                                                                    // 4932
	isPropagationStopped: returnFalse,                                                                                  // 4933
	isImmediatePropagationStopped: returnFalse,                                                                         // 4934
                                                                                                                     // 4935
	preventDefault: function() {                                                                                        // 4936
		var e = this.originalEvent;                                                                                        // 4937
                                                                                                                     // 4938
		this.isDefaultPrevented = returnTrue;                                                                              // 4939
		if ( !e ) {                                                                                                        // 4940
			return;                                                                                                           // 4941
		}                                                                                                                  // 4942
                                                                                                                     // 4943
		// If preventDefault exists, run it on the original event                                                          // 4944
		if ( e.preventDefault ) {                                                                                          // 4945
			e.preventDefault();                                                                                               // 4946
                                                                                                                     // 4947
		// Support: IE                                                                                                     // 4948
		// Otherwise set the returnValue property of the original event to false                                           // 4949
		} else {                                                                                                           // 4950
			e.returnValue = false;                                                                                            // 4951
		}                                                                                                                  // 4952
	},                                                                                                                  // 4953
	stopPropagation: function() {                                                                                       // 4954
		var e = this.originalEvent;                                                                                        // 4955
                                                                                                                     // 4956
		this.isPropagationStopped = returnTrue;                                                                            // 4957
		if ( !e ) {                                                                                                        // 4958
			return;                                                                                                           // 4959
		}                                                                                                                  // 4960
		// If stopPropagation exists, run it on the original event                                                         // 4961
		if ( e.stopPropagation ) {                                                                                         // 4962
			e.stopPropagation();                                                                                              // 4963
		}                                                                                                                  // 4964
                                                                                                                     // 4965
		// Support: IE                                                                                                     // 4966
		// Set the cancelBubble property of the original event to true                                                     // 4967
		e.cancelBubble = true;                                                                                             // 4968
	},                                                                                                                  // 4969
	stopImmediatePropagation: function() {                                                                              // 4970
		this.isImmediatePropagationStopped = returnTrue;                                                                   // 4971
		this.stopPropagation();                                                                                            // 4972
	}                                                                                                                   // 4973
};                                                                                                                   // 4974
                                                                                                                     // 4975
// Create mouseenter/leave events using mouseover/out and event-time checks                                          // 4976
jQuery.each({                                                                                                        // 4977
	mouseenter: "mouseover",                                                                                            // 4978
	mouseleave: "mouseout"                                                                                              // 4979
}, function( orig, fix ) {                                                                                           // 4980
	jQuery.event.special[ orig ] = {                                                                                    // 4981
		delegateType: fix,                                                                                                 // 4982
		bindType: fix,                                                                                                     // 4983
                                                                                                                     // 4984
		handle: function( event ) {                                                                                        // 4985
			var ret,                                                                                                          // 4986
				target = this,                                                                                                   // 4987
				related = event.relatedTarget,                                                                                   // 4988
				handleObj = event.handleObj;                                                                                     // 4989
                                                                                                                     // 4990
			// For mousenter/leave call the handler if related is outside the target.                                         // 4991
			// NB: No relatedTarget if the mouse left/entered the browser window                                              // 4992
			if ( !related || (related !== target && !jQuery.contains( target, related )) ) {                                  // 4993
				event.type = handleObj.origType;                                                                                 // 4994
				ret = handleObj.handler.apply( this, arguments );                                                                // 4995
				event.type = fix;                                                                                                // 4996
			}                                                                                                                 // 4997
			return ret;                                                                                                       // 4998
		}                                                                                                                  // 4999
	};                                                                                                                  // 5000
});                                                                                                                  // 5001
                                                                                                                     // 5002
// IE submit delegation                                                                                              // 5003
if ( !support.submitBubbles ) {                                                                                      // 5004
                                                                                                                     // 5005
	jQuery.event.special.submit = {                                                                                     // 5006
		setup: function() {                                                                                                // 5007
			// Only need this for delegated form submit events                                                                // 5008
			if ( jQuery.nodeName( this, "form" ) ) {                                                                          // 5009
				return false;                                                                                                    // 5010
			}                                                                                                                 // 5011
                                                                                                                     // 5012
			// Lazy-add a submit handler when a descendant form may potentially be submitted                                  // 5013
			jQuery.event.add( this, "click._submit keypress._submit", function( e ) {                                         // 5014
				// Node name check avoids a VML-related crash in IE (#9807)                                                      // 5015
				var elem = e.target,                                                                                             // 5016
					form = jQuery.nodeName( elem, "input" ) || jQuery.nodeName( elem, "button" ) ? elem.form : undefined;           // 5017
				if ( form && !jQuery._data( form, "submitBubbles" ) ) {                                                          // 5018
					jQuery.event.add( form, "submit._submit", function( event ) {                                                   // 5019
						event._submit_bubble = true;                                                                                   // 5020
					});                                                                                                             // 5021
					jQuery._data( form, "submitBubbles", true );                                                                    // 5022
				}                                                                                                                // 5023
			});                                                                                                               // 5024
			// return undefined since we don't need an event listener                                                         // 5025
		},                                                                                                                 // 5026
                                                                                                                     // 5027
		postDispatch: function( event ) {                                                                                  // 5028
			// If form was submitted by the user, bubble the event up the tree                                                // 5029
			if ( event._submit_bubble ) {                                                                                     // 5030
				delete event._submit_bubble;                                                                                     // 5031
				if ( this.parentNode && !event.isTrigger ) {                                                                     // 5032
					jQuery.event.simulate( "submit", this.parentNode, event, true );                                                // 5033
				}                                                                                                                // 5034
			}                                                                                                                 // 5035
		},                                                                                                                 // 5036
                                                                                                                     // 5037
		teardown: function() {                                                                                             // 5038
			// Only need this for delegated form submit events                                                                // 5039
			if ( jQuery.nodeName( this, "form" ) ) {                                                                          // 5040
				return false;                                                                                                    // 5041
			}                                                                                                                 // 5042
                                                                                                                     // 5043
			// Remove delegated handlers; cleanData eventually reaps submit handlers attached above                           // 5044
			jQuery.event.remove( this, "._submit" );                                                                          // 5045
		}                                                                                                                  // 5046
	};                                                                                                                  // 5047
}                                                                                                                    // 5048
                                                                                                                     // 5049
// IE change delegation and checkbox/radio fix                                                                       // 5050
if ( !support.changeBubbles ) {                                                                                      // 5051
                                                                                                                     // 5052
	jQuery.event.special.change = {                                                                                     // 5053
                                                                                                                     // 5054
		setup: function() {                                                                                                // 5055
                                                                                                                     // 5056
			if ( rformElems.test( this.nodeName ) ) {                                                                         // 5057
				// IE doesn't fire change on a check/radio until blur; trigger it on click                                       // 5058
				// after a propertychange. Eat the blur-change in special.change.handle.                                         // 5059
				// This still fires onchange a second time for check/radio after blur.                                           // 5060
				if ( this.type === "checkbox" || this.type === "radio" ) {                                                       // 5061
					jQuery.event.add( this, "propertychange._change", function( event ) {                                           // 5062
						if ( event.originalEvent.propertyName === "checked" ) {                                                        // 5063
							this._just_changed = true;                                                                                    // 5064
						}                                                                                                              // 5065
					});                                                                                                             // 5066
					jQuery.event.add( this, "click._change", function( event ) {                                                    // 5067
						if ( this._just_changed && !event.isTrigger ) {                                                                // 5068
							this._just_changed = false;                                                                                   // 5069
						}                                                                                                              // 5070
						// Allow triggered, simulated change events (#11500)                                                           // 5071
						jQuery.event.simulate( "change", this, event, true );                                                          // 5072
					});                                                                                                             // 5073
				}                                                                                                                // 5074
				return false;                                                                                                    // 5075
			}                                                                                                                 // 5076
			// Delegated event; lazy-add a change handler on descendant inputs                                                // 5077
			jQuery.event.add( this, "beforeactivate._change", function( e ) {                                                 // 5078
				var elem = e.target;                                                                                             // 5079
                                                                                                                     // 5080
				if ( rformElems.test( elem.nodeName ) && !jQuery._data( elem, "changeBubbles" ) ) {                              // 5081
					jQuery.event.add( elem, "change._change", function( event ) {                                                   // 5082
						if ( this.parentNode && !event.isSimulated && !event.isTrigger ) {                                             // 5083
							jQuery.event.simulate( "change", this.parentNode, event, true );                                              // 5084
						}                                                                                                              // 5085
					});                                                                                                             // 5086
					jQuery._data( elem, "changeBubbles", true );                                                                    // 5087
				}                                                                                                                // 5088
			});                                                                                                               // 5089
		},                                                                                                                 // 5090
                                                                                                                     // 5091
		handle: function( event ) {                                                                                        // 5092
			var elem = event.target;                                                                                          // 5093
                                                                                                                     // 5094
			// Swallow native change events from checkbox/radio, we already triggered them above                              // 5095
			if ( this !== elem || event.isSimulated || event.isTrigger || (elem.type !== "radio" && elem.type !== "checkbox") ) {
				return event.handleObj.handler.apply( this, arguments );                                                         // 5097
			}                                                                                                                 // 5098
		},                                                                                                                 // 5099
                                                                                                                     // 5100
		teardown: function() {                                                                                             // 5101
			jQuery.event.remove( this, "._change" );                                                                          // 5102
                                                                                                                     // 5103
			return !rformElems.test( this.nodeName );                                                                         // 5104
		}                                                                                                                  // 5105
	};                                                                                                                  // 5106
}                                                                                                                    // 5107
                                                                                                                     // 5108
// Create "bubbling" focus and blur events                                                                           // 5109
if ( !support.focusinBubbles ) {                                                                                     // 5110
	jQuery.each({ focus: "focusin", blur: "focusout" }, function( orig, fix ) {                                         // 5111
                                                                                                                     // 5112
		// Attach a single capturing handler on the document while someone wants focusin/focusout                          // 5113
		var handler = function( event ) {                                                                                  // 5114
				jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ), true );                                     // 5115
			};                                                                                                                // 5116
                                                                                                                     // 5117
		jQuery.event.special[ fix ] = {                                                                                    // 5118
			setup: function() {                                                                                               // 5119
				var doc = this.ownerDocument || this,                                                                            // 5120
					attaches = jQuery._data( doc, fix );                                                                            // 5121
                                                                                                                     // 5122
				if ( !attaches ) {                                                                                               // 5123
					doc.addEventListener( orig, handler, true );                                                                    // 5124
				}                                                                                                                // 5125
				jQuery._data( doc, fix, ( attaches || 0 ) + 1 );                                                                 // 5126
			},                                                                                                                // 5127
			teardown: function() {                                                                                            // 5128
				var doc = this.ownerDocument || this,                                                                            // 5129
					attaches = jQuery._data( doc, fix ) - 1;                                                                        // 5130
                                                                                                                     // 5131
				if ( !attaches ) {                                                                                               // 5132
					doc.removeEventListener( orig, handler, true );                                                                 // 5133
					jQuery._removeData( doc, fix );                                                                                 // 5134
				} else {                                                                                                         // 5135
					jQuery._data( doc, fix, attaches );                                                                             // 5136
				}                                                                                                                // 5137
			}                                                                                                                 // 5138
		};                                                                                                                 // 5139
	});                                                                                                                 // 5140
}                                                                                                                    // 5141
                                                                                                                     // 5142
jQuery.fn.extend({                                                                                                   // 5143
                                                                                                                     // 5144
	on: function( types, selector, data, fn, /*INTERNAL*/ one ) {                                                       // 5145
		var type, origFn;                                                                                                  // 5146
                                                                                                                     // 5147
		// Types can be a map of types/handlers                                                                            // 5148
		if ( typeof types === "object" ) {                                                                                 // 5149
			// ( types-Object, selector, data )                                                                               // 5150
			if ( typeof selector !== "string" ) {                                                                             // 5151
				// ( types-Object, data )                                                                                        // 5152
				data = data || selector;                                                                                         // 5153
				selector = undefined;                                                                                            // 5154
			}                                                                                                                 // 5155
			for ( type in types ) {                                                                                           // 5156
				this.on( type, selector, data, types[ type ], one );                                                             // 5157
			}                                                                                                                 // 5158
			return this;                                                                                                      // 5159
		}                                                                                                                  // 5160
                                                                                                                     // 5161
		if ( data == null && fn == null ) {                                                                                // 5162
			// ( types, fn )                                                                                                  // 5163
			fn = selector;                                                                                                    // 5164
			data = selector = undefined;                                                                                      // 5165
		} else if ( fn == null ) {                                                                                         // 5166
			if ( typeof selector === "string" ) {                                                                             // 5167
				// ( types, selector, fn )                                                                                       // 5168
				fn = data;                                                                                                       // 5169
				data = undefined;                                                                                                // 5170
			} else {                                                                                                          // 5171
				// ( types, data, fn )                                                                                           // 5172
				fn = data;                                                                                                       // 5173
				data = selector;                                                                                                 // 5174
				selector = undefined;                                                                                            // 5175
			}                                                                                                                 // 5176
		}                                                                                                                  // 5177
		if ( fn === false ) {                                                                                              // 5178
			fn = returnFalse;                                                                                                 // 5179
		} else if ( !fn ) {                                                                                                // 5180
			return this;                                                                                                      // 5181
		}                                                                                                                  // 5182
                                                                                                                     // 5183
		if ( one === 1 ) {                                                                                                 // 5184
			origFn = fn;                                                                                                      // 5185
			fn = function( event ) {                                                                                          // 5186
				// Can use an empty set, since event contains the info                                                           // 5187
				jQuery().off( event );                                                                                           // 5188
				return origFn.apply( this, arguments );                                                                          // 5189
			};                                                                                                                // 5190
			// Use same guid so caller can remove using origFn                                                                // 5191
			fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );                                                         // 5192
		}                                                                                                                  // 5193
		return this.each( function() {                                                                                     // 5194
			jQuery.event.add( this, types, fn, data, selector );                                                              // 5195
		});                                                                                                                // 5196
	},                                                                                                                  // 5197
	one: function( types, selector, data, fn ) {                                                                        // 5198
		return this.on( types, selector, data, fn, 1 );                                                                    // 5199
	},                                                                                                                  // 5200
	off: function( types, selector, fn ) {                                                                              // 5201
		var handleObj, type;                                                                                               // 5202
		if ( types && types.preventDefault && types.handleObj ) {                                                          // 5203
			// ( event )  dispatched jQuery.Event                                                                             // 5204
			handleObj = types.handleObj;                                                                                      // 5205
			jQuery( types.delegateTarget ).off(                                                                               // 5206
				handleObj.namespace ? handleObj.origType + "." + handleObj.namespace : handleObj.origType,                       // 5207
				handleObj.selector,                                                                                              // 5208
				handleObj.handler                                                                                                // 5209
			);                                                                                                                // 5210
			return this;                                                                                                      // 5211
		}                                                                                                                  // 5212
		if ( typeof types === "object" ) {                                                                                 // 5213
			// ( types-object [, selector] )                                                                                  // 5214
			for ( type in types ) {                                                                                           // 5215
				this.off( type, selector, types[ type ] );                                                                       // 5216
			}                                                                                                                 // 5217
			return this;                                                                                                      // 5218
		}                                                                                                                  // 5219
		if ( selector === false || typeof selector === "function" ) {                                                      // 5220
			// ( types [, fn] )                                                                                               // 5221
			fn = selector;                                                                                                    // 5222
			selector = undefined;                                                                                             // 5223
		}                                                                                                                  // 5224
		if ( fn === false ) {                                                                                              // 5225
			fn = returnFalse;                                                                                                 // 5226
		}                                                                                                                  // 5227
		return this.each(function() {                                                                                      // 5228
			jQuery.event.remove( this, types, fn, selector );                                                                 // 5229
		});                                                                                                                // 5230
	},                                                                                                                  // 5231
                                                                                                                     // 5232
	trigger: function( type, data ) {                                                                                   // 5233
		return this.each(function() {                                                                                      // 5234
			jQuery.event.trigger( type, data, this );                                                                         // 5235
		});                                                                                                                // 5236
	},                                                                                                                  // 5237
	triggerHandler: function( type, data ) {                                                                            // 5238
		var elem = this[0];                                                                                                // 5239
		if ( elem ) {                                                                                                      // 5240
			return jQuery.event.trigger( type, data, elem, true );                                                            // 5241
		}                                                                                                                  // 5242
	}                                                                                                                   // 5243
});                                                                                                                  // 5244
                                                                                                                     // 5245
                                                                                                                     // 5246
function createSafeFragment( document ) {                                                                            // 5247
	var list = nodeNames.split( "|" ),                                                                                  // 5248
		safeFrag = document.createDocumentFragment();                                                                      // 5249
                                                                                                                     // 5250
	if ( safeFrag.createElement ) {                                                                                     // 5251
		while ( list.length ) {                                                                                            // 5252
			safeFrag.createElement(                                                                                           // 5253
				list.pop()                                                                                                       // 5254
			);                                                                                                                // 5255
		}                                                                                                                  // 5256
	}                                                                                                                   // 5257
	return safeFrag;                                                                                                    // 5258
}                                                                                                                    // 5259
                                                                                                                     // 5260
var nodeNames = "abbr|article|aside|audio|bdi|canvas|data|datalist|details|figcaption|figure|footer|" +              // 5261
		"header|hgroup|mark|meter|nav|output|progress|section|summary|time|video",                                         // 5262
	rinlinejQuery = / jQuery\d+="(?:null|\d+)"/g,                                                                       // 5263
	rnoshimcache = new RegExp("<(?:" + nodeNames + ")[\\s/>]", "i"),                                                    // 5264
	rleadingWhitespace = /^\s+/,                                                                                        // 5265
	rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,                              // 5266
	rtagName = /<([\w:]+)/,                                                                                             // 5267
	rtbody = /<tbody/i,                                                                                                 // 5268
	rhtml = /<|&#?\w+;/,                                                                                                // 5269
	rnoInnerhtml = /<(?:script|style|link)/i,                                                                           // 5270
	// checked="checked" or checked                                                                                     // 5271
	rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,                                                                     // 5272
	rscriptType = /^$|\/(?:java|ecma)script/i,                                                                          // 5273
	rscriptTypeMasked = /^true\/(.*)/,                                                                                  // 5274
	rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,                                                          // 5275
                                                                                                                     // 5276
	// We have to close these tags to support XHTML (#13200)                                                            // 5277
	wrapMap = {                                                                                                         // 5278
		option: [ 1, "<select multiple='multiple'>", "</select>" ],                                                        // 5279
		legend: [ 1, "<fieldset>", "</fieldset>" ],                                                                        // 5280
		area: [ 1, "<map>", "</map>" ],                                                                                    // 5281
		param: [ 1, "<object>", "</object>" ],                                                                             // 5282
		thead: [ 1, "<table>", "</table>" ],                                                                               // 5283
		tr: [ 2, "<table><tbody>", "</tbody></table>" ],                                                                   // 5284
		col: [ 2, "<table><tbody></tbody><colgroup>", "</colgroup></table>" ],                                             // 5285
		td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],                                                          // 5286
                                                                                                                     // 5287
		// IE6-8 can't serialize link, script, style, or any html5 (NoScope) tags,                                         // 5288
		// unless wrapped in a div with non-breaking characters in front of it.                                            // 5289
		_default: support.htmlSerialize ? [ 0, "", "" ] : [ 1, "X<div>", "</div>"  ]                                       // 5290
	},                                                                                                                  // 5291
	safeFragment = createSafeFragment( document ),                                                                      // 5292
	fragmentDiv = safeFragment.appendChild( document.createElement("div") );                                            // 5293
                                                                                                                     // 5294
wrapMap.optgroup = wrapMap.option;                                                                                   // 5295
wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;                                  // 5296
wrapMap.th = wrapMap.td;                                                                                             // 5297
                                                                                                                     // 5298
function getAll( context, tag ) {                                                                                    // 5299
	var elems, elem,                                                                                                    // 5300
		i = 0,                                                                                                             // 5301
		found = typeof context.getElementsByTagName !== strundefined ? context.getElementsByTagName( tag || "*" ) :        // 5302
			typeof context.querySelectorAll !== strundefined ? context.querySelectorAll( tag || "*" ) :                       // 5303
			undefined;                                                                                                        // 5304
                                                                                                                     // 5305
	if ( !found ) {                                                                                                     // 5306
		for ( found = [], elems = context.childNodes || context; (elem = elems[i]) != null; i++ ) {                        // 5307
			if ( !tag || jQuery.nodeName( elem, tag ) ) {                                                                     // 5308
				found.push( elem );                                                                                              // 5309
			} else {                                                                                                          // 5310
				jQuery.merge( found, getAll( elem, tag ) );                                                                      // 5311
			}                                                                                                                 // 5312
		}                                                                                                                  // 5313
	}                                                                                                                   // 5314
                                                                                                                     // 5315
	return tag === undefined || tag && jQuery.nodeName( context, tag ) ?                                                // 5316
		jQuery.merge( [ context ], found ) :                                                                               // 5317
		found;                                                                                                             // 5318
}                                                                                                                    // 5319
                                                                                                                     // 5320
// Used in buildFragment, fixes the defaultChecked property                                                          // 5321
function fixDefaultChecked( elem ) {                                                                                 // 5322
	if ( rcheckableType.test( elem.type ) ) {                                                                           // 5323
		elem.defaultChecked = elem.checked;                                                                                // 5324
	}                                                                                                                   // 5325
}                                                                                                                    // 5326
                                                                                                                     // 5327
// Support: IE<8                                                                                                     // 5328
// Manipulating tables requires a tbody                                                                              // 5329
function manipulationTarget( elem, content ) {                                                                       // 5330
	return jQuery.nodeName( elem, "table" ) &&                                                                          // 5331
		jQuery.nodeName( content.nodeType !== 11 ? content : content.firstChild, "tr" ) ?                                  // 5332
                                                                                                                     // 5333
		elem.getElementsByTagName("tbody")[0] ||                                                                           // 5334
			elem.appendChild( elem.ownerDocument.createElement("tbody") ) :                                                   // 5335
		elem;                                                                                                              // 5336
}                                                                                                                    // 5337
                                                                                                                     // 5338
// Replace/restore the type attribute of script elements for safe DOM manipulation                                   // 5339
function disableScript( elem ) {                                                                                     // 5340
	elem.type = (jQuery.find.attr( elem, "type" ) !== null) + "/" + elem.type;                                          // 5341
	return elem;                                                                                                        // 5342
}                                                                                                                    // 5343
function restoreScript( elem ) {                                                                                     // 5344
	var match = rscriptTypeMasked.exec( elem.type );                                                                    // 5345
	if ( match ) {                                                                                                      // 5346
		elem.type = match[1];                                                                                              // 5347
	} else {                                                                                                            // 5348
		elem.removeAttribute("type");                                                                                      // 5349
	}                                                                                                                   // 5350
	return elem;                                                                                                        // 5351
}                                                                                                                    // 5352
                                                                                                                     // 5353
// Mark scripts as having already been evaluated                                                                     // 5354
function setGlobalEval( elems, refElements ) {                                                                       // 5355
	var elem,                                                                                                           // 5356
		i = 0;                                                                                                             // 5357
	for ( ; (elem = elems[i]) != null; i++ ) {                                                                          // 5358
		jQuery._data( elem, "globalEval", !refElements || jQuery._data( refElements[i], "globalEval" ) );                  // 5359
	}                                                                                                                   // 5360
}                                                                                                                    // 5361
                                                                                                                     // 5362
function cloneCopyEvent( src, dest ) {                                                                               // 5363
                                                                                                                     // 5364
	if ( dest.nodeType !== 1 || !jQuery.hasData( src ) ) {                                                              // 5365
		return;                                                                                                            // 5366
	}                                                                                                                   // 5367
                                                                                                                     // 5368
	var type, i, l,                                                                                                     // 5369
		oldData = jQuery._data( src ),                                                                                     // 5370
		curData = jQuery._data( dest, oldData ),                                                                           // 5371
		events = oldData.events;                                                                                           // 5372
                                                                                                                     // 5373
	if ( events ) {                                                                                                     // 5374
		delete curData.handle;                                                                                             // 5375
		curData.events = {};                                                                                               // 5376
                                                                                                                     // 5377
		for ( type in events ) {                                                                                           // 5378
			for ( i = 0, l = events[ type ].length; i < l; i++ ) {                                                            // 5379
				jQuery.event.add( dest, type, events[ type ][ i ] );                                                             // 5380
			}                                                                                                                 // 5381
		}                                                                                                                  // 5382
	}                                                                                                                   // 5383
                                                                                                                     // 5384
	// make the cloned public data object a copy from the original                                                      // 5385
	if ( curData.data ) {                                                                                               // 5386
		curData.data = jQuery.extend( {}, curData.data );                                                                  // 5387
	}                                                                                                                   // 5388
}                                                                                                                    // 5389
                                                                                                                     // 5390
function fixCloneNodeIssues( src, dest ) {                                                                           // 5391
	var nodeName, e, data;                                                                                              // 5392
                                                                                                                     // 5393
	// We do not need to do anything for non-Elements                                                                   // 5394
	if ( dest.nodeType !== 1 ) {                                                                                        // 5395
		return;                                                                                                            // 5396
	}                                                                                                                   // 5397
                                                                                                                     // 5398
	nodeName = dest.nodeName.toLowerCase();                                                                             // 5399
                                                                                                                     // 5400
	// IE6-8 copies events bound via attachEvent when using cloneNode.                                                  // 5401
	if ( !support.noCloneEvent && dest[ jQuery.expando ] ) {                                                            // 5402
		data = jQuery._data( dest );                                                                                       // 5403
                                                                                                                     // 5404
		for ( e in data.events ) {                                                                                         // 5405
			jQuery.removeEvent( dest, e, data.handle );                                                                       // 5406
		}                                                                                                                  // 5407
                                                                                                                     // 5408
		// Event data gets referenced instead of copied if the expando gets copied too                                     // 5409
		dest.removeAttribute( jQuery.expando );                                                                            // 5410
	}                                                                                                                   // 5411
                                                                                                                     // 5412
	// IE blanks contents when cloning scripts, and tries to evaluate newly-set text                                    // 5413
	if ( nodeName === "script" && dest.text !== src.text ) {                                                            // 5414
		disableScript( dest ).text = src.text;                                                                             // 5415
		restoreScript( dest );                                                                                             // 5416
                                                                                                                     // 5417
	// IE6-10 improperly clones children of object elements using classid.                                              // 5418
	// IE10 throws NoModificationAllowedError if parent is null, #12132.                                                // 5419
	} else if ( nodeName === "object" ) {                                                                               // 5420
		if ( dest.parentNode ) {                                                                                           // 5421
			dest.outerHTML = src.outerHTML;                                                                                   // 5422
		}                                                                                                                  // 5423
                                                                                                                     // 5424
		// This path appears unavoidable for IE9. When cloning an object                                                   // 5425
		// element in IE9, the outerHTML strategy above is not sufficient.                                                 // 5426
		// If the src has innerHTML and the destination does not,                                                          // 5427
		// copy the src.innerHTML into the dest.innerHTML. #10324                                                          // 5428
		if ( support.html5Clone && ( src.innerHTML && !jQuery.trim(dest.innerHTML) ) ) {                                   // 5429
			dest.innerHTML = src.innerHTML;                                                                                   // 5430
		}                                                                                                                  // 5431
                                                                                                                     // 5432
	} else if ( nodeName === "input" && rcheckableType.test( src.type ) ) {                                             // 5433
		// IE6-8 fails to persist the checked state of a cloned checkbox                                                   // 5434
		// or radio button. Worse, IE6-7 fail to give the cloned element                                                   // 5435
		// a checked appearance if the defaultChecked value isn't also set                                                 // 5436
                                                                                                                     // 5437
		dest.defaultChecked = dest.checked = src.checked;                                                                  // 5438
                                                                                                                     // 5439
		// IE6-7 get confused and end up setting the value of a cloned                                                     // 5440
		// checkbox/radio button to an empty string instead of "on"                                                        // 5441
		if ( dest.value !== src.value ) {                                                                                  // 5442
			dest.value = src.value;                                                                                           // 5443
		}                                                                                                                  // 5444
                                                                                                                     // 5445
	// IE6-8 fails to return the selected option to the default selected                                                // 5446
	// state when cloning options                                                                                       // 5447
	} else if ( nodeName === "option" ) {                                                                               // 5448
		dest.defaultSelected = dest.selected = src.defaultSelected;                                                        // 5449
                                                                                                                     // 5450
	// IE6-8 fails to set the defaultValue to the correct value when                                                    // 5451
	// cloning other types of input fields                                                                              // 5452
	} else if ( nodeName === "input" || nodeName === "textarea" ) {                                                     // 5453
		dest.defaultValue = src.defaultValue;                                                                              // 5454
	}                                                                                                                   // 5455
}                                                                                                                    // 5456
                                                                                                                     // 5457
jQuery.extend({                                                                                                      // 5458
	clone: function( elem, dataAndEvents, deepDataAndEvents ) {                                                         // 5459
		var destElements, node, clone, i, srcElements,                                                                     // 5460
			inPage = jQuery.contains( elem.ownerDocument, elem );                                                             // 5461
                                                                                                                     // 5462
		if ( support.html5Clone || jQuery.isXMLDoc(elem) || !rnoshimcache.test( "<" + elem.nodeName + ">" ) ) {            // 5463
			clone = elem.cloneNode( true );                                                                                   // 5464
                                                                                                                     // 5465
		// IE<=8 does not properly clone detached, unknown element nodes                                                   // 5466
		} else {                                                                                                           // 5467
			fragmentDiv.innerHTML = elem.outerHTML;                                                                           // 5468
			fragmentDiv.removeChild( clone = fragmentDiv.firstChild );                                                        // 5469
		}                                                                                                                  // 5470
                                                                                                                     // 5471
		if ( (!support.noCloneEvent || !support.noCloneChecked) &&                                                         // 5472
				(elem.nodeType === 1 || elem.nodeType === 11) && !jQuery.isXMLDoc(elem) ) {                                      // 5473
                                                                                                                     // 5474
			// We eschew Sizzle here for performance reasons: http://jsperf.com/getall-vs-sizzle/2                            // 5475
			destElements = getAll( clone );                                                                                   // 5476
			srcElements = getAll( elem );                                                                                     // 5477
                                                                                                                     // 5478
			// Fix all IE cloning issues                                                                                      // 5479
			for ( i = 0; (node = srcElements[i]) != null; ++i ) {                                                             // 5480
				// Ensure that the destination node is not null; Fixes #9587                                                     // 5481
				if ( destElements[i] ) {                                                                                         // 5482
					fixCloneNodeIssues( node, destElements[i] );                                                                    // 5483
				}                                                                                                                // 5484
			}                                                                                                                 // 5485
		}                                                                                                                  // 5486
                                                                                                                     // 5487
		// Copy the events from the original to the clone                                                                  // 5488
		if ( dataAndEvents ) {                                                                                             // 5489
			if ( deepDataAndEvents ) {                                                                                        // 5490
				srcElements = srcElements || getAll( elem );                                                                     // 5491
				destElements = destElements || getAll( clone );                                                                  // 5492
                                                                                                                     // 5493
				for ( i = 0; (node = srcElements[i]) != null; i++ ) {                                                            // 5494
					cloneCopyEvent( node, destElements[i] );                                                                        // 5495
				}                                                                                                                // 5496
			} else {                                                                                                          // 5497
				cloneCopyEvent( elem, clone );                                                                                   // 5498
			}                                                                                                                 // 5499
		}                                                                                                                  // 5500
                                                                                                                     // 5501
		// Preserve script evaluation history                                                                              // 5502
		destElements = getAll( clone, "script" );                                                                          // 5503
		if ( destElements.length > 0 ) {                                                                                   // 5504
			setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );                                               // 5505
		}                                                                                                                  // 5506
                                                                                                                     // 5507
		destElements = srcElements = node = null;                                                                          // 5508
                                                                                                                     // 5509
		// Return the cloned set                                                                                           // 5510
		return clone;                                                                                                      // 5511
	},                                                                                                                  // 5512
                                                                                                                     // 5513
	buildFragment: function( elems, context, scripts, selection ) {                                                     // 5514
		var j, elem, contains,                                                                                             // 5515
			tmp, tag, tbody, wrap,                                                                                            // 5516
			l = elems.length,                                                                                                 // 5517
                                                                                                                     // 5518
			// Ensure a safe fragment                                                                                         // 5519
			safe = createSafeFragment( context ),                                                                             // 5520
                                                                                                                     // 5521
			nodes = [],                                                                                                       // 5522
			i = 0;                                                                                                            // 5523
                                                                                                                     // 5524
		for ( ; i < l; i++ ) {                                                                                             // 5525
			elem = elems[ i ];                                                                                                // 5526
                                                                                                                     // 5527
			if ( elem || elem === 0 ) {                                                                                       // 5528
                                                                                                                     // 5529
				// Add nodes directly                                                                                            // 5530
				if ( jQuery.type( elem ) === "object" ) {                                                                        // 5531
					jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );                                                         // 5532
                                                                                                                     // 5533
				// Convert non-html into a text node                                                                             // 5534
				} else if ( !rhtml.test( elem ) ) {                                                                              // 5535
					nodes.push( context.createTextNode( elem ) );                                                                   // 5536
                                                                                                                     // 5537
				// Convert html into DOM nodes                                                                                   // 5538
				} else {                                                                                                         // 5539
					tmp = tmp || safe.appendChild( context.createElement("div") );                                                  // 5540
                                                                                                                     // 5541
					// Deserialize a standard representation                                                                        // 5542
					tag = (rtagName.exec( elem ) || [ "", "" ])[ 1 ].toLowerCase();                                                 // 5543
					wrap = wrapMap[ tag ] || wrapMap._default;                                                                      // 5544
                                                                                                                     // 5545
					tmp.innerHTML = wrap[1] + elem.replace( rxhtmlTag, "<$1></$2>" ) + wrap[2];                                     // 5546
                                                                                                                     // 5547
					// Descend through wrappers to the right content                                                                // 5548
					j = wrap[0];                                                                                                    // 5549
					while ( j-- ) {                                                                                                 // 5550
						tmp = tmp.lastChild;                                                                                           // 5551
					}                                                                                                               // 5552
                                                                                                                     // 5553
					// Manually add leading whitespace removed by IE                                                                // 5554
					if ( !support.leadingWhitespace && rleadingWhitespace.test( elem ) ) {                                          // 5555
						nodes.push( context.createTextNode( rleadingWhitespace.exec( elem )[0] ) );                                    // 5556
					}                                                                                                               // 5557
                                                                                                                     // 5558
					// Remove IE's autoinserted <tbody> from table fragments                                                        // 5559
					if ( !support.tbody ) {                                                                                         // 5560
                                                                                                                     // 5561
						// String was a <table>, *may* have spurious <tbody>                                                           // 5562
						elem = tag === "table" && !rtbody.test( elem ) ?                                                               // 5563
							tmp.firstChild :                                                                                              // 5564
                                                                                                                     // 5565
							// String was a bare <thead> or <tfoot>                                                                       // 5566
							wrap[1] === "<table>" && !rtbody.test( elem ) ?                                                               // 5567
								tmp :                                                                                                        // 5568
								0;                                                                                                           // 5569
                                                                                                                     // 5570
						j = elem && elem.childNodes.length;                                                                            // 5571
						while ( j-- ) {                                                                                                // 5572
							if ( jQuery.nodeName( (tbody = elem.childNodes[j]), "tbody" ) && !tbody.childNodes.length ) {                 // 5573
								elem.removeChild( tbody );                                                                                   // 5574
							}                                                                                                             // 5575
						}                                                                                                              // 5576
					}                                                                                                               // 5577
                                                                                                                     // 5578
					jQuery.merge( nodes, tmp.childNodes );                                                                          // 5579
                                                                                                                     // 5580
					// Fix #12392 for WebKit and IE > 9                                                                             // 5581
					tmp.textContent = "";                                                                                           // 5582
                                                                                                                     // 5583
					// Fix #12392 for oldIE                                                                                         // 5584
					while ( tmp.firstChild ) {                                                                                      // 5585
						tmp.removeChild( tmp.firstChild );                                                                             // 5586
					}                                                                                                               // 5587
                                                                                                                     // 5588
					// Remember the top-level container for proper cleanup                                                          // 5589
					tmp = safe.lastChild;                                                                                           // 5590
				}                                                                                                                // 5591
			}                                                                                                                 // 5592
		}                                                                                                                  // 5593
                                                                                                                     // 5594
		// Fix #11356: Clear elements from fragment                                                                        // 5595
		if ( tmp ) {                                                                                                       // 5596
			safe.removeChild( tmp );                                                                                          // 5597
		}                                                                                                                  // 5598
                                                                                                                     // 5599
		// Reset defaultChecked for any radios and checkboxes                                                              // 5600
		// about to be appended to the DOM in IE 6/7 (#8060)                                                               // 5601
		if ( !support.appendChecked ) {                                                                                    // 5602
			jQuery.grep( getAll( nodes, "input" ), fixDefaultChecked );                                                       // 5603
		}                                                                                                                  // 5604
                                                                                                                     // 5605
		i = 0;                                                                                                             // 5606
		while ( (elem = nodes[ i++ ]) ) {                                                                                  // 5607
                                                                                                                     // 5608
			// #4087 - If origin and destination elements are the same, and this is                                           // 5609
			// that element, do not do anything                                                                               // 5610
			if ( selection && jQuery.inArray( elem, selection ) !== -1 ) {                                                    // 5611
				continue;                                                                                                        // 5612
			}                                                                                                                 // 5613
                                                                                                                     // 5614
			contains = jQuery.contains( elem.ownerDocument, elem );                                                           // 5615
                                                                                                                     // 5616
			// Append to fragment                                                                                             // 5617
			tmp = getAll( safe.appendChild( elem ), "script" );                                                               // 5618
                                                                                                                     // 5619
			// Preserve script evaluation history                                                                             // 5620
			if ( contains ) {                                                                                                 // 5621
				setGlobalEval( tmp );                                                                                            // 5622
			}                                                                                                                 // 5623
                                                                                                                     // 5624
			// Capture executables                                                                                            // 5625
			if ( scripts ) {                                                                                                  // 5626
				j = 0;                                                                                                           // 5627
				while ( (elem = tmp[ j++ ]) ) {                                                                                  // 5628
					if ( rscriptType.test( elem.type || "" ) ) {                                                                    // 5629
						scripts.push( elem );                                                                                          // 5630
					}                                                                                                               // 5631
				}                                                                                                                // 5632
			}                                                                                                                 // 5633
		}                                                                                                                  // 5634
                                                                                                                     // 5635
		tmp = null;                                                                                                        // 5636
                                                                                                                     // 5637
		return safe;                                                                                                       // 5638
	},                                                                                                                  // 5639
                                                                                                                     // 5640
	cleanData: function( elems, /* internal */ acceptData ) {                                                           // 5641
		var elem, type, id, data,                                                                                          // 5642
			i = 0,                                                                                                            // 5643
			internalKey = jQuery.expando,                                                                                     // 5644
			cache = jQuery.cache,                                                                                             // 5645
			deleteExpando = support.deleteExpando,                                                                            // 5646
			special = jQuery.event.special;                                                                                   // 5647
                                                                                                                     // 5648
		for ( ; (elem = elems[i]) != null; i++ ) {                                                                         // 5649
			if ( acceptData || jQuery.acceptData( elem ) ) {                                                                  // 5650
                                                                                                                     // 5651
				id = elem[ internalKey ];                                                                                        // 5652
				data = id && cache[ id ];                                                                                        // 5653
                                                                                                                     // 5654
				if ( data ) {                                                                                                    // 5655
					if ( data.events ) {                                                                                            // 5656
						for ( type in data.events ) {                                                                                  // 5657
							if ( special[ type ] ) {                                                                                      // 5658
								jQuery.event.remove( elem, type );                                                                           // 5659
                                                                                                                     // 5660
							// This is a shortcut to avoid jQuery.event.remove's overhead                                                 // 5661
							} else {                                                                                                      // 5662
								jQuery.removeEvent( elem, type, data.handle );                                                               // 5663
							}                                                                                                             // 5664
						}                                                                                                              // 5665
					}                                                                                                               // 5666
                                                                                                                     // 5667
					// Remove cache only if it was not already removed by jQuery.event.remove                                       // 5668
					if ( cache[ id ] ) {                                                                                            // 5669
                                                                                                                     // 5670
						delete cache[ id ];                                                                                            // 5671
                                                                                                                     // 5672
						// IE does not allow us to delete expando properties from nodes,                                               // 5673
						// nor does it have a removeAttribute function on Document nodes;                                              // 5674
						// we must handle all of these cases                                                                           // 5675
						if ( deleteExpando ) {                                                                                         // 5676
							delete elem[ internalKey ];                                                                                   // 5677
                                                                                                                     // 5678
						} else if ( typeof elem.removeAttribute !== strundefined ) {                                                   // 5679
							elem.removeAttribute( internalKey );                                                                          // 5680
                                                                                                                     // 5681
						} else {                                                                                                       // 5682
							elem[ internalKey ] = null;                                                                                   // 5683
						}                                                                                                              // 5684
                                                                                                                     // 5685
						deletedIds.push( id );                                                                                         // 5686
					}                                                                                                               // 5687
				}                                                                                                                // 5688
			}                                                                                                                 // 5689
		}                                                                                                                  // 5690
	}                                                                                                                   // 5691
});                                                                                                                  // 5692
                                                                                                                     // 5693
jQuery.fn.extend({                                                                                                   // 5694
	text: function( value ) {                                                                                           // 5695
		return access( this, function( value ) {                                                                           // 5696
			return value === undefined ?                                                                                      // 5697
				jQuery.text( this ) :                                                                                            // 5698
				this.empty().append( ( this[0] && this[0].ownerDocument || document ).createTextNode( value ) );                 // 5699
		}, null, value, arguments.length );                                                                                // 5700
	},                                                                                                                  // 5701
                                                                                                                     // 5702
	append: function() {                                                                                                // 5703
		return this.domManip( arguments, function( elem ) {                                                                // 5704
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {                                       // 5705
				var target = manipulationTarget( this, elem );                                                                   // 5706
				target.appendChild( elem );                                                                                      // 5707
			}                                                                                                                 // 5708
		});                                                                                                                // 5709
	},                                                                                                                  // 5710
                                                                                                                     // 5711
	prepend: function() {                                                                                               // 5712
		return this.domManip( arguments, function( elem ) {                                                                // 5713
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {                                       // 5714
				var target = manipulationTarget( this, elem );                                                                   // 5715
				target.insertBefore( elem, target.firstChild );                                                                  // 5716
			}                                                                                                                 // 5717
		});                                                                                                                // 5718
	},                                                                                                                  // 5719
                                                                                                                     // 5720
	before: function() {                                                                                                // 5721
		return this.domManip( arguments, function( elem ) {                                                                // 5722
			if ( this.parentNode ) {                                                                                          // 5723
				this.parentNode.insertBefore( elem, this );                                                                      // 5724
			}                                                                                                                 // 5725
		});                                                                                                                // 5726
	},                                                                                                                  // 5727
                                                                                                                     // 5728
	after: function() {                                                                                                 // 5729
		return this.domManip( arguments, function( elem ) {                                                                // 5730
			if ( this.parentNode ) {                                                                                          // 5731
				this.parentNode.insertBefore( elem, this.nextSibling );                                                          // 5732
			}                                                                                                                 // 5733
		});                                                                                                                // 5734
	},                                                                                                                  // 5735
                                                                                                                     // 5736
	remove: function( selector, keepData /* Internal Use Only */ ) {                                                    // 5737
		var elem,                                                                                                          // 5738
			elems = selector ? jQuery.filter( selector, this ) : this,                                                        // 5739
			i = 0;                                                                                                            // 5740
                                                                                                                     // 5741
		for ( ; (elem = elems[i]) != null; i++ ) {                                                                         // 5742
                                                                                                                     // 5743
			if ( !keepData && elem.nodeType === 1 ) {                                                                         // 5744
				jQuery.cleanData( getAll( elem ) );                                                                              // 5745
			}                                                                                                                 // 5746
                                                                                                                     // 5747
			if ( elem.parentNode ) {                                                                                          // 5748
				if ( keepData && jQuery.contains( elem.ownerDocument, elem ) ) {                                                 // 5749
					setGlobalEval( getAll( elem, "script" ) );                                                                      // 5750
				}                                                                                                                // 5751
				elem.parentNode.removeChild( elem );                                                                             // 5752
			}                                                                                                                 // 5753
		}                                                                                                                  // 5754
                                                                                                                     // 5755
		return this;                                                                                                       // 5756
	},                                                                                                                  // 5757
                                                                                                                     // 5758
	empty: function() {                                                                                                 // 5759
		var elem,                                                                                                          // 5760
			i = 0;                                                                                                            // 5761
                                                                                                                     // 5762
		for ( ; (elem = this[i]) != null; i++ ) {                                                                          // 5763
			// Remove element nodes and prevent memory leaks                                                                  // 5764
			if ( elem.nodeType === 1 ) {                                                                                      // 5765
				jQuery.cleanData( getAll( elem, false ) );                                                                       // 5766
			}                                                                                                                 // 5767
                                                                                                                     // 5768
			// Remove any remaining nodes                                                                                     // 5769
			while ( elem.firstChild ) {                                                                                       // 5770
				elem.removeChild( elem.firstChild );                                                                             // 5771
			}                                                                                                                 // 5772
                                                                                                                     // 5773
			// If this is a select, ensure that it displays empty (#12336)                                                    // 5774
			// Support: IE<9                                                                                                  // 5775
			if ( elem.options && jQuery.nodeName( elem, "select" ) ) {                                                        // 5776
				elem.options.length = 0;                                                                                         // 5777
			}                                                                                                                 // 5778
		}                                                                                                                  // 5779
                                                                                                                     // 5780
		return this;                                                                                                       // 5781
	},                                                                                                                  // 5782
                                                                                                                     // 5783
	clone: function( dataAndEvents, deepDataAndEvents ) {                                                               // 5784
		dataAndEvents = dataAndEvents == null ? false : dataAndEvents;                                                     // 5785
		deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;                                 // 5786
                                                                                                                     // 5787
		return this.map(function() {                                                                                       // 5788
			return jQuery.clone( this, dataAndEvents, deepDataAndEvents );                                                    // 5789
		});                                                                                                                // 5790
	},                                                                                                                  // 5791
                                                                                                                     // 5792
	html: function( value ) {                                                                                           // 5793
		return access( this, function( value ) {                                                                           // 5794
			var elem = this[ 0 ] || {},                                                                                       // 5795
				i = 0,                                                                                                           // 5796
				l = this.length;                                                                                                 // 5797
                                                                                                                     // 5798
			if ( value === undefined ) {                                                                                      // 5799
				return elem.nodeType === 1 ?                                                                                     // 5800
					elem.innerHTML.replace( rinlinejQuery, "" ) :                                                                   // 5801
					undefined;                                                                                                      // 5802
			}                                                                                                                 // 5803
                                                                                                                     // 5804
			// See if we can take a shortcut and just use innerHTML                                                           // 5805
			if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&                                                  // 5806
				( support.htmlSerialize || !rnoshimcache.test( value )  ) &&                                                     // 5807
				( support.leadingWhitespace || !rleadingWhitespace.test( value ) ) &&                                            // 5808
				!wrapMap[ (rtagName.exec( value ) || [ "", "" ])[ 1 ].toLowerCase() ] ) {                                        // 5809
                                                                                                                     // 5810
				value = value.replace( rxhtmlTag, "<$1></$2>" );                                                                 // 5811
                                                                                                                     // 5812
				try {                                                                                                            // 5813
					for (; i < l; i++ ) {                                                                                           // 5814
						// Remove element nodes and prevent memory leaks                                                               // 5815
						elem = this[i] || {};                                                                                          // 5816
						if ( elem.nodeType === 1 ) {                                                                                   // 5817
							jQuery.cleanData( getAll( elem, false ) );                                                                    // 5818
							elem.innerHTML = value;                                                                                       // 5819
						}                                                                                                              // 5820
					}                                                                                                               // 5821
                                                                                                                     // 5822
					elem = 0;                                                                                                       // 5823
                                                                                                                     // 5824
				// If using innerHTML throws an exception, use the fallback method                                               // 5825
				} catch(e) {}                                                                                                    // 5826
			}                                                                                                                 // 5827
                                                                                                                     // 5828
			if ( elem ) {                                                                                                     // 5829
				this.empty().append( value );                                                                                    // 5830
			}                                                                                                                 // 5831
		}, null, value, arguments.length );                                                                                // 5832
	},                                                                                                                  // 5833
                                                                                                                     // 5834
	replaceWith: function() {                                                                                           // 5835
		var arg = arguments[ 0 ];                                                                                          // 5836
                                                                                                                     // 5837
		// Make the changes, replacing each context element with the new content                                           // 5838
		this.domManip( arguments, function( elem ) {                                                                       // 5839
			arg = this.parentNode;                                                                                            // 5840
                                                                                                                     // 5841
			jQuery.cleanData( getAll( this ) );                                                                               // 5842
                                                                                                                     // 5843
			if ( arg ) {                                                                                                      // 5844
				arg.replaceChild( elem, this );                                                                                  // 5845
			}                                                                                                                 // 5846
		});                                                                                                                // 5847
                                                                                                                     // 5848
		// Force removal if there was no new content (e.g., from empty arguments)                                          // 5849
		return arg && (arg.length || arg.nodeType) ? this : this.remove();                                                 // 5850
	},                                                                                                                  // 5851
                                                                                                                     // 5852
	detach: function( selector ) {                                                                                      // 5853
		return this.remove( selector, true );                                                                              // 5854
	},                                                                                                                  // 5855
                                                                                                                     // 5856
	domManip: function( args, callback ) {                                                                              // 5857
                                                                                                                     // 5858
		// Flatten any nested arrays                                                                                       // 5859
		args = concat.apply( [], args );                                                                                   // 5860
                                                                                                                     // 5861
		var first, node, hasScripts,                                                                                       // 5862
			scripts, doc, fragment,                                                                                           // 5863
			i = 0,                                                                                                            // 5864
			l = this.length,                                                                                                  // 5865
			set = this,                                                                                                       // 5866
			iNoClone = l - 1,                                                                                                 // 5867
			value = args[0],                                                                                                  // 5868
			isFunction = jQuery.isFunction( value );                                                                          // 5869
                                                                                                                     // 5870
		// We can't cloneNode fragments that contain checked, in WebKit                                                    // 5871
		if ( isFunction ||                                                                                                 // 5872
				( l > 1 && typeof value === "string" &&                                                                          // 5873
					!support.checkClone && rchecked.test( value ) ) ) {                                                             // 5874
			return this.each(function( index ) {                                                                              // 5875
				var self = set.eq( index );                                                                                      // 5876
				if ( isFunction ) {                                                                                              // 5877
					args[0] = value.call( this, index, self.html() );                                                               // 5878
				}                                                                                                                // 5879
				self.domManip( args, callback );                                                                                 // 5880
			});                                                                                                               // 5881
		}                                                                                                                  // 5882
                                                                                                                     // 5883
		if ( l ) {                                                                                                         // 5884
			fragment = jQuery.buildFragment( args, this[ 0 ].ownerDocument, false, this );                                    // 5885
			first = fragment.firstChild;                                                                                      // 5886
                                                                                                                     // 5887
			if ( fragment.childNodes.length === 1 ) {                                                                         // 5888
				fragment = first;                                                                                                // 5889
			}                                                                                                                 // 5890
                                                                                                                     // 5891
			if ( first ) {                                                                                                    // 5892
				scripts = jQuery.map( getAll( fragment, "script" ), disableScript );                                             // 5893
				hasScripts = scripts.length;                                                                                     // 5894
                                                                                                                     // 5895
				// Use the original fragment for the last item instead of the first because it can end up                        // 5896
				// being emptied incorrectly in certain situations (#8070).                                                      // 5897
				for ( ; i < l; i++ ) {                                                                                           // 5898
					node = fragment;                                                                                                // 5899
                                                                                                                     // 5900
					if ( i !== iNoClone ) {                                                                                         // 5901
						node = jQuery.clone( node, true, true );                                                                       // 5902
                                                                                                                     // 5903
						// Keep references to cloned scripts for later restoration                                                     // 5904
						if ( hasScripts ) {                                                                                            // 5905
							jQuery.merge( scripts, getAll( node, "script" ) );                                                            // 5906
						}                                                                                                              // 5907
					}                                                                                                               // 5908
                                                                                                                     // 5909
					callback.call( this[i], node, i );                                                                              // 5910
				}                                                                                                                // 5911
                                                                                                                     // 5912
				if ( hasScripts ) {                                                                                              // 5913
					doc = scripts[ scripts.length - 1 ].ownerDocument;                                                              // 5914
                                                                                                                     // 5915
					// Reenable scripts                                                                                             // 5916
					jQuery.map( scripts, restoreScript );                                                                           // 5917
                                                                                                                     // 5918
					// Evaluate executable scripts on first document insertion                                                      // 5919
					for ( i = 0; i < hasScripts; i++ ) {                                                                            // 5920
						node = scripts[ i ];                                                                                           // 5921
						if ( rscriptType.test( node.type || "" ) &&                                                                    // 5922
							!jQuery._data( node, "globalEval" ) && jQuery.contains( doc, node ) ) {                                       // 5923
                                                                                                                     // 5924
							if ( node.src ) {                                                                                             // 5925
								// Optional AJAX dependency, but won't run scripts if not present                                            // 5926
								if ( jQuery._evalUrl ) {                                                                                     // 5927
									jQuery._evalUrl( node.src );                                                                                // 5928
								}                                                                                                            // 5929
							} else {                                                                                                      // 5930
								jQuery.globalEval( ( node.text || node.textContent || node.innerHTML || "" ).replace( rcleanScript, "" ) );  // 5931
							}                                                                                                             // 5932
						}                                                                                                              // 5933
					}                                                                                                               // 5934
				}                                                                                                                // 5935
                                                                                                                     // 5936
				// Fix #11809: Avoid leaking memory                                                                              // 5937
				fragment = first = null;                                                                                         // 5938
			}                                                                                                                 // 5939
		}                                                                                                                  // 5940
                                                                                                                     // 5941
		return this;                                                                                                       // 5942
	}                                                                                                                   // 5943
});                                                                                                                  // 5944
                                                                                                                     // 5945
jQuery.each({                                                                                                        // 5946
	appendTo: "append",                                                                                                 // 5947
	prependTo: "prepend",                                                                                               // 5948
	insertBefore: "before",                                                                                             // 5949
	insertAfter: "after",                                                                                               // 5950
	replaceAll: "replaceWith"                                                                                           // 5951
}, function( name, original ) {                                                                                      // 5952
	jQuery.fn[ name ] = function( selector ) {                                                                          // 5953
		var elems,                                                                                                         // 5954
			i = 0,                                                                                                            // 5955
			ret = [],                                                                                                         // 5956
			insert = jQuery( selector ),                                                                                      // 5957
			last = insert.length - 1;                                                                                         // 5958
                                                                                                                     // 5959
		for ( ; i <= last; i++ ) {                                                                                         // 5960
			elems = i === last ? this : this.clone(true);                                                                     // 5961
			jQuery( insert[i] )[ original ]( elems );                                                                         // 5962
                                                                                                                     // 5963
			// Modern browsers can apply jQuery collections as arrays, but oldIE needs a .get()                               // 5964
			push.apply( ret, elems.get() );                                                                                   // 5965
		}                                                                                                                  // 5966
                                                                                                                     // 5967
		return this.pushStack( ret );                                                                                      // 5968
	};                                                                                                                  // 5969
});                                                                                                                  // 5970
                                                                                                                     // 5971
                                                                                                                     // 5972
var iframe,                                                                                                          // 5973
	elemdisplay = {};                                                                                                   // 5974
                                                                                                                     // 5975
/**                                                                                                                  // 5976
 * Retrieve the actual display of a element                                                                          // 5977
 * @param {String} name nodeName of the element                                                                      // 5978
 * @param {Object} doc Document object                                                                               // 5979
 */                                                                                                                  // 5980
// Called only from within defaultDisplay                                                                            // 5981
function actualDisplay( name, doc ) {                                                                                // 5982
	var elem = jQuery( doc.createElement( name ) ).appendTo( doc.body ),                                                // 5983
                                                                                                                     // 5984
		// getDefaultComputedStyle might be reliably used only on attached element                                         // 5985
		display = window.getDefaultComputedStyle ?                                                                         // 5986
                                                                                                                     // 5987
			// Use of this method is a temporary fix (more like optmization) until something better comes along,              // 5988
			// since it was removed from specification and supported only in FF                                               // 5989
			window.getDefaultComputedStyle( elem[ 0 ] ).display : jQuery.css( elem[ 0 ], "display" );                         // 5990
                                                                                                                     // 5991
	// We don't have any data stored on the element,                                                                    // 5992
	// so use "detach" method as fast way to get rid of the element                                                     // 5993
	elem.detach();                                                                                                      // 5994
                                                                                                                     // 5995
	return display;                                                                                                     // 5996
}                                                                                                                    // 5997
                                                                                                                     // 5998
/**                                                                                                                  // 5999
 * Try to determine the default display value of an element                                                          // 6000
 * @param {String} nodeName                                                                                          // 6001
 */                                                                                                                  // 6002
function defaultDisplay( nodeName ) {                                                                                // 6003
	var doc = document,                                                                                                 // 6004
		display = elemdisplay[ nodeName ];                                                                                 // 6005
                                                                                                                     // 6006
	if ( !display ) {                                                                                                   // 6007
		display = actualDisplay( nodeName, doc );                                                                          // 6008
                                                                                                                     // 6009
		// If the simple way fails, read from inside an iframe                                                             // 6010
		if ( display === "none" || !display ) {                                                                            // 6011
                                                                                                                     // 6012
			// Use the already-created iframe if possible                                                                     // 6013
			iframe = (iframe || jQuery( "<iframe frameborder='0' width='0' height='0'/>" )).appendTo( doc.documentElement );  // 6014
                                                                                                                     // 6015
			// Always write a new HTML skeleton so Webkit and Firefox don't choke on reuse                                    // 6016
			doc = ( iframe[ 0 ].contentWindow || iframe[ 0 ].contentDocument ).document;                                      // 6017
                                                                                                                     // 6018
			// Support: IE                                                                                                    // 6019
			doc.write();                                                                                                      // 6020
			doc.close();                                                                                                      // 6021
                                                                                                                     // 6022
			display = actualDisplay( nodeName, doc );                                                                         // 6023
			iframe.detach();                                                                                                  // 6024
		}                                                                                                                  // 6025
                                                                                                                     // 6026
		// Store the correct default display                                                                               // 6027
		elemdisplay[ nodeName ] = display;                                                                                 // 6028
	}                                                                                                                   // 6029
                                                                                                                     // 6030
	return display;                                                                                                     // 6031
}                                                                                                                    // 6032
                                                                                                                     // 6033
                                                                                                                     // 6034
(function() {                                                                                                        // 6035
	var a, shrinkWrapBlocksVal,                                                                                         // 6036
		div = document.createElement( "div" ),                                                                             // 6037
		divReset =                                                                                                         // 6038
			"-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;" +                            // 6039
			"display:block;padding:0;margin:0;border:0";                                                                      // 6040
                                                                                                                     // 6041
	// Setup                                                                                                            // 6042
	div.innerHTML = "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>";                               // 6043
	a = div.getElementsByTagName( "a" )[ 0 ];                                                                           // 6044
                                                                                                                     // 6045
	a.style.cssText = "float:left;opacity:.5";                                                                          // 6046
                                                                                                                     // 6047
	// Make sure that element opacity exists                                                                            // 6048
	// (IE uses filter instead)                                                                                         // 6049
	// Use a regex to work around a WebKit issue. See #5145                                                             // 6050
	support.opacity = /^0.5/.test( a.style.opacity );                                                                   // 6051
                                                                                                                     // 6052
	// Verify style float existence                                                                                     // 6053
	// (IE uses styleFloat instead of cssFloat)                                                                         // 6054
	support.cssFloat = !!a.style.cssFloat;                                                                              // 6055
                                                                                                                     // 6056
	div.style.backgroundClip = "content-box";                                                                           // 6057
	div.cloneNode( true ).style.backgroundClip = "";                                                                    // 6058
	support.clearCloneStyle = div.style.backgroundClip === "content-box";                                               // 6059
                                                                                                                     // 6060
	// Null elements to avoid leaks in IE.                                                                              // 6061
	a = div = null;                                                                                                     // 6062
                                                                                                                     // 6063
	support.shrinkWrapBlocks = function() {                                                                             // 6064
		var body, container, div, containerStyles;                                                                         // 6065
                                                                                                                     // 6066
		if ( shrinkWrapBlocksVal == null ) {                                                                               // 6067
			body = document.getElementsByTagName( "body" )[ 0 ];                                                              // 6068
			if ( !body ) {                                                                                                    // 6069
				// Test fired too early or in an unsupported environment, exit.                                                  // 6070
				return;                                                                                                          // 6071
			}                                                                                                                 // 6072
                                                                                                                     // 6073
			containerStyles = "border:0;width:0;height:0;position:absolute;top:0;left:-9999px";                               // 6074
			container = document.createElement( "div" );                                                                      // 6075
			div = document.createElement( "div" );                                                                            // 6076
                                                                                                                     // 6077
			body.appendChild( container ).appendChild( div );                                                                 // 6078
                                                                                                                     // 6079
			// Will be changed later if needed.                                                                               // 6080
			shrinkWrapBlocksVal = false;                                                                                      // 6081
                                                                                                                     // 6082
			if ( typeof div.style.zoom !== strundefined ) {                                                                   // 6083
				// Support: IE6                                                                                                  // 6084
				// Check if elements with layout shrink-wrap their children                                                      // 6085
				div.style.cssText = divReset + ";width:1px;padding:1px;zoom:1";                                                  // 6086
				div.innerHTML = "<div></div>";                                                                                   // 6087
				div.firstChild.style.width = "5px";                                                                              // 6088
				shrinkWrapBlocksVal = div.offsetWidth !== 3;                                                                     // 6089
			}                                                                                                                 // 6090
                                                                                                                     // 6091
			body.removeChild( container );                                                                                    // 6092
                                                                                                                     // 6093
			// Null elements to avoid leaks in IE.                                                                            // 6094
			body = container = div = null;                                                                                    // 6095
		}                                                                                                                  // 6096
                                                                                                                     // 6097
		return shrinkWrapBlocksVal;                                                                                        // 6098
	};                                                                                                                  // 6099
                                                                                                                     // 6100
})();                                                                                                                // 6101
var rmargin = (/^margin/);                                                                                           // 6102
                                                                                                                     // 6103
var rnumnonpx = new RegExp( "^(" + pnum + ")(?!px)[a-z%]+$", "i" );                                                  // 6104
                                                                                                                     // 6105
                                                                                                                     // 6106
                                                                                                                     // 6107
var getStyles, curCSS,                                                                                               // 6108
	rposition = /^(top|right|bottom|left)$/;                                                                            // 6109
                                                                                                                     // 6110
if ( window.getComputedStyle ) {                                                                                     // 6111
	getStyles = function( elem ) {                                                                                      // 6112
		return elem.ownerDocument.defaultView.getComputedStyle( elem, null );                                              // 6113
	};                                                                                                                  // 6114
                                                                                                                     // 6115
	curCSS = function( elem, name, computed ) {                                                                         // 6116
		var width, minWidth, maxWidth, ret,                                                                                // 6117
			style = elem.style;                                                                                               // 6118
                                                                                                                     // 6119
		computed = computed || getStyles( elem );                                                                          // 6120
                                                                                                                     // 6121
		// getPropertyValue is only needed for .css('filter') in IE9, see #12537                                           // 6122
		ret = computed ? computed.getPropertyValue( name ) || computed[ name ] : undefined;                                // 6123
                                                                                                                     // 6124
		if ( computed ) {                                                                                                  // 6125
                                                                                                                     // 6126
			if ( ret === "" && !jQuery.contains( elem.ownerDocument, elem ) ) {                                               // 6127
				ret = jQuery.style( elem, name );                                                                                // 6128
			}                                                                                                                 // 6129
                                                                                                                     // 6130
			// A tribute to the "awesome hack by Dean Edwards"                                                                // 6131
			// Chrome < 17 and Safari 5.0 uses "computed value" instead of "used value" for margin-right                      // 6132
			// Safari 5.1.7 (at least) returns percentage for a larger set of values, but width seems to be reliably pixels   // 6133
			// this is against the CSSOM draft spec: http://dev.w3.org/csswg/cssom/#resolved-values                           // 6134
			if ( rnumnonpx.test( ret ) && rmargin.test( name ) ) {                                                            // 6135
                                                                                                                     // 6136
				// Remember the original values                                                                                  // 6137
				width = style.width;                                                                                             // 6138
				minWidth = style.minWidth;                                                                                       // 6139
				maxWidth = style.maxWidth;                                                                                       // 6140
                                                                                                                     // 6141
				// Put in the new values to get a computed value out                                                             // 6142
				style.minWidth = style.maxWidth = style.width = ret;                                                             // 6143
				ret = computed.width;                                                                                            // 6144
                                                                                                                     // 6145
				// Revert the changed values                                                                                     // 6146
				style.width = width;                                                                                             // 6147
				style.minWidth = minWidth;                                                                                       // 6148
				style.maxWidth = maxWidth;                                                                                       // 6149
			}                                                                                                                 // 6150
		}                                                                                                                  // 6151
                                                                                                                     // 6152
		// Support: IE                                                                                                     // 6153
		// IE returns zIndex value as an integer.                                                                          // 6154
		return ret === undefined ?                                                                                         // 6155
			ret :                                                                                                             // 6156
			ret + "";                                                                                                         // 6157
	};                                                                                                                  // 6158
} else if ( document.documentElement.currentStyle ) {                                                                // 6159
	getStyles = function( elem ) {                                                                                      // 6160
		return elem.currentStyle;                                                                                          // 6161
	};                                                                                                                  // 6162
                                                                                                                     // 6163
	curCSS = function( elem, name, computed ) {                                                                         // 6164
		var left, rs, rsLeft, ret,                                                                                         // 6165
			style = elem.style;                                                                                               // 6166
                                                                                                                     // 6167
		computed = computed || getStyles( elem );                                                                          // 6168
		ret = computed ? computed[ name ] : undefined;                                                                     // 6169
                                                                                                                     // 6170
		// Avoid setting ret to empty string here                                                                          // 6171
		// so we don't default to auto                                                                                     // 6172
		if ( ret == null && style && style[ name ] ) {                                                                     // 6173
			ret = style[ name ];                                                                                              // 6174
		}                                                                                                                  // 6175
                                                                                                                     // 6176
		// From the awesome hack by Dean Edwards                                                                           // 6177
		// http://erik.eae.net/archives/2007/07/27/18.54.15/#comment-102291                                                // 6178
                                                                                                                     // 6179
		// If we're not dealing with a regular pixel number                                                                // 6180
		// but a number that has a weird ending, we need to convert it to pixels                                           // 6181
		// but not position css attributes, as those are proportional to the parent element instead                        // 6182
		// and we can't measure the parent instead because it might trigger a "stacking dolls" problem                     // 6183
		if ( rnumnonpx.test( ret ) && !rposition.test( name ) ) {                                                          // 6184
                                                                                                                     // 6185
			// Remember the original values                                                                                   // 6186
			left = style.left;                                                                                                // 6187
			rs = elem.runtimeStyle;                                                                                           // 6188
			rsLeft = rs && rs.left;                                                                                           // 6189
                                                                                                                     // 6190
			// Put in the new values to get a computed value out                                                              // 6191
			if ( rsLeft ) {                                                                                                   // 6192
				rs.left = elem.currentStyle.left;                                                                                // 6193
			}                                                                                                                 // 6194
			style.left = name === "fontSize" ? "1em" : ret;                                                                   // 6195
			ret = style.pixelLeft + "px";                                                                                     // 6196
                                                                                                                     // 6197
			// Revert the changed values                                                                                      // 6198
			style.left = left;                                                                                                // 6199
			if ( rsLeft ) {                                                                                                   // 6200
				rs.left = rsLeft;                                                                                                // 6201
			}                                                                                                                 // 6202
		}                                                                                                                  // 6203
                                                                                                                     // 6204
		// Support: IE                                                                                                     // 6205
		// IE returns zIndex value as an integer.                                                                          // 6206
		return ret === undefined ?                                                                                         // 6207
			ret :                                                                                                             // 6208
			ret + "" || "auto";                                                                                               // 6209
	};                                                                                                                  // 6210
}                                                                                                                    // 6211
                                                                                                                     // 6212
                                                                                                                     // 6213
                                                                                                                     // 6214
                                                                                                                     // 6215
function addGetHookIf( conditionFn, hookFn ) {                                                                       // 6216
	// Define the hook, we'll check on the first run if it's really needed.                                             // 6217
	return {                                                                                                            // 6218
		get: function() {                                                                                                  // 6219
			var condition = conditionFn();                                                                                    // 6220
                                                                                                                     // 6221
			if ( condition == null ) {                                                                                        // 6222
				// The test was not ready at this point; screw the hook this time                                                // 6223
				// but check again when needed next time.                                                                        // 6224
				return;                                                                                                          // 6225
			}                                                                                                                 // 6226
                                                                                                                     // 6227
			if ( condition ) {                                                                                                // 6228
				// Hook not needed (or it's not possible to use it due to missing dependency),                                   // 6229
				// remove it.                                                                                                    // 6230
				// Since there are no other hooks for marginRight, remove the whole object.                                      // 6231
				delete this.get;                                                                                                 // 6232
				return;                                                                                                          // 6233
			}                                                                                                                 // 6234
                                                                                                                     // 6235
			// Hook needed; redefine it so that the support test is not executed again.                                       // 6236
                                                                                                                     // 6237
			return (this.get = hookFn).apply( this, arguments );                                                              // 6238
		}                                                                                                                  // 6239
	};                                                                                                                  // 6240
}                                                                                                                    // 6241
                                                                                                                     // 6242
                                                                                                                     // 6243
(function() {                                                                                                        // 6244
	var a, reliableHiddenOffsetsVal, boxSizingVal, boxSizingReliableVal,                                                // 6245
		pixelPositionVal, reliableMarginRightVal,                                                                          // 6246
		div = document.createElement( "div" ),                                                                             // 6247
		containerStyles = "border:0;width:0;height:0;position:absolute;top:0;left:-9999px",                                // 6248
		divReset =                                                                                                         // 6249
			"-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;" +                            // 6250
			"display:block;padding:0;margin:0;border:0";                                                                      // 6251
                                                                                                                     // 6252
	// Setup                                                                                                            // 6253
	div.innerHTML = "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>";                               // 6254
	a = div.getElementsByTagName( "a" )[ 0 ];                                                                           // 6255
                                                                                                                     // 6256
	a.style.cssText = "float:left;opacity:.5";                                                                          // 6257
                                                                                                                     // 6258
	// Make sure that element opacity exists                                                                            // 6259
	// (IE uses filter instead)                                                                                         // 6260
	// Use a regex to work around a WebKit issue. See #5145                                                             // 6261
	support.opacity = /^0.5/.test( a.style.opacity );                                                                   // 6262
                                                                                                                     // 6263
	// Verify style float existence                                                                                     // 6264
	// (IE uses styleFloat instead of cssFloat)                                                                         // 6265
	support.cssFloat = !!a.style.cssFloat;                                                                              // 6266
                                                                                                                     // 6267
	div.style.backgroundClip = "content-box";                                                                           // 6268
	div.cloneNode( true ).style.backgroundClip = "";                                                                    // 6269
	support.clearCloneStyle = div.style.backgroundClip === "content-box";                                               // 6270
                                                                                                                     // 6271
	// Null elements to avoid leaks in IE.                                                                              // 6272
	a = div = null;                                                                                                     // 6273
                                                                                                                     // 6274
	jQuery.extend(support, {                                                                                            // 6275
		reliableHiddenOffsets: function() {                                                                                // 6276
			if ( reliableHiddenOffsetsVal != null ) {                                                                         // 6277
				return reliableHiddenOffsetsVal;                                                                                 // 6278
			}                                                                                                                 // 6279
                                                                                                                     // 6280
			var container, tds, isSupported,                                                                                  // 6281
				div = document.createElement( "div" ),                                                                           // 6282
				body = document.getElementsByTagName( "body" )[ 0 ];                                                             // 6283
                                                                                                                     // 6284
			if ( !body ) {                                                                                                    // 6285
				// Return for frameset docs that don't have a body                                                               // 6286
				return;                                                                                                          // 6287
			}                                                                                                                 // 6288
                                                                                                                     // 6289
			// Setup                                                                                                          // 6290
			div.setAttribute( "className", "t" );                                                                             // 6291
			div.innerHTML = "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>";                             // 6292
                                                                                                                     // 6293
			container = document.createElement( "div" );                                                                      // 6294
			container.style.cssText = containerStyles;                                                                        // 6295
                                                                                                                     // 6296
			body.appendChild( container ).appendChild( div );                                                                 // 6297
                                                                                                                     // 6298
			// Support: IE8                                                                                                   // 6299
			// Check if table cells still have offsetWidth/Height when they are set                                           // 6300
			// to display:none and there are still other visible table cells in a                                             // 6301
			// table row; if so, offsetWidth/Height are not reliable for use when                                             // 6302
			// determining if an element has been hidden directly using                                                       // 6303
			// display:none (it is still safe to use offsets if a parent element is                                           // 6304
			// hidden; don safety goggles and see bug #4512 for more information).                                            // 6305
			div.innerHTML = "<table><tr><td></td><td>t</td></tr></table>";                                                    // 6306
			tds = div.getElementsByTagName( "td" );                                                                           // 6307
			tds[ 0 ].style.cssText = "padding:0;margin:0;border:0;display:none";                                              // 6308
			isSupported = ( tds[ 0 ].offsetHeight === 0 );                                                                    // 6309
                                                                                                                     // 6310
			tds[ 0 ].style.display = "";                                                                                      // 6311
			tds[ 1 ].style.display = "none";                                                                                  // 6312
                                                                                                                     // 6313
			// Support: IE8                                                                                                   // 6314
			// Check if empty table cells still have offsetWidth/Height                                                       // 6315
			reliableHiddenOffsetsVal = isSupported && ( tds[ 0 ].offsetHeight === 0 );                                        // 6316
                                                                                                                     // 6317
			body.removeChild( container );                                                                                    // 6318
                                                                                                                     // 6319
			// Null elements to avoid leaks in IE.                                                                            // 6320
			div = body = null;                                                                                                // 6321
                                                                                                                     // 6322
			return reliableHiddenOffsetsVal;                                                                                  // 6323
		},                                                                                                                 // 6324
                                                                                                                     // 6325
		boxSizing: function() {                                                                                            // 6326
			if ( boxSizingVal == null ) {                                                                                     // 6327
				computeStyleTests();                                                                                             // 6328
			}                                                                                                                 // 6329
			return boxSizingVal;                                                                                              // 6330
		},                                                                                                                 // 6331
                                                                                                                     // 6332
		boxSizingReliable: function() {                                                                                    // 6333
			if ( boxSizingReliableVal == null ) {                                                                             // 6334
				computeStyleTests();                                                                                             // 6335
			}                                                                                                                 // 6336
			return boxSizingReliableVal;                                                                                      // 6337
		},                                                                                                                 // 6338
                                                                                                                     // 6339
		pixelPosition: function() {                                                                                        // 6340
			if ( pixelPositionVal == null ) {                                                                                 // 6341
				computeStyleTests();                                                                                             // 6342
			}                                                                                                                 // 6343
			return pixelPositionVal;                                                                                          // 6344
		},                                                                                                                 // 6345
                                                                                                                     // 6346
		reliableMarginRight: function() {                                                                                  // 6347
			var body, container, div, marginDiv;                                                                              // 6348
                                                                                                                     // 6349
			// Use window.getComputedStyle because jsdom on node.js will break without it.                                    // 6350
			if ( reliableMarginRightVal == null && window.getComputedStyle ) {                                                // 6351
				body = document.getElementsByTagName( "body" )[ 0 ];                                                             // 6352
				if ( !body ) {                                                                                                   // 6353
					// Test fired too early or in an unsupported environment, exit.                                                 // 6354
					return;                                                                                                         // 6355
				}                                                                                                                // 6356
                                                                                                                     // 6357
				container = document.createElement( "div" );                                                                     // 6358
				div = document.createElement( "div" );                                                                           // 6359
				container.style.cssText = containerStyles;                                                                       // 6360
                                                                                                                     // 6361
				body.appendChild( container ).appendChild( div );                                                                // 6362
                                                                                                                     // 6363
				// Check if div with explicit width and no margin-right incorrectly                                              // 6364
				// gets computed margin-right based on width of container. (#3333)                                               // 6365
				// Fails in WebKit before Feb 2011 nightlies                                                                     // 6366
				// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right                                      // 6367
				marginDiv = div.appendChild( document.createElement( "div" ) );                                                  // 6368
				marginDiv.style.cssText = div.style.cssText = divReset;                                                          // 6369
				marginDiv.style.marginRight = marginDiv.style.width = "0";                                                       // 6370
				div.style.width = "1px";                                                                                         // 6371
                                                                                                                     // 6372
				reliableMarginRightVal =                                                                                         // 6373
					!parseFloat( ( window.getComputedStyle( marginDiv, null ) || {} ).marginRight );                                // 6374
                                                                                                                     // 6375
				body.removeChild( container );                                                                                   // 6376
			}                                                                                                                 // 6377
                                                                                                                     // 6378
			return reliableMarginRightVal;                                                                                    // 6379
		}                                                                                                                  // 6380
	});                                                                                                                 // 6381
                                                                                                                     // 6382
	function computeStyleTests() {                                                                                      // 6383
		var container, div,                                                                                                // 6384
			body = document.getElementsByTagName( "body" )[ 0 ];                                                              // 6385
                                                                                                                     // 6386
		if ( !body ) {                                                                                                     // 6387
			// Test fired too early or in an unsupported environment, exit.                                                   // 6388
			return;                                                                                                           // 6389
		}                                                                                                                  // 6390
                                                                                                                     // 6391
		container = document.createElement( "div" );                                                                       // 6392
		div = document.createElement( "div" );                                                                             // 6393
		container.style.cssText = containerStyles;                                                                         // 6394
                                                                                                                     // 6395
		body.appendChild( container ).appendChild( div );                                                                  // 6396
                                                                                                                     // 6397
		div.style.cssText =                                                                                                // 6398
			"-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;" +                               // 6399
				"position:absolute;display:block;padding:1px;border:1px;width:4px;" +                                            // 6400
				"margin-top:1%;top:1%";                                                                                          // 6401
                                                                                                                     // 6402
		// Workaround failing boxSizing test due to offsetWidth returning wrong value                                      // 6403
		// with some non-1 values of body zoom, ticket #13543                                                              // 6404
		jQuery.swap( body, body.style.zoom != null ? { zoom: 1 } : {}, function() {                                        // 6405
			boxSizingVal = div.offsetWidth === 4;                                                                             // 6406
		});                                                                                                                // 6407
                                                                                                                     // 6408
		// Will be changed later if needed.                                                                                // 6409
		boxSizingReliableVal = true;                                                                                       // 6410
		pixelPositionVal = false;                                                                                          // 6411
		reliableMarginRightVal = true;                                                                                     // 6412
                                                                                                                     // 6413
		// Use window.getComputedStyle because jsdom on node.js will break without it.                                     // 6414
		if ( window.getComputedStyle ) {                                                                                   // 6415
			pixelPositionVal = ( window.getComputedStyle( div, null ) || {} ).top !== "1%";                                   // 6416
			boxSizingReliableVal =                                                                                            // 6417
				( window.getComputedStyle( div, null ) || { width: "4px" } ).width === "4px";                                    // 6418
		}                                                                                                                  // 6419
                                                                                                                     // 6420
		body.removeChild( container );                                                                                     // 6421
                                                                                                                     // 6422
		// Null elements to avoid leaks in IE.                                                                             // 6423
		div = body = null;                                                                                                 // 6424
	}                                                                                                                   // 6425
                                                                                                                     // 6426
})();                                                                                                                // 6427
                                                                                                                     // 6428
                                                                                                                     // 6429
// A method for quickly swapping in/out CSS properties to get correct calculations.                                  // 6430
jQuery.swap = function( elem, options, callback, args ) {                                                            // 6431
	var ret, name,                                                                                                      // 6432
		old = {};                                                                                                          // 6433
                                                                                                                     // 6434
	// Remember the old values, and insert the new ones                                                                 // 6435
	for ( name in options ) {                                                                                           // 6436
		old[ name ] = elem.style[ name ];                                                                                  // 6437
		elem.style[ name ] = options[ name ];                                                                              // 6438
	}                                                                                                                   // 6439
                                                                                                                     // 6440
	ret = callback.apply( elem, args || [] );                                                                           // 6441
                                                                                                                     // 6442
	// Revert the old values                                                                                            // 6443
	for ( name in options ) {                                                                                           // 6444
		elem.style[ name ] = old[ name ];                                                                                  // 6445
	}                                                                                                                   // 6446
                                                                                                                     // 6447
	return ret;                                                                                                         // 6448
};                                                                                                                   // 6449
                                                                                                                     // 6450
                                                                                                                     // 6451
var                                                                                                                  // 6452
		ralpha = /alpha\([^)]*\)/i,                                                                                        // 6453
	ropacity = /opacity\s*=\s*([^)]*)/,                                                                                 // 6454
                                                                                                                     // 6455
	// swappable if display is none or starts with table except "table", "table-cell", or "table-caption"               // 6456
	// see here for display values: https://developer.mozilla.org/en-US/docs/CSS/display                                // 6457
	rdisplayswap = /^(none|table(?!-c[ea]).+)/,                                                                         // 6458
	rnumsplit = new RegExp( "^(" + pnum + ")(.*)$", "i" ),                                                              // 6459
	rrelNum = new RegExp( "^([+-])=(" + pnum + ")", "i" ),                                                              // 6460
                                                                                                                     // 6461
	cssShow = { position: "absolute", visibility: "hidden", display: "block" },                                         // 6462
	cssNormalTransform = {                                                                                              // 6463
		letterSpacing: 0,                                                                                                  // 6464
		fontWeight: 400                                                                                                    // 6465
	},                                                                                                                  // 6466
                                                                                                                     // 6467
	cssPrefixes = [ "Webkit", "O", "Moz", "ms" ];                                                                       // 6468
                                                                                                                     // 6469
                                                                                                                     // 6470
// return a css property mapped to a potentially vendor prefixed property                                            // 6471
function vendorPropName( style, name ) {                                                                             // 6472
                                                                                                                     // 6473
	// shortcut for names that are not vendor prefixed                                                                  // 6474
	if ( name in style ) {                                                                                              // 6475
		return name;                                                                                                       // 6476
	}                                                                                                                   // 6477
                                                                                                                     // 6478
	// check for vendor prefixed names                                                                                  // 6479
	var capName = name.charAt(0).toUpperCase() + name.slice(1),                                                         // 6480
		origName = name,                                                                                                   // 6481
		i = cssPrefixes.length;                                                                                            // 6482
                                                                                                                     // 6483
	while ( i-- ) {                                                                                                     // 6484
		name = cssPrefixes[ i ] + capName;                                                                                 // 6485
		if ( name in style ) {                                                                                             // 6486
			return name;                                                                                                      // 6487
		}                                                                                                                  // 6488
	}                                                                                                                   // 6489
                                                                                                                     // 6490
	return origName;                                                                                                    // 6491
}                                                                                                                    // 6492
                                                                                                                     // 6493
function showHide( elements, show ) {                                                                                // 6494
	var display, elem, hidden,                                                                                          // 6495
		values = [],                                                                                                       // 6496
		index = 0,                                                                                                         // 6497
		length = elements.length;                                                                                          // 6498
                                                                                                                     // 6499
	for ( ; index < length; index++ ) {                                                                                 // 6500
		elem = elements[ index ];                                                                                          // 6501
		if ( !elem.style ) {                                                                                               // 6502
			continue;                                                                                                         // 6503
		}                                                                                                                  // 6504
                                                                                                                     // 6505
		values[ index ] = jQuery._data( elem, "olddisplay" );                                                              // 6506
		display = elem.style.display;                                                                                      // 6507
		if ( show ) {                                                                                                      // 6508
			// Reset the inline display of this element to learn if it is                                                     // 6509
			// being hidden by cascaded rules or not                                                                          // 6510
			if ( !values[ index ] && display === "none" ) {                                                                   // 6511
				elem.style.display = "";                                                                                         // 6512
			}                                                                                                                 // 6513
                                                                                                                     // 6514
			// Set elements which have been overridden with display: none                                                     // 6515
			// in a stylesheet to whatever the default browser style is                                                       // 6516
			// for such an element                                                                                            // 6517
			if ( elem.style.display === "" && isHidden( elem ) ) {                                                            // 6518
				values[ index ] = jQuery._data( elem, "olddisplay", defaultDisplay(elem.nodeName) );                             // 6519
			}                                                                                                                 // 6520
		} else {                                                                                                           // 6521
                                                                                                                     // 6522
			if ( !values[ index ] ) {                                                                                         // 6523
				hidden = isHidden( elem );                                                                                       // 6524
                                                                                                                     // 6525
				if ( display && display !== "none" || !hidden ) {                                                                // 6526
					jQuery._data( elem, "olddisplay", hidden ? display : jQuery.css( elem, "display" ) );                           // 6527
				}                                                                                                                // 6528
			}                                                                                                                 // 6529
		}                                                                                                                  // 6530
	}                                                                                                                   // 6531
                                                                                                                     // 6532
	// Set the display of most of the elements in a second loop                                                         // 6533
	// to avoid the constant reflow                                                                                     // 6534
	for ( index = 0; index < length; index++ ) {                                                                        // 6535
		elem = elements[ index ];                                                                                          // 6536
		if ( !elem.style ) {                                                                                               // 6537
			continue;                                                                                                         // 6538
		}                                                                                                                  // 6539
		if ( !show || elem.style.display === "none" || elem.style.display === "" ) {                                       // 6540
			elem.style.display = show ? values[ index ] || "" : "none";                                                       // 6541
		}                                                                                                                  // 6542
	}                                                                                                                   // 6543
                                                                                                                     // 6544
	return elements;                                                                                                    // 6545
}                                                                                                                    // 6546
                                                                                                                     // 6547
function setPositiveNumber( elem, value, subtract ) {                                                                // 6548
	var matches = rnumsplit.exec( value );                                                                              // 6549
	return matches ?                                                                                                    // 6550
		// Guard against undefined "subtract", e.g., when used as in cssHooks                                              // 6551
		Math.max( 0, matches[ 1 ] - ( subtract || 0 ) ) + ( matches[ 2 ] || "px" ) :                                       // 6552
		value;                                                                                                             // 6553
}                                                                                                                    // 6554
                                                                                                                     // 6555
function augmentWidthOrHeight( elem, name, extra, isBorderBox, styles ) {                                            // 6556
	var i = extra === ( isBorderBox ? "border" : "content" ) ?                                                          // 6557
		// If we already have the right measurement, avoid augmentation                                                    // 6558
		4 :                                                                                                                // 6559
		// Otherwise initialize for horizontal or vertical properties                                                      // 6560
		name === "width" ? 1 : 0,                                                                                          // 6561
                                                                                                                     // 6562
		val = 0;                                                                                                           // 6563
                                                                                                                     // 6564
	for ( ; i < 4; i += 2 ) {                                                                                           // 6565
		// both box models exclude margin, so add it if we want it                                                         // 6566
		if ( extra === "margin" ) {                                                                                        // 6567
			val += jQuery.css( elem, extra + cssExpand[ i ], true, styles );                                                  // 6568
		}                                                                                                                  // 6569
                                                                                                                     // 6570
		if ( isBorderBox ) {                                                                                               // 6571
			// border-box includes padding, so remove it if we want content                                                   // 6572
			if ( extra === "content" ) {                                                                                      // 6573
				val -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );                                             // 6574
			}                                                                                                                 // 6575
                                                                                                                     // 6576
			// at this point, extra isn't border nor margin, so remove border                                                 // 6577
			if ( extra !== "margin" ) {                                                                                       // 6578
				val -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );                                    // 6579
			}                                                                                                                 // 6580
		} else {                                                                                                           // 6581
			// at this point, extra isn't content, so add padding                                                             // 6582
			val += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );                                              // 6583
                                                                                                                     // 6584
			// at this point, extra isn't content nor padding, so add border                                                  // 6585
			if ( extra !== "padding" ) {                                                                                      // 6586
				val += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );                                    // 6587
			}                                                                                                                 // 6588
		}                                                                                                                  // 6589
	}                                                                                                                   // 6590
                                                                                                                     // 6591
	return val;                                                                                                         // 6592
}                                                                                                                    // 6593
                                                                                                                     // 6594
function getWidthOrHeight( elem, name, extra ) {                                                                     // 6595
                                                                                                                     // 6596
	// Start with offset property, which is equivalent to the border-box value                                          // 6597
	var valueIsBorderBox = true,                                                                                        // 6598
		val = name === "width" ? elem.offsetWidth : elem.offsetHeight,                                                     // 6599
		styles = getStyles( elem ),                                                                                        // 6600
		isBorderBox = support.boxSizing() && jQuery.css( elem, "boxSizing", false, styles ) === "border-box";              // 6601
                                                                                                                     // 6602
	// some non-html elements return undefined for offsetWidth, so check for null/undefined                             // 6603
	// svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285                                                        // 6604
	// MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668                                                     // 6605
	if ( val <= 0 || val == null ) {                                                                                    // 6606
		// Fall back to computed then uncomputed css if necessary                                                          // 6607
		val = curCSS( elem, name, styles );                                                                                // 6608
		if ( val < 0 || val == null ) {                                                                                    // 6609
			val = elem.style[ name ];                                                                                         // 6610
		}                                                                                                                  // 6611
                                                                                                                     // 6612
		// Computed unit is not pixels. Stop here and return.                                                              // 6613
		if ( rnumnonpx.test(val) ) {                                                                                       // 6614
			return val;                                                                                                       // 6615
		}                                                                                                                  // 6616
                                                                                                                     // 6617
		// we need the check for style in case a browser which returns unreliable values                                   // 6618
		// for getComputedStyle silently falls back to the reliable elem.style                                             // 6619
		valueIsBorderBox = isBorderBox && ( support.boxSizingReliable() || val === elem.style[ name ] );                   // 6620
                                                                                                                     // 6621
		// Normalize "", auto, and prepare for extra                                                                       // 6622
		val = parseFloat( val ) || 0;                                                                                      // 6623
	}                                                                                                                   // 6624
                                                                                                                     // 6625
	// use the active box-sizing model to add/subtract irrelevant styles                                                // 6626
	return ( val +                                                                                                      // 6627
		augmentWidthOrHeight(                                                                                              // 6628
			elem,                                                                                                             // 6629
			name,                                                                                                             // 6630
			extra || ( isBorderBox ? "border" : "content" ),                                                                  // 6631
			valueIsBorderBox,                                                                                                 // 6632
			styles                                                                                                            // 6633
		)                                                                                                                  // 6634
	) + "px";                                                                                                           // 6635
}                                                                                                                    // 6636
                                                                                                                     // 6637
jQuery.extend({                                                                                                      // 6638
	// Add in style property hooks for overriding the default                                                           // 6639
	// behavior of getting and setting a style property                                                                 // 6640
	cssHooks: {                                                                                                         // 6641
		opacity: {                                                                                                         // 6642
			get: function( elem, computed ) {                                                                                 // 6643
				if ( computed ) {                                                                                                // 6644
					// We should always get a number back from opacity                                                              // 6645
					var ret = curCSS( elem, "opacity" );                                                                            // 6646
					return ret === "" ? "1" : ret;                                                                                  // 6647
				}                                                                                                                // 6648
			}                                                                                                                 // 6649
		}                                                                                                                  // 6650
	},                                                                                                                  // 6651
                                                                                                                     // 6652
	// Don't automatically add "px" to these possibly-unitless properties                                               // 6653
	cssNumber: {                                                                                                        // 6654
		"columnCount": true,                                                                                               // 6655
		"fillOpacity": true,                                                                                               // 6656
		"fontWeight": true,                                                                                                // 6657
		"lineHeight": true,                                                                                                // 6658
		"opacity": true,                                                                                                   // 6659
		"order": true,                                                                                                     // 6660
		"orphans": true,                                                                                                   // 6661
		"widows": true,                                                                                                    // 6662
		"zIndex": true,                                                                                                    // 6663
		"zoom": true                                                                                                       // 6664
	},                                                                                                                  // 6665
                                                                                                                     // 6666
	// Add in properties whose names you wish to fix before                                                             // 6667
	// setting or getting the value                                                                                     // 6668
	cssProps: {                                                                                                         // 6669
		// normalize float css property                                                                                    // 6670
		"float": support.cssFloat ? "cssFloat" : "styleFloat"                                                              // 6671
	},                                                                                                                  // 6672
                                                                                                                     // 6673
	// Get and set the style property on a DOM Node                                                                     // 6674
	style: function( elem, name, value, extra ) {                                                                       // 6675
		// Don't set styles on text and comment nodes                                                                      // 6676
		if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {                                        // 6677
			return;                                                                                                           // 6678
		}                                                                                                                  // 6679
                                                                                                                     // 6680
		// Make sure that we're working with the right name                                                                // 6681
		var ret, type, hooks,                                                                                              // 6682
			origName = jQuery.camelCase( name ),                                                                              // 6683
			style = elem.style;                                                                                               // 6684
                                                                                                                     // 6685
		name = jQuery.cssProps[ origName ] || ( jQuery.cssProps[ origName ] = vendorPropName( style, origName ) );         // 6686
                                                                                                                     // 6687
		// gets hook for the prefixed version                                                                              // 6688
		// followed by the unprefixed version                                                                              // 6689
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];                                                    // 6690
                                                                                                                     // 6691
		// Check if we're setting a value                                                                                  // 6692
		if ( value !== undefined ) {                                                                                       // 6693
			type = typeof value;                                                                                              // 6694
                                                                                                                     // 6695
			// convert relative number strings (+= or -=) to relative numbers. #7345                                          // 6696
			if ( type === "string" && (ret = rrelNum.exec( value )) ) {                                                       // 6697
				value = ( ret[1] + 1 ) * ret[2] + parseFloat( jQuery.css( elem, name ) );                                        // 6698
				// Fixes bug #9237                                                                                               // 6699
				type = "number";                                                                                                 // 6700
			}                                                                                                                 // 6701
                                                                                                                     // 6702
			// Make sure that null and NaN values aren't set. See: #7116                                                      // 6703
			if ( value == null || value !== value ) {                                                                         // 6704
				return;                                                                                                          // 6705
			}                                                                                                                 // 6706
                                                                                                                     // 6707
			// If a number was passed in, add 'px' to the (except for certain CSS properties)                                 // 6708
			if ( type === "number" && !jQuery.cssNumber[ origName ] ) {                                                       // 6709
				value += "px";                                                                                                   // 6710
			}                                                                                                                 // 6711
                                                                                                                     // 6712
			// Fixes #8908, it can be done more correctly by specifing setters in cssHooks,                                   // 6713
			// but it would mean to define eight (for every problematic property) identical functions                         // 6714
			if ( !support.clearCloneStyle && value === "" && name.indexOf("background") === 0 ) {                             // 6715
				style[ name ] = "inherit";                                                                                       // 6716
			}                                                                                                                 // 6717
                                                                                                                     // 6718
			// If a hook was provided, use that value, otherwise just set the specified value                                 // 6719
			if ( !hooks || !("set" in hooks) || (value = hooks.set( elem, value, extra )) !== undefined ) {                   // 6720
                                                                                                                     // 6721
				// Support: IE                                                                                                   // 6722
				// Swallow errors from 'invalid' CSS values (#5509)                                                              // 6723
				try {                                                                                                            // 6724
					// Support: Chrome, Safari                                                                                      // 6725
					// Setting style to blank string required to delete "style: x !important;"                                      // 6726
					style[ name ] = "";                                                                                             // 6727
					style[ name ] = value;                                                                                          // 6728
				} catch(e) {}                                                                                                    // 6729
			}                                                                                                                 // 6730
                                                                                                                     // 6731
		} else {                                                                                                           // 6732
			// If a hook was provided get the non-computed value from there                                                   // 6733
			if ( hooks && "get" in hooks && (ret = hooks.get( elem, false, extra )) !== undefined ) {                         // 6734
				return ret;                                                                                                      // 6735
			}                                                                                                                 // 6736
                                                                                                                     // 6737
			// Otherwise just get the value from the style object                                                             // 6738
			return style[ name ];                                                                                             // 6739
		}                                                                                                                  // 6740
	},                                                                                                                  // 6741
                                                                                                                     // 6742
	css: function( elem, name, extra, styles ) {                                                                        // 6743
		var num, val, hooks,                                                                                               // 6744
			origName = jQuery.camelCase( name );                                                                              // 6745
                                                                                                                     // 6746
		// Make sure that we're working with the right name                                                                // 6747
		name = jQuery.cssProps[ origName ] || ( jQuery.cssProps[ origName ] = vendorPropName( elem.style, origName ) );    // 6748
                                                                                                                     // 6749
		// gets hook for the prefixed version                                                                              // 6750
		// followed by the unprefixed version                                                                              // 6751
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];                                                    // 6752
                                                                                                                     // 6753
		// If a hook was provided get the computed value from there                                                        // 6754
		if ( hooks && "get" in hooks ) {                                                                                   // 6755
			val = hooks.get( elem, true, extra );                                                                             // 6756
		}                                                                                                                  // 6757
                                                                                                                     // 6758
		// Otherwise, if a way to get the computed value exists, use that                                                  // 6759
		if ( val === undefined ) {                                                                                         // 6760
			val = curCSS( elem, name, styles );                                                                               // 6761
		}                                                                                                                  // 6762
                                                                                                                     // 6763
		//convert "normal" to computed value                                                                               // 6764
		if ( val === "normal" && name in cssNormalTransform ) {                                                            // 6765
			val = cssNormalTransform[ name ];                                                                                 // 6766
		}                                                                                                                  // 6767
                                                                                                                     // 6768
		// Return, converting to number if forced or a qualifier was provided and val looks numeric                        // 6769
		if ( extra === "" || extra ) {                                                                                     // 6770
			num = parseFloat( val );                                                                                          // 6771
			return extra === true || jQuery.isNumeric( num ) ? num || 0 : val;                                                // 6772
		}                                                                                                                  // 6773
		return val;                                                                                                        // 6774
	}                                                                                                                   // 6775
});                                                                                                                  // 6776
                                                                                                                     // 6777
jQuery.each([ "height", "width" ], function( i, name ) {                                                             // 6778
	jQuery.cssHooks[ name ] = {                                                                                         // 6779
		get: function( elem, computed, extra ) {                                                                           // 6780
			if ( computed ) {                                                                                                 // 6781
				// certain elements can have dimension info if we invisibly show them                                            // 6782
				// however, it must have a current display style that would benefit from this                                    // 6783
				return elem.offsetWidth === 0 && rdisplayswap.test( jQuery.css( elem, "display" ) ) ?                            // 6784
					jQuery.swap( elem, cssShow, function() {                                                                        // 6785
						return getWidthOrHeight( elem, name, extra );                                                                  // 6786
					}) :                                                                                                            // 6787
					getWidthOrHeight( elem, name, extra );                                                                          // 6788
			}                                                                                                                 // 6789
		},                                                                                                                 // 6790
                                                                                                                     // 6791
		set: function( elem, value, extra ) {                                                                              // 6792
			var styles = extra && getStyles( elem );                                                                          // 6793
			return setPositiveNumber( elem, value, extra ?                                                                    // 6794
				augmentWidthOrHeight(                                                                                            // 6795
					elem,                                                                                                           // 6796
					name,                                                                                                           // 6797
					extra,                                                                                                          // 6798
					support.boxSizing() && jQuery.css( elem, "boxSizing", false, styles ) === "border-box",                         // 6799
					styles                                                                                                          // 6800
				) : 0                                                                                                            // 6801
			);                                                                                                                // 6802
		}                                                                                                                  // 6803
	};                                                                                                                  // 6804
});                                                                                                                  // 6805
                                                                                                                     // 6806
if ( !support.opacity ) {                                                                                            // 6807
	jQuery.cssHooks.opacity = {                                                                                         // 6808
		get: function( elem, computed ) {                                                                                  // 6809
			// IE uses filters for opacity                                                                                    // 6810
			return ropacity.test( (computed && elem.currentStyle ? elem.currentStyle.filter : elem.style.filter) || "" ) ?    // 6811
				( 0.01 * parseFloat( RegExp.$1 ) ) + "" :                                                                        // 6812
				computed ? "1" : "";                                                                                             // 6813
		},                                                                                                                 // 6814
                                                                                                                     // 6815
		set: function( elem, value ) {                                                                                     // 6816
			var style = elem.style,                                                                                           // 6817
				currentStyle = elem.currentStyle,                                                                                // 6818
				opacity = jQuery.isNumeric( value ) ? "alpha(opacity=" + value * 100 + ")" : "",                                 // 6819
				filter = currentStyle && currentStyle.filter || style.filter || "";                                              // 6820
                                                                                                                     // 6821
			// IE has trouble with opacity if it does not have layout                                                         // 6822
			// Force it by setting the zoom level                                                                             // 6823
			style.zoom = 1;                                                                                                   // 6824
                                                                                                                     // 6825
			// if setting opacity to 1, and no other filters exist - attempt to remove filter attribute #6652                 // 6826
			// if value === "", then remove inline opacity #12685                                                             // 6827
			if ( ( value >= 1 || value === "" ) &&                                                                            // 6828
					jQuery.trim( filter.replace( ralpha, "" ) ) === "" &&                                                           // 6829
					style.removeAttribute ) {                                                                                       // 6830
                                                                                                                     // 6831
				// Setting style.filter to null, "" & " " still leave "filter:" in the cssText                                   // 6832
				// if "filter:" is present at all, clearType is disabled, we want to avoid this                                  // 6833
				// style.removeAttribute is IE Only, but so apparently is this code path...                                      // 6834
				style.removeAttribute( "filter" );                                                                               // 6835
                                                                                                                     // 6836
				// if there is no filter style applied in a css rule or unset inline opacity, we are done                        // 6837
				if ( value === "" || currentStyle && !currentStyle.filter ) {                                                    // 6838
					return;                                                                                                         // 6839
				}                                                                                                                // 6840
			}                                                                                                                 // 6841
                                                                                                                     // 6842
			// otherwise, set new filter values                                                                               // 6843
			style.filter = ralpha.test( filter ) ?                                                                            // 6844
				filter.replace( ralpha, opacity ) :                                                                              // 6845
				filter + " " + opacity;                                                                                          // 6846
		}                                                                                                                  // 6847
	};                                                                                                                  // 6848
}                                                                                                                    // 6849
                                                                                                                     // 6850
jQuery.cssHooks.marginRight = addGetHookIf( support.reliableMarginRight,                                             // 6851
	function( elem, computed ) {                                                                                        // 6852
		if ( computed ) {                                                                                                  // 6853
			// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right                                       // 6854
			// Work around by temporarily setting element display to inline-block                                             // 6855
			return jQuery.swap( elem, { "display": "inline-block" },                                                          // 6856
				curCSS, [ elem, "marginRight" ] );                                                                               // 6857
		}                                                                                                                  // 6858
	}                                                                                                                   // 6859
);                                                                                                                   // 6860
                                                                                                                     // 6861
// These hooks are used by animate to expand properties                                                              // 6862
jQuery.each({                                                                                                        // 6863
	margin: "",                                                                                                         // 6864
	padding: "",                                                                                                        // 6865
	border: "Width"                                                                                                     // 6866
}, function( prefix, suffix ) {                                                                                      // 6867
	jQuery.cssHooks[ prefix + suffix ] = {                                                                              // 6868
		expand: function( value ) {                                                                                        // 6869
			var i = 0,                                                                                                        // 6870
				expanded = {},                                                                                                   // 6871
                                                                                                                     // 6872
				// assumes a single number if not a string                                                                       // 6873
				parts = typeof value === "string" ? value.split(" ") : [ value ];                                                // 6874
                                                                                                                     // 6875
			for ( ; i < 4; i++ ) {                                                                                            // 6876
				expanded[ prefix + cssExpand[ i ] + suffix ] =                                                                   // 6877
					parts[ i ] || parts[ i - 2 ] || parts[ 0 ];                                                                     // 6878
			}                                                                                                                 // 6879
                                                                                                                     // 6880
			return expanded;                                                                                                  // 6881
		}                                                                                                                  // 6882
	};                                                                                                                  // 6883
                                                                                                                     // 6884
	if ( !rmargin.test( prefix ) ) {                                                                                    // 6885
		jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;                                                        // 6886
	}                                                                                                                   // 6887
});                                                                                                                  // 6888
                                                                                                                     // 6889
jQuery.fn.extend({                                                                                                   // 6890
	css: function( name, value ) {                                                                                      // 6891
		return access( this, function( elem, name, value ) {                                                               // 6892
			var styles, len,                                                                                                  // 6893
				map = {},                                                                                                        // 6894
				i = 0;                                                                                                           // 6895
                                                                                                                     // 6896
			if ( jQuery.isArray( name ) ) {                                                                                   // 6897
				styles = getStyles( elem );                                                                                      // 6898
				len = name.length;                                                                                               // 6899
                                                                                                                     // 6900
				for ( ; i < len; i++ ) {                                                                                         // 6901
					map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );                                                // 6902
				}                                                                                                                // 6903
                                                                                                                     // 6904
				return map;                                                                                                      // 6905
			}                                                                                                                 // 6906
                                                                                                                     // 6907
			return value !== undefined ?                                                                                      // 6908
				jQuery.style( elem, name, value ) :                                                                              // 6909
				jQuery.css( elem, name );                                                                                        // 6910
		}, name, value, arguments.length > 1 );                                                                            // 6911
	},                                                                                                                  // 6912
	show: function() {                                                                                                  // 6913
		return showHide( this, true );                                                                                     // 6914
	},                                                                                                                  // 6915
	hide: function() {                                                                                                  // 6916
		return showHide( this );                                                                                           // 6917
	},                                                                                                                  // 6918
	toggle: function( state ) {                                                                                         // 6919
		if ( typeof state === "boolean" ) {                                                                                // 6920
			return state ? this.show() : this.hide();                                                                         // 6921
		}                                                                                                                  // 6922
                                                                                                                     // 6923
		return this.each(function() {                                                                                      // 6924
			if ( isHidden( this ) ) {                                                                                         // 6925
				jQuery( this ).show();                                                                                           // 6926
			} else {                                                                                                          // 6927
				jQuery( this ).hide();                                                                                           // 6928
			}                                                                                                                 // 6929
		});                                                                                                                // 6930
	}                                                                                                                   // 6931
});                                                                                                                  // 6932
                                                                                                                     // 6933
                                                                                                                     // 6934
function Tween( elem, options, prop, end, easing ) {                                                                 // 6935
	return new Tween.prototype.init( elem, options, prop, end, easing );                                                // 6936
}                                                                                                                    // 6937
jQuery.Tween = Tween;                                                                                                // 6938
                                                                                                                     // 6939
Tween.prototype = {                                                                                                  // 6940
	constructor: Tween,                                                                                                 // 6941
	init: function( elem, options, prop, end, easing, unit ) {                                                          // 6942
		this.elem = elem;                                                                                                  // 6943
		this.prop = prop;                                                                                                  // 6944
		this.easing = easing || "swing";                                                                                   // 6945
		this.options = options;                                                                                            // 6946
		this.start = this.now = this.cur();                                                                                // 6947
		this.end = end;                                                                                                    // 6948
		this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );                                                      // 6949
	},                                                                                                                  // 6950
	cur: function() {                                                                                                   // 6951
		var hooks = Tween.propHooks[ this.prop ];                                                                          // 6952
                                                                                                                     // 6953
		return hooks && hooks.get ?                                                                                        // 6954
			hooks.get( this ) :                                                                                               // 6955
			Tween.propHooks._default.get( this );                                                                             // 6956
	},                                                                                                                  // 6957
	run: function( percent ) {                                                                                          // 6958
		var eased,                                                                                                         // 6959
			hooks = Tween.propHooks[ this.prop ];                                                                             // 6960
                                                                                                                     // 6961
		if ( this.options.duration ) {                                                                                     // 6962
			this.pos = eased = jQuery.easing[ this.easing ](                                                                  // 6963
				percent, this.options.duration * percent, 0, 1, this.options.duration                                            // 6964
			);                                                                                                                // 6965
		} else {                                                                                                           // 6966
			this.pos = eased = percent;                                                                                       // 6967
		}                                                                                                                  // 6968
		this.now = ( this.end - this.start ) * eased + this.start;                                                         // 6969
                                                                                                                     // 6970
		if ( this.options.step ) {                                                                                         // 6971
			this.options.step.call( this.elem, this.now, this );                                                              // 6972
		}                                                                                                                  // 6973
                                                                                                                     // 6974
		if ( hooks && hooks.set ) {                                                                                        // 6975
			hooks.set( this );                                                                                                // 6976
		} else {                                                                                                           // 6977
			Tween.propHooks._default.set( this );                                                                             // 6978
		}                                                                                                                  // 6979
		return this;                                                                                                       // 6980
	}                                                                                                                   // 6981
};                                                                                                                   // 6982
                                                                                                                     // 6983
Tween.prototype.init.prototype = Tween.prototype;                                                                    // 6984
                                                                                                                     // 6985
Tween.propHooks = {                                                                                                  // 6986
	_default: {                                                                                                         // 6987
		get: function( tween ) {                                                                                           // 6988
			var result;                                                                                                       // 6989
                                                                                                                     // 6990
			if ( tween.elem[ tween.prop ] != null &&                                                                          // 6991
				(!tween.elem.style || tween.elem.style[ tween.prop ] == null) ) {                                                // 6992
				return tween.elem[ tween.prop ];                                                                                 // 6993
			}                                                                                                                 // 6994
                                                                                                                     // 6995
			// passing an empty string as a 3rd parameter to .css will automatically                                          // 6996
			// attempt a parseFloat and fallback to a string if the parse fails                                               // 6997
			// so, simple values such as "10px" are parsed to Float.                                                          // 6998
			// complex values such as "rotate(1rad)" are returned as is.                                                      // 6999
			result = jQuery.css( tween.elem, tween.prop, "" );                                                                // 7000
			// Empty strings, null, undefined and "auto" are converted to 0.                                                  // 7001
			return !result || result === "auto" ? 0 : result;                                                                 // 7002
		},                                                                                                                 // 7003
		set: function( tween ) {                                                                                           // 7004
			// use step hook for back compat - use cssHook if its there - use .style if its                                   // 7005
			// available and use plain properties where available                                                             // 7006
			if ( jQuery.fx.step[ tween.prop ] ) {                                                                             // 7007
				jQuery.fx.step[ tween.prop ]( tween );                                                                           // 7008
			} else if ( tween.elem.style && ( tween.elem.style[ jQuery.cssProps[ tween.prop ] ] != null || jQuery.cssHooks[ tween.prop ] ) ) {
				jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );                                                  // 7010
			} else {                                                                                                          // 7011
				tween.elem[ tween.prop ] = tween.now;                                                                            // 7012
			}                                                                                                                 // 7013
		}                                                                                                                  // 7014
	}                                                                                                                   // 7015
};                                                                                                                   // 7016
                                                                                                                     // 7017
// Support: IE <=9                                                                                                   // 7018
// Panic based approach to setting things on disconnected nodes                                                      // 7019
                                                                                                                     // 7020
Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {                                                           // 7021
	set: function( tween ) {                                                                                            // 7022
		if ( tween.elem.nodeType && tween.elem.parentNode ) {                                                              // 7023
			tween.elem[ tween.prop ] = tween.now;                                                                             // 7024
		}                                                                                                                  // 7025
	}                                                                                                                   // 7026
};                                                                                                                   // 7027
                                                                                                                     // 7028
jQuery.easing = {                                                                                                    // 7029
	linear: function( p ) {                                                                                             // 7030
		return p;                                                                                                          // 7031
	},                                                                                                                  // 7032
	swing: function( p ) {                                                                                              // 7033
		return 0.5 - Math.cos( p * Math.PI ) / 2;                                                                          // 7034
	}                                                                                                                   // 7035
};                                                                                                                   // 7036
                                                                                                                     // 7037
jQuery.fx = Tween.prototype.init;                                                                                    // 7038
                                                                                                                     // 7039
// Back Compat <1.8 extension point                                                                                  // 7040
jQuery.fx.step = {};                                                                                                 // 7041
                                                                                                                     // 7042
                                                                                                                     // 7043
                                                                                                                     // 7044
                                                                                                                     // 7045
var                                                                                                                  // 7046
	fxNow, timerId,                                                                                                     // 7047
	rfxtypes = /^(?:toggle|show|hide)$/,                                                                                // 7048
	rfxnum = new RegExp( "^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i" ),                                                // 7049
	rrun = /queueHooks$/,                                                                                               // 7050
	animationPrefilters = [ defaultPrefilter ],                                                                         // 7051
	tweeners = {                                                                                                        // 7052
		"*": [ function( prop, value ) {                                                                                   // 7053
			var tween = this.createTween( prop, value ),                                                                      // 7054
				target = tween.cur(),                                                                                            // 7055
				parts = rfxnum.exec( value ),                                                                                    // 7056
				unit = parts && parts[ 3 ] || ( jQuery.cssNumber[ prop ] ? "" : "px" ),                                          // 7057
                                                                                                                     // 7058
				// Starting value computation is required for potential unit mismatches                                          // 7059
				start = ( jQuery.cssNumber[ prop ] || unit !== "px" && +target ) &&                                              // 7060
					rfxnum.exec( jQuery.css( tween.elem, prop ) ),                                                                  // 7061
				scale = 1,                                                                                                       // 7062
				maxIterations = 20;                                                                                              // 7063
                                                                                                                     // 7064
			if ( start && start[ 3 ] !== unit ) {                                                                             // 7065
				// Trust units reported by jQuery.css                                                                            // 7066
				unit = unit || start[ 3 ];                                                                                       // 7067
                                                                                                                     // 7068
				// Make sure we update the tween properties later on                                                             // 7069
				parts = parts || [];                                                                                             // 7070
                                                                                                                     // 7071
				// Iteratively approximate from a nonzero starting point                                                         // 7072
				start = +target || 1;                                                                                            // 7073
                                                                                                                     // 7074
				do {                                                                                                             // 7075
					// If previous iteration zeroed out, double until we get *something*                                            // 7076
					// Use a string for doubling factor so we don't accidentally see scale as unchanged below                       // 7077
					scale = scale || ".5";                                                                                          // 7078
                                                                                                                     // 7079
					// Adjust and apply                                                                                             // 7080
					start = start / scale;                                                                                          // 7081
					jQuery.style( tween.elem, prop, start + unit );                                                                 // 7082
                                                                                                                     // 7083
				// Update scale, tolerating zero or NaN from tween.cur()                                                         // 7084
				// And breaking the loop if scale is unchanged or perfect, or if we've just had enough                           // 7085
				} while ( scale !== (scale = tween.cur() / target) && scale !== 1 && --maxIterations );                          // 7086
			}                                                                                                                 // 7087
                                                                                                                     // 7088
			// Update tween properties                                                                                        // 7089
			if ( parts ) {                                                                                                    // 7090
				start = tween.start = +start || +target || 0;                                                                    // 7091
				tween.unit = unit;                                                                                               // 7092
				// If a +=/-= token was provided, we're doing a relative animation                                               // 7093
				tween.end = parts[ 1 ] ?                                                                                         // 7094
					start + ( parts[ 1 ] + 1 ) * parts[ 2 ] :                                                                       // 7095
					+parts[ 2 ];                                                                                                    // 7096
			}                                                                                                                 // 7097
                                                                                                                     // 7098
			return tween;                                                                                                     // 7099
		} ]                                                                                                                // 7100
	};                                                                                                                  // 7101
                                                                                                                     // 7102
// Animations created synchronously will run synchronously                                                           // 7103
function createFxNow() {                                                                                             // 7104
	setTimeout(function() {                                                                                             // 7105
		fxNow = undefined;                                                                                                 // 7106
	});                                                                                                                 // 7107
	return ( fxNow = jQuery.now() );                                                                                    // 7108
}                                                                                                                    // 7109
                                                                                                                     // 7110
// Generate parameters to create a standard animation                                                                // 7111
function genFx( type, includeWidth ) {                                                                               // 7112
	var which,                                                                                                          // 7113
		attrs = { height: type },                                                                                          // 7114
		i = 0;                                                                                                             // 7115
                                                                                                                     // 7116
	// if we include width, step value is 1 to do all cssExpand values,                                                 // 7117
	// if we don't include width, step value is 2 to skip over Left and Right                                           // 7118
	includeWidth = includeWidth ? 1 : 0;                                                                                // 7119
	for ( ; i < 4 ; i += 2 - includeWidth ) {                                                                           // 7120
		which = cssExpand[ i ];                                                                                            // 7121
		attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;                                                     // 7122
	}                                                                                                                   // 7123
                                                                                                                     // 7124
	if ( includeWidth ) {                                                                                               // 7125
		attrs.opacity = attrs.width = type;                                                                                // 7126
	}                                                                                                                   // 7127
                                                                                                                     // 7128
	return attrs;                                                                                                       // 7129
}                                                                                                                    // 7130
                                                                                                                     // 7131
function createTween( value, prop, animation ) {                                                                     // 7132
	var tween,                                                                                                          // 7133
		collection = ( tweeners[ prop ] || [] ).concat( tweeners[ "*" ] ),                                                 // 7134
		index = 0,                                                                                                         // 7135
		length = collection.length;                                                                                        // 7136
	for ( ; index < length; index++ ) {                                                                                 // 7137
		if ( (tween = collection[ index ].call( animation, prop, value )) ) {                                              // 7138
                                                                                                                     // 7139
			// we're done with this property                                                                                  // 7140
			return tween;                                                                                                     // 7141
		}                                                                                                                  // 7142
	}                                                                                                                   // 7143
}                                                                                                                    // 7144
                                                                                                                     // 7145
function defaultPrefilter( elem, props, opts ) {                                                                     // 7146
	/* jshint validthis: true */                                                                                        // 7147
	var prop, value, toggle, tween, hooks, oldfire, display, dDisplay,                                                  // 7148
		anim = this,                                                                                                       // 7149
		orig = {},                                                                                                         // 7150
		style = elem.style,                                                                                                // 7151
		hidden = elem.nodeType && isHidden( elem ),                                                                        // 7152
		dataShow = jQuery._data( elem, "fxshow" );                                                                         // 7153
                                                                                                                     // 7154
	// handle queue: false promises                                                                                     // 7155
	if ( !opts.queue ) {                                                                                                // 7156
		hooks = jQuery._queueHooks( elem, "fx" );                                                                          // 7157
		if ( hooks.unqueued == null ) {                                                                                    // 7158
			hooks.unqueued = 0;                                                                                               // 7159
			oldfire = hooks.empty.fire;                                                                                       // 7160
			hooks.empty.fire = function() {                                                                                   // 7161
				if ( !hooks.unqueued ) {                                                                                         // 7162
					oldfire();                                                                                                      // 7163
				}                                                                                                                // 7164
			};                                                                                                                // 7165
		}                                                                                                                  // 7166
		hooks.unqueued++;                                                                                                  // 7167
                                                                                                                     // 7168
		anim.always(function() {                                                                                           // 7169
			// doing this makes sure that the complete handler will be called                                                 // 7170
			// before this completes                                                                                          // 7171
			anim.always(function() {                                                                                          // 7172
				hooks.unqueued--;                                                                                                // 7173
				if ( !jQuery.queue( elem, "fx" ).length ) {                                                                      // 7174
					hooks.empty.fire();                                                                                             // 7175
				}                                                                                                                // 7176
			});                                                                                                               // 7177
		});                                                                                                                // 7178
	}                                                                                                                   // 7179
                                                                                                                     // 7180
	// height/width overflow pass                                                                                       // 7181
	if ( elem.nodeType === 1 && ( "height" in props || "width" in props ) ) {                                           // 7182
		// Make sure that nothing sneaks out                                                                               // 7183
		// Record all 3 overflow attributes because IE does not                                                            // 7184
		// change the overflow attribute when overflowX and                                                                // 7185
		// overflowY are set to the same value                                                                             // 7186
		opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];                                              // 7187
                                                                                                                     // 7188
		// Set display property to inline-block for height/width                                                           // 7189
		// animations on inline elements that are having width/height animated                                             // 7190
		display = jQuery.css( elem, "display" );                                                                           // 7191
		dDisplay = defaultDisplay( elem.nodeName );                                                                        // 7192
		if ( display === "none" ) {                                                                                        // 7193
			display = dDisplay;                                                                                               // 7194
		}                                                                                                                  // 7195
		if ( display === "inline" &&                                                                                       // 7196
				jQuery.css( elem, "float" ) === "none" ) {                                                                       // 7197
                                                                                                                     // 7198
			// inline-level elements accept inline-block;                                                                     // 7199
			// block-level elements need to be inline with layout                                                             // 7200
			if ( !support.inlineBlockNeedsLayout || dDisplay === "inline" ) {                                                 // 7201
				style.display = "inline-block";                                                                                  // 7202
			} else {                                                                                                          // 7203
				style.zoom = 1;                                                                                                  // 7204
			}                                                                                                                 // 7205
		}                                                                                                                  // 7206
	}                                                                                                                   // 7207
                                                                                                                     // 7208
	if ( opts.overflow ) {                                                                                              // 7209
		style.overflow = "hidden";                                                                                         // 7210
		if ( !support.shrinkWrapBlocks() ) {                                                                               // 7211
			anim.always(function() {                                                                                          // 7212
				style.overflow = opts.overflow[ 0 ];                                                                             // 7213
				style.overflowX = opts.overflow[ 1 ];                                                                            // 7214
				style.overflowY = opts.overflow[ 2 ];                                                                            // 7215
			});                                                                                                               // 7216
		}                                                                                                                  // 7217
	}                                                                                                                   // 7218
                                                                                                                     // 7219
	// show/hide pass                                                                                                   // 7220
	for ( prop in props ) {                                                                                             // 7221
		value = props[ prop ];                                                                                             // 7222
		if ( rfxtypes.exec( value ) ) {                                                                                    // 7223
			delete props[ prop ];                                                                                             // 7224
			toggle = toggle || value === "toggle";                                                                            // 7225
			if ( value === ( hidden ? "hide" : "show" ) ) {                                                                   // 7226
                                                                                                                     // 7227
				// If there is dataShow left over from a stopped hide or show and we are going to proceed with show, we should pretend to be hidden
				if ( value === "show" && dataShow && dataShow[ prop ] !== undefined ) {                                          // 7229
					hidden = true;                                                                                                  // 7230
				} else {                                                                                                         // 7231
					continue;                                                                                                       // 7232
				}                                                                                                                // 7233
			}                                                                                                                 // 7234
			orig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );                                        // 7235
		}                                                                                                                  // 7236
	}                                                                                                                   // 7237
                                                                                                                     // 7238
	if ( !jQuery.isEmptyObject( orig ) ) {                                                                              // 7239
		if ( dataShow ) {                                                                                                  // 7240
			if ( "hidden" in dataShow ) {                                                                                     // 7241
				hidden = dataShow.hidden;                                                                                        // 7242
			}                                                                                                                 // 7243
		} else {                                                                                                           // 7244
			dataShow = jQuery._data( elem, "fxshow", {} );                                                                    // 7245
		}                                                                                                                  // 7246
                                                                                                                     // 7247
		// store state if its toggle - enables .stop().toggle() to "reverse"                                               // 7248
		if ( toggle ) {                                                                                                    // 7249
			dataShow.hidden = !hidden;                                                                                        // 7250
		}                                                                                                                  // 7251
		if ( hidden ) {                                                                                                    // 7252
			jQuery( elem ).show();                                                                                            // 7253
		} else {                                                                                                           // 7254
			anim.done(function() {                                                                                            // 7255
				jQuery( elem ).hide();                                                                                           // 7256
			});                                                                                                               // 7257
		}                                                                                                                  // 7258
		anim.done(function() {                                                                                             // 7259
			var prop;                                                                                                         // 7260
			jQuery._removeData( elem, "fxshow" );                                                                             // 7261
			for ( prop in orig ) {                                                                                            // 7262
				jQuery.style( elem, prop, orig[ prop ] );                                                                        // 7263
			}                                                                                                                 // 7264
		});                                                                                                                // 7265
		for ( prop in orig ) {                                                                                             // 7266
			tween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );                                                 // 7267
                                                                                                                     // 7268
			if ( !( prop in dataShow ) ) {                                                                                    // 7269
				dataShow[ prop ] = tween.start;                                                                                  // 7270
				if ( hidden ) {                                                                                                  // 7271
					tween.end = tween.start;                                                                                        // 7272
					tween.start = prop === "width" || prop === "height" ? 1 : 0;                                                    // 7273
				}                                                                                                                // 7274
			}                                                                                                                 // 7275
		}                                                                                                                  // 7276
	}                                                                                                                   // 7277
}                                                                                                                    // 7278
                                                                                                                     // 7279
function propFilter( props, specialEasing ) {                                                                        // 7280
	var index, name, easing, value, hooks;                                                                              // 7281
                                                                                                                     // 7282
	// camelCase, specialEasing and expand cssHook pass                                                                 // 7283
	for ( index in props ) {                                                                                            // 7284
		name = jQuery.camelCase( index );                                                                                  // 7285
		easing = specialEasing[ name ];                                                                                    // 7286
		value = props[ index ];                                                                                            // 7287
		if ( jQuery.isArray( value ) ) {                                                                                   // 7288
			easing = value[ 1 ];                                                                                              // 7289
			value = props[ index ] = value[ 0 ];                                                                              // 7290
		}                                                                                                                  // 7291
                                                                                                                     // 7292
		if ( index !== name ) {                                                                                            // 7293
			props[ name ] = value;                                                                                            // 7294
			delete props[ index ];                                                                                            // 7295
		}                                                                                                                  // 7296
                                                                                                                     // 7297
		hooks = jQuery.cssHooks[ name ];                                                                                   // 7298
		if ( hooks && "expand" in hooks ) {                                                                                // 7299
			value = hooks.expand( value );                                                                                    // 7300
			delete props[ name ];                                                                                             // 7301
                                                                                                                     // 7302
			// not quite $.extend, this wont overwrite keys already present.                                                  // 7303
			// also - reusing 'index' from above because we have the correct "name"                                           // 7304
			for ( index in value ) {                                                                                          // 7305
				if ( !( index in props ) ) {                                                                                     // 7306
					props[ index ] = value[ index ];                                                                                // 7307
					specialEasing[ index ] = easing;                                                                                // 7308
				}                                                                                                                // 7309
			}                                                                                                                 // 7310
		} else {                                                                                                           // 7311
			specialEasing[ name ] = easing;                                                                                   // 7312
		}                                                                                                                  // 7313
	}                                                                                                                   // 7314
}                                                                                                                    // 7315
                                                                                                                     // 7316
function Animation( elem, properties, options ) {                                                                    // 7317
	var result,                                                                                                         // 7318
		stopped,                                                                                                           // 7319
		index = 0,                                                                                                         // 7320
		length = animationPrefilters.length,                                                                               // 7321
		deferred = jQuery.Deferred().always( function() {                                                                  // 7322
			// don't match elem in the :animated selector                                                                     // 7323
			delete tick.elem;                                                                                                 // 7324
		}),                                                                                                                // 7325
		tick = function() {                                                                                                // 7326
			if ( stopped ) {                                                                                                  // 7327
				return false;                                                                                                    // 7328
			}                                                                                                                 // 7329
			var currentTime = fxNow || createFxNow(),                                                                         // 7330
				remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),                               // 7331
				// archaic crash bug won't allow us to use 1 - ( 0.5 || 0 ) (#12497)                                             // 7332
				temp = remaining / animation.duration || 0,                                                                      // 7333
				percent = 1 - temp,                                                                                              // 7334
				index = 0,                                                                                                       // 7335
				length = animation.tweens.length;                                                                                // 7336
                                                                                                                     // 7337
			for ( ; index < length ; index++ ) {                                                                              // 7338
				animation.tweens[ index ].run( percent );                                                                        // 7339
			}                                                                                                                 // 7340
                                                                                                                     // 7341
			deferred.notifyWith( elem, [ animation, percent, remaining ]);                                                    // 7342
                                                                                                                     // 7343
			if ( percent < 1 && length ) {                                                                                    // 7344
				return remaining;                                                                                                // 7345
			} else {                                                                                                          // 7346
				deferred.resolveWith( elem, [ animation ] );                                                                     // 7347
				return false;                                                                                                    // 7348
			}                                                                                                                 // 7349
		},                                                                                                                 // 7350
		animation = deferred.promise({                                                                                     // 7351
			elem: elem,                                                                                                       // 7352
			props: jQuery.extend( {}, properties ),                                                                           // 7353
			opts: jQuery.extend( true, { specialEasing: {} }, options ),                                                      // 7354
			originalProperties: properties,                                                                                   // 7355
			originalOptions: options,                                                                                         // 7356
			startTime: fxNow || createFxNow(),                                                                                // 7357
			duration: options.duration,                                                                                       // 7358
			tweens: [],                                                                                                       // 7359
			createTween: function( prop, end ) {                                                                              // 7360
				var tween = jQuery.Tween( elem, animation.opts, prop, end,                                                       // 7361
						animation.opts.specialEasing[ prop ] || animation.opts.easing );                                               // 7362
				animation.tweens.push( tween );                                                                                  // 7363
				return tween;                                                                                                    // 7364
			},                                                                                                                // 7365
			stop: function( gotoEnd ) {                                                                                       // 7366
				var index = 0,                                                                                                   // 7367
					// if we are going to the end, we want to run all the tweens                                                    // 7368
					// otherwise we skip this part                                                                                  // 7369
					length = gotoEnd ? animation.tweens.length : 0;                                                                 // 7370
				if ( stopped ) {                                                                                                 // 7371
					return this;                                                                                                    // 7372
				}                                                                                                                // 7373
				stopped = true;                                                                                                  // 7374
				for ( ; index < length ; index++ ) {                                                                             // 7375
					animation.tweens[ index ].run( 1 );                                                                             // 7376
				}                                                                                                                // 7377
                                                                                                                     // 7378
				// resolve when we played the last frame                                                                         // 7379
				// otherwise, reject                                                                                             // 7380
				if ( gotoEnd ) {                                                                                                 // 7381
					deferred.resolveWith( elem, [ animation, gotoEnd ] );                                                           // 7382
				} else {                                                                                                         // 7383
					deferred.rejectWith( elem, [ animation, gotoEnd ] );                                                            // 7384
				}                                                                                                                // 7385
				return this;                                                                                                     // 7386
			}                                                                                                                 // 7387
		}),                                                                                                                // 7388
		props = animation.props;                                                                                           // 7389
                                                                                                                     // 7390
	propFilter( props, animation.opts.specialEasing );                                                                  // 7391
                                                                                                                     // 7392
	for ( ; index < length ; index++ ) {                                                                                // 7393
		result = animationPrefilters[ index ].call( animation, elem, props, animation.opts );                              // 7394
		if ( result ) {                                                                                                    // 7395
			return result;                                                                                                    // 7396
		}                                                                                                                  // 7397
	}                                                                                                                   // 7398
                                                                                                                     // 7399
	jQuery.map( props, createTween, animation );                                                                        // 7400
                                                                                                                     // 7401
	if ( jQuery.isFunction( animation.opts.start ) ) {                                                                  // 7402
		animation.opts.start.call( elem, animation );                                                                      // 7403
	}                                                                                                                   // 7404
                                                                                                                     // 7405
	jQuery.fx.timer(                                                                                                    // 7406
		jQuery.extend( tick, {                                                                                             // 7407
			elem: elem,                                                                                                       // 7408
			anim: animation,                                                                                                  // 7409
			queue: animation.opts.queue                                                                                       // 7410
		})                                                                                                                 // 7411
	);                                                                                                                  // 7412
                                                                                                                     // 7413
	// attach callbacks from options                                                                                    // 7414
	return animation.progress( animation.opts.progress )                                                                // 7415
		.done( animation.opts.done, animation.opts.complete )                                                              // 7416
		.fail( animation.opts.fail )                                                                                       // 7417
		.always( animation.opts.always );                                                                                  // 7418
}                                                                                                                    // 7419
                                                                                                                     // 7420
jQuery.Animation = jQuery.extend( Animation, {                                                                       // 7421
	tweener: function( props, callback ) {                                                                              // 7422
		if ( jQuery.isFunction( props ) ) {                                                                                // 7423
			callback = props;                                                                                                 // 7424
			props = [ "*" ];                                                                                                  // 7425
		} else {                                                                                                           // 7426
			props = props.split(" ");                                                                                         // 7427
		}                                                                                                                  // 7428
                                                                                                                     // 7429
		var prop,                                                                                                          // 7430
			index = 0,                                                                                                        // 7431
			length = props.length;                                                                                            // 7432
                                                                                                                     // 7433
		for ( ; index < length ; index++ ) {                                                                               // 7434
			prop = props[ index ];                                                                                            // 7435
			tweeners[ prop ] = tweeners[ prop ] || [];                                                                        // 7436
			tweeners[ prop ].unshift( callback );                                                                             // 7437
		}                                                                                                                  // 7438
	},                                                                                                                  // 7439
                                                                                                                     // 7440
	prefilter: function( callback, prepend ) {                                                                          // 7441
		if ( prepend ) {                                                                                                   // 7442
			animationPrefilters.unshift( callback );                                                                          // 7443
		} else {                                                                                                           // 7444
			animationPrefilters.push( callback );                                                                             // 7445
		}                                                                                                                  // 7446
	}                                                                                                                   // 7447
});                                                                                                                  // 7448
                                                                                                                     // 7449
jQuery.speed = function( speed, easing, fn ) {                                                                       // 7450
	var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {                                       // 7451
		complete: fn || !fn && easing ||                                                                                   // 7452
			jQuery.isFunction( speed ) && speed,                                                                              // 7453
		duration: speed,                                                                                                   // 7454
		easing: fn && easing || easing && !jQuery.isFunction( easing ) && easing                                           // 7455
	};                                                                                                                  // 7456
                                                                                                                     // 7457
	opt.duration = jQuery.fx.off ? 0 : typeof opt.duration === "number" ? opt.duration :                                // 7458
		opt.duration in jQuery.fx.speeds ? jQuery.fx.speeds[ opt.duration ] : jQuery.fx.speeds._default;                   // 7459
                                                                                                                     // 7460
	// normalize opt.queue - true/undefined/null -> "fx"                                                                // 7461
	if ( opt.queue == null || opt.queue === true ) {                                                                    // 7462
		opt.queue = "fx";                                                                                                  // 7463
	}                                                                                                                   // 7464
                                                                                                                     // 7465
	// Queueing                                                                                                         // 7466
	opt.old = opt.complete;                                                                                             // 7467
                                                                                                                     // 7468
	opt.complete = function() {                                                                                         // 7469
		if ( jQuery.isFunction( opt.old ) ) {                                                                              // 7470
			opt.old.call( this );                                                                                             // 7471
		}                                                                                                                  // 7472
                                                                                                                     // 7473
		if ( opt.queue ) {                                                                                                 // 7474
			jQuery.dequeue( this, opt.queue );                                                                                // 7475
		}                                                                                                                  // 7476
	};                                                                                                                  // 7477
                                                                                                                     // 7478
	return opt;                                                                                                         // 7479
};                                                                                                                   // 7480
                                                                                                                     // 7481
jQuery.fn.extend({                                                                                                   // 7482
	fadeTo: function( speed, to, easing, callback ) {                                                                   // 7483
                                                                                                                     // 7484
		// show any hidden elements after setting opacity to 0                                                             // 7485
		return this.filter( isHidden ).css( "opacity", 0 ).show()                                                          // 7486
                                                                                                                     // 7487
			// animate to the value specified                                                                                 // 7488
			.end().animate({ opacity: to }, speed, easing, callback );                                                        // 7489
	},                                                                                                                  // 7490
	animate: function( prop, speed, easing, callback ) {                                                                // 7491
		var empty = jQuery.isEmptyObject( prop ),                                                                          // 7492
			optall = jQuery.speed( speed, easing, callback ),                                                                 // 7493
			doAnimation = function() {                                                                                        // 7494
				// Operate on a copy of prop so per-property easing won't be lost                                                // 7495
				var anim = Animation( this, jQuery.extend( {}, prop ), optall );                                                 // 7496
                                                                                                                     // 7497
				// Empty animations, or finishing resolves immediately                                                           // 7498
				if ( empty || jQuery._data( this, "finish" ) ) {                                                                 // 7499
					anim.stop( true );                                                                                              // 7500
				}                                                                                                                // 7501
			};                                                                                                                // 7502
			doAnimation.finish = doAnimation;                                                                                 // 7503
                                                                                                                     // 7504
		return empty || optall.queue === false ?                                                                           // 7505
			this.each( doAnimation ) :                                                                                        // 7506
			this.queue( optall.queue, doAnimation );                                                                          // 7507
	},                                                                                                                  // 7508
	stop: function( type, clearQueue, gotoEnd ) {                                                                       // 7509
		var stopQueue = function( hooks ) {                                                                                // 7510
			var stop = hooks.stop;                                                                                            // 7511
			delete hooks.stop;                                                                                                // 7512
			stop( gotoEnd );                                                                                                  // 7513
		};                                                                                                                 // 7514
                                                                                                                     // 7515
		if ( typeof type !== "string" ) {                                                                                  // 7516
			gotoEnd = clearQueue;                                                                                             // 7517
			clearQueue = type;                                                                                                // 7518
			type = undefined;                                                                                                 // 7519
		}                                                                                                                  // 7520
		if ( clearQueue && type !== false ) {                                                                              // 7521
			this.queue( type || "fx", [] );                                                                                   // 7522
		}                                                                                                                  // 7523
                                                                                                                     // 7524
		return this.each(function() {                                                                                      // 7525
			var dequeue = true,                                                                                               // 7526
				index = type != null && type + "queueHooks",                                                                     // 7527
				timers = jQuery.timers,                                                                                          // 7528
				data = jQuery._data( this );                                                                                     // 7529
                                                                                                                     // 7530
			if ( index ) {                                                                                                    // 7531
				if ( data[ index ] && data[ index ].stop ) {                                                                     // 7532
					stopQueue( data[ index ] );                                                                                     // 7533
				}                                                                                                                // 7534
			} else {                                                                                                          // 7535
				for ( index in data ) {                                                                                          // 7536
					if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {                                              // 7537
						stopQueue( data[ index ] );                                                                                    // 7538
					}                                                                                                               // 7539
				}                                                                                                                // 7540
			}                                                                                                                 // 7541
                                                                                                                     // 7542
			for ( index = timers.length; index--; ) {                                                                         // 7543
				if ( timers[ index ].elem === this && (type == null || timers[ index ].queue === type) ) {                       // 7544
					timers[ index ].anim.stop( gotoEnd );                                                                           // 7545
					dequeue = false;                                                                                                // 7546
					timers.splice( index, 1 );                                                                                      // 7547
				}                                                                                                                // 7548
			}                                                                                                                 // 7549
                                                                                                                     // 7550
			// start the next in the queue if the last step wasn't forced                                                     // 7551
			// timers currently will call their complete callbacks, which will dequeue                                        // 7552
			// but only if they were gotoEnd                                                                                  // 7553
			if ( dequeue || !gotoEnd ) {                                                                                      // 7554
				jQuery.dequeue( this, type );                                                                                    // 7555
			}                                                                                                                 // 7556
		});                                                                                                                // 7557
	},                                                                                                                  // 7558
	finish: function( type ) {                                                                                          // 7559
		if ( type !== false ) {                                                                                            // 7560
			type = type || "fx";                                                                                              // 7561
		}                                                                                                                  // 7562
		return this.each(function() {                                                                                      // 7563
			var index,                                                                                                        // 7564
				data = jQuery._data( this ),                                                                                     // 7565
				queue = data[ type + "queue" ],                                                                                  // 7566
				hooks = data[ type + "queueHooks" ],                                                                             // 7567
				timers = jQuery.timers,                                                                                          // 7568
				length = queue ? queue.length : 0;                                                                               // 7569
                                                                                                                     // 7570
			// enable finishing flag on private data                                                                          // 7571
			data.finish = true;                                                                                               // 7572
                                                                                                                     // 7573
			// empty the queue first                                                                                          // 7574
			jQuery.queue( this, type, [] );                                                                                   // 7575
                                                                                                                     // 7576
			if ( hooks && hooks.stop ) {                                                                                      // 7577
				hooks.stop.call( this, true );                                                                                   // 7578
			}                                                                                                                 // 7579
                                                                                                                     // 7580
			// look for any active animations, and finish them                                                                // 7581
			for ( index = timers.length; index--; ) {                                                                         // 7582
				if ( timers[ index ].elem === this && timers[ index ].queue === type ) {                                         // 7583
					timers[ index ].anim.stop( true );                                                                              // 7584
					timers.splice( index, 1 );                                                                                      // 7585
				}                                                                                                                // 7586
			}                                                                                                                 // 7587
                                                                                                                     // 7588
			// look for any animations in the old queue and finish them                                                       // 7589
			for ( index = 0; index < length; index++ ) {                                                                      // 7590
				if ( queue[ index ] && queue[ index ].finish ) {                                                                 // 7591
					queue[ index ].finish.call( this );                                                                             // 7592
				}                                                                                                                // 7593
			}                                                                                                                 // 7594
                                                                                                                     // 7595
			// turn off finishing flag                                                                                        // 7596
			delete data.finish;                                                                                               // 7597
		});                                                                                                                // 7598
	}                                                                                                                   // 7599
});                                                                                                                  // 7600
                                                                                                                     // 7601
jQuery.each([ "toggle", "show", "hide" ], function( i, name ) {                                                      // 7602
	var cssFn = jQuery.fn[ name ];                                                                                      // 7603
	jQuery.fn[ name ] = function( speed, easing, callback ) {                                                           // 7604
		return speed == null || typeof speed === "boolean" ?                                                               // 7605
			cssFn.apply( this, arguments ) :                                                                                  // 7606
			this.animate( genFx( name, true ), speed, easing, callback );                                                     // 7607
	};                                                                                                                  // 7608
});                                                                                                                  // 7609
                                                                                                                     // 7610
// Generate shortcuts for custom animations                                                                          // 7611
jQuery.each({                                                                                                        // 7612
	slideDown: genFx("show"),                                                                                           // 7613
	slideUp: genFx("hide"),                                                                                             // 7614
	slideToggle: genFx("toggle"),                                                                                       // 7615
	fadeIn: { opacity: "show" },                                                                                        // 7616
	fadeOut: { opacity: "hide" },                                                                                       // 7617
	fadeToggle: { opacity: "toggle" }                                                                                   // 7618
}, function( name, props ) {                                                                                         // 7619
	jQuery.fn[ name ] = function( speed, easing, callback ) {                                                           // 7620
		return this.animate( props, speed, easing, callback );                                                             // 7621
	};                                                                                                                  // 7622
});                                                                                                                  // 7623
                                                                                                                     // 7624
jQuery.timers = [];                                                                                                  // 7625
jQuery.fx.tick = function() {                                                                                        // 7626
	var timer,                                                                                                          // 7627
		timers = jQuery.timers,                                                                                            // 7628
		i = 0;                                                                                                             // 7629
                                                                                                                     // 7630
	fxNow = jQuery.now();                                                                                               // 7631
                                                                                                                     // 7632
	for ( ; i < timers.length; i++ ) {                                                                                  // 7633
		timer = timers[ i ];                                                                                               // 7634
		// Checks the timer has not already been removed                                                                   // 7635
		if ( !timer() && timers[ i ] === timer ) {                                                                         // 7636
			timers.splice( i--, 1 );                                                                                          // 7637
		}                                                                                                                  // 7638
	}                                                                                                                   // 7639
                                                                                                                     // 7640
	if ( !timers.length ) {                                                                                             // 7641
		jQuery.fx.stop();                                                                                                  // 7642
	}                                                                                                                   // 7643
	fxNow = undefined;                                                                                                  // 7644
};                                                                                                                   // 7645
                                                                                                                     // 7646
jQuery.fx.timer = function( timer ) {                                                                                // 7647
	jQuery.timers.push( timer );                                                                                        // 7648
	if ( timer() ) {                                                                                                    // 7649
		jQuery.fx.start();                                                                                                 // 7650
	} else {                                                                                                            // 7651
		jQuery.timers.pop();                                                                                               // 7652
	}                                                                                                                   // 7653
};                                                                                                                   // 7654
                                                                                                                     // 7655
jQuery.fx.interval = 13;                                                                                             // 7656
                                                                                                                     // 7657
jQuery.fx.start = function() {                                                                                       // 7658
	if ( !timerId ) {                                                                                                   // 7659
		timerId = setInterval( jQuery.fx.tick, jQuery.fx.interval );                                                       // 7660
	}                                                                                                                   // 7661
};                                                                                                                   // 7662
                                                                                                                     // 7663
jQuery.fx.stop = function() {                                                                                        // 7664
	clearInterval( timerId );                                                                                           // 7665
	timerId = null;                                                                                                     // 7666
};                                                                                                                   // 7667
                                                                                                                     // 7668
jQuery.fx.speeds = {                                                                                                 // 7669
	slow: 600,                                                                                                          // 7670
	fast: 200,                                                                                                          // 7671
	// Default speed                                                                                                    // 7672
	_default: 400                                                                                                       // 7673
};                                                                                                                   // 7674
                                                                                                                     // 7675
                                                                                                                     // 7676
// Based off of the plugin by Clint Helfers, with permission.                                                        // 7677
// http://blindsignals.com/index.php/2009/07/jquery-delay/                                                           // 7678
jQuery.fn.delay = function( time, type ) {                                                                           // 7679
	time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;                                                         // 7680
	type = type || "fx";                                                                                                // 7681
                                                                                                                     // 7682
	return this.queue( type, function( next, hooks ) {                                                                  // 7683
		var timeout = setTimeout( next, time );                                                                            // 7684
		hooks.stop = function() {                                                                                          // 7685
			clearTimeout( timeout );                                                                                          // 7686
		};                                                                                                                 // 7687
	});                                                                                                                 // 7688
};                                                                                                                   // 7689
                                                                                                                     // 7690
                                                                                                                     // 7691
(function() {                                                                                                        // 7692
	var a, input, select, opt,                                                                                          // 7693
		div = document.createElement("div" );                                                                              // 7694
                                                                                                                     // 7695
	// Setup                                                                                                            // 7696
	div.setAttribute( "className", "t" );                                                                               // 7697
	div.innerHTML = "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>";                               // 7698
	a = div.getElementsByTagName("a")[ 0 ];                                                                             // 7699
                                                                                                                     // 7700
	// First batch of tests.                                                                                            // 7701
	select = document.createElement("select");                                                                          // 7702
	opt = select.appendChild( document.createElement("option") );                                                       // 7703
	input = div.getElementsByTagName("input")[ 0 ];                                                                     // 7704
                                                                                                                     // 7705
	a.style.cssText = "top:1px";                                                                                        // 7706
                                                                                                                     // 7707
	// Test setAttribute on camelCase class. If it works, we need attrFixes when doing get/setAttribute (ie6/7)         // 7708
	support.getSetAttribute = div.className !== "t";                                                                    // 7709
                                                                                                                     // 7710
	// Get the style information from getAttribute                                                                      // 7711
	// (IE uses .cssText instead)                                                                                       // 7712
	support.style = /top/.test( a.getAttribute("style") );                                                              // 7713
                                                                                                                     // 7714
	// Make sure that URLs aren't manipulated                                                                           // 7715
	// (IE normalizes it by default)                                                                                    // 7716
	support.hrefNormalized = a.getAttribute("href") === "/a";                                                           // 7717
                                                                                                                     // 7718
	// Check the default checkbox/radio value ("" on WebKit; "on" elsewhere)                                            // 7719
	support.checkOn = !!input.value;                                                                                    // 7720
                                                                                                                     // 7721
	// Make sure that a selected-by-default option has a working selected property.                                     // 7722
	// (WebKit defaults to false instead of true, IE too, if it's in an optgroup)                                       // 7723
	support.optSelected = opt.selected;                                                                                 // 7724
                                                                                                                     // 7725
	// Tests for enctype support on a form (#6743)                                                                      // 7726
	support.enctype = !!document.createElement("form").enctype;                                                         // 7727
                                                                                                                     // 7728
	// Make sure that the options inside disabled selects aren't marked as disabled                                     // 7729
	// (WebKit marks them as disabled)                                                                                  // 7730
	select.disabled = true;                                                                                             // 7731
	support.optDisabled = !opt.disabled;                                                                                // 7732
                                                                                                                     // 7733
	// Support: IE8 only                                                                                                // 7734
	// Check if we can trust getAttribute("value")                                                                      // 7735
	input = document.createElement( "input" );                                                                          // 7736
	input.setAttribute( "value", "" );                                                                                  // 7737
	support.input = input.getAttribute( "value" ) === "";                                                               // 7738
                                                                                                                     // 7739
	// Check if an input maintains its value after becoming a radio                                                     // 7740
	input.value = "t";                                                                                                  // 7741
	input.setAttribute( "type", "radio" );                                                                              // 7742
	support.radioValue = input.value === "t";                                                                           // 7743
                                                                                                                     // 7744
	// Null elements to avoid leaks in IE.                                                                              // 7745
	a = input = select = opt = div = null;                                                                              // 7746
})();                                                                                                                // 7747
                                                                                                                     // 7748
                                                                                                                     // 7749
var rreturn = /\r/g;                                                                                                 // 7750
                                                                                                                     // 7751
jQuery.fn.extend({                                                                                                   // 7752
	val: function( value ) {                                                                                            // 7753
		var hooks, ret, isFunction,                                                                                        // 7754
			elem = this[0];                                                                                                   // 7755
                                                                                                                     // 7756
		if ( !arguments.length ) {                                                                                         // 7757
			if ( elem ) {                                                                                                     // 7758
				hooks = jQuery.valHooks[ elem.type ] || jQuery.valHooks[ elem.nodeName.toLowerCase() ];                          // 7759
                                                                                                                     // 7760
				if ( hooks && "get" in hooks && (ret = hooks.get( elem, "value" )) !== undefined ) {                             // 7761
					return ret;                                                                                                     // 7762
				}                                                                                                                // 7763
                                                                                                                     // 7764
				ret = elem.value;                                                                                                // 7765
                                                                                                                     // 7766
				return typeof ret === "string" ?                                                                                 // 7767
					// handle most common string cases                                                                              // 7768
					ret.replace(rreturn, "") :                                                                                      // 7769
					// handle cases where value is null/undef or number                                                             // 7770
					ret == null ? "" : ret;                                                                                         // 7771
			}                                                                                                                 // 7772
                                                                                                                     // 7773
			return;                                                                                                           // 7774
		}                                                                                                                  // 7775
                                                                                                                     // 7776
		isFunction = jQuery.isFunction( value );                                                                           // 7777
                                                                                                                     // 7778
		return this.each(function( i ) {                                                                                   // 7779
			var val;                                                                                                          // 7780
                                                                                                                     // 7781
			if ( this.nodeType !== 1 ) {                                                                                      // 7782
				return;                                                                                                          // 7783
			}                                                                                                                 // 7784
                                                                                                                     // 7785
			if ( isFunction ) {                                                                                               // 7786
				val = value.call( this, i, jQuery( this ).val() );                                                               // 7787
			} else {                                                                                                          // 7788
				val = value;                                                                                                     // 7789
			}                                                                                                                 // 7790
                                                                                                                     // 7791
			// Treat null/undefined as ""; convert numbers to string                                                          // 7792
			if ( val == null ) {                                                                                              // 7793
				val = "";                                                                                                        // 7794
			} else if ( typeof val === "number" ) {                                                                           // 7795
				val += "";                                                                                                       // 7796
			} else if ( jQuery.isArray( val ) ) {                                                                             // 7797
				val = jQuery.map( val, function( value ) {                                                                       // 7798
					return value == null ? "" : value + "";                                                                         // 7799
				});                                                                                                              // 7800
			}                                                                                                                 // 7801
                                                                                                                     // 7802
			hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];                           // 7803
                                                                                                                     // 7804
			// If set returns undefined, fall back to normal setting                                                          // 7805
			if ( !hooks || !("set" in hooks) || hooks.set( this, val, "value" ) === undefined ) {                             // 7806
				this.value = val;                                                                                                // 7807
			}                                                                                                                 // 7808
		});                                                                                                                // 7809
	}                                                                                                                   // 7810
});                                                                                                                  // 7811
                                                                                                                     // 7812
jQuery.extend({                                                                                                      // 7813
	valHooks: {                                                                                                         // 7814
		option: {                                                                                                          // 7815
			get: function( elem ) {                                                                                           // 7816
				var val = jQuery.find.attr( elem, "value" );                                                                     // 7817
				return val != null ?                                                                                             // 7818
					val :                                                                                                           // 7819
					jQuery.text( elem );                                                                                            // 7820
			}                                                                                                                 // 7821
		},                                                                                                                 // 7822
		select: {                                                                                                          // 7823
			get: function( elem ) {                                                                                           // 7824
				var value, option,                                                                                               // 7825
					options = elem.options,                                                                                         // 7826
					index = elem.selectedIndex,                                                                                     // 7827
					one = elem.type === "select-one" || index < 0,                                                                  // 7828
					values = one ? null : [],                                                                                       // 7829
					max = one ? index + 1 : options.length,                                                                         // 7830
					i = index < 0 ?                                                                                                 // 7831
						max :                                                                                                          // 7832
						one ? index : 0;                                                                                               // 7833
                                                                                                                     // 7834
				// Loop through all the selected options                                                                         // 7835
				for ( ; i < max; i++ ) {                                                                                         // 7836
					option = options[ i ];                                                                                          // 7837
                                                                                                                     // 7838
					// oldIE doesn't update selected after form reset (#2551)                                                       // 7839
					if ( ( option.selected || i === index ) &&                                                                      // 7840
							// Don't return options that are disabled or in a disabled optgroup                                           // 7841
							( support.optDisabled ? !option.disabled : option.getAttribute("disabled") === null ) &&                      // 7842
							( !option.parentNode.disabled || !jQuery.nodeName( option.parentNode, "optgroup" ) ) ) {                      // 7843
                                                                                                                     // 7844
						// Get the specific value for the option                                                                       // 7845
						value = jQuery( option ).val();                                                                                // 7846
                                                                                                                     // 7847
						// We don't need an array for one selects                                                                      // 7848
						if ( one ) {                                                                                                   // 7849
							return value;                                                                                                 // 7850
						}                                                                                                              // 7851
                                                                                                                     // 7852
						// Multi-Selects return an array                                                                               // 7853
						values.push( value );                                                                                          // 7854
					}                                                                                                               // 7855
				}                                                                                                                // 7856
                                                                                                                     // 7857
				return values;                                                                                                   // 7858
			},                                                                                                                // 7859
                                                                                                                     // 7860
			set: function( elem, value ) {                                                                                    // 7861
				var optionSet, option,                                                                                           // 7862
					options = elem.options,                                                                                         // 7863
					values = jQuery.makeArray( value ),                                                                             // 7864
					i = options.length;                                                                                             // 7865
                                                                                                                     // 7866
				while ( i-- ) {                                                                                                  // 7867
					option = options[ i ];                                                                                          // 7868
                                                                                                                     // 7869
					if ( jQuery.inArray( jQuery.valHooks.option.get( option ), values ) >= 0 ) {                                    // 7870
                                                                                                                     // 7871
						// Support: IE6                                                                                                // 7872
						// When new option element is added to select box we need to                                                   // 7873
						// force reflow of newly added node in order to workaround delay                                               // 7874
						// of initialization properties                                                                                // 7875
						try {                                                                                                          // 7876
							option.selected = optionSet = true;                                                                           // 7877
                                                                                                                     // 7878
						} catch ( _ ) {                                                                                                // 7879
                                                                                                                     // 7880
							// Will be executed only in IE6                                                                               // 7881
							option.scrollHeight;                                                                                          // 7882
						}                                                                                                              // 7883
                                                                                                                     // 7884
					} else {                                                                                                        // 7885
						option.selected = false;                                                                                       // 7886
					}                                                                                                               // 7887
				}                                                                                                                // 7888
                                                                                                                     // 7889
				// Force browsers to behave consistently when non-matching value is set                                          // 7890
				if ( !optionSet ) {                                                                                              // 7891
					elem.selectedIndex = -1;                                                                                        // 7892
				}                                                                                                                // 7893
                                                                                                                     // 7894
				return options;                                                                                                  // 7895
			}                                                                                                                 // 7896
		}                                                                                                                  // 7897
	}                                                                                                                   // 7898
});                                                                                                                  // 7899
                                                                                                                     // 7900
// Radios and checkboxes getter/setter                                                                               // 7901
jQuery.each([ "radio", "checkbox" ], function() {                                                                    // 7902
	jQuery.valHooks[ this ] = {                                                                                         // 7903
		set: function( elem, value ) {                                                                                     // 7904
			if ( jQuery.isArray( value ) ) {                                                                                  // 7905
				return ( elem.checked = jQuery.inArray( jQuery(elem).val(), value ) >= 0 );                                      // 7906
			}                                                                                                                 // 7907
		}                                                                                                                  // 7908
	};                                                                                                                  // 7909
	if ( !support.checkOn ) {                                                                                           // 7910
		jQuery.valHooks[ this ].get = function( elem ) {                                                                   // 7911
			// Support: Webkit                                                                                                // 7912
			// "" is returned instead of "on" if a value isn't specified                                                      // 7913
			return elem.getAttribute("value") === null ? "on" : elem.value;                                                   // 7914
		};                                                                                                                 // 7915
	}                                                                                                                   // 7916
});                                                                                                                  // 7917
                                                                                                                     // 7918
                                                                                                                     // 7919
                                                                                                                     // 7920
                                                                                                                     // 7921
var nodeHook, boolHook,                                                                                              // 7922
	attrHandle = jQuery.expr.attrHandle,                                                                                // 7923
	ruseDefault = /^(?:checked|selected)$/i,                                                                            // 7924
	getSetAttribute = support.getSetAttribute,                                                                          // 7925
	getSetInput = support.input;                                                                                        // 7926
                                                                                                                     // 7927
jQuery.fn.extend({                                                                                                   // 7928
	attr: function( name, value ) {                                                                                     // 7929
		return access( this, jQuery.attr, name, value, arguments.length > 1 );                                             // 7930
	},                                                                                                                  // 7931
                                                                                                                     // 7932
	removeAttr: function( name ) {                                                                                      // 7933
		return this.each(function() {                                                                                      // 7934
			jQuery.removeAttr( this, name );                                                                                  // 7935
		});                                                                                                                // 7936
	}                                                                                                                   // 7937
});                                                                                                                  // 7938
                                                                                                                     // 7939
jQuery.extend({                                                                                                      // 7940
	attr: function( elem, name, value ) {                                                                               // 7941
		var hooks, ret,                                                                                                    // 7942
			nType = elem.nodeType;                                                                                            // 7943
                                                                                                                     // 7944
		// don't get/set attributes on text, comment and attribute nodes                                                   // 7945
		if ( !elem || nType === 3 || nType === 8 || nType === 2 ) {                                                        // 7946
			return;                                                                                                           // 7947
		}                                                                                                                  // 7948
                                                                                                                     // 7949
		// Fallback to prop when attributes are not supported                                                              // 7950
		if ( typeof elem.getAttribute === strundefined ) {                                                                 // 7951
			return jQuery.prop( elem, name, value );                                                                          // 7952
		}                                                                                                                  // 7953
                                                                                                                     // 7954
		// All attributes are lowercase                                                                                    // 7955
		// Grab necessary hook if one is defined                                                                           // 7956
		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {                                                                   // 7957
			name = name.toLowerCase();                                                                                        // 7958
			hooks = jQuery.attrHooks[ name ] ||                                                                               // 7959
				( jQuery.expr.match.bool.test( name ) ? boolHook : nodeHook );                                                   // 7960
		}                                                                                                                  // 7961
                                                                                                                     // 7962
		if ( value !== undefined ) {                                                                                       // 7963
                                                                                                                     // 7964
			if ( value === null ) {                                                                                           // 7965
				jQuery.removeAttr( elem, name );                                                                                 // 7966
                                                                                                                     // 7967
			} else if ( hooks && "set" in hooks && (ret = hooks.set( elem, value, name )) !== undefined ) {                   // 7968
				return ret;                                                                                                      // 7969
                                                                                                                     // 7970
			} else {                                                                                                          // 7971
				elem.setAttribute( name, value + "" );                                                                           // 7972
				return value;                                                                                                    // 7973
			}                                                                                                                 // 7974
                                                                                                                     // 7975
		} else if ( hooks && "get" in hooks && (ret = hooks.get( elem, name )) !== null ) {                                // 7976
			return ret;                                                                                                       // 7977
                                                                                                                     // 7978
		} else {                                                                                                           // 7979
			ret = jQuery.find.attr( elem, name );                                                                             // 7980
                                                                                                                     // 7981
			// Non-existent attributes return null, we normalize to undefined                                                 // 7982
			return ret == null ?                                                                                              // 7983
				undefined :                                                                                                      // 7984
				ret;                                                                                                             // 7985
		}                                                                                                                  // 7986
	},                                                                                                                  // 7987
                                                                                                                     // 7988
	removeAttr: function( elem, value ) {                                                                               // 7989
		var name, propName,                                                                                                // 7990
			i = 0,                                                                                                            // 7991
			attrNames = value && value.match( rnotwhite );                                                                    // 7992
                                                                                                                     // 7993
		if ( attrNames && elem.nodeType === 1 ) {                                                                          // 7994
			while ( (name = attrNames[i++]) ) {                                                                               // 7995
				propName = jQuery.propFix[ name ] || name;                                                                       // 7996
                                                                                                                     // 7997
				// Boolean attributes get special treatment (#10870)                                                             // 7998
				if ( jQuery.expr.match.bool.test( name ) ) {                                                                     // 7999
					// Set corresponding property to false                                                                          // 8000
					if ( getSetInput && getSetAttribute || !ruseDefault.test( name ) ) {                                            // 8001
						elem[ propName ] = false;                                                                                      // 8002
					// Support: IE<9                                                                                                // 8003
					// Also clear defaultChecked/defaultSelected (if appropriate)                                                   // 8004
					} else {                                                                                                        // 8005
						elem[ jQuery.camelCase( "default-" + name ) ] =                                                                // 8006
							elem[ propName ] = false;                                                                                     // 8007
					}                                                                                                               // 8008
                                                                                                                     // 8009
				// See #9699 for explanation of this approach (setting first, then removal)                                      // 8010
				} else {                                                                                                         // 8011
					jQuery.attr( elem, name, "" );                                                                                  // 8012
				}                                                                                                                // 8013
                                                                                                                     // 8014
				elem.removeAttribute( getSetAttribute ? name : propName );                                                       // 8015
			}                                                                                                                 // 8016
		}                                                                                                                  // 8017
	},                                                                                                                  // 8018
                                                                                                                     // 8019
	attrHooks: {                                                                                                        // 8020
		type: {                                                                                                            // 8021
			set: function( elem, value ) {                                                                                    // 8022
				if ( !support.radioValue && value === "radio" && jQuery.nodeName(elem, "input") ) {                              // 8023
					// Setting the type on a radio button after the value resets the value in IE6-9                                 // 8024
					// Reset value to default in case type is set after value during creation                                       // 8025
					var val = elem.value;                                                                                           // 8026
					elem.setAttribute( "type", value );                                                                             // 8027
					if ( val ) {                                                                                                    // 8028
						elem.value = val;                                                                                              // 8029
					}                                                                                                               // 8030
					return value;                                                                                                   // 8031
				}                                                                                                                // 8032
			}                                                                                                                 // 8033
		}                                                                                                                  // 8034
	}                                                                                                                   // 8035
});                                                                                                                  // 8036
                                                                                                                     // 8037
// Hook for boolean attributes                                                                                       // 8038
boolHook = {                                                                                                         // 8039
	set: function( elem, value, name ) {                                                                                // 8040
		if ( value === false ) {                                                                                           // 8041
			// Remove boolean attributes when set to false                                                                    // 8042
			jQuery.removeAttr( elem, name );                                                                                  // 8043
		} else if ( getSetInput && getSetAttribute || !ruseDefault.test( name ) ) {                                        // 8044
			// IE<8 needs the *property* name                                                                                 // 8045
			elem.setAttribute( !getSetAttribute && jQuery.propFix[ name ] || name, name );                                    // 8046
                                                                                                                     // 8047
		// Use defaultChecked and defaultSelected for oldIE                                                                // 8048
		} else {                                                                                                           // 8049
			elem[ jQuery.camelCase( "default-" + name ) ] = elem[ name ] = true;                                              // 8050
		}                                                                                                                  // 8051
                                                                                                                     // 8052
		return name;                                                                                                       // 8053
	}                                                                                                                   // 8054
};                                                                                                                   // 8055
                                                                                                                     // 8056
// Retrieve booleans specially                                                                                       // 8057
jQuery.each( jQuery.expr.match.bool.source.match( /\w+/g ), function( i, name ) {                                    // 8058
                                                                                                                     // 8059
	var getter = attrHandle[ name ] || jQuery.find.attr;                                                                // 8060
                                                                                                                     // 8061
	attrHandle[ name ] = getSetInput && getSetAttribute || !ruseDefault.test( name ) ?                                  // 8062
		function( elem, name, isXML ) {                                                                                    // 8063
			var ret, handle;                                                                                                  // 8064
			if ( !isXML ) {                                                                                                   // 8065
				// Avoid an infinite loop by temporarily removing this function from the getter                                  // 8066
				handle = attrHandle[ name ];                                                                                     // 8067
				attrHandle[ name ] = ret;                                                                                        // 8068
				ret = getter( elem, name, isXML ) != null ?                                                                      // 8069
					name.toLowerCase() :                                                                                            // 8070
					null;                                                                                                           // 8071
				attrHandle[ name ] = handle;                                                                                     // 8072
			}                                                                                                                 // 8073
			return ret;                                                                                                       // 8074
		} :                                                                                                                // 8075
		function( elem, name, isXML ) {                                                                                    // 8076
			if ( !isXML ) {                                                                                                   // 8077
				return elem[ jQuery.camelCase( "default-" + name ) ] ?                                                           // 8078
					name.toLowerCase() :                                                                                            // 8079
					null;                                                                                                           // 8080
			}                                                                                                                 // 8081
		};                                                                                                                 // 8082
});                                                                                                                  // 8083
                                                                                                                     // 8084
// fix oldIE attroperties                                                                                            // 8085
if ( !getSetInput || !getSetAttribute ) {                                                                            // 8086
	jQuery.attrHooks.value = {                                                                                          // 8087
		set: function( elem, value, name ) {                                                                               // 8088
			if ( jQuery.nodeName( elem, "input" ) ) {                                                                         // 8089
				// Does not return so that setAttribute is also used                                                             // 8090
				elem.defaultValue = value;                                                                                       // 8091
			} else {                                                                                                          // 8092
				// Use nodeHook if defined (#1954); otherwise setAttribute is fine                                               // 8093
				return nodeHook && nodeHook.set( elem, value, name );                                                            // 8094
			}                                                                                                                 // 8095
		}                                                                                                                  // 8096
	};                                                                                                                  // 8097
}                                                                                                                    // 8098
                                                                                                                     // 8099
// IE6/7 do not support getting/setting some attributes with get/setAttribute                                        // 8100
if ( !getSetAttribute ) {                                                                                            // 8101
                                                                                                                     // 8102
	// Use this for any attribute in IE6/7                                                                              // 8103
	// This fixes almost every IE6/7 issue                                                                              // 8104
	nodeHook = {                                                                                                        // 8105
		set: function( elem, value, name ) {                                                                               // 8106
			// Set the existing or create a new attribute node                                                                // 8107
			var ret = elem.getAttributeNode( name );                                                                          // 8108
			if ( !ret ) {                                                                                                     // 8109
				elem.setAttributeNode(                                                                                           // 8110
					(ret = elem.ownerDocument.createAttribute( name ))                                                              // 8111
				);                                                                                                               // 8112
			}                                                                                                                 // 8113
                                                                                                                     // 8114
			ret.value = value += "";                                                                                          // 8115
                                                                                                                     // 8116
			// Break association with cloned elements by also using setAttribute (#9646)                                      // 8117
			if ( name === "value" || value === elem.getAttribute( name ) ) {                                                  // 8118
				return value;                                                                                                    // 8119
			}                                                                                                                 // 8120
		}                                                                                                                  // 8121
	};                                                                                                                  // 8122
                                                                                                                     // 8123
	// Some attributes are constructed with empty-string values when not defined                                        // 8124
	attrHandle.id = attrHandle.name = attrHandle.coords =                                                               // 8125
		function( elem, name, isXML ) {                                                                                    // 8126
			var ret;                                                                                                          // 8127
			if ( !isXML ) {                                                                                                   // 8128
				return (ret = elem.getAttributeNode( name )) && ret.value !== "" ?                                               // 8129
					ret.value :                                                                                                     // 8130
					null;                                                                                                           // 8131
			}                                                                                                                 // 8132
		};                                                                                                                 // 8133
                                                                                                                     // 8134
	// Fixing value retrieval on a button requires this module                                                          // 8135
	jQuery.valHooks.button = {                                                                                          // 8136
		get: function( elem, name ) {                                                                                      // 8137
			var ret = elem.getAttributeNode( name );                                                                          // 8138
			if ( ret && ret.specified ) {                                                                                     // 8139
				return ret.value;                                                                                                // 8140
			}                                                                                                                 // 8141
		},                                                                                                                 // 8142
		set: nodeHook.set                                                                                                  // 8143
	};                                                                                                                  // 8144
                                                                                                                     // 8145
	// Set contenteditable to false on removals(#10429)                                                                 // 8146
	// Setting to empty string throws an error as an invalid value                                                      // 8147
	jQuery.attrHooks.contenteditable = {                                                                                // 8148
		set: function( elem, value, name ) {                                                                               // 8149
			nodeHook.set( elem, value === "" ? false : value, name );                                                         // 8150
		}                                                                                                                  // 8151
	};                                                                                                                  // 8152
                                                                                                                     // 8153
	// Set width and height to auto instead of 0 on empty string( Bug #8150 )                                           // 8154
	// This is for removals                                                                                             // 8155
	jQuery.each([ "width", "height" ], function( i, name ) {                                                            // 8156
		jQuery.attrHooks[ name ] = {                                                                                       // 8157
			set: function( elem, value ) {                                                                                    // 8158
				if ( value === "" ) {                                                                                            // 8159
					elem.setAttribute( name, "auto" );                                                                              // 8160
					return value;                                                                                                   // 8161
				}                                                                                                                // 8162
			}                                                                                                                 // 8163
		};                                                                                                                 // 8164
	});                                                                                                                 // 8165
}                                                                                                                    // 8166
                                                                                                                     // 8167
if ( !support.style ) {                                                                                              // 8168
	jQuery.attrHooks.style = {                                                                                          // 8169
		get: function( elem ) {                                                                                            // 8170
			// Return undefined in the case of empty string                                                                   // 8171
			// Note: IE uppercases css property names, but if we were to .toLowerCase()                                       // 8172
			// .cssText, that would destroy case senstitivity in URL's, like in "background"                                  // 8173
			return elem.style.cssText || undefined;                                                                           // 8174
		},                                                                                                                 // 8175
		set: function( elem, value ) {                                                                                     // 8176
			return ( elem.style.cssText = value + "" );                                                                       // 8177
		}                                                                                                                  // 8178
	};                                                                                                                  // 8179
}                                                                                                                    // 8180
                                                                                                                     // 8181
                                                                                                                     // 8182
                                                                                                                     // 8183
                                                                                                                     // 8184
var rfocusable = /^(?:input|select|textarea|button|object)$/i,                                                       // 8185
	rclickable = /^(?:a|area)$/i;                                                                                       // 8186
                                                                                                                     // 8187
jQuery.fn.extend({                                                                                                   // 8188
	prop: function( name, value ) {                                                                                     // 8189
		return access( this, jQuery.prop, name, value, arguments.length > 1 );                                             // 8190
	},                                                                                                                  // 8191
                                                                                                                     // 8192
	removeProp: function( name ) {                                                                                      // 8193
		name = jQuery.propFix[ name ] || name;                                                                             // 8194
		return this.each(function() {                                                                                      // 8195
			// try/catch handles cases where IE balks (such as removing a property on window)                                 // 8196
			try {                                                                                                             // 8197
				this[ name ] = undefined;                                                                                        // 8198
				delete this[ name ];                                                                                             // 8199
			} catch( e ) {}                                                                                                   // 8200
		});                                                                                                                // 8201
	}                                                                                                                   // 8202
});                                                                                                                  // 8203
                                                                                                                     // 8204
jQuery.extend({                                                                                                      // 8205
	propFix: {                                                                                                          // 8206
		"for": "htmlFor",                                                                                                  // 8207
		"class": "className"                                                                                               // 8208
	},                                                                                                                  // 8209
                                                                                                                     // 8210
	prop: function( elem, name, value ) {                                                                               // 8211
		var ret, hooks, notxml,                                                                                            // 8212
			nType = elem.nodeType;                                                                                            // 8213
                                                                                                                     // 8214
		// don't get/set properties on text, comment and attribute nodes                                                   // 8215
		if ( !elem || nType === 3 || nType === 8 || nType === 2 ) {                                                        // 8216
			return;                                                                                                           // 8217
		}                                                                                                                  // 8218
                                                                                                                     // 8219
		notxml = nType !== 1 || !jQuery.isXMLDoc( elem );                                                                  // 8220
                                                                                                                     // 8221
		if ( notxml ) {                                                                                                    // 8222
			// Fix name and attach hooks                                                                                      // 8223
			name = jQuery.propFix[ name ] || name;                                                                            // 8224
			hooks = jQuery.propHooks[ name ];                                                                                 // 8225
		}                                                                                                                  // 8226
                                                                                                                     // 8227
		if ( value !== undefined ) {                                                                                       // 8228
			return hooks && "set" in hooks && (ret = hooks.set( elem, value, name )) !== undefined ?                          // 8229
				ret :                                                                                                            // 8230
				( elem[ name ] = value );                                                                                        // 8231
                                                                                                                     // 8232
		} else {                                                                                                           // 8233
			return hooks && "get" in hooks && (ret = hooks.get( elem, name )) !== null ?                                      // 8234
				ret :                                                                                                            // 8235
				elem[ name ];                                                                                                    // 8236
		}                                                                                                                  // 8237
	},                                                                                                                  // 8238
                                                                                                                     // 8239
	propHooks: {                                                                                                        // 8240
		tabIndex: {                                                                                                        // 8241
			get: function( elem ) {                                                                                           // 8242
				// elem.tabIndex doesn't always return the correct value when it hasn't been explicitly set                      // 8243
				// http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/         // 8244
				// Use proper attribute retrieval(#12072)                                                                        // 8245
				var tabindex = jQuery.find.attr( elem, "tabindex" );                                                             // 8246
                                                                                                                     // 8247
				return tabindex ?                                                                                                // 8248
					parseInt( tabindex, 10 ) :                                                                                      // 8249
					rfocusable.test( elem.nodeName ) || rclickable.test( elem.nodeName ) && elem.href ?                             // 8250
						0 :                                                                                                            // 8251
						-1;                                                                                                            // 8252
			}                                                                                                                 // 8253
		}                                                                                                                  // 8254
	}                                                                                                                   // 8255
});                                                                                                                  // 8256
                                                                                                                     // 8257
// Some attributes require a special call on IE                                                                      // 8258
// http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx                                                  // 8259
if ( !support.hrefNormalized ) {                                                                                     // 8260
	// href/src property should get the full normalized URL (#10299/#12915)                                             // 8261
	jQuery.each([ "href", "src" ], function( i, name ) {                                                                // 8262
		jQuery.propHooks[ name ] = {                                                                                       // 8263
			get: function( elem ) {                                                                                           // 8264
				return elem.getAttribute( name, 4 );                                                                             // 8265
			}                                                                                                                 // 8266
		};                                                                                                                 // 8267
	});                                                                                                                 // 8268
}                                                                                                                    // 8269
                                                                                                                     // 8270
// Support: Safari, IE9+                                                                                             // 8271
// mis-reports the default selected property of an option                                                            // 8272
// Accessing the parent's selectedIndex property fixes it                                                            // 8273
if ( !support.optSelected ) {                                                                                        // 8274
	jQuery.propHooks.selected = {                                                                                       // 8275
		get: function( elem ) {                                                                                            // 8276
			var parent = elem.parentNode;                                                                                     // 8277
                                                                                                                     // 8278
			if ( parent ) {                                                                                                   // 8279
				parent.selectedIndex;                                                                                            // 8280
                                                                                                                     // 8281
				// Make sure that it also works with optgroups, see #5701                                                        // 8282
				if ( parent.parentNode ) {                                                                                       // 8283
					parent.parentNode.selectedIndex;                                                                                // 8284
				}                                                                                                                // 8285
			}                                                                                                                 // 8286
			return null;                                                                                                      // 8287
		}                                                                                                                  // 8288
	};                                                                                                                  // 8289
}                                                                                                                    // 8290
                                                                                                                     // 8291
jQuery.each([                                                                                                        // 8292
	"tabIndex",                                                                                                         // 8293
	"readOnly",                                                                                                         // 8294
	"maxLength",                                                                                                        // 8295
	"cellSpacing",                                                                                                      // 8296
	"cellPadding",                                                                                                      // 8297
	"rowSpan",                                                                                                          // 8298
	"colSpan",                                                                                                          // 8299
	"useMap",                                                                                                           // 8300
	"frameBorder",                                                                                                      // 8301
	"contentEditable"                                                                                                   // 8302
], function() {                                                                                                      // 8303
	jQuery.propFix[ this.toLowerCase() ] = this;                                                                        // 8304
});                                                                                                                  // 8305
                                                                                                                     // 8306
// IE6/7 call enctype encoding                                                                                       // 8307
if ( !support.enctype ) {                                                                                            // 8308
	jQuery.propFix.enctype = "encoding";                                                                                // 8309
}                                                                                                                    // 8310
                                                                                                                     // 8311
                                                                                                                     // 8312
                                                                                                                     // 8313
                                                                                                                     // 8314
var rclass = /[\t\r\n\f]/g;                                                                                          // 8315
                                                                                                                     // 8316
jQuery.fn.extend({                                                                                                   // 8317
	addClass: function( value ) {                                                                                       // 8318
		var classes, elem, cur, clazz, j, finalValue,                                                                      // 8319
			i = 0,                                                                                                            // 8320
			len = this.length,                                                                                                // 8321
			proceed = typeof value === "string" && value;                                                                     // 8322
                                                                                                                     // 8323
		if ( jQuery.isFunction( value ) ) {                                                                                // 8324
			return this.each(function( j ) {                                                                                  // 8325
				jQuery( this ).addClass( value.call( this, j, this.className ) );                                                // 8326
			});                                                                                                               // 8327
		}                                                                                                                  // 8328
                                                                                                                     // 8329
		if ( proceed ) {                                                                                                   // 8330
			// The disjunction here is for better compressibility (see removeClass)                                           // 8331
			classes = ( value || "" ).match( rnotwhite ) || [];                                                               // 8332
                                                                                                                     // 8333
			for ( ; i < len; i++ ) {                                                                                          // 8334
				elem = this[ i ];                                                                                                // 8335
				cur = elem.nodeType === 1 && ( elem.className ?                                                                  // 8336
					( " " + elem.className + " " ).replace( rclass, " " ) :                                                         // 8337
					" "                                                                                                             // 8338
				);                                                                                                               // 8339
                                                                                                                     // 8340
				if ( cur ) {                                                                                                     // 8341
					j = 0;                                                                                                          // 8342
					while ( (clazz = classes[j++]) ) {                                                                              // 8343
						if ( cur.indexOf( " " + clazz + " " ) < 0 ) {                                                                  // 8344
							cur += clazz + " ";                                                                                           // 8345
						}                                                                                                              // 8346
					}                                                                                                               // 8347
                                                                                                                     // 8348
					// only assign if different to avoid unneeded rendering.                                                        // 8349
					finalValue = jQuery.trim( cur );                                                                                // 8350
					if ( elem.className !== finalValue ) {                                                                          // 8351
						elem.className = finalValue;                                                                                   // 8352
					}                                                                                                               // 8353
				}                                                                                                                // 8354
			}                                                                                                                 // 8355
		}                                                                                                                  // 8356
                                                                                                                     // 8357
		return this;                                                                                                       // 8358
	},                                                                                                                  // 8359
                                                                                                                     // 8360
	removeClass: function( value ) {                                                                                    // 8361
		var classes, elem, cur, clazz, j, finalValue,                                                                      // 8362
			i = 0,                                                                                                            // 8363
			len = this.length,                                                                                                // 8364
			proceed = arguments.length === 0 || typeof value === "string" && value;                                           // 8365
                                                                                                                     // 8366
		if ( jQuery.isFunction( value ) ) {                                                                                // 8367
			return this.each(function( j ) {                                                                                  // 8368
				jQuery( this ).removeClass( value.call( this, j, this.className ) );                                             // 8369
			});                                                                                                               // 8370
		}                                                                                                                  // 8371
		if ( proceed ) {                                                                                                   // 8372
			classes = ( value || "" ).match( rnotwhite ) || [];                                                               // 8373
                                                                                                                     // 8374
			for ( ; i < len; i++ ) {                                                                                          // 8375
				elem = this[ i ];                                                                                                // 8376
				// This expression is here for better compressibility (see addClass)                                             // 8377
				cur = elem.nodeType === 1 && ( elem.className ?                                                                  // 8378
					( " " + elem.className + " " ).replace( rclass, " " ) :                                                         // 8379
					""                                                                                                              // 8380
				);                                                                                                               // 8381
                                                                                                                     // 8382
				if ( cur ) {                                                                                                     // 8383
					j = 0;                                                                                                          // 8384
					while ( (clazz = classes[j++]) ) {                                                                              // 8385
						// Remove *all* instances                                                                                      // 8386
						while ( cur.indexOf( " " + clazz + " " ) >= 0 ) {                                                              // 8387
							cur = cur.replace( " " + clazz + " ", " " );                                                                  // 8388
						}                                                                                                              // 8389
					}                                                                                                               // 8390
                                                                                                                     // 8391
					// only assign if different to avoid unneeded rendering.                                                        // 8392
					finalValue = value ? jQuery.trim( cur ) : "";                                                                   // 8393
					if ( elem.className !== finalValue ) {                                                                          // 8394
						elem.className = finalValue;                                                                                   // 8395
					}                                                                                                               // 8396
				}                                                                                                                // 8397
			}                                                                                                                 // 8398
		}                                                                                                                  // 8399
                                                                                                                     // 8400
		return this;                                                                                                       // 8401
	},                                                                                                                  // 8402
                                                                                                                     // 8403
	toggleClass: function( value, stateVal ) {                                                                          // 8404
		var type = typeof value;                                                                                           // 8405
                                                                                                                     // 8406
		if ( typeof stateVal === "boolean" && type === "string" ) {                                                        // 8407
			return stateVal ? this.addClass( value ) : this.removeClass( value );                                             // 8408
		}                                                                                                                  // 8409
                                                                                                                     // 8410
		if ( jQuery.isFunction( value ) ) {                                                                                // 8411
			return this.each(function( i ) {                                                                                  // 8412
				jQuery( this ).toggleClass( value.call(this, i, this.className, stateVal), stateVal );                           // 8413
			});                                                                                                               // 8414
		}                                                                                                                  // 8415
                                                                                                                     // 8416
		return this.each(function() {                                                                                      // 8417
			if ( type === "string" ) {                                                                                        // 8418
				// toggle individual class names                                                                                 // 8419
				var className,                                                                                                   // 8420
					i = 0,                                                                                                          // 8421
					self = jQuery( this ),                                                                                          // 8422
					classNames = value.match( rnotwhite ) || [];                                                                    // 8423
                                                                                                                     // 8424
				while ( (className = classNames[ i++ ]) ) {                                                                      // 8425
					// check each className given, space separated list                                                             // 8426
					if ( self.hasClass( className ) ) {                                                                             // 8427
						self.removeClass( className );                                                                                 // 8428
					} else {                                                                                                        // 8429
						self.addClass( className );                                                                                    // 8430
					}                                                                                                               // 8431
				}                                                                                                                // 8432
                                                                                                                     // 8433
			// Toggle whole class name                                                                                        // 8434
			} else if ( type === strundefined || type === "boolean" ) {                                                       // 8435
				if ( this.className ) {                                                                                          // 8436
					// store className if set                                                                                       // 8437
					jQuery._data( this, "__className__", this.className );                                                          // 8438
				}                                                                                                                // 8439
                                                                                                                     // 8440
				// If the element has a class name or if we're passed "false",                                                   // 8441
				// then remove the whole classname (if there was one, the above saved it).                                       // 8442
				// Otherwise bring back whatever was previously saved (if anything),                                             // 8443
				// falling back to the empty string if nothing was stored.                                                       // 8444
				this.className = this.className || value === false ? "" : jQuery._data( this, "__className__" ) || "";           // 8445
			}                                                                                                                 // 8446
		});                                                                                                                // 8447
	},                                                                                                                  // 8448
                                                                                                                     // 8449
	hasClass: function( selector ) {                                                                                    // 8450
		var className = " " + selector + " ",                                                                              // 8451
			i = 0,                                                                                                            // 8452
			l = this.length;                                                                                                  // 8453
		for ( ; i < l; i++ ) {                                                                                             // 8454
			if ( this[i].nodeType === 1 && (" " + this[i].className + " ").replace(rclass, " ").indexOf( className ) >= 0 ) { // 8455
				return true;                                                                                                     // 8456
			}                                                                                                                 // 8457
		}                                                                                                                  // 8458
                                                                                                                     // 8459
		return false;                                                                                                      // 8460
	}                                                                                                                   // 8461
});                                                                                                                  // 8462
                                                                                                                     // 8463
                                                                                                                     // 8464
                                                                                                                     // 8465
                                                                                                                     // 8466
// Return jQuery for attributes-only inclusion                                                                       // 8467
                                                                                                                     // 8468
                                                                                                                     // 8469
jQuery.each( ("blur focus focusin focusout load resize scroll unload click dblclick " +                              // 8470
	"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +                                           // 8471
	"change select submit keydown keypress keyup error contextmenu").split(" "), function( i, name ) {                  // 8472
                                                                                                                     // 8473
	// Handle event binding                                                                                             // 8474
	jQuery.fn[ name ] = function( data, fn ) {                                                                          // 8475
		return arguments.length > 0 ?                                                                                      // 8476
			this.on( name, null, data, fn ) :                                                                                 // 8477
			this.trigger( name );                                                                                             // 8478
	};                                                                                                                  // 8479
});                                                                                                                  // 8480
                                                                                                                     // 8481
jQuery.fn.extend({                                                                                                   // 8482
	hover: function( fnOver, fnOut ) {                                                                                  // 8483
		return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );                                                    // 8484
	},                                                                                                                  // 8485
                                                                                                                     // 8486
	bind: function( types, data, fn ) {                                                                                 // 8487
		return this.on( types, null, data, fn );                                                                           // 8488
	},                                                                                                                  // 8489
	unbind: function( types, fn ) {                                                                                     // 8490
		return this.off( types, null, fn );                                                                                // 8491
	},                                                                                                                  // 8492
                                                                                                                     // 8493
	delegate: function( selector, types, data, fn ) {                                                                   // 8494
		return this.on( types, selector, data, fn );                                                                       // 8495
	},                                                                                                                  // 8496
	undelegate: function( selector, types, fn ) {                                                                       // 8497
		// ( namespace ) or ( selector, types [, fn] )                                                                     // 8498
		return arguments.length === 1 ? this.off( selector, "**" ) : this.off( types, selector || "**", fn );              // 8499
	}                                                                                                                   // 8500
});                                                                                                                  // 8501
                                                                                                                     // 8502
                                                                                                                     // 8503
var nonce = jQuery.now();                                                                                            // 8504
                                                                                                                     // 8505
var rquery = (/\?/);                                                                                                 // 8506
                                                                                                                     // 8507
                                                                                                                     // 8508
                                                                                                                     // 8509
var rvalidtokens = /(,)|(\[|{)|(}|])|"(?:[^"\\\r\n]|\\["\\\/bfnrt]|\\u[\da-fA-F]{4})*"\s*:?|true|false|null|-?(?!0\d)\d+(?:\.\d+|)(?:[eE][+-]?\d+|)/g;
                                                                                                                     // 8511
jQuery.parseJSON = function( data ) {                                                                                // 8512
	// Attempt to parse using the native JSON parser first                                                              // 8513
	if ( window.JSON && window.JSON.parse ) {                                                                           // 8514
		// Support: Android 2.3                                                                                            // 8515
		// Workaround failure to string-cast null input                                                                    // 8516
		return window.JSON.parse( data + "" );                                                                             // 8517
	}                                                                                                                   // 8518
                                                                                                                     // 8519
	var requireNonComma,                                                                                                // 8520
		depth = null,                                                                                                      // 8521
		str = jQuery.trim( data + "" );                                                                                    // 8522
                                                                                                                     // 8523
	// Guard against invalid (and possibly dangerous) input by ensuring that nothing remains                            // 8524
	// after removing valid tokens                                                                                      // 8525
	return str && !jQuery.trim( str.replace( rvalidtokens, function( token, comma, open, close ) {                      // 8526
                                                                                                                     // 8527
		// Force termination if we see a misplaced comma                                                                   // 8528
		if ( requireNonComma && comma ) {                                                                                  // 8529
			depth = 0;                                                                                                        // 8530
		}                                                                                                                  // 8531
                                                                                                                     // 8532
		// Perform no more replacements after returning to outermost depth                                                 // 8533
		if ( depth === 0 ) {                                                                                               // 8534
			return token;                                                                                                     // 8535
		}                                                                                                                  // 8536
                                                                                                                     // 8537
		// Commas must not follow "[", "{", or ","                                                                         // 8538
		requireNonComma = open || comma;                                                                                   // 8539
                                                                                                                     // 8540
		// Determine new depth                                                                                             // 8541
		// array/object open ("[" or "{"): depth += true - false (increment)                                               // 8542
		// array/object close ("]" or "}"): depth += false - true (decrement)                                              // 8543
		// other cases ("," or primitive): depth += true - true (numeric cast)                                             // 8544
		depth += !close - !open;                                                                                           // 8545
                                                                                                                     // 8546
		// Remove this token                                                                                               // 8547
		return "";                                                                                                         // 8548
	}) ) ?                                                                                                              // 8549
		( Function( "return " + str ) )() :                                                                                // 8550
		jQuery.error( "Invalid JSON: " + data );                                                                           // 8551
};                                                                                                                   // 8552
                                                                                                                     // 8553
                                                                                                                     // 8554
// Cross-browser xml parsing                                                                                         // 8555
jQuery.parseXML = function( data ) {                                                                                 // 8556
	var xml, tmp;                                                                                                       // 8557
	if ( !data || typeof data !== "string" ) {                                                                          // 8558
		return null;                                                                                                       // 8559
	}                                                                                                                   // 8560
	try {                                                                                                               // 8561
		if ( window.DOMParser ) { // Standard                                                                              // 8562
			tmp = new DOMParser();                                                                                            // 8563
			xml = tmp.parseFromString( data, "text/xml" );                                                                    // 8564
		} else { // IE                                                                                                     // 8565
			xml = new ActiveXObject( "Microsoft.XMLDOM" );                                                                    // 8566
			xml.async = "false";                                                                                              // 8567
			xml.loadXML( data );                                                                                              // 8568
		}                                                                                                                  // 8569
	} catch( e ) {                                                                                                      // 8570
		xml = undefined;                                                                                                   // 8571
	}                                                                                                                   // 8572
	if ( !xml || !xml.documentElement || xml.getElementsByTagName( "parsererror" ).length ) {                           // 8573
		jQuery.error( "Invalid XML: " + data );                                                                            // 8574
	}                                                                                                                   // 8575
	return xml;                                                                                                         // 8576
};                                                                                                                   // 8577
                                                                                                                     // 8578
                                                                                                                     // 8579
var                                                                                                                  // 8580
	// Document location                                                                                                // 8581
	ajaxLocParts,                                                                                                       // 8582
	ajaxLocation,                                                                                                       // 8583
                                                                                                                     // 8584
	rhash = /#.*$/,                                                                                                     // 8585
	rts = /([?&])_=[^&]*/,                                                                                              // 8586
	rheaders = /^(.*?):[ \t]*([^\r\n]*)\r?$/mg, // IE leaves an \r character at EOL                                     // 8587
	// #7653, #8125, #8152: local protocol detection                                                                    // 8588
	rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,                                       // 8589
	rnoContent = /^(?:GET|HEAD)$/,                                                                                      // 8590
	rprotocol = /^\/\//,                                                                                                // 8591
	rurl = /^([\w.+-]+:)(?:\/\/(?:[^\/?#]*@|)([^\/?#:]*)(?::(\d+)|)|)/,                                                 // 8592
                                                                                                                     // 8593
	/* Prefilters                                                                                                       // 8594
	 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)                              // 8595
	 * 2) These are called:                                                                                             // 8596
	 *    - BEFORE asking for a transport                                                                               // 8597
	 *    - AFTER param serialization (s.data is a string if s.processData is true)                                     // 8598
	 * 3) key is the dataType                                                                                           // 8599
	 * 4) the catchall symbol "*" can be used                                                                           // 8600
	 * 5) execution will start with transport dataType and THEN continue down to "*" if needed                          // 8601
	 */                                                                                                                 // 8602
	prefilters = {},                                                                                                    // 8603
                                                                                                                     // 8604
	/* Transports bindings                                                                                              // 8605
	 * 1) key is the dataType                                                                                           // 8606
	 * 2) the catchall symbol "*" can be used                                                                           // 8607
	 * 3) selection will start with transport dataType and THEN go to "*" if needed                                     // 8608
	 */                                                                                                                 // 8609
	transports = {},                                                                                                    // 8610
                                                                                                                     // 8611
	// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression                             // 8612
	allTypes = "*/".concat("*");                                                                                        // 8613
                                                                                                                     // 8614
// #8138, IE may throw an exception when accessing                                                                   // 8615
// a field from window.location if document.domain has been set                                                      // 8616
try {                                                                                                                // 8617
	ajaxLocation = location.href;                                                                                       // 8618
} catch( e ) {                                                                                                       // 8619
	// Use the href attribute of an A element                                                                           // 8620
	// since IE will modify it given document.location                                                                  // 8621
	ajaxLocation = document.createElement( "a" );                                                                       // 8622
	ajaxLocation.href = "";                                                                                             // 8623
	ajaxLocation = ajaxLocation.href;                                                                                   // 8624
}                                                                                                                    // 8625
                                                                                                                     // 8626
// Segment location into parts                                                                                       // 8627
ajaxLocParts = rurl.exec( ajaxLocation.toLowerCase() ) || [];                                                        // 8628
                                                                                                                     // 8629
// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport                                              // 8630
function addToPrefiltersOrTransports( structure ) {                                                                  // 8631
                                                                                                                     // 8632
	// dataTypeExpression is optional and defaults to "*"                                                               // 8633
	return function( dataTypeExpression, func ) {                                                                       // 8634
                                                                                                                     // 8635
		if ( typeof dataTypeExpression !== "string" ) {                                                                    // 8636
			func = dataTypeExpression;                                                                                        // 8637
			dataTypeExpression = "*";                                                                                         // 8638
		}                                                                                                                  // 8639
                                                                                                                     // 8640
		var dataType,                                                                                                      // 8641
			i = 0,                                                                                                            // 8642
			dataTypes = dataTypeExpression.toLowerCase().match( rnotwhite ) || [];                                            // 8643
                                                                                                                     // 8644
		if ( jQuery.isFunction( func ) ) {                                                                                 // 8645
			// For each dataType in the dataTypeExpression                                                                    // 8646
			while ( (dataType = dataTypes[i++]) ) {                                                                           // 8647
				// Prepend if requested                                                                                          // 8648
				if ( dataType.charAt( 0 ) === "+" ) {                                                                            // 8649
					dataType = dataType.slice( 1 ) || "*";                                                                          // 8650
					(structure[ dataType ] = structure[ dataType ] || []).unshift( func );                                          // 8651
                                                                                                                     // 8652
				// Otherwise append                                                                                              // 8653
				} else {                                                                                                         // 8654
					(structure[ dataType ] = structure[ dataType ] || []).push( func );                                             // 8655
				}                                                                                                                // 8656
			}                                                                                                                 // 8657
		}                                                                                                                  // 8658
	};                                                                                                                  // 8659
}                                                                                                                    // 8660
                                                                                                                     // 8661
// Base inspection function for prefilters and transports                                                            // 8662
function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {                               // 8663
                                                                                                                     // 8664
	var inspected = {},                                                                                                 // 8665
		seekingTransport = ( structure === transports );                                                                   // 8666
                                                                                                                     // 8667
	function inspect( dataType ) {                                                                                      // 8668
		var selected;                                                                                                      // 8669
		inspected[ dataType ] = true;                                                                                      // 8670
		jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {                                      // 8671
			var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );                                  // 8672
			if ( typeof dataTypeOrTransport === "string" && !seekingTransport && !inspected[ dataTypeOrTransport ] ) {        // 8673
				options.dataTypes.unshift( dataTypeOrTransport );                                                                // 8674
				inspect( dataTypeOrTransport );                                                                                  // 8675
				return false;                                                                                                    // 8676
			} else if ( seekingTransport ) {                                                                                  // 8677
				return !( selected = dataTypeOrTransport );                                                                      // 8678
			}                                                                                                                 // 8679
		});                                                                                                                // 8680
		return selected;                                                                                                   // 8681
	}                                                                                                                   // 8682
                                                                                                                     // 8683
	return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );                                    // 8684
}                                                                                                                    // 8685
                                                                                                                     // 8686
// A special extend for ajax options                                                                                 // 8687
// that takes "flat" options (not to be deep extended)                                                               // 8688
// Fixes #9887                                                                                                       // 8689
function ajaxExtend( target, src ) {                                                                                 // 8690
	var deep, key,                                                                                                      // 8691
		flatOptions = jQuery.ajaxSettings.flatOptions || {};                                                               // 8692
                                                                                                                     // 8693
	for ( key in src ) {                                                                                                // 8694
		if ( src[ key ] !== undefined ) {                                                                                  // 8695
			( flatOptions[ key ] ? target : ( deep || (deep = {}) ) )[ key ] = src[ key ];                                    // 8696
		}                                                                                                                  // 8697
	}                                                                                                                   // 8698
	if ( deep ) {                                                                                                       // 8699
		jQuery.extend( true, target, deep );                                                                               // 8700
	}                                                                                                                   // 8701
                                                                                                                     // 8702
	return target;                                                                                                      // 8703
}                                                                                                                    // 8704
                                                                                                                     // 8705
/* Handles responses to an ajax request:                                                                             // 8706
 * - finds the right dataType (mediates between content-type and expected dataType)                                  // 8707
 * - returns the corresponding response                                                                              // 8708
 */                                                                                                                  // 8709
function ajaxHandleResponses( s, jqXHR, responses ) {                                                                // 8710
	var firstDataType, ct, finalDataType, type,                                                                         // 8711
		contents = s.contents,                                                                                             // 8712
		dataTypes = s.dataTypes;                                                                                           // 8713
                                                                                                                     // 8714
	// Remove auto dataType and get content-type in the process                                                         // 8715
	while ( dataTypes[ 0 ] === "*" ) {                                                                                  // 8716
		dataTypes.shift();                                                                                                 // 8717
		if ( ct === undefined ) {                                                                                          // 8718
			ct = s.mimeType || jqXHR.getResponseHeader("Content-Type");                                                       // 8719
		}                                                                                                                  // 8720
	}                                                                                                                   // 8721
                                                                                                                     // 8722
	// Check if we're dealing with a known content-type                                                                 // 8723
	if ( ct ) {                                                                                                         // 8724
		for ( type in contents ) {                                                                                         // 8725
			if ( contents[ type ] && contents[ type ].test( ct ) ) {                                                          // 8726
				dataTypes.unshift( type );                                                                                       // 8727
				break;                                                                                                           // 8728
			}                                                                                                                 // 8729
		}                                                                                                                  // 8730
	}                                                                                                                   // 8731
                                                                                                                     // 8732
	// Check to see if we have a response for the expected dataType                                                     // 8733
	if ( dataTypes[ 0 ] in responses ) {                                                                                // 8734
		finalDataType = dataTypes[ 0 ];                                                                                    // 8735
	} else {                                                                                                            // 8736
		// Try convertible dataTypes                                                                                       // 8737
		for ( type in responses ) {                                                                                        // 8738
			if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[0] ] ) {                                             // 8739
				finalDataType = type;                                                                                            // 8740
				break;                                                                                                           // 8741
			}                                                                                                                 // 8742
			if ( !firstDataType ) {                                                                                           // 8743
				firstDataType = type;                                                                                            // 8744
			}                                                                                                                 // 8745
		}                                                                                                                  // 8746
		// Or just use first one                                                                                           // 8747
		finalDataType = finalDataType || firstDataType;                                                                    // 8748
	}                                                                                                                   // 8749
                                                                                                                     // 8750
	// If we found a dataType                                                                                           // 8751
	// We add the dataType to the list if needed                                                                        // 8752
	// and return the corresponding response                                                                            // 8753
	if ( finalDataType ) {                                                                                              // 8754
		if ( finalDataType !== dataTypes[ 0 ] ) {                                                                          // 8755
			dataTypes.unshift( finalDataType );                                                                               // 8756
		}                                                                                                                  // 8757
		return responses[ finalDataType ];                                                                                 // 8758
	}                                                                                                                   // 8759
}                                                                                                                    // 8760
                                                                                                                     // 8761
/* Chain conversions given the request and the original response                                                     // 8762
 * Also sets the responseXXX fields on the jqXHR instance                                                            // 8763
 */                                                                                                                  // 8764
function ajaxConvert( s, response, jqXHR, isSuccess ) {                                                              // 8765
	var conv2, current, conv, tmp, prev,                                                                                // 8766
		converters = {},                                                                                                   // 8767
		// Work with a copy of dataTypes in case we need to modify it for conversion                                       // 8768
		dataTypes = s.dataTypes.slice();                                                                                   // 8769
                                                                                                                     // 8770
	// Create converters map with lowercased keys                                                                       // 8771
	if ( dataTypes[ 1 ] ) {                                                                                             // 8772
		for ( conv in s.converters ) {                                                                                     // 8773
			converters[ conv.toLowerCase() ] = s.converters[ conv ];                                                          // 8774
		}                                                                                                                  // 8775
	}                                                                                                                   // 8776
                                                                                                                     // 8777
	current = dataTypes.shift();                                                                                        // 8778
                                                                                                                     // 8779
	// Convert to each sequential dataType                                                                              // 8780
	while ( current ) {                                                                                                 // 8781
                                                                                                                     // 8782
		if ( s.responseFields[ current ] ) {                                                                               // 8783
			jqXHR[ s.responseFields[ current ] ] = response;                                                                  // 8784
		}                                                                                                                  // 8785
                                                                                                                     // 8786
		// Apply the dataFilter if provided                                                                                // 8787
		if ( !prev && isSuccess && s.dataFilter ) {                                                                        // 8788
			response = s.dataFilter( response, s.dataType );                                                                  // 8789
		}                                                                                                                  // 8790
                                                                                                                     // 8791
		prev = current;                                                                                                    // 8792
		current = dataTypes.shift();                                                                                       // 8793
                                                                                                                     // 8794
		if ( current ) {                                                                                                   // 8795
                                                                                                                     // 8796
			// There's only work to do if current dataType is non-auto                                                        // 8797
			if ( current === "*" ) {                                                                                          // 8798
                                                                                                                     // 8799
				current = prev;                                                                                                  // 8800
                                                                                                                     // 8801
			// Convert response if prev dataType is non-auto and differs from current                                         // 8802
			} else if ( prev !== "*" && prev !== current ) {                                                                  // 8803
                                                                                                                     // 8804
				// Seek a direct converter                                                                                       // 8805
				conv = converters[ prev + " " + current ] || converters[ "* " + current ];                                       // 8806
                                                                                                                     // 8807
				// If none found, seek a pair                                                                                    // 8808
				if ( !conv ) {                                                                                                   // 8809
					for ( conv2 in converters ) {                                                                                   // 8810
                                                                                                                     // 8811
						// If conv2 outputs current                                                                                    // 8812
						tmp = conv2.split( " " );                                                                                      // 8813
						if ( tmp[ 1 ] === current ) {                                                                                  // 8814
                                                                                                                     // 8815
							// If prev can be converted to accepted input                                                                 // 8816
							conv = converters[ prev + " " + tmp[ 0 ] ] ||                                                                 // 8817
								converters[ "* " + tmp[ 0 ] ];                                                                               // 8818
							if ( conv ) {                                                                                                 // 8819
								// Condense equivalence converters                                                                           // 8820
								if ( conv === true ) {                                                                                       // 8821
									conv = converters[ conv2 ];                                                                                 // 8822
                                                                                                                     // 8823
								// Otherwise, insert the intermediate dataType                                                               // 8824
								} else if ( converters[ conv2 ] !== true ) {                                                                 // 8825
									current = tmp[ 0 ];                                                                                         // 8826
									dataTypes.unshift( tmp[ 1 ] );                                                                              // 8827
								}                                                                                                            // 8828
								break;                                                                                                       // 8829
							}                                                                                                             // 8830
						}                                                                                                              // 8831
					}                                                                                                               // 8832
				}                                                                                                                // 8833
                                                                                                                     // 8834
				// Apply converter (if not an equivalence)                                                                       // 8835
				if ( conv !== true ) {                                                                                           // 8836
                                                                                                                     // 8837
					// Unless errors are allowed to bubble, catch and return them                                                   // 8838
					if ( conv && s[ "throws" ] ) {                                                                                  // 8839
						response = conv( response );                                                                                   // 8840
					} else {                                                                                                        // 8841
						try {                                                                                                          // 8842
							response = conv( response );                                                                                  // 8843
						} catch ( e ) {                                                                                                // 8844
							return { state: "parsererror", error: conv ? e : "No conversion from " + prev + " to " + current };           // 8845
						}                                                                                                              // 8846
					}                                                                                                               // 8847
				}                                                                                                                // 8848
			}                                                                                                                 // 8849
		}                                                                                                                  // 8850
	}                                                                                                                   // 8851
                                                                                                                     // 8852
	return { state: "success", data: response };                                                                        // 8853
}                                                                                                                    // 8854
                                                                                                                     // 8855
jQuery.extend({                                                                                                      // 8856
                                                                                                                     // 8857
	// Counter for holding the number of active queries                                                                 // 8858
	active: 0,                                                                                                          // 8859
                                                                                                                     // 8860
	// Last-Modified header cache for next request                                                                      // 8861
	lastModified: {},                                                                                                   // 8862
	etag: {},                                                                                                           // 8863
                                                                                                                     // 8864
	ajaxSettings: {                                                                                                     // 8865
		url: ajaxLocation,                                                                                                 // 8866
		type: "GET",                                                                                                       // 8867
		isLocal: rlocalProtocol.test( ajaxLocParts[ 1 ] ),                                                                 // 8868
		global: true,                                                                                                      // 8869
		processData: true,                                                                                                 // 8870
		async: true,                                                                                                       // 8871
		contentType: "application/x-www-form-urlencoded; charset=UTF-8",                                                   // 8872
		/*                                                                                                                 // 8873
		timeout: 0,                                                                                                        // 8874
		data: null,                                                                                                        // 8875
		dataType: null,                                                                                                    // 8876
		username: null,                                                                                                    // 8877
		password: null,                                                                                                    // 8878
		cache: null,                                                                                                       // 8879
		throws: false,                                                                                                     // 8880
		traditional: false,                                                                                                // 8881
		headers: {},                                                                                                       // 8882
		*/                                                                                                                 // 8883
                                                                                                                     // 8884
		accepts: {                                                                                                         // 8885
			"*": allTypes,                                                                                                    // 8886
			text: "text/plain",                                                                                               // 8887
			html: "text/html",                                                                                                // 8888
			xml: "application/xml, text/xml",                                                                                 // 8889
			json: "application/json, text/javascript"                                                                         // 8890
		},                                                                                                                 // 8891
                                                                                                                     // 8892
		contents: {                                                                                                        // 8893
			xml: /xml/,                                                                                                       // 8894
			html: /html/,                                                                                                     // 8895
			json: /json/                                                                                                      // 8896
		},                                                                                                                 // 8897
                                                                                                                     // 8898
		responseFields: {                                                                                                  // 8899
			xml: "responseXML",                                                                                               // 8900
			text: "responseText",                                                                                             // 8901
			json: "responseJSON"                                                                                              // 8902
		},                                                                                                                 // 8903
                                                                                                                     // 8904
		// Data converters                                                                                                 // 8905
		// Keys separate source (or catchall "*") and destination types with a single space                                // 8906
		converters: {                                                                                                      // 8907
                                                                                                                     // 8908
			// Convert anything to text                                                                                       // 8909
			"* text": String,                                                                                                 // 8910
                                                                                                                     // 8911
			// Text to html (true = no transformation)                                                                        // 8912
			"text html": true,                                                                                                // 8913
                                                                                                                     // 8914
			// Evaluate text as a json expression                                                                             // 8915
			"text json": jQuery.parseJSON,                                                                                    // 8916
                                                                                                                     // 8917
			// Parse text as xml                                                                                              // 8918
			"text xml": jQuery.parseXML                                                                                       // 8919
		},                                                                                                                 // 8920
                                                                                                                     // 8921
		// For options that shouldn't be deep extended:                                                                    // 8922
		// you can add your own custom options here if                                                                     // 8923
		// and when you create one that shouldn't be                                                                       // 8924
		// deep extended (see ajaxExtend)                                                                                  // 8925
		flatOptions: {                                                                                                     // 8926
			url: true,                                                                                                        // 8927
			context: true                                                                                                     // 8928
		}                                                                                                                  // 8929
	},                                                                                                                  // 8930
                                                                                                                     // 8931
	// Creates a full fledged settings object into target                                                               // 8932
	// with both ajaxSettings and settings fields.                                                                      // 8933
	// If target is omitted, writes into ajaxSettings.                                                                  // 8934
	ajaxSetup: function( target, settings ) {                                                                           // 8935
		return settings ?                                                                                                  // 8936
                                                                                                                     // 8937
			// Building a settings object                                                                                     // 8938
			ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :                                               // 8939
                                                                                                                     // 8940
			// Extending ajaxSettings                                                                                         // 8941
			ajaxExtend( jQuery.ajaxSettings, target );                                                                        // 8942
	},                                                                                                                  // 8943
                                                                                                                     // 8944
	ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),                                                           // 8945
	ajaxTransport: addToPrefiltersOrTransports( transports ),                                                           // 8946
                                                                                                                     // 8947
	// Main method                                                                                                      // 8948
	ajax: function( url, options ) {                                                                                    // 8949
                                                                                                                     // 8950
		// If url is an object, simulate pre-1.5 signature                                                                 // 8951
		if ( typeof url === "object" ) {                                                                                   // 8952
			options = url;                                                                                                    // 8953
			url = undefined;                                                                                                  // 8954
		}                                                                                                                  // 8955
                                                                                                                     // 8956
		// Force options to be an object                                                                                   // 8957
		options = options || {};                                                                                           // 8958
                                                                                                                     // 8959
		var // Cross-domain detection vars                                                                                 // 8960
			parts,                                                                                                            // 8961
			// Loop variable                                                                                                  // 8962
			i,                                                                                                                // 8963
			// URL without anti-cache param                                                                                   // 8964
			cacheURL,                                                                                                         // 8965
			// Response headers as string                                                                                     // 8966
			responseHeadersString,                                                                                            // 8967
			// timeout handle                                                                                                 // 8968
			timeoutTimer,                                                                                                     // 8969
                                                                                                                     // 8970
			// To know if global events are to be dispatched                                                                  // 8971
			fireGlobals,                                                                                                      // 8972
                                                                                                                     // 8973
			transport,                                                                                                        // 8974
			// Response headers                                                                                               // 8975
			responseHeaders,                                                                                                  // 8976
			// Create the final options object                                                                                // 8977
			s = jQuery.ajaxSetup( {}, options ),                                                                              // 8978
			// Callbacks context                                                                                              // 8979
			callbackContext = s.context || s,                                                                                 // 8980
			// Context for global events is callbackContext if it is a DOM node or jQuery collection                          // 8981
			globalEventContext = s.context && ( callbackContext.nodeType || callbackContext.jquery ) ?                        // 8982
				jQuery( callbackContext ) :                                                                                      // 8983
				jQuery.event,                                                                                                    // 8984
			// Deferreds                                                                                                      // 8985
			deferred = jQuery.Deferred(),                                                                                     // 8986
			completeDeferred = jQuery.Callbacks("once memory"),                                                               // 8987
			// Status-dependent callbacks                                                                                     // 8988
			statusCode = s.statusCode || {},                                                                                  // 8989
			// Headers (they are sent all at once)                                                                            // 8990
			requestHeaders = {},                                                                                              // 8991
			requestHeadersNames = {},                                                                                         // 8992
			// The jqXHR state                                                                                                // 8993
			state = 0,                                                                                                        // 8994
			// Default abort message                                                                                          // 8995
			strAbort = "canceled",                                                                                            // 8996
			// Fake xhr                                                                                                       // 8997
			jqXHR = {                                                                                                         // 8998
				readyState: 0,                                                                                                   // 8999
                                                                                                                     // 9000
				// Builds headers hashtable if needed                                                                            // 9001
				getResponseHeader: function( key ) {                                                                             // 9002
					var match;                                                                                                      // 9003
					if ( state === 2 ) {                                                                                            // 9004
						if ( !responseHeaders ) {                                                                                      // 9005
							responseHeaders = {};                                                                                         // 9006
							while ( (match = rheaders.exec( responseHeadersString )) ) {                                                  // 9007
								responseHeaders[ match[1].toLowerCase() ] = match[ 2 ];                                                      // 9008
							}                                                                                                             // 9009
						}                                                                                                              // 9010
						match = responseHeaders[ key.toLowerCase() ];                                                                  // 9011
					}                                                                                                               // 9012
					return match == null ? null : match;                                                                            // 9013
				},                                                                                                               // 9014
                                                                                                                     // 9015
				// Raw string                                                                                                    // 9016
				getAllResponseHeaders: function() {                                                                              // 9017
					return state === 2 ? responseHeadersString : null;                                                              // 9018
				},                                                                                                               // 9019
                                                                                                                     // 9020
				// Caches the header                                                                                             // 9021
				setRequestHeader: function( name, value ) {                                                                      // 9022
					var lname = name.toLowerCase();                                                                                 // 9023
					if ( !state ) {                                                                                                 // 9024
						name = requestHeadersNames[ lname ] = requestHeadersNames[ lname ] || name;                                    // 9025
						requestHeaders[ name ] = value;                                                                                // 9026
					}                                                                                                               // 9027
					return this;                                                                                                    // 9028
				},                                                                                                               // 9029
                                                                                                                     // 9030
				// Overrides response content-type header                                                                        // 9031
				overrideMimeType: function( type ) {                                                                             // 9032
					if ( !state ) {                                                                                                 // 9033
						s.mimeType = type;                                                                                             // 9034
					}                                                                                                               // 9035
					return this;                                                                                                    // 9036
				},                                                                                                               // 9037
                                                                                                                     // 9038
				// Status-dependent callbacks                                                                                    // 9039
				statusCode: function( map ) {                                                                                    // 9040
					var code;                                                                                                       // 9041
					if ( map ) {                                                                                                    // 9042
						if ( state < 2 ) {                                                                                             // 9043
							for ( code in map ) {                                                                                         // 9044
								// Lazy-add the new callback in a way that preserves old ones                                                // 9045
								statusCode[ code ] = [ statusCode[ code ], map[ code ] ];                                                    // 9046
							}                                                                                                             // 9047
						} else {                                                                                                       // 9048
							// Execute the appropriate callbacks                                                                          // 9049
							jqXHR.always( map[ jqXHR.status ] );                                                                          // 9050
						}                                                                                                              // 9051
					}                                                                                                               // 9052
					return this;                                                                                                    // 9053
				},                                                                                                               // 9054
                                                                                                                     // 9055
				// Cancel the request                                                                                            // 9056
				abort: function( statusText ) {                                                                                  // 9057
					var finalText = statusText || strAbort;                                                                         // 9058
					if ( transport ) {                                                                                              // 9059
						transport.abort( finalText );                                                                                  // 9060
					}                                                                                                               // 9061
					done( 0, finalText );                                                                                           // 9062
					return this;                                                                                                    // 9063
				}                                                                                                                // 9064
			};                                                                                                                // 9065
                                                                                                                     // 9066
		// Attach deferreds                                                                                                // 9067
		deferred.promise( jqXHR ).complete = completeDeferred.add;                                                         // 9068
		jqXHR.success = jqXHR.done;                                                                                        // 9069
		jqXHR.error = jqXHR.fail;                                                                                          // 9070
                                                                                                                     // 9071
		// Remove hash character (#7531: and string promotion)                                                             // 9072
		// Add protocol if not provided (#5866: IE7 issue with protocol-less urls)                                         // 9073
		// Handle falsy url in the settings object (#10093: consistency with old signature)                                // 9074
		// We also use the url parameter if available                                                                      // 9075
		s.url = ( ( url || s.url || ajaxLocation ) + "" ).replace( rhash, "" ).replace( rprotocol, ajaxLocParts[ 1 ] + "//" );
                                                                                                                     // 9077
		// Alias method option to type as per ticket #12004                                                                // 9078
		s.type = options.method || options.type || s.method || s.type;                                                     // 9079
                                                                                                                     // 9080
		// Extract dataTypes list                                                                                          // 9081
		s.dataTypes = jQuery.trim( s.dataType || "*" ).toLowerCase().match( rnotwhite ) || [ "" ];                         // 9082
                                                                                                                     // 9083
		// A cross-domain request is in order when we have a protocol:host:port mismatch                                   // 9084
		if ( s.crossDomain == null ) {                                                                                     // 9085
			parts = rurl.exec( s.url.toLowerCase() );                                                                         // 9086
			s.crossDomain = !!( parts &&                                                                                      // 9087
				( parts[ 1 ] !== ajaxLocParts[ 1 ] || parts[ 2 ] !== ajaxLocParts[ 2 ] ||                                        // 9088
					( parts[ 3 ] || ( parts[ 1 ] === "http:" ? "80" : "443" ) ) !==                                                 // 9089
						( ajaxLocParts[ 3 ] || ( ajaxLocParts[ 1 ] === "http:" ? "80" : "443" ) ) )                                    // 9090
			);                                                                                                                // 9091
		}                                                                                                                  // 9092
                                                                                                                     // 9093
		// Convert data if not already a string                                                                            // 9094
		if ( s.data && s.processData && typeof s.data !== "string" ) {                                                     // 9095
			s.data = jQuery.param( s.data, s.traditional );                                                                   // 9096
		}                                                                                                                  // 9097
                                                                                                                     // 9098
		// Apply prefilters                                                                                                // 9099
		inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );                                                    // 9100
                                                                                                                     // 9101
		// If request was aborted inside a prefilter, stop there                                                           // 9102
		if ( state === 2 ) {                                                                                               // 9103
			return jqXHR;                                                                                                     // 9104
		}                                                                                                                  // 9105
                                                                                                                     // 9106
		// We can fire global events as of now if asked to                                                                 // 9107
		fireGlobals = s.global;                                                                                            // 9108
                                                                                                                     // 9109
		// Watch for a new set of requests                                                                                 // 9110
		if ( fireGlobals && jQuery.active++ === 0 ) {                                                                      // 9111
			jQuery.event.trigger("ajaxStart");                                                                                // 9112
		}                                                                                                                  // 9113
                                                                                                                     // 9114
		// Uppercase the type                                                                                              // 9115
		s.type = s.type.toUpperCase();                                                                                     // 9116
                                                                                                                     // 9117
		// Determine if request has content                                                                                // 9118
		s.hasContent = !rnoContent.test( s.type );                                                                         // 9119
                                                                                                                     // 9120
		// Save the URL in case we're toying with the If-Modified-Since                                                    // 9121
		// and/or If-None-Match header later on                                                                            // 9122
		cacheURL = s.url;                                                                                                  // 9123
                                                                                                                     // 9124
		// More options handling for requests with no content                                                              // 9125
		if ( !s.hasContent ) {                                                                                             // 9126
                                                                                                                     // 9127
			// If data is available, append data to url                                                                       // 9128
			if ( s.data ) {                                                                                                   // 9129
				cacheURL = ( s.url += ( rquery.test( cacheURL ) ? "&" : "?" ) + s.data );                                        // 9130
				// #9682: remove data so that it's not used in an eventual retry                                                 // 9131
				delete s.data;                                                                                                   // 9132
			}                                                                                                                 // 9133
                                                                                                                     // 9134
			// Add anti-cache in url if needed                                                                                // 9135
			if ( s.cache === false ) {                                                                                        // 9136
				s.url = rts.test( cacheURL ) ?                                                                                   // 9137
                                                                                                                     // 9138
					// If there is already a '_' parameter, set its value                                                           // 9139
					cacheURL.replace( rts, "$1_=" + nonce++ ) :                                                                     // 9140
                                                                                                                     // 9141
					// Otherwise add one to the end                                                                                 // 9142
					cacheURL + ( rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + nonce++;                                            // 9143
			}                                                                                                                 // 9144
		}                                                                                                                  // 9145
                                                                                                                     // 9146
		// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.                                   // 9147
		if ( s.ifModified ) {                                                                                              // 9148
			if ( jQuery.lastModified[ cacheURL ] ) {                                                                          // 9149
				jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );                                  // 9150
			}                                                                                                                 // 9151
			if ( jQuery.etag[ cacheURL ] ) {                                                                                  // 9152
				jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );                                              // 9153
			}                                                                                                                 // 9154
		}                                                                                                                  // 9155
                                                                                                                     // 9156
		// Set the correct header, if data is being sent                                                                   // 9157
		if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {                                  // 9158
			jqXHR.setRequestHeader( "Content-Type", s.contentType );                                                          // 9159
		}                                                                                                                  // 9160
                                                                                                                     // 9161
		// Set the Accepts header for the server, depending on the dataType                                                // 9162
		jqXHR.setRequestHeader(                                                                                            // 9163
			"Accept",                                                                                                         // 9164
			s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[0] ] ?                                                                 // 9165
				s.accepts[ s.dataTypes[0] ] + ( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :                 // 9166
				s.accepts[ "*" ]                                                                                                 // 9167
		);                                                                                                                 // 9168
                                                                                                                     // 9169
		// Check for headers option                                                                                        // 9170
		for ( i in s.headers ) {                                                                                           // 9171
			jqXHR.setRequestHeader( i, s.headers[ i ] );                                                                      // 9172
		}                                                                                                                  // 9173
                                                                                                                     // 9174
		// Allow custom headers/mimetypes and early abort                                                                  // 9175
		if ( s.beforeSend && ( s.beforeSend.call( callbackContext, jqXHR, s ) === false || state === 2 ) ) {               // 9176
			// Abort if not done already and return                                                                           // 9177
			return jqXHR.abort();                                                                                             // 9178
		}                                                                                                                  // 9179
                                                                                                                     // 9180
		// aborting is no longer a cancellation                                                                            // 9181
		strAbort = "abort";                                                                                                // 9182
                                                                                                                     // 9183
		// Install callbacks on deferreds                                                                                  // 9184
		for ( i in { success: 1, error: 1, complete: 1 } ) {                                                               // 9185
			jqXHR[ i ]( s[ i ] );                                                                                             // 9186
		}                                                                                                                  // 9187
                                                                                                                     // 9188
		// Get transport                                                                                                   // 9189
		transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );                                        // 9190
                                                                                                                     // 9191
		// If no transport, we auto-abort                                                                                  // 9192
		if ( !transport ) {                                                                                                // 9193
			done( -1, "No Transport" );                                                                                       // 9194
		} else {                                                                                                           // 9195
			jqXHR.readyState = 1;                                                                                             // 9196
                                                                                                                     // 9197
			// Send global event                                                                                              // 9198
			if ( fireGlobals ) {                                                                                              // 9199
				globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );                                                          // 9200
			}                                                                                                                 // 9201
			// Timeout                                                                                                        // 9202
			if ( s.async && s.timeout > 0 ) {                                                                                 // 9203
				timeoutTimer = setTimeout(function() {                                                                           // 9204
					jqXHR.abort("timeout");                                                                                         // 9205
				}, s.timeout );                                                                                                  // 9206
			}                                                                                                                 // 9207
                                                                                                                     // 9208
			try {                                                                                                             // 9209
				state = 1;                                                                                                       // 9210
				transport.send( requestHeaders, done );                                                                          // 9211
			} catch ( e ) {                                                                                                   // 9212
				// Propagate exception as error if not done                                                                      // 9213
				if ( state < 2 ) {                                                                                               // 9214
					done( -1, e );                                                                                                  // 9215
				// Simply rethrow otherwise                                                                                      // 9216
				} else {                                                                                                         // 9217
					throw e;                                                                                                        // 9218
				}                                                                                                                // 9219
			}                                                                                                                 // 9220
		}                                                                                                                  // 9221
                                                                                                                     // 9222
		// Callback for when everything is done                                                                            // 9223
		function done( status, nativeStatusText, responses, headers ) {                                                    // 9224
			var isSuccess, success, error, response, modified,                                                                // 9225
				statusText = nativeStatusText;                                                                                   // 9226
                                                                                                                     // 9227
			// Called once                                                                                                    // 9228
			if ( state === 2 ) {                                                                                              // 9229
				return;                                                                                                          // 9230
			}                                                                                                                 // 9231
                                                                                                                     // 9232
			// State is "done" now                                                                                            // 9233
			state = 2;                                                                                                        // 9234
                                                                                                                     // 9235
			// Clear timeout if it exists                                                                                     // 9236
			if ( timeoutTimer ) {                                                                                             // 9237
				clearTimeout( timeoutTimer );                                                                                    // 9238
			}                                                                                                                 // 9239
                                                                                                                     // 9240
			// Dereference transport for early garbage collection                                                             // 9241
			// (no matter how long the jqXHR object will be used)                                                             // 9242
			transport = undefined;                                                                                            // 9243
                                                                                                                     // 9244
			// Cache response headers                                                                                         // 9245
			responseHeadersString = headers || "";                                                                            // 9246
                                                                                                                     // 9247
			// Set readyState                                                                                                 // 9248
			jqXHR.readyState = status > 0 ? 4 : 0;                                                                            // 9249
                                                                                                                     // 9250
			// Determine if successful                                                                                        // 9251
			isSuccess = status >= 200 && status < 300 || status === 304;                                                      // 9252
                                                                                                                     // 9253
			// Get response data                                                                                              // 9254
			if ( responses ) {                                                                                                // 9255
				response = ajaxHandleResponses( s, jqXHR, responses );                                                           // 9256
			}                                                                                                                 // 9257
                                                                                                                     // 9258
			// Convert no matter what (that way responseXXX fields are always set)                                            // 9259
			response = ajaxConvert( s, response, jqXHR, isSuccess );                                                          // 9260
                                                                                                                     // 9261
			// If successful, handle type chaining                                                                            // 9262
			if ( isSuccess ) {                                                                                                // 9263
                                                                                                                     // 9264
				// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.                                 // 9265
				if ( s.ifModified ) {                                                                                            // 9266
					modified = jqXHR.getResponseHeader("Last-Modified");                                                            // 9267
					if ( modified ) {                                                                                               // 9268
						jQuery.lastModified[ cacheURL ] = modified;                                                                    // 9269
					}                                                                                                               // 9270
					modified = jqXHR.getResponseHeader("etag");                                                                     // 9271
					if ( modified ) {                                                                                               // 9272
						jQuery.etag[ cacheURL ] = modified;                                                                            // 9273
					}                                                                                                               // 9274
				}                                                                                                                // 9275
                                                                                                                     // 9276
				// if no content                                                                                                 // 9277
				if ( status === 204 || s.type === "HEAD" ) {                                                                     // 9278
					statusText = "nocontent";                                                                                       // 9279
                                                                                                                     // 9280
				// if not modified                                                                                               // 9281
				} else if ( status === 304 ) {                                                                                   // 9282
					statusText = "notmodified";                                                                                     // 9283
                                                                                                                     // 9284
				// If we have data, let's convert it                                                                             // 9285
				} else {                                                                                                         // 9286
					statusText = response.state;                                                                                    // 9287
					success = response.data;                                                                                        // 9288
					error = response.error;                                                                                         // 9289
					isSuccess = !error;                                                                                             // 9290
				}                                                                                                                // 9291
			} else {                                                                                                          // 9292
				// We extract error from statusText                                                                              // 9293
				// then normalize statusText and status for non-aborts                                                           // 9294
				error = statusText;                                                                                              // 9295
				if ( status || !statusText ) {                                                                                   // 9296
					statusText = "error";                                                                                           // 9297
					if ( status < 0 ) {                                                                                             // 9298
						status = 0;                                                                                                    // 9299
					}                                                                                                               // 9300
				}                                                                                                                // 9301
			}                                                                                                                 // 9302
                                                                                                                     // 9303
			// Set data for the fake xhr object                                                                               // 9304
			jqXHR.status = status;                                                                                            // 9305
			jqXHR.statusText = ( nativeStatusText || statusText ) + "";                                                       // 9306
                                                                                                                     // 9307
			// Success/Error                                                                                                  // 9308
			if ( isSuccess ) {                                                                                                // 9309
				deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );                                         // 9310
			} else {                                                                                                          // 9311
				deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );                                            // 9312
			}                                                                                                                 // 9313
                                                                                                                     // 9314
			// Status-dependent callbacks                                                                                     // 9315
			jqXHR.statusCode( statusCode );                                                                                   // 9316
			statusCode = undefined;                                                                                           // 9317
                                                                                                                     // 9318
			if ( fireGlobals ) {                                                                                              // 9319
				globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",                                             // 9320
					[ jqXHR, s, isSuccess ? success : error ] );                                                                    // 9321
			}                                                                                                                 // 9322
                                                                                                                     // 9323
			// Complete                                                                                                       // 9324
			completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );                                              // 9325
                                                                                                                     // 9326
			if ( fireGlobals ) {                                                                                              // 9327
				globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );                                                      // 9328
				// Handle the global AJAX counter                                                                                // 9329
				if ( !( --jQuery.active ) ) {                                                                                    // 9330
					jQuery.event.trigger("ajaxStop");                                                                               // 9331
				}                                                                                                                // 9332
			}                                                                                                                 // 9333
		}                                                                                                                  // 9334
                                                                                                                     // 9335
		return jqXHR;                                                                                                      // 9336
	},                                                                                                                  // 9337
                                                                                                                     // 9338
	getJSON: function( url, data, callback ) {                                                                          // 9339
		return jQuery.get( url, data, callback, "json" );                                                                  // 9340
	},                                                                                                                  // 9341
                                                                                                                     // 9342
	getScript: function( url, callback ) {                                                                              // 9343
		return jQuery.get( url, undefined, callback, "script" );                                                           // 9344
	}                                                                                                                   // 9345
});                                                                                                                  // 9346
                                                                                                                     // 9347
jQuery.each( [ "get", "post" ], function( i, method ) {                                                              // 9348
	jQuery[ method ] = function( url, data, callback, type ) {                                                          // 9349
		// shift arguments if data argument was omitted                                                                    // 9350
		if ( jQuery.isFunction( data ) ) {                                                                                 // 9351
			type = type || callback;                                                                                          // 9352
			callback = data;                                                                                                  // 9353
			data = undefined;                                                                                                 // 9354
		}                                                                                                                  // 9355
                                                                                                                     // 9356
		return jQuery.ajax({                                                                                               // 9357
			url: url,                                                                                                         // 9358
			type: method,                                                                                                     // 9359
			dataType: type,                                                                                                   // 9360
			data: data,                                                                                                       // 9361
			success: callback                                                                                                 // 9362
		});                                                                                                                // 9363
	};                                                                                                                  // 9364
});                                                                                                                  // 9365
                                                                                                                     // 9366
// Attach a bunch of functions for handling common AJAX events                                                       // 9367
jQuery.each( [ "ajaxStart", "ajaxStop", "ajaxComplete", "ajaxError", "ajaxSuccess", "ajaxSend" ], function( i, type ) {
	jQuery.fn[ type ] = function( fn ) {                                                                                // 9369
		return this.on( type, fn );                                                                                        // 9370
	};                                                                                                                  // 9371
});                                                                                                                  // 9372
                                                                                                                     // 9373
                                                                                                                     // 9374
jQuery._evalUrl = function( url ) {                                                                                  // 9375
	return jQuery.ajax({                                                                                                // 9376
		url: url,                                                                                                          // 9377
		type: "GET",                                                                                                       // 9378
		dataType: "script",                                                                                                // 9379
		async: false,                                                                                                      // 9380
		global: false,                                                                                                     // 9381
		"throws": true                                                                                                     // 9382
	});                                                                                                                 // 9383
};                                                                                                                   // 9384
                                                                                                                     // 9385
                                                                                                                     // 9386
jQuery.fn.extend({                                                                                                   // 9387
	wrapAll: function( html ) {                                                                                         // 9388
		if ( jQuery.isFunction( html ) ) {                                                                                 // 9389
			return this.each(function(i) {                                                                                    // 9390
				jQuery(this).wrapAll( html.call(this, i) );                                                                      // 9391
			});                                                                                                               // 9392
		}                                                                                                                  // 9393
                                                                                                                     // 9394
		if ( this[0] ) {                                                                                                   // 9395
			// The elements to wrap the target around                                                                         // 9396
			var wrap = jQuery( html, this[0].ownerDocument ).eq(0).clone(true);                                               // 9397
                                                                                                                     // 9398
			if ( this[0].parentNode ) {                                                                                       // 9399
				wrap.insertBefore( this[0] );                                                                                    // 9400
			}                                                                                                                 // 9401
                                                                                                                     // 9402
			wrap.map(function() {                                                                                             // 9403
				var elem = this;                                                                                                 // 9404
                                                                                                                     // 9405
				while ( elem.firstChild && elem.firstChild.nodeType === 1 ) {                                                    // 9406
					elem = elem.firstChild;                                                                                         // 9407
				}                                                                                                                // 9408
                                                                                                                     // 9409
				return elem;                                                                                                     // 9410
			}).append( this );                                                                                                // 9411
		}                                                                                                                  // 9412
                                                                                                                     // 9413
		return this;                                                                                                       // 9414
	},                                                                                                                  // 9415
                                                                                                                     // 9416
	wrapInner: function( html ) {                                                                                       // 9417
		if ( jQuery.isFunction( html ) ) {                                                                                 // 9418
			return this.each(function(i) {                                                                                    // 9419
				jQuery(this).wrapInner( html.call(this, i) );                                                                    // 9420
			});                                                                                                               // 9421
		}                                                                                                                  // 9422
                                                                                                                     // 9423
		return this.each(function() {                                                                                      // 9424
			var self = jQuery( this ),                                                                                        // 9425
				contents = self.contents();                                                                                      // 9426
                                                                                                                     // 9427
			if ( contents.length ) {                                                                                          // 9428
				contents.wrapAll( html );                                                                                        // 9429
                                                                                                                     // 9430
			} else {                                                                                                          // 9431
				self.append( html );                                                                                             // 9432
			}                                                                                                                 // 9433
		});                                                                                                                // 9434
	},                                                                                                                  // 9435
                                                                                                                     // 9436
	wrap: function( html ) {                                                                                            // 9437
		var isFunction = jQuery.isFunction( html );                                                                        // 9438
                                                                                                                     // 9439
		return this.each(function(i) {                                                                                     // 9440
			jQuery( this ).wrapAll( isFunction ? html.call(this, i) : html );                                                 // 9441
		});                                                                                                                // 9442
	},                                                                                                                  // 9443
                                                                                                                     // 9444
	unwrap: function() {                                                                                                // 9445
		return this.parent().each(function() {                                                                             // 9446
			if ( !jQuery.nodeName( this, "body" ) ) {                                                                         // 9447
				jQuery( this ).replaceWith( this.childNodes );                                                                   // 9448
			}                                                                                                                 // 9449
		}).end();                                                                                                          // 9450
	}                                                                                                                   // 9451
});                                                                                                                  // 9452
                                                                                                                     // 9453
                                                                                                                     // 9454
jQuery.expr.filters.hidden = function( elem ) {                                                                      // 9455
	// Support: Opera <= 12.12                                                                                          // 9456
	// Opera reports offsetWidths and offsetHeights less than zero on some elements                                     // 9457
	return elem.offsetWidth <= 0 && elem.offsetHeight <= 0 ||                                                           // 9458
		(!support.reliableHiddenOffsets() &&                                                                               // 9459
			((elem.style && elem.style.display) || jQuery.css( elem, "display" )) === "none");                                // 9460
};                                                                                                                   // 9461
                                                                                                                     // 9462
jQuery.expr.filters.visible = function( elem ) {                                                                     // 9463
	return !jQuery.expr.filters.hidden( elem );                                                                         // 9464
};                                                                                                                   // 9465
                                                                                                                     // 9466
                                                                                                                     // 9467
                                                                                                                     // 9468
                                                                                                                     // 9469
var r20 = /%20/g,                                                                                                    // 9470
	rbracket = /\[\]$/,                                                                                                 // 9471
	rCRLF = /\r?\n/g,                                                                                                   // 9472
	rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,                                                          // 9473
	rsubmittable = /^(?:input|select|textarea|keygen)/i;                                                                // 9474
                                                                                                                     // 9475
function buildParams( prefix, obj, traditional, add ) {                                                              // 9476
	var name;                                                                                                           // 9477
                                                                                                                     // 9478
	if ( jQuery.isArray( obj ) ) {                                                                                      // 9479
		// Serialize array item.                                                                                           // 9480
		jQuery.each( obj, function( i, v ) {                                                                               // 9481
			if ( traditional || rbracket.test( prefix ) ) {                                                                   // 9482
				// Treat each array item as a scalar.                                                                            // 9483
				add( prefix, v );                                                                                                // 9484
                                                                                                                     // 9485
			} else {                                                                                                          // 9486
				// Item is non-scalar (array or object), encode its numeric index.                                               // 9487
				buildParams( prefix + "[" + ( typeof v === "object" ? i : "" ) + "]", v, traditional, add );                     // 9488
			}                                                                                                                 // 9489
		});                                                                                                                // 9490
                                                                                                                     // 9491
	} else if ( !traditional && jQuery.type( obj ) === "object" ) {                                                     // 9492
		// Serialize object item.                                                                                          // 9493
		for ( name in obj ) {                                                                                              // 9494
			buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );                                          // 9495
		}                                                                                                                  // 9496
                                                                                                                     // 9497
	} else {                                                                                                            // 9498
		// Serialize scalar item.                                                                                          // 9499
		add( prefix, obj );                                                                                                // 9500
	}                                                                                                                   // 9501
}                                                                                                                    // 9502
                                                                                                                     // 9503
// Serialize an array of form elements or a set of                                                                   // 9504
// key/values into a query string                                                                                    // 9505
jQuery.param = function( a, traditional ) {                                                                          // 9506
	var prefix,                                                                                                         // 9507
		s = [],                                                                                                            // 9508
		add = function( key, value ) {                                                                                     // 9509
			// If value is a function, invoke it and return its value                                                         // 9510
			value = jQuery.isFunction( value ) ? value() : ( value == null ? "" : value );                                    // 9511
			s[ s.length ] = encodeURIComponent( key ) + "=" + encodeURIComponent( value );                                    // 9512
		};                                                                                                                 // 9513
                                                                                                                     // 9514
	// Set traditional to true for jQuery <= 1.3.2 behavior.                                                            // 9515
	if ( traditional === undefined ) {                                                                                  // 9516
		traditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional;                                              // 9517
	}                                                                                                                   // 9518
                                                                                                                     // 9519
	// If an array was passed in, assume that it is an array of form elements.                                          // 9520
	if ( jQuery.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {                                          // 9521
		// Serialize the form elements                                                                                     // 9522
		jQuery.each( a, function() {                                                                                       // 9523
			add( this.name, this.value );                                                                                     // 9524
		});                                                                                                                // 9525
                                                                                                                     // 9526
	} else {                                                                                                            // 9527
		// If traditional, encode the "old" way (the way 1.3.2 or older                                                    // 9528
		// did it), otherwise encode params recursively.                                                                   // 9529
		for ( prefix in a ) {                                                                                              // 9530
			buildParams( prefix, a[ prefix ], traditional, add );                                                             // 9531
		}                                                                                                                  // 9532
	}                                                                                                                   // 9533
                                                                                                                     // 9534
	// Return the resulting serialization                                                                               // 9535
	return s.join( "&" ).replace( r20, "+" );                                                                           // 9536
};                                                                                                                   // 9537
                                                                                                                     // 9538
jQuery.fn.extend({                                                                                                   // 9539
	serialize: function() {                                                                                             // 9540
		return jQuery.param( this.serializeArray() );                                                                      // 9541
	},                                                                                                                  // 9542
	serializeArray: function() {                                                                                        // 9543
		return this.map(function() {                                                                                       // 9544
			// Can add propHook for "elements" to filter or add form elements                                                 // 9545
			var elements = jQuery.prop( this, "elements" );                                                                   // 9546
			return elements ? jQuery.makeArray( elements ) : this;                                                            // 9547
		})                                                                                                                 // 9548
		.filter(function() {                                                                                               // 9549
			var type = this.type;                                                                                             // 9550
			// Use .is(":disabled") so that fieldset[disabled] works                                                          // 9551
			return this.name && !jQuery( this ).is( ":disabled" ) &&                                                          // 9552
				rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&                                           // 9553
				( this.checked || !rcheckableType.test( type ) );                                                                // 9554
		})                                                                                                                 // 9555
		.map(function( i, elem ) {                                                                                         // 9556
			var val = jQuery( this ).val();                                                                                   // 9557
                                                                                                                     // 9558
			return val == null ?                                                                                              // 9559
				null :                                                                                                           // 9560
				jQuery.isArray( val ) ?                                                                                          // 9561
					jQuery.map( val, function( val ) {                                                                              // 9562
						return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };                                               // 9563
					}) :                                                                                                            // 9564
					{ name: elem.name, value: val.replace( rCRLF, "\r\n" ) };                                                       // 9565
		}).get();                                                                                                          // 9566
	}                                                                                                                   // 9567
});                                                                                                                  // 9568
                                                                                                                     // 9569
                                                                                                                     // 9570
// Create the request object                                                                                         // 9571
// (This is still attached to ajaxSettings for backward compatibility)                                               // 9572
jQuery.ajaxSettings.xhr = window.ActiveXObject !== undefined ?                                                       // 9573
	// Support: IE6+                                                                                                    // 9574
	function() {                                                                                                        // 9575
                                                                                                                     // 9576
		// XHR cannot access local files, always use ActiveX for that case                                                 // 9577
		return !this.isLocal &&                                                                                            // 9578
                                                                                                                     // 9579
			// Support: IE7-8                                                                                                 // 9580
			// oldIE XHR does not support non-RFC2616 methods (#13240)                                                        // 9581
			// See http://msdn.microsoft.com/en-us/library/ie/ms536648(v=vs.85).aspx                                          // 9582
			// and http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html#sec9                                                 // 9583
			// Although this check for six methods instead of eight                                                           // 9584
			// since IE also does not support "trace" and "connect"                                                           // 9585
			/^(get|post|head|put|delete|options)$/i.test( this.type ) &&                                                      // 9586
                                                                                                                     // 9587
			createStandardXHR() || createActiveXHR();                                                                         // 9588
	} :                                                                                                                 // 9589
	// For all other browsers, use the standard XMLHttpRequest object                                                   // 9590
	createStandardXHR;                                                                                                  // 9591
                                                                                                                     // 9592
var xhrId = 0,                                                                                                       // 9593
	xhrCallbacks = {},                                                                                                  // 9594
	xhrSupported = jQuery.ajaxSettings.xhr();                                                                           // 9595
                                                                                                                     // 9596
// Support: IE<10                                                                                                    // 9597
// Open requests must be manually aborted on unload (#5280)                                                          // 9598
if ( window.ActiveXObject ) {                                                                                        // 9599
	jQuery( window ).on( "unload", function() {                                                                         // 9600
		for ( var key in xhrCallbacks ) {                                                                                  // 9601
			xhrCallbacks[ key ]( undefined, true );                                                                           // 9602
		}                                                                                                                  // 9603
	});                                                                                                                 // 9604
}                                                                                                                    // 9605
                                                                                                                     // 9606
// Determine support properties                                                                                      // 9607
support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );                                              // 9608
xhrSupported = support.ajax = !!xhrSupported;                                                                        // 9609
                                                                                                                     // 9610
// Create transport if the browser can provide an xhr                                                                // 9611
if ( xhrSupported ) {                                                                                                // 9612
                                                                                                                     // 9613
	jQuery.ajaxTransport(function( options ) {                                                                          // 9614
		// Cross domain only allowed if supported through XMLHttpRequest                                                   // 9615
		if ( !options.crossDomain || support.cors ) {                                                                      // 9616
                                                                                                                     // 9617
			var callback;                                                                                                     // 9618
                                                                                                                     // 9619
			return {                                                                                                          // 9620
				send: function( headers, complete ) {                                                                            // 9621
					var i,                                                                                                          // 9622
						xhr = options.xhr(),                                                                                           // 9623
						id = ++xhrId;                                                                                                  // 9624
                                                                                                                     // 9625
					// Open the socket                                                                                              // 9626
					xhr.open( options.type, options.url, options.async, options.username, options.password );                       // 9627
                                                                                                                     // 9628
					// Apply custom fields if provided                                                                              // 9629
					if ( options.xhrFields ) {                                                                                      // 9630
						for ( i in options.xhrFields ) {                                                                               // 9631
							xhr[ i ] = options.xhrFields[ i ];                                                                            // 9632
						}                                                                                                              // 9633
					}                                                                                                               // 9634
                                                                                                                     // 9635
					// Override mime type if needed                                                                                 // 9636
					if ( options.mimeType && xhr.overrideMimeType ) {                                                               // 9637
						xhr.overrideMimeType( options.mimeType );                                                                      // 9638
					}                                                                                                               // 9639
                                                                                                                     // 9640
					// X-Requested-With header                                                                                      // 9641
					// For cross-domain requests, seeing as conditions for a preflight are                                          // 9642
					// akin to a jigsaw puzzle, we simply never set it to be sure.                                                  // 9643
					// (it can always be set on a per-request basis or even using ajaxSetup)                                        // 9644
					// For same-domain requests, won't change header if already provided.                                           // 9645
					if ( !options.crossDomain && !headers["X-Requested-With"] ) {                                                   // 9646
						headers["X-Requested-With"] = "XMLHttpRequest";                                                                // 9647
					}                                                                                                               // 9648
                                                                                                                     // 9649
					// Set headers                                                                                                  // 9650
					for ( i in headers ) {                                                                                          // 9651
						// Support: IE<9                                                                                               // 9652
						// IE's ActiveXObject throws a 'Type Mismatch' exception when setting                                          // 9653
						// request header to a null-value.                                                                             // 9654
						//                                                                                                             // 9655
						// To keep consistent with other XHR implementations, cast the value                                           // 9656
						// to string and ignore `undefined`.                                                                           // 9657
						if ( headers[ i ] !== undefined ) {                                                                            // 9658
							xhr.setRequestHeader( i, headers[ i ] + "" );                                                                 // 9659
						}                                                                                                              // 9660
					}                                                                                                               // 9661
                                                                                                                     // 9662
					// Do send the request                                                                                          // 9663
					// This may raise an exception which is actually                                                                // 9664
					// handled in jQuery.ajax (so no try/catch here)                                                                // 9665
					xhr.send( ( options.hasContent && options.data ) || null );                                                     // 9666
                                                                                                                     // 9667
					// Listener                                                                                                     // 9668
					callback = function( _, isAbort ) {                                                                             // 9669
						var status, statusText, responses;                                                                             // 9670
                                                                                                                     // 9671
						// Was never called and is aborted or complete                                                                 // 9672
						if ( callback && ( isAbort || xhr.readyState === 4 ) ) {                                                       // 9673
							// Clean up                                                                                                   // 9674
							delete xhrCallbacks[ id ];                                                                                    // 9675
							callback = undefined;                                                                                         // 9676
							xhr.onreadystatechange = jQuery.noop;                                                                         // 9677
                                                                                                                     // 9678
							// Abort manually if needed                                                                                   // 9679
							if ( isAbort ) {                                                                                              // 9680
								if ( xhr.readyState !== 4 ) {                                                                                // 9681
									xhr.abort();                                                                                                // 9682
								}                                                                                                            // 9683
							} else {                                                                                                      // 9684
								responses = {};                                                                                              // 9685
								status = xhr.status;                                                                                         // 9686
                                                                                                                     // 9687
								// Support: IE<10                                                                                            // 9688
								// Accessing binary-data responseText throws an exception                                                    // 9689
								// (#11426)                                                                                                  // 9690
								if ( typeof xhr.responseText === "string" ) {                                                                // 9691
									responses.text = xhr.responseText;                                                                          // 9692
								}                                                                                                            // 9693
                                                                                                                     // 9694
								// Firefox throws an exception when accessing                                                                // 9695
								// statusText for faulty cross-domain requests                                                               // 9696
								try {                                                                                                        // 9697
									statusText = xhr.statusText;                                                                                // 9698
								} catch( e ) {                                                                                               // 9699
									// We normalize with Webkit giving an empty statusText                                                      // 9700
									statusText = "";                                                                                            // 9701
								}                                                                                                            // 9702
                                                                                                                     // 9703
								// Filter status for non standard behaviors                                                                  // 9704
                                                                                                                     // 9705
								// If the request is local and we have data: assume a success                                                // 9706
								// (success with no data won't get notified, that's the best we                                              // 9707
								// can do given current implementations)                                                                     // 9708
								if ( !status && options.isLocal && !options.crossDomain ) {                                                  // 9709
									status = responses.text ? 200 : 404;                                                                        // 9710
								// IE - #1450: sometimes returns 1223 when it should be 204                                                  // 9711
								} else if ( status === 1223 ) {                                                                              // 9712
									status = 204;                                                                                               // 9713
								}                                                                                                            // 9714
							}                                                                                                             // 9715
						}                                                                                                              // 9716
                                                                                                                     // 9717
						// Call complete if needed                                                                                     // 9718
						if ( responses ) {                                                                                             // 9719
							complete( status, statusText, responses, xhr.getAllResponseHeaders() );                                       // 9720
						}                                                                                                              // 9721
					};                                                                                                              // 9722
                                                                                                                     // 9723
					if ( !options.async ) {                                                                                         // 9724
						// if we're in sync mode we fire the callback                                                                  // 9725
						callback();                                                                                                    // 9726
					} else if ( xhr.readyState === 4 ) {                                                                            // 9727
						// (IE6 & IE7) if it's in cache and has been                                                                   // 9728
						// retrieved directly we need to fire the callback                                                             // 9729
						setTimeout( callback );                                                                                        // 9730
					} else {                                                                                                        // 9731
						// Add to the list of active xhr callbacks                                                                     // 9732
						xhr.onreadystatechange = xhrCallbacks[ id ] = callback;                                                        // 9733
					}                                                                                                               // 9734
				},                                                                                                               // 9735
                                                                                                                     // 9736
				abort: function() {                                                                                              // 9737
					if ( callback ) {                                                                                               // 9738
						callback( undefined, true );                                                                                   // 9739
					}                                                                                                               // 9740
				}                                                                                                                // 9741
			};                                                                                                                // 9742
		}                                                                                                                  // 9743
	});                                                                                                                 // 9744
}                                                                                                                    // 9745
                                                                                                                     // 9746
// Functions to create xhrs                                                                                          // 9747
function createStandardXHR() {                                                                                       // 9748
	try {                                                                                                               // 9749
		return new window.XMLHttpRequest();                                                                                // 9750
	} catch( e ) {}                                                                                                     // 9751
}                                                                                                                    // 9752
                                                                                                                     // 9753
function createActiveXHR() {                                                                                         // 9754
	try {                                                                                                               // 9755
		return new window.ActiveXObject( "Microsoft.XMLHTTP" );                                                            // 9756
	} catch( e ) {}                                                                                                     // 9757
}                                                                                                                    // 9758
                                                                                                                     // 9759
                                                                                                                     // 9760
                                                                                                                     // 9761
                                                                                                                     // 9762
// Install script dataType                                                                                           // 9763
jQuery.ajaxSetup({                                                                                                   // 9764
	accepts: {                                                                                                          // 9765
		script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"                // 9766
	},                                                                                                                  // 9767
	contents: {                                                                                                         // 9768
		script: /(?:java|ecma)script/                                                                                      // 9769
	},                                                                                                                  // 9770
	converters: {                                                                                                       // 9771
		"text script": function( text ) {                                                                                  // 9772
			jQuery.globalEval( text );                                                                                        // 9773
			return text;                                                                                                      // 9774
		}                                                                                                                  // 9775
	}                                                                                                                   // 9776
});                                                                                                                  // 9777
                                                                                                                     // 9778
// Handle cache's special case and global                                                                            // 9779
jQuery.ajaxPrefilter( "script", function( s ) {                                                                      // 9780
	if ( s.cache === undefined ) {                                                                                      // 9781
		s.cache = false;                                                                                                   // 9782
	}                                                                                                                   // 9783
	if ( s.crossDomain ) {                                                                                              // 9784
		s.type = "GET";                                                                                                    // 9785
		s.global = false;                                                                                                  // 9786
	}                                                                                                                   // 9787
});                                                                                                                  // 9788
                                                                                                                     // 9789
// Bind script tag hack transport                                                                                    // 9790
jQuery.ajaxTransport( "script", function(s) {                                                                        // 9791
                                                                                                                     // 9792
	// This transport only deals with cross domain requests                                                             // 9793
	if ( s.crossDomain ) {                                                                                              // 9794
                                                                                                                     // 9795
		var script,                                                                                                        // 9796
			head = document.head || jQuery("head")[0] || document.documentElement;                                            // 9797
                                                                                                                     // 9798
		return {                                                                                                           // 9799
                                                                                                                     // 9800
			send: function( _, callback ) {                                                                                   // 9801
                                                                                                                     // 9802
				script = document.createElement("script");                                                                       // 9803
                                                                                                                     // 9804
				script.async = true;                                                                                             // 9805
                                                                                                                     // 9806
				if ( s.scriptCharset ) {                                                                                         // 9807
					script.charset = s.scriptCharset;                                                                               // 9808
				}                                                                                                                // 9809
                                                                                                                     // 9810
				script.src = s.url;                                                                                              // 9811
                                                                                                                     // 9812
				// Attach handlers for all browsers                                                                              // 9813
				script.onload = script.onreadystatechange = function( _, isAbort ) {                                             // 9814
                                                                                                                     // 9815
					if ( isAbort || !script.readyState || /loaded|complete/.test( script.readyState ) ) {                           // 9816
                                                                                                                     // 9817
						// Handle memory leak in IE                                                                                    // 9818
						script.onload = script.onreadystatechange = null;                                                              // 9819
                                                                                                                     // 9820
						// Remove the script                                                                                           // 9821
						if ( script.parentNode ) {                                                                                     // 9822
							script.parentNode.removeChild( script );                                                                      // 9823
						}                                                                                                              // 9824
                                                                                                                     // 9825
						// Dereference the script                                                                                      // 9826
						script = null;                                                                                                 // 9827
                                                                                                                     // 9828
						// Callback if not abort                                                                                       // 9829
						if ( !isAbort ) {                                                                                              // 9830
							callback( 200, "success" );                                                                                   // 9831
						}                                                                                                              // 9832
					}                                                                                                               // 9833
				};                                                                                                               // 9834
                                                                                                                     // 9835
				// Circumvent IE6 bugs with base elements (#2709 and #4378) by prepending                                        // 9836
				// Use native DOM manipulation to avoid our domManip AJAX trickery                                               // 9837
				head.insertBefore( script, head.firstChild );                                                                    // 9838
			},                                                                                                                // 9839
                                                                                                                     // 9840
			abort: function() {                                                                                               // 9841
				if ( script ) {                                                                                                  // 9842
					script.onload( undefined, true );                                                                               // 9843
				}                                                                                                                // 9844
			}                                                                                                                 // 9845
		};                                                                                                                 // 9846
	}                                                                                                                   // 9847
});                                                                                                                  // 9848
                                                                                                                     // 9849
                                                                                                                     // 9850
                                                                                                                     // 9851
                                                                                                                     // 9852
var oldCallbacks = [],                                                                                               // 9853
	rjsonp = /(=)\?(?=&|$)|\?\?/;                                                                                       // 9854
                                                                                                                     // 9855
// Default jsonp settings                                                                                            // 9856
jQuery.ajaxSetup({                                                                                                   // 9857
	jsonp: "callback",                                                                                                  // 9858
	jsonpCallback: function() {                                                                                         // 9859
		var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( nonce++ ) );                                       // 9860
		this[ callback ] = true;                                                                                           // 9861
		return callback;                                                                                                   // 9862
	}                                                                                                                   // 9863
});                                                                                                                  // 9864
                                                                                                                     // 9865
// Detect, normalize options and install callbacks for jsonp requests                                                // 9866
jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {                                         // 9867
                                                                                                                     // 9868
	var callbackName, overwritten, responseContainer,                                                                   // 9869
		jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?                                                           // 9870
			"url" :                                                                                                           // 9871
			typeof s.data === "string" && !( s.contentType || "" ).indexOf("application/x-www-form-urlencoded") && rjsonp.test( s.data ) && "data"
		);                                                                                                                 // 9873
                                                                                                                     // 9874
	// Handle iff the expected data type is "jsonp" or we have a parameter to set                                       // 9875
	if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {                                                                   // 9876
                                                                                                                     // 9877
		// Get callback name, remembering preexisting value associated with it                                             // 9878
		callbackName = s.jsonpCallback = jQuery.isFunction( s.jsonpCallback ) ?                                            // 9879
			s.jsonpCallback() :                                                                                               // 9880
			s.jsonpCallback;                                                                                                  // 9881
                                                                                                                     // 9882
		// Insert callback into url or form data                                                                           // 9883
		if ( jsonProp ) {                                                                                                  // 9884
			s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );                                             // 9885
		} else if ( s.jsonp !== false ) {                                                                                  // 9886
			s.url += ( rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;                                     // 9887
		}                                                                                                                  // 9888
                                                                                                                     // 9889
		// Use data converter to retrieve json after script execution                                                      // 9890
		s.converters["script json"] = function() {                                                                         // 9891
			if ( !responseContainer ) {                                                                                       // 9892
				jQuery.error( callbackName + " was not called" );                                                                // 9893
			}                                                                                                                 // 9894
			return responseContainer[ 0 ];                                                                                    // 9895
		};                                                                                                                 // 9896
                                                                                                                     // 9897
		// force json dataType                                                                                             // 9898
		s.dataTypes[ 0 ] = "json";                                                                                         // 9899
                                                                                                                     // 9900
		// Install callback                                                                                                // 9901
		overwritten = window[ callbackName ];                                                                              // 9902
		window[ callbackName ] = function() {                                                                              // 9903
			responseContainer = arguments;                                                                                    // 9904
		};                                                                                                                 // 9905
                                                                                                                     // 9906
		// Clean-up function (fires after converters)                                                                      // 9907
		jqXHR.always(function() {                                                                                          // 9908
			// Restore preexisting value                                                                                      // 9909
			window[ callbackName ] = overwritten;                                                                             // 9910
                                                                                                                     // 9911
			// Save back as free                                                                                              // 9912
			if ( s[ callbackName ] ) {                                                                                        // 9913
				// make sure that re-using the options doesn't screw things around                                               // 9914
				s.jsonpCallback = originalSettings.jsonpCallback;                                                                // 9915
                                                                                                                     // 9916
				// save the callback name for future use                                                                         // 9917
				oldCallbacks.push( callbackName );                                                                               // 9918
			}                                                                                                                 // 9919
                                                                                                                     // 9920
			// Call if it was a function and we have a response                                                               // 9921
			if ( responseContainer && jQuery.isFunction( overwritten ) ) {                                                    // 9922
				overwritten( responseContainer[ 0 ] );                                                                           // 9923
			}                                                                                                                 // 9924
                                                                                                                     // 9925
			responseContainer = overwritten = undefined;                                                                      // 9926
		});                                                                                                                // 9927
                                                                                                                     // 9928
		// Delegate to script                                                                                              // 9929
		return "script";                                                                                                   // 9930
	}                                                                                                                   // 9931
});                                                                                                                  // 9932
                                                                                                                     // 9933
                                                                                                                     // 9934
                                                                                                                     // 9935
                                                                                                                     // 9936
// data: string of html                                                                                              // 9937
// context (optional): If specified, the fragment will be created in this context, defaults to document              // 9938
// keepScripts (optional): If true, will include scripts passed in the html string                                   // 9939
jQuery.parseHTML = function( data, context, keepScripts ) {                                                          // 9940
	if ( !data || typeof data !== "string" ) {                                                                          // 9941
		return null;                                                                                                       // 9942
	}                                                                                                                   // 9943
	if ( typeof context === "boolean" ) {                                                                               // 9944
		keepScripts = context;                                                                                             // 9945
		context = false;                                                                                                   // 9946
	}                                                                                                                   // 9947
	context = context || document;                                                                                      // 9948
                                                                                                                     // 9949
	var parsed = rsingleTag.exec( data ),                                                                               // 9950
		scripts = !keepScripts && [];                                                                                      // 9951
                                                                                                                     // 9952
	// Single tag                                                                                                       // 9953
	if ( parsed ) {                                                                                                     // 9954
		return [ context.createElement( parsed[1] ) ];                                                                     // 9955
	}                                                                                                                   // 9956
                                                                                                                     // 9957
	parsed = jQuery.buildFragment( [ data ], context, scripts );                                                        // 9958
                                                                                                                     // 9959
	if ( scripts && scripts.length ) {                                                                                  // 9960
		jQuery( scripts ).remove();                                                                                        // 9961
	}                                                                                                                   // 9962
                                                                                                                     // 9963
	return jQuery.merge( [], parsed.childNodes );                                                                       // 9964
};                                                                                                                   // 9965
                                                                                                                     // 9966
                                                                                                                     // 9967
// Keep a copy of the old load method                                                                                // 9968
var _load = jQuery.fn.load;                                                                                          // 9969
                                                                                                                     // 9970
/**                                                                                                                  // 9971
 * Load a url into a page                                                                                            // 9972
 */                                                                                                                  // 9973
jQuery.fn.load = function( url, params, callback ) {                                                                 // 9974
	if ( typeof url !== "string" && _load ) {                                                                           // 9975
		return _load.apply( this, arguments );                                                                             // 9976
	}                                                                                                                   // 9977
                                                                                                                     // 9978
	var selector, response, type,                                                                                       // 9979
		self = this,                                                                                                       // 9980
		off = url.indexOf(" ");                                                                                            // 9981
                                                                                                                     // 9982
	if ( off >= 0 ) {                                                                                                   // 9983
		selector = url.slice( off, url.length );                                                                           // 9984
		url = url.slice( 0, off );                                                                                         // 9985
	}                                                                                                                   // 9986
                                                                                                                     // 9987
	// If it's a function                                                                                               // 9988
	if ( jQuery.isFunction( params ) ) {                                                                                // 9989
                                                                                                                     // 9990
		// We assume that it's the callback                                                                                // 9991
		callback = params;                                                                                                 // 9992
		params = undefined;                                                                                                // 9993
                                                                                                                     // 9994
	// Otherwise, build a param string                                                                                  // 9995
	} else if ( params && typeof params === "object" ) {                                                                // 9996
		type = "POST";                                                                                                     // 9997
	}                                                                                                                   // 9998
                                                                                                                     // 9999
	// If we have elements to modify, make the request                                                                  // 10000
	if ( self.length > 0 ) {                                                                                            // 10001
		jQuery.ajax({                                                                                                      // 10002
			url: url,                                                                                                         // 10003
                                                                                                                     // 10004
			// if "type" variable is undefined, then "GET" method will be used                                                // 10005
			type: type,                                                                                                       // 10006
			dataType: "html",                                                                                                 // 10007
			data: params                                                                                                      // 10008
		}).done(function( responseText ) {                                                                                 // 10009
                                                                                                                     // 10010
			// Save response for use in complete callback                                                                     // 10011
			response = arguments;                                                                                             // 10012
                                                                                                                     // 10013
			self.html( selector ?                                                                                             // 10014
                                                                                                                     // 10015
				// If a selector was specified, locate the right elements in a dummy div                                         // 10016
				// Exclude scripts to avoid IE 'Permission Denied' errors                                                        // 10017
				jQuery("<div>").append( jQuery.parseHTML( responseText ) ).find( selector ) :                                    // 10018
                                                                                                                     // 10019
				// Otherwise use the full result                                                                                 // 10020
				responseText );                                                                                                  // 10021
                                                                                                                     // 10022
		}).complete( callback && function( jqXHR, status ) {                                                               // 10023
			self.each( callback, response || [ jqXHR.responseText, status, jqXHR ] );                                         // 10024
		});                                                                                                                // 10025
	}                                                                                                                   // 10026
                                                                                                                     // 10027
	return this;                                                                                                        // 10028
};                                                                                                                   // 10029
                                                                                                                     // 10030
                                                                                                                     // 10031
                                                                                                                     // 10032
                                                                                                                     // 10033
jQuery.expr.filters.animated = function( elem ) {                                                                    // 10034
	return jQuery.grep(jQuery.timers, function( fn ) {                                                                  // 10035
		return elem === fn.elem;                                                                                           // 10036
	}).length;                                                                                                          // 10037
};                                                                                                                   // 10038
                                                                                                                     // 10039
                                                                                                                     // 10040
                                                                                                                     // 10041
                                                                                                                     // 10042
                                                                                                                     // 10043
var docElem = window.document.documentElement;                                                                       // 10044
                                                                                                                     // 10045
/**                                                                                                                  // 10046
 * Gets a window from an element                                                                                     // 10047
 */                                                                                                                  // 10048
function getWindow( elem ) {                                                                                         // 10049
	return jQuery.isWindow( elem ) ?                                                                                    // 10050
		elem :                                                                                                             // 10051
		elem.nodeType === 9 ?                                                                                              // 10052
			elem.defaultView || elem.parentWindow :                                                                           // 10053
			false;                                                                                                            // 10054
}                                                                                                                    // 10055
                                                                                                                     // 10056
jQuery.offset = {                                                                                                    // 10057
	setOffset: function( elem, options, i ) {                                                                           // 10058
		var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,                             // 10059
			position = jQuery.css( elem, "position" ),                                                                        // 10060
			curElem = jQuery( elem ),                                                                                         // 10061
			props = {};                                                                                                       // 10062
                                                                                                                     // 10063
		// set position first, in-case top/left are set even on static elem                                                // 10064
		if ( position === "static" ) {                                                                                     // 10065
			elem.style.position = "relative";                                                                                 // 10066
		}                                                                                                                  // 10067
                                                                                                                     // 10068
		curOffset = curElem.offset();                                                                                      // 10069
		curCSSTop = jQuery.css( elem, "top" );                                                                             // 10070
		curCSSLeft = jQuery.css( elem, "left" );                                                                           // 10071
		calculatePosition = ( position === "absolute" || position === "fixed" ) &&                                         // 10072
			jQuery.inArray("auto", [ curCSSTop, curCSSLeft ] ) > -1;                                                          // 10073
                                                                                                                     // 10074
		// need to be able to calculate position if either top or left is auto and position is either absolute or fixed    // 10075
		if ( calculatePosition ) {                                                                                         // 10076
			curPosition = curElem.position();                                                                                 // 10077
			curTop = curPosition.top;                                                                                         // 10078
			curLeft = curPosition.left;                                                                                       // 10079
		} else {                                                                                                           // 10080
			curTop = parseFloat( curCSSTop ) || 0;                                                                            // 10081
			curLeft = parseFloat( curCSSLeft ) || 0;                                                                          // 10082
		}                                                                                                                  // 10083
                                                                                                                     // 10084
		if ( jQuery.isFunction( options ) ) {                                                                              // 10085
			options = options.call( elem, i, curOffset );                                                                     // 10086
		}                                                                                                                  // 10087
                                                                                                                     // 10088
		if ( options.top != null ) {                                                                                       // 10089
			props.top = ( options.top - curOffset.top ) + curTop;                                                             // 10090
		}                                                                                                                  // 10091
		if ( options.left != null ) {                                                                                      // 10092
			props.left = ( options.left - curOffset.left ) + curLeft;                                                         // 10093
		}                                                                                                                  // 10094
                                                                                                                     // 10095
		if ( "using" in options ) {                                                                                        // 10096
			options.using.call( elem, props );                                                                                // 10097
		} else {                                                                                                           // 10098
			curElem.css( props );                                                                                             // 10099
		}                                                                                                                  // 10100
	}                                                                                                                   // 10101
};                                                                                                                   // 10102
                                                                                                                     // 10103
jQuery.fn.extend({                                                                                                   // 10104
	offset: function( options ) {                                                                                       // 10105
		if ( arguments.length ) {                                                                                          // 10106
			return options === undefined ?                                                                                    // 10107
				this :                                                                                                           // 10108
				this.each(function( i ) {                                                                                        // 10109
					jQuery.offset.setOffset( this, options, i );                                                                    // 10110
				});                                                                                                              // 10111
		}                                                                                                                  // 10112
                                                                                                                     // 10113
		var docElem, win,                                                                                                  // 10114
			box = { top: 0, left: 0 },                                                                                        // 10115
			elem = this[ 0 ],                                                                                                 // 10116
			doc = elem && elem.ownerDocument;                                                                                 // 10117
                                                                                                                     // 10118
		if ( !doc ) {                                                                                                      // 10119
			return;                                                                                                           // 10120
		}                                                                                                                  // 10121
                                                                                                                     // 10122
		docElem = doc.documentElement;                                                                                     // 10123
                                                                                                                     // 10124
		// Make sure it's not a disconnected DOM node                                                                      // 10125
		if ( !jQuery.contains( docElem, elem ) ) {                                                                         // 10126
			return box;                                                                                                       // 10127
		}                                                                                                                  // 10128
                                                                                                                     // 10129
		// If we don't have gBCR, just use 0,0 rather than error                                                           // 10130
		// BlackBerry 5, iOS 3 (original iPhone)                                                                           // 10131
		if ( typeof elem.getBoundingClientRect !== strundefined ) {                                                        // 10132
			box = elem.getBoundingClientRect();                                                                               // 10133
		}                                                                                                                  // 10134
		win = getWindow( doc );                                                                                            // 10135
		return {                                                                                                           // 10136
			top: box.top  + ( win.pageYOffset || docElem.scrollTop )  - ( docElem.clientTop  || 0 ),                          // 10137
			left: box.left + ( win.pageXOffset || docElem.scrollLeft ) - ( docElem.clientLeft || 0 )                          // 10138
		};                                                                                                                 // 10139
	},                                                                                                                  // 10140
                                                                                                                     // 10141
	position: function() {                                                                                              // 10142
		if ( !this[ 0 ] ) {                                                                                                // 10143
			return;                                                                                                           // 10144
		}                                                                                                                  // 10145
                                                                                                                     // 10146
		var offsetParent, offset,                                                                                          // 10147
			parentOffset = { top: 0, left: 0 },                                                                               // 10148
			elem = this[ 0 ];                                                                                                 // 10149
                                                                                                                     // 10150
		// fixed elements are offset from window (parentOffset = {top:0, left: 0}, because it is its only offset parent    // 10151
		if ( jQuery.css( elem, "position" ) === "fixed" ) {                                                                // 10152
			// we assume that getBoundingClientRect is available when computed position is fixed                              // 10153
			offset = elem.getBoundingClientRect();                                                                            // 10154
		} else {                                                                                                           // 10155
			// Get *real* offsetParent                                                                                        // 10156
			offsetParent = this.offsetParent();                                                                               // 10157
                                                                                                                     // 10158
			// Get correct offsets                                                                                            // 10159
			offset = this.offset();                                                                                           // 10160
			if ( !jQuery.nodeName( offsetParent[ 0 ], "html" ) ) {                                                            // 10161
				parentOffset = offsetParent.offset();                                                                            // 10162
			}                                                                                                                 // 10163
                                                                                                                     // 10164
			// Add offsetParent borders                                                                                       // 10165
			parentOffset.top  += jQuery.css( offsetParent[ 0 ], "borderTopWidth", true );                                     // 10166
			parentOffset.left += jQuery.css( offsetParent[ 0 ], "borderLeftWidth", true );                                    // 10167
		}                                                                                                                  // 10168
                                                                                                                     // 10169
		// Subtract parent offsets and element margins                                                                     // 10170
		// note: when an element has margin: auto the offsetLeft and marginLeft                                            // 10171
		// are the same in Safari causing offset.left to incorrectly be 0                                                  // 10172
		return {                                                                                                           // 10173
			top:  offset.top  - parentOffset.top - jQuery.css( elem, "marginTop", true ),                                     // 10174
			left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true)                                     // 10175
		};                                                                                                                 // 10176
	},                                                                                                                  // 10177
                                                                                                                     // 10178
	offsetParent: function() {                                                                                          // 10179
		return this.map(function() {                                                                                       // 10180
			var offsetParent = this.offsetParent || docElem;                                                                  // 10181
                                                                                                                     // 10182
			while ( offsetParent && ( !jQuery.nodeName( offsetParent, "html" ) && jQuery.css( offsetParent, "position" ) === "static" ) ) {
				offsetParent = offsetParent.offsetParent;                                                                        // 10184
			}                                                                                                                 // 10185
			return offsetParent || docElem;                                                                                   // 10186
		});                                                                                                                // 10187
	}                                                                                                                   // 10188
});                                                                                                                  // 10189
                                                                                                                     // 10190
// Create scrollLeft and scrollTop methods                                                                           // 10191
jQuery.each( { scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function( method, prop ) {                     // 10192
	var top = /Y/.test( prop );                                                                                         // 10193
                                                                                                                     // 10194
	jQuery.fn[ method ] = function( val ) {                                                                             // 10195
		return access( this, function( elem, method, val ) {                                                               // 10196
			var win = getWindow( elem );                                                                                      // 10197
                                                                                                                     // 10198
			if ( val === undefined ) {                                                                                        // 10199
				return win ? (prop in win) ? win[ prop ] :                                                                       // 10200
					win.document.documentElement[ method ] :                                                                        // 10201
					elem[ method ];                                                                                                 // 10202
			}                                                                                                                 // 10203
                                                                                                                     // 10204
			if ( win ) {                                                                                                      // 10205
				win.scrollTo(                                                                                                    // 10206
					!top ? val : jQuery( win ).scrollLeft(),                                                                        // 10207
					top ? val : jQuery( win ).scrollTop()                                                                           // 10208
				);                                                                                                               // 10209
                                                                                                                     // 10210
			} else {                                                                                                          // 10211
				elem[ method ] = val;                                                                                            // 10212
			}                                                                                                                 // 10213
		}, method, val, arguments.length, null );                                                                          // 10214
	};                                                                                                                  // 10215
});                                                                                                                  // 10216
                                                                                                                     // 10217
// Add the top/left cssHooks using jQuery.fn.position                                                                // 10218
// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084                                                         // 10219
// getComputedStyle returns percent when specified for top/left/bottom/right                                         // 10220
// rather than make the css module depend on the offset module, we just check for it here                            // 10221
jQuery.each( [ "top", "left" ], function( i, prop ) {                                                                // 10222
	jQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,                                                      // 10223
		function( elem, computed ) {                                                                                       // 10224
			if ( computed ) {                                                                                                 // 10225
				computed = curCSS( elem, prop );                                                                                 // 10226
				// if curCSS returns percentage, fallback to offset                                                              // 10227
				return rnumnonpx.test( computed ) ?                                                                              // 10228
					jQuery( elem ).position()[ prop ] + "px" :                                                                      // 10229
					computed;                                                                                                       // 10230
			}                                                                                                                 // 10231
		}                                                                                                                  // 10232
	);                                                                                                                  // 10233
});                                                                                                                  // 10234
                                                                                                                     // 10235
                                                                                                                     // 10236
// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods                                 // 10237
jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {                                          // 10238
	jQuery.each( { padding: "inner" + name, content: type, "": "outer" + name }, function( defaultExtra, funcName ) {   // 10239
		// margin is only for outerHeight, outerWidth                                                                      // 10240
		jQuery.fn[ funcName ] = function( margin, value ) {                                                                // 10241
			var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),                              // 10242
				extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );                             // 10243
                                                                                                                     // 10244
			return access( this, function( elem, type, value ) {                                                              // 10245
				var doc;                                                                                                         // 10246
                                                                                                                     // 10247
				if ( jQuery.isWindow( elem ) ) {                                                                                 // 10248
					// As of 5/8/2012 this will yield incorrect results for Mobile Safari, but there                                // 10249
					// isn't a whole lot we can do. See pull request at this URL for discussion:                                    // 10250
					// https://github.com/jquery/jquery/pull/764                                                                    // 10251
					return elem.document.documentElement[ "client" + name ];                                                        // 10252
				}                                                                                                                // 10253
                                                                                                                     // 10254
				// Get document width or height                                                                                  // 10255
				if ( elem.nodeType === 9 ) {                                                                                     // 10256
					doc = elem.documentElement;                                                                                     // 10257
                                                                                                                     // 10258
					// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height], whichever is greatest           // 10259
					// unfortunately, this causes bug #3838 in IE6/8 only, but there is currently no good, small way to fix it.     // 10260
					return Math.max(                                                                                                // 10261
						elem.body[ "scroll" + name ], doc[ "scroll" + name ],                                                          // 10262
						elem.body[ "offset" + name ], doc[ "offset" + name ],                                                          // 10263
						doc[ "client" + name ]                                                                                         // 10264
					);                                                                                                              // 10265
				}                                                                                                                // 10266
                                                                                                                     // 10267
				return value === undefined ?                                                                                     // 10268
					// Get width or height on the element, requesting but not forcing parseFloat                                    // 10269
					jQuery.css( elem, type, extra ) :                                                                               // 10270
                                                                                                                     // 10271
					// Set width or height on the element                                                                           // 10272
					jQuery.style( elem, type, value, extra );                                                                       // 10273
			}, type, chainable ? margin : undefined, chainable, null );                                                       // 10274
		};                                                                                                                 // 10275
	});                                                                                                                 // 10276
});                                                                                                                  // 10277
                                                                                                                     // 10278
                                                                                                                     // 10279
// The number of elements contained in the matched element set                                                       // 10280
jQuery.fn.size = function() {                                                                                        // 10281
	return this.length;                                                                                                 // 10282
};                                                                                                                   // 10283
                                                                                                                     // 10284
jQuery.fn.andSelf = jQuery.fn.addBack;                                                                               // 10285
                                                                                                                     // 10286
                                                                                                                     // 10287
                                                                                                                     // 10288
                                                                                                                     // 10289
// Register as a named AMD module, since jQuery can be concatenated with other                                       // 10290
// files that may use define, but not via a proper concatenation script that                                         // 10291
// understands anonymous AMD modules. A named AMD is safest and most robust                                          // 10292
// way to register. Lowercase jquery is used because AMD module names are                                            // 10293
// derived from file names, and jQuery is normally delivered in a lowercase                                          // 10294
// file name. Do this after creating the global so that if an AMD module wants                                       // 10295
// to call noConflict to hide this version of jQuery, it will work.                                                  // 10296
if ( typeof define === "function" && define.amd ) {                                                                  // 10297
	define( "jquery", [], function() {                                                                                  // 10298
		return jQuery;                                                                                                     // 10299
	});                                                                                                                 // 10300
}                                                                                                                    // 10301
                                                                                                                     // 10302
                                                                                                                     // 10303
                                                                                                                     // 10304
                                                                                                                     // 10305
var                                                                                                                  // 10306
	// Map over jQuery in case of overwrite                                                                             // 10307
	_jQuery = window.jQuery,                                                                                            // 10308
                                                                                                                     // 10309
	// Map over the $ in case of overwrite                                                                              // 10310
	_$ = window.$;                                                                                                      // 10311
                                                                                                                     // 10312
jQuery.noConflict = function( deep ) {                                                                               // 10313
	if ( window.$ === jQuery ) {                                                                                        // 10314
		window.$ = _$;                                                                                                     // 10315
	}                                                                                                                   // 10316
                                                                                                                     // 10317
	if ( deep && window.jQuery === jQuery ) {                                                                           // 10318
		window.jQuery = _jQuery;                                                                                           // 10319
	}                                                                                                                   // 10320
                                                                                                                     // 10321
	return jQuery;                                                                                                      // 10322
};                                                                                                                   // 10323
                                                                                                                     // 10324
// Expose jQuery and $ identifiers, even in                                                                          // 10325
// AMD (#7102#comment:10, https://github.com/jquery/jquery/pull/557)                                                 // 10326
// and CommonJS for browser emulators (#13566)                                                                       // 10327
if ( typeof noGlobal === strundefined ) {                                                                            // 10328
	window.jQuery = window.$ = jQuery;                                                                                  // 10329
}                                                                                                                    // 10330
                                                                                                                     // 10331
                                                                                                                     // 10332
                                                                                                                     // 10333
                                                                                                                     // 10334
return jQuery;                                                                                                       // 10335
                                                                                                                     // 10336
}));                                                                                                                 // 10337
                                                                                                                     // 10338
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                   //
// packages/jquery/post.js                                                                                           //
//                                                                                                                   //
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                     //
// Put jQuery and $ in our exported package-scope variables and remove window.$.                                     // 1
// (Sadly, we don't call noConflict(true), which would also remove                                                   // 2
// window.jQuery, because bootstrap very specifically relies on window.jQuery.)                                      // 3
$ = jQuery = window.jQuery.noConflict();                                                                             // 4
                                                                                                                     // 5
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);


/* Exports */
if (typeof Package === 'undefined') Package = {};
Package.jquery = {
  $: $,
  jQuery: jQuery
};

})();

//# sourceMappingURL=265926494aaa3929cd2e30da265211c5929f37a4.map
//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
//                                                                      //
// If you are using Chrome, open the Developer Tools and click the gear //
// icon in its lower right corner. In the General Settings panel, turn  //
// on 'Enable source maps'.                                             //
//                                                                      //
// If you are using Firefox 23, go to `about:config` and set the        //
// `devtools.debugger.source-maps-enabled` preference to true.          //
// (The preference should be on by default in Firefox 24; versions      //
// older than 23 do not support source maps.)                           //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

/* Imports */
var Meteor = Package.meteor.Meteor;

/* Package-scope variables */
var JSON;

(function () {

////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                        //
// packages/json/json_native.js                                                                           //
//                                                                                                        //
////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                          //
// Do we already have a global JSON object? Export it as our JSON object.                                 // 1
if (window.JSON)                                                                                          // 2
  JSON = window.JSON;                                                                                     // 3
                                                                                                          // 4
////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                        //
// packages/json/json2.js                                                                                 //
//                                                                                                        //
////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                          //
/*                                                                                                        // 1
    json2.js                                                                                              // 2
    2012-10-08                                                                                            // 3
                                                                                                          // 4
    Public Domain.                                                                                        // 5
                                                                                                          // 6
    NO WARRANTY EXPRESSED OR IMPLIED. USE AT YOUR OWN RISK.                                               // 7
                                                                                                          // 8
    See http://www.JSON.org/js.html                                                                       // 9
                                                                                                          // 10
                                                                                                          // 11
    This code should be minified before deployment.                                                       // 12
    See http://javascript.crockford.com/jsmin.html                                                        // 13
                                                                                                          // 14
    USE YOUR OWN COPY. IT IS EXTREMELY UNWISE TO LOAD CODE FROM SERVERS YOU DO                            // 15
    NOT CONTROL.                                                                                          // 16
                                                                                                          // 17
                                                                                                          // 18
    This file creates a global JSON object containing two methods: stringify                              // 19
    and parse.                                                                                            // 20
                                                                                                          // 21
        JSON.stringify(value, replacer, space)                                                            // 22
            value       any JavaScript value, usually an object or array.                                 // 23
                                                                                                          // 24
            replacer    an optional parameter that determines how object                                  // 25
                        values are stringified for objects. It can be a                                   // 26
                        function or an array of strings.                                                  // 27
                                                                                                          // 28
            space       an optional parameter that specifies the indentation                              // 29
                        of nested structures. If it is omitted, the text will                             // 30
                        be packed without extra whitespace. If it is a number,                            // 31
                        it will specify the number of spaces to indent at each                            // 32
                        level. If it is a string (such as '\t' or '&nbsp;'),                              // 33
                        it contains the characters used to indent at each level.                          // 34
                                                                                                          // 35
            This method produces a JSON text from a JavaScript value.                                     // 36
                                                                                                          // 37
            When an object value is found, if the object contains a toJSON                                // 38
            method, its toJSON method will be called and the result will be                               // 39
            stringified. A toJSON method does not serialize: it returns the                               // 40
            value represented by the name/value pair that should be serialized,                           // 41
            or undefined if nothing should be serialized. The toJSON method                               // 42
            will be passed the key associated with the value, and this will be                            // 43
            bound to the value                                                                            // 44
                                                                                                          // 45
            For example, this would serialize Dates as ISO strings.                                       // 46
                                                                                                          // 47
                Date.prototype.toJSON = function (key) {                                                  // 48
                    function f(n) {                                                                       // 49
                        // Format integers to have at least two digits.                                   // 50
                        return n < 10 ? '0' + n : n;                                                      // 51
                    }                                                                                     // 52
                                                                                                          // 53
                    return this.getUTCFullYear()   + '-' +                                                // 54
                         f(this.getUTCMonth() + 1) + '-' +                                                // 55
                         f(this.getUTCDate())      + 'T' +                                                // 56
                         f(this.getUTCHours())     + ':' +                                                // 57
                         f(this.getUTCMinutes())   + ':' +                                                // 58
                         f(this.getUTCSeconds())   + 'Z';                                                 // 59
                };                                                                                        // 60
                                                                                                          // 61
            You can provide an optional replacer method. It will be passed the                            // 62
            key and value of each member, with this bound to the containing                               // 63
            object. The value that is returned from your method will be                                   // 64
            serialized. If your method returns undefined, then the member will                            // 65
            be excluded from the serialization.                                                           // 66
                                                                                                          // 67
            If the replacer parameter is an array of strings, then it will be                             // 68
            used to select the members to be serialized. It filters the results                           // 69
            such that only members with keys listed in the replacer array are                             // 70
            stringified.                                                                                  // 71
                                                                                                          // 72
            Values that do not have JSON representations, such as undefined or                            // 73
            functions, will not be serialized. Such values in objects will be                             // 74
            dropped; in arrays they will be replaced with null. You can use                               // 75
            a replacer function to replace those with JSON values.                                        // 76
            JSON.stringify(undefined) returns undefined.                                                  // 77
                                                                                                          // 78
            The optional space parameter produces a stringification of the                                // 79
            value that is filled with line breaks and indentation to make it                              // 80
            easier to read.                                                                               // 81
                                                                                                          // 82
            If the space parameter is a non-empty string, then that string will                           // 83
            be used for indentation. If the space parameter is a number, then                             // 84
            the indentation will be that many spaces.                                                     // 85
                                                                                                          // 86
            Example:                                                                                      // 87
                                                                                                          // 88
            text = JSON.stringify(['e', {pluribus: 'unum'}]);                                             // 89
            // text is '["e",{"pluribus":"unum"}]'                                                        // 90
                                                                                                          // 91
                                                                                                          // 92
            text = JSON.stringify(['e', {pluribus: 'unum'}], null, '\t');                                 // 93
            // text is '[\n\t"e",\n\t{\n\t\t"pluribus": "unum"\n\t}\n]'                                   // 94
                                                                                                          // 95
            text = JSON.stringify([new Date()], function (key, value) {                                   // 96
                return this[key] instanceof Date ?                                                        // 97
                    'Date(' + this[key] + ')' : value;                                                    // 98
            });                                                                                           // 99
            // text is '["Date(---current time---)"]'                                                     // 100
                                                                                                          // 101
                                                                                                          // 102
        JSON.parse(text, reviver)                                                                         // 103
            This method parses a JSON text to produce an object or array.                                 // 104
            It can throw a SyntaxError exception.                                                         // 105
                                                                                                          // 106
            The optional reviver parameter is a function that can filter and                              // 107
            transform the results. It receives each of the keys and values,                               // 108
            and its return value is used instead of the original value.                                   // 109
            If it returns what it received, then the structure is not modified.                           // 110
            If it returns undefined then the member is deleted.                                           // 111
                                                                                                          // 112
            Example:                                                                                      // 113
                                                                                                          // 114
            // Parse the text. Values that look like ISO date strings will                                // 115
            // be converted to Date objects.                                                              // 116
                                                                                                          // 117
            myData = JSON.parse(text, function (key, value) {                                             // 118
                var a;                                                                                    // 119
                if (typeof value === 'string') {                                                          // 120
                    a =                                                                                   // 121
/^(\d{4})-(\d{2})-(\d{2})T(\d{2}):(\d{2}):(\d{2}(?:\.\d*)?)Z$/.exec(value);                               // 122
                    if (a) {                                                                              // 123
                        return new Date(Date.UTC(+a[1], +a[2] - 1, +a[3], +a[4],                          // 124
                            +a[5], +a[6]));                                                               // 125
                    }                                                                                     // 126
                }                                                                                         // 127
                return value;                                                                             // 128
            });                                                                                           // 129
                                                                                                          // 130
            myData = JSON.parse('["Date(09/09/2001)"]', function (key, value) {                           // 131
                var d;                                                                                    // 132
                if (typeof value === 'string' &&                                                          // 133
                        value.slice(0, 5) === 'Date(' &&                                                  // 134
                        value.slice(-1) === ')') {                                                        // 135
                    d = new Date(value.slice(5, -1));                                                     // 136
                    if (d) {                                                                              // 137
                        return d;                                                                         // 138
                    }                                                                                     // 139
                }                                                                                         // 140
                return value;                                                                             // 141
            });                                                                                           // 142
                                                                                                          // 143
                                                                                                          // 144
    This is a reference implementation. You are free to copy, modify, or                                  // 145
    redistribute.                                                                                         // 146
*/                                                                                                        // 147
                                                                                                          // 148
/*jslint evil: true, regexp: true */                                                                      // 149
                                                                                                          // 150
/*members "", "\b", "\t", "\n", "\f", "\r", "\"", JSON, "\\", apply,                                      // 151
    call, charCodeAt, getUTCDate, getUTCFullYear, getUTCHours,                                            // 152
    getUTCMinutes, getUTCMonth, getUTCSeconds, hasOwnProperty, join,                                      // 153
    lastIndex, length, parse, prototype, push, replace, slice, stringify,                                 // 154
    test, toJSON, toString, valueOf                                                                       // 155
*/                                                                                                        // 156
                                                                                                          // 157
                                                                                                          // 158
// Create a JSON object only if one does not already exist. We create the                                 // 159
// methods in a closure to avoid creating global variables.                                               // 160
                                                                                                          // 161
if (typeof JSON !== 'object') {                                                                           // 162
    JSON = {};                                                                                            // 163
}                                                                                                         // 164
                                                                                                          // 165
(function () {                                                                                            // 166
    'use strict';                                                                                         // 167
                                                                                                          // 168
    function f(n) {                                                                                       // 169
        // Format integers to have at least two digits.                                                   // 170
        return n < 10 ? '0' + n : n;                                                                      // 171
    }                                                                                                     // 172
                                                                                                          // 173
    if (typeof Date.prototype.toJSON !== 'function') {                                                    // 174
                                                                                                          // 175
        Date.prototype.toJSON = function (key) {                                                          // 176
                                                                                                          // 177
            return isFinite(this.valueOf())                                                               // 178
                ? this.getUTCFullYear()     + '-' +                                                       // 179
                    f(this.getUTCMonth() + 1) + '-' +                                                     // 180
                    f(this.getUTCDate())      + 'T' +                                                     // 181
                    f(this.getUTCHours())     + ':' +                                                     // 182
                    f(this.getUTCMinutes())   + ':' +                                                     // 183
                    f(this.getUTCSeconds())   + 'Z'                                                       // 184
                : null;                                                                                   // 185
        };                                                                                                // 186
                                                                                                          // 187
        String.prototype.toJSON      =                                                                    // 188
            Number.prototype.toJSON  =                                                                    // 189
            Boolean.prototype.toJSON = function (key) {                                                   // 190
                return this.valueOf();                                                                    // 191
            };                                                                                            // 192
    }                                                                                                     // 193
                                                                                                          // 194
    var cx = /[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
        escapable = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
        gap,                                                                                              // 197
        indent,                                                                                           // 198
        meta = {    // table of character substitutions                                                   // 199
            '\b': '\\b',                                                                                  // 200
            '\t': '\\t',                                                                                  // 201
            '\n': '\\n',                                                                                  // 202
            '\f': '\\f',                                                                                  // 203
            '\r': '\\r',                                                                                  // 204
            '"' : '\\"',                                                                                  // 205
            '\\': '\\\\'                                                                                  // 206
        },                                                                                                // 207
        rep;                                                                                              // 208
                                                                                                          // 209
                                                                                                          // 210
    function quote(string) {                                                                              // 211
                                                                                                          // 212
// If the string contains no control characters, no quote characters, and no                              // 213
// backslash characters, then we can safely slap some quotes around it.                                   // 214
// Otherwise we must also replace the offending characters with safe escape                               // 215
// sequences.                                                                                             // 216
                                                                                                          // 217
        escapable.lastIndex = 0;                                                                          // 218
        return escapable.test(string) ? '"' + string.replace(escapable, function (a) {                    // 219
            var c = meta[a];                                                                              // 220
            return typeof c === 'string'                                                                  // 221
                ? c                                                                                       // 222
                : '\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);                              // 223
        }) + '"' : '"' + string + '"';                                                                    // 224
    }                                                                                                     // 225
                                                                                                          // 226
                                                                                                          // 227
    function str(key, holder) {                                                                           // 228
                                                                                                          // 229
// Produce a string from holder[key].                                                                     // 230
                                                                                                          // 231
        var i,          // The loop counter.                                                              // 232
            k,          // The member key.                                                                // 233
            v,          // The member value.                                                              // 234
            length,                                                                                       // 235
            mind = gap,                                                                                   // 236
            partial,                                                                                      // 237
            value = holder[key];                                                                          // 238
                                                                                                          // 239
// If the value has a toJSON method, call it to obtain a replacement value.                               // 240
                                                                                                          // 241
        if (value && typeof value === 'object' &&                                                         // 242
                typeof value.toJSON === 'function') {                                                     // 243
            value = value.toJSON(key);                                                                    // 244
        }                                                                                                 // 245
                                                                                                          // 246
// If we were called with a replacer function, then call the replacer to                                  // 247
// obtain a replacement value.                                                                            // 248
                                                                                                          // 249
        if (typeof rep === 'function') {                                                                  // 250
            value = rep.call(holder, key, value);                                                         // 251
        }                                                                                                 // 252
                                                                                                          // 253
// What happens next depends on the value's type.                                                         // 254
                                                                                                          // 255
        switch (typeof value) {                                                                           // 256
        case 'string':                                                                                    // 257
            return quote(value);                                                                          // 258
                                                                                                          // 259
        case 'number':                                                                                    // 260
                                                                                                          // 261
// JSON numbers must be finite. Encode non-finite numbers as null.                                        // 262
                                                                                                          // 263
            return isFinite(value) ? String(value) : 'null';                                              // 264
                                                                                                          // 265
        case 'boolean':                                                                                   // 266
        case 'null':                                                                                      // 267
                                                                                                          // 268
// If the value is a boolean or null, convert it to a string. Note:                                       // 269
// typeof null does not produce 'null'. The case is included here in                                      // 270
// the remote chance that this gets fixed someday.                                                        // 271
                                                                                                          // 272
            return String(value);                                                                         // 273
                                                                                                          // 274
// If the type is 'object', we might be dealing with an object or an array or                             // 275
// null.                                                                                                  // 276
                                                                                                          // 277
        case 'object':                                                                                    // 278
                                                                                                          // 279
// Due to a specification blunder in ECMAScript, typeof null is 'object',                                 // 280
// so watch out for that case.                                                                            // 281
                                                                                                          // 282
            if (!value) {                                                                                 // 283
                return 'null';                                                                            // 284
            }                                                                                             // 285
                                                                                                          // 286
// Make an array to hold the partial results of stringifying this object value.                           // 287
                                                                                                          // 288
            gap += indent;                                                                                // 289
            partial = [];                                                                                 // 290
                                                                                                          // 291
// Is the value an array?                                                                                 // 292
                                                                                                          // 293
            if (Object.prototype.toString.apply(value) === '[object Array]') {                            // 294
                                                                                                          // 295
// The value is an array. Stringify every element. Use null as a placeholder                              // 296
// for non-JSON values.                                                                                   // 297
                                                                                                          // 298
                length = value.length;                                                                    // 299
                for (i = 0; i < length; i += 1) {                                                         // 300
                    partial[i] = str(i, value) || 'null';                                                 // 301
                }                                                                                         // 302
                                                                                                          // 303
// Join all of the elements together, separated with commas, and wrap them in                             // 304
// brackets.                                                                                              // 305
                                                                                                          // 306
                v = partial.length === 0                                                                  // 307
                    ? '[]'                                                                                // 308
                    : gap                                                                                 // 309
                    ? '[\n' + gap + partial.join(',\n' + gap) + '\n' + mind + ']'                         // 310
                    : '[' + partial.join(',') + ']';                                                      // 311
                gap = mind;                                                                               // 312
                return v;                                                                                 // 313
            }                                                                                             // 314
                                                                                                          // 315
// If the replacer is an array, use it to select the members to be stringified.                           // 316
                                                                                                          // 317
            if (rep && typeof rep === 'object') {                                                         // 318
                length = rep.length;                                                                      // 319
                for (i = 0; i < length; i += 1) {                                                         // 320
                    if (typeof rep[i] === 'string') {                                                     // 321
                        k = rep[i];                                                                       // 322
                        v = str(k, value);                                                                // 323
                        if (v) {                                                                          // 324
                            partial.push(quote(k) + (gap ? ': ' : ':') + v);                              // 325
                        }                                                                                 // 326
                    }                                                                                     // 327
                }                                                                                         // 328
            } else {                                                                                      // 329
                                                                                                          // 330
// Otherwise, iterate through all of the keys in the object.                                              // 331
                                                                                                          // 332
                for (k in value) {                                                                        // 333
                    if (Object.prototype.hasOwnProperty.call(value, k)) {                                 // 334
                        v = str(k, value);                                                                // 335
                        if (v) {                                                                          // 336
                            partial.push(quote(k) + (gap ? ': ' : ':') + v);                              // 337
                        }                                                                                 // 338
                    }                                                                                     // 339
                }                                                                                         // 340
            }                                                                                             // 341
                                                                                                          // 342
// Join all of the member texts together, separated with commas,                                          // 343
// and wrap them in braces.                                                                               // 344
                                                                                                          // 345
            v = partial.length === 0                                                                      // 346
                ? '{}'                                                                                    // 347
                : gap                                                                                     // 348
                ? '{\n' + gap + partial.join(',\n' + gap) + '\n' + mind + '}'                             // 349
                : '{' + partial.join(',') + '}';                                                          // 350
            gap = mind;                                                                                   // 351
            return v;                                                                                     // 352
        }                                                                                                 // 353
    }                                                                                                     // 354
                                                                                                          // 355
// If the JSON object does not yet have a stringify method, give it one.                                  // 356
                                                                                                          // 357
    if (typeof JSON.stringify !== 'function') {                                                           // 358
        JSON.stringify = function (value, replacer, space) {                                              // 359
                                                                                                          // 360
// The stringify method takes a value and an optional replacer, and an optional                           // 361
// space parameter, and returns a JSON text. The replacer can be a function                               // 362
// that can replace values, or an array of strings that will select the keys.                             // 363
// A default replacer method can be provided. Use of the space parameter can                              // 364
// produce text that is more easily readable.                                                             // 365
                                                                                                          // 366
            var i;                                                                                        // 367
            gap = '';                                                                                     // 368
            indent = '';                                                                                  // 369
                                                                                                          // 370
// If the space parameter is a number, make an indent string containing that                              // 371
// many spaces.                                                                                           // 372
                                                                                                          // 373
            if (typeof space === 'number') {                                                              // 374
                for (i = 0; i < space; i += 1) {                                                          // 375
                    indent += ' ';                                                                        // 376
                }                                                                                         // 377
                                                                                                          // 378
// If the space parameter is a string, it will be used as the indent string.                              // 379
                                                                                                          // 380
            } else if (typeof space === 'string') {                                                       // 381
                indent = space;                                                                           // 382
            }                                                                                             // 383
                                                                                                          // 384
// If there is a replacer, it must be a function or an array.                                             // 385
// Otherwise, throw an error.                                                                             // 386
                                                                                                          // 387
            rep = replacer;                                                                               // 388
            if (replacer && typeof replacer !== 'function' &&                                             // 389
                    (typeof replacer !== 'object' ||                                                      // 390
                    typeof replacer.length !== 'number')) {                                               // 391
                throw new Error('JSON.stringify');                                                        // 392
            }                                                                                             // 393
                                                                                                          // 394
// Make a fake root object containing our value under the key of ''.                                      // 395
// Return the result of stringifying the value.                                                           // 396
                                                                                                          // 397
            return str('', {'': value});                                                                  // 398
        };                                                                                                // 399
    }                                                                                                     // 400
                                                                                                          // 401
                                                                                                          // 402
// If the JSON object does not yet have a parse method, give it one.                                      // 403
                                                                                                          // 404
    if (typeof JSON.parse !== 'function') {                                                               // 405
        JSON.parse = function (text, reviver) {                                                           // 406
                                                                                                          // 407
// The parse method takes a text and an optional reviver function, and returns                            // 408
// a JavaScript value if the text is a valid JSON text.                                                   // 409
                                                                                                          // 410
            var j;                                                                                        // 411
                                                                                                          // 412
            function walk(holder, key) {                                                                  // 413
                                                                                                          // 414
// The walk method is used to recursively walk the resulting structure so                                 // 415
// that modifications can be made.                                                                        // 416
                                                                                                          // 417
                var k, v, value = holder[key];                                                            // 418
                if (value && typeof value === 'object') {                                                 // 419
                    for (k in value) {                                                                    // 420
                        if (Object.prototype.hasOwnProperty.call(value, k)) {                             // 421
                            v = walk(value, k);                                                           // 422
                            if (v !== undefined) {                                                        // 423
                                value[k] = v;                                                             // 424
                            } else {                                                                      // 425
                                delete value[k];                                                          // 426
                            }                                                                             // 427
                        }                                                                                 // 428
                    }                                                                                     // 429
                }                                                                                         // 430
                return reviver.call(holder, key, value);                                                  // 431
            }                                                                                             // 432
                                                                                                          // 433
                                                                                                          // 434
// Parsing happens in four stages. In the first stage, we replace certain                                 // 435
// Unicode characters with escape sequences. JavaScript handles many characters                           // 436
// incorrectly, either silently deleting them, or treating them as line endings.                          // 437
                                                                                                          // 438
            text = String(text);                                                                          // 439
            cx.lastIndex = 0;                                                                             // 440
            if (cx.test(text)) {                                                                          // 441
                text = text.replace(cx, function (a) {                                                    // 442
                    return '\\u' +                                                                        // 443
                        ('0000' + a.charCodeAt(0).toString(16)).slice(-4);                                // 444
                });                                                                                       // 445
            }                                                                                             // 446
                                                                                                          // 447
// In the second stage, we run the text against regular expressions that look                             // 448
// for non-JSON patterns. We are especially concerned with '()' and 'new'                                 // 449
// because they can cause invocation, and '=' because it can cause mutation.                              // 450
// But just to be safe, we want to reject all unexpected forms.                                           // 451
                                                                                                          // 452
// We split the second stage into 4 regexp operations in order to work around                             // 453
// crippling inefficiencies in IE's and Safari's regexp engines. First we                                 // 454
// replace the JSON backslash pairs with '@' (a non-JSON character). Second, we                           // 455
// replace all simple value tokens with ']' characters. Third, we delete all                              // 456
// open brackets that follow a colon or comma or that begin the text. Finally,                            // 457
// we look to see that the remaining characters are only whitespace or ']' or                             // 458
// ',' or ':' or '{' or '}'. If that is so, then the text is safe for eval.                               // 459
                                                                                                          // 460
            if (/^[\],:{}\s]*$/                                                                           // 461
                    .test(text.replace(/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g, '@')                        // 462
                        .replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, ']') // 463
                        .replace(/(?:^|:|,)(?:\s*\[)+/g, ''))) {                                          // 464
                                                                                                          // 465
// In the third stage we use the eval function to compile the text into a                                 // 466
// JavaScript structure. The '{' operator is subject to a syntactic ambiguity                             // 467
// in JavaScript: it can begin a block or an object literal. We wrap the text                             // 468
// in parens to eliminate the ambiguity.                                                                  // 469
                                                                                                          // 470
                j = eval('(' + text + ')');                                                               // 471
                                                                                                          // 472
// In the optional fourth stage, we recursively walk the new structure, passing                           // 473
// each name/value pair to a reviver function for possible transformation.                                // 474
                                                                                                          // 475
                return typeof reviver === 'function'                                                      // 476
                    ? walk({'': j}, '')                                                                   // 477
                    : j;                                                                                  // 478
            }                                                                                             // 479
                                                                                                          // 480
// If the text is not JSON parseable, then a SyntaxError is thrown.                                       // 481
                                                                                                          // 482
            throw new SyntaxError('JSON.parse');                                                          // 483
        };                                                                                                // 484
    }                                                                                                     // 485
}());                                                                                                     // 486
                                                                                                          // 487
////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);


/* Exports */
if (typeof Package === 'undefined') Package = {};
Package.json = {
  JSON: JSON
};

})();

//# sourceMappingURL=e22856eae714c681199eabc5c0710b904b125554.map
//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
//                                                                      //
// If you are using Chrome, open the Developer Tools and click the gear //
// icon in its lower right corner. In the General Settings panel, turn  //
// on 'Enable source maps'.                                             //
//                                                                      //
// If you are using Firefox 23, go to `about:config` and set the        //
// `devtools.debugger.source-maps-enabled` preference to true.          //
// (The preference should be on by default in Firefox 24; versions      //
// older than 23 do not support source maps.)                           //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

/* Imports */
var _ = Package.underscore._;

/* Package-scope variables */
var Meteor;

(function () {

//////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                  //
// packages/meteor/client_environment.js                                                            //
//                                                                                                  //
//////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                    //
Meteor = {                                                                                          // 1
  isClient: true,                                                                                   // 2
  isServer: false                                                                                   // 3
};                                                                                                  // 4
                                                                                                    // 5
if (typeof __meteor_runtime_config__ === 'object' &&                                                // 6
    __meteor_runtime_config__.PUBLIC_SETTINGS) {                                                    // 7
  Meteor.settings = { 'public': __meteor_runtime_config__.PUBLIC_SETTINGS };                        // 8
}                                                                                                   // 9
                                                                                                    // 10
//////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

//////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                  //
// packages/meteor/helpers.js                                                                       //
//                                                                                                  //
//////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                    //
if (Meteor.isServer)                                                                                // 1
  var Future = Npm.require('fibers/future');                                                        // 2
                                                                                                    // 3
if (typeof __meteor_runtime_config__ === 'object' &&                                                // 4
    __meteor_runtime_config__.meteorRelease)                                                        // 5
  Meteor.release = __meteor_runtime_config__.meteorRelease;                                         // 6
                                                                                                    // 7
// XXX find a better home for these? Ideally they would be _.get,                                   // 8
// _.ensure, _.delete..                                                                             // 9
                                                                                                    // 10
_.extend(Meteor, {                                                                                  // 11
  // _get(a,b,c,d) returns a[b][c][d], or else undefined if a[b] or                                 // 12
  // a[b][c] doesn't exist.                                                                         // 13
  //                                                                                                // 14
  _get: function (obj /*, arguments */) {                                                           // 15
    for (var i = 1; i < arguments.length; i++) {                                                    // 16
      if (!(arguments[i] in obj))                                                                   // 17
        return undefined;                                                                           // 18
      obj = obj[arguments[i]];                                                                      // 19
    }                                                                                               // 20
    return obj;                                                                                     // 21
  },                                                                                                // 22
                                                                                                    // 23
  // _ensure(a,b,c,d) ensures that a[b][c][d] exists. If it does not,                               // 24
  // it is created and set to {}. Either way, it is returned.                                       // 25
  //                                                                                                // 26
  _ensure: function (obj /*, arguments */) {                                                        // 27
    for (var i = 1; i < arguments.length; i++) {                                                    // 28
      var key = arguments[i];                                                                       // 29
      if (!(key in obj))                                                                            // 30
        obj[key] = {};                                                                              // 31
      obj = obj[key];                                                                               // 32
    }                                                                                               // 33
                                                                                                    // 34
    return obj;                                                                                     // 35
  },                                                                                                // 36
                                                                                                    // 37
  // _delete(a, b, c, d) deletes a[b][c][d], then a[b][c] unless it                                 // 38
  // isn't empty, then a[b] unless it isn't empty.                                                  // 39
  //                                                                                                // 40
  _delete: function (obj /*, arguments */) {                                                        // 41
    var stack = [obj];                                                                              // 42
    var leaf = true;                                                                                // 43
    for (var i = 1; i < arguments.length - 1; i++) {                                                // 44
      var key = arguments[i];                                                                       // 45
      if (!(key in obj)) {                                                                          // 46
        leaf = false;                                                                               // 47
        break;                                                                                      // 48
      }                                                                                             // 49
      obj = obj[key];                                                                               // 50
      if (typeof obj !== "object")                                                                  // 51
        break;                                                                                      // 52
      stack.push(obj);                                                                              // 53
    }                                                                                               // 54
                                                                                                    // 55
    for (var i = stack.length - 1; i >= 0; i--) {                                                   // 56
      var key = arguments[i+1];                                                                     // 57
                                                                                                    // 58
      if (leaf)                                                                                     // 59
        leaf = false;                                                                               // 60
      else                                                                                          // 61
        for (var other in stack[i][key])                                                            // 62
          return; // not empty -- we're done                                                        // 63
                                                                                                    // 64
      delete stack[i][key];                                                                         // 65
    }                                                                                               // 66
  },                                                                                                // 67
                                                                                                    // 68
  // _wrapAsync can wrap any function that takes some number of arguments that                      // 69
  // can't be undefined, followed by some optional arguments, where the callback                    // 70
  // is the last optional argument.                                                                 // 71
  // e.g. fs.readFile(pathname, [callback]),                                                        // 72
  // fs.open(pathname, flags, [mode], [callback])                                                   // 73
  // For maximum effectiveness and least confusion, wrapAsync should be used on                     // 74
  // functions where the callback is the only argument of type Function.                            // 75
  //                                                                                                // 76
  _wrapAsync: function (fn) {                                                                       // 77
    return function (/* arguments */) {                                                             // 78
      var self = this;                                                                              // 79
      var callback;                                                                                 // 80
      var fut;                                                                                      // 81
      var newArgs = _.toArray(arguments);                                                           // 82
                                                                                                    // 83
      var logErr = function (err) {                                                                 // 84
        if (err)                                                                                    // 85
          return Meteor._debug("Exception in callback of async function",                           // 86
                               err.stack ? err.stack : err);                                        // 87
      };                                                                                            // 88
                                                                                                    // 89
      // Pop off optional args that are undefined                                                   // 90
      while (newArgs.length > 0 &&                                                                  // 91
             typeof(newArgs[newArgs.length - 1]) === "undefined") {                                 // 92
        newArgs.pop();                                                                              // 93
      }                                                                                             // 94
      // If we have any left and the last one is a function, then that's our                        // 95
      // callback; otherwise, we don't have one.                                                    // 96
      if (newArgs.length > 0 &&                                                                     // 97
          newArgs[newArgs.length - 1] instanceof Function) {                                        // 98
        callback = newArgs.pop();                                                                   // 99
      } else {                                                                                      // 100
        if (Meteor.isClient) {                                                                      // 101
          callback = logErr;                                                                        // 102
        } else {                                                                                    // 103
          fut = new Future();                                                                       // 104
          callback = fut.resolver();                                                                // 105
        }                                                                                           // 106
      }                                                                                             // 107
      newArgs.push(Meteor.bindEnvironment(callback));                                               // 108
      var result = fn.apply(self, newArgs);                                                         // 109
      if (fut)                                                                                      // 110
        return fut.wait();                                                                          // 111
      return result;                                                                                // 112
    };                                                                                              // 113
  },                                                                                                // 114
                                                                                                    // 115
  // Sets child's prototype to a new object whose prototype is parent's                             // 116
  // prototype. Used as:                                                                            // 117
  //   Meteor._inherits(ClassB, ClassA).                                                            // 118
  //   _.extend(ClassB.prototype, { ... })                                                          // 119
  // Inspired by CoffeeScript's `extend` and Google Closure's `goog.inherits`.                      // 120
  _inherits: function (Child, Parent) {                                                             // 121
    // copy static fields                                                                           // 122
    _.each(Parent, function (prop, field) {                                                         // 123
      Child[field] = prop;                                                                          // 124
    });                                                                                             // 125
                                                                                                    // 126
    // a middle member of prototype chain: takes the prototype from the Parent                      // 127
    var Middle = function () {                                                                      // 128
      this.constructor = Child;                                                                     // 129
    };                                                                                              // 130
    Middle.prototype = Parent.prototype;                                                            // 131
    Child.prototype = new Middle();                                                                 // 132
    Child.__super__ = Parent.prototype;                                                             // 133
    return Child;                                                                                   // 134
  }                                                                                                 // 135
});                                                                                                 // 136
                                                                                                    // 137
//////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

//////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                  //
// packages/meteor/setimmediate.js                                                                  //
//                                                                                                  //
//////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                    //
// Chooses one of three setImmediate implementations:                                               // 1
//                                                                                                  // 2
// * Native setImmediate (IE 10, Node 0.9+)                                                         // 3
//                                                                                                  // 4
// * postMessage (many browsers)                                                                    // 5
//                                                                                                  // 6
// * setTimeout  (fallback)                                                                         // 7
//                                                                                                  // 8
// The postMessage implementation is based on                                                       // 9
// https://github.com/NobleJS/setImmediate/tree/1.0.1                                               // 10
//                                                                                                  // 11
// Don't use `nextTick` for Node since it runs its callbacks before                                 // 12
// I/O, which is stricter than we're looking for.                                                   // 13
//                                                                                                  // 14
// Not installed as a polyfill, as our public API is `Meteor.defer`.                                // 15
// Since we're not trying to be a polyfill, we have some                                            // 16
// simplifications:                                                                                 // 17
//                                                                                                  // 18
// If one invocation of a setImmediate callback pauses itself by a                                  // 19
// call to alert/prompt/showModelDialog, the NobleJS polyfill                                       // 20
// implementation ensured that no setImmedate callback would run until                              // 21
// the first invocation completed.  While correct per the spec, what it                             // 22
// would mean for us in practice is that any reactive updates relying                               // 23
// on Meteor.defer would be hung in the main window until the modal                                 // 24
// dialog was dismissed.  Thus we only ensure that a setImmediate                                   // 25
// function is called in a later event loop.                                                        // 26
//                                                                                                  // 27
// We don't need to support using a string to be eval'ed for the                                    // 28
// callback, arguments to the function, or clearImmediate.                                          // 29
                                                                                                    // 30
"use strict";                                                                                       // 31
                                                                                                    // 32
var global = this;                                                                                  // 33
                                                                                                    // 34
                                                                                                    // 35
// IE 10, Node >= 9.1                                                                               // 36
                                                                                                    // 37
function useSetImmediate() {                                                                        // 38
  if (! global.setImmediate)                                                                        // 39
    return null;                                                                                    // 40
  else {                                                                                            // 41
    var setImmediate = function (fn) {                                                              // 42
      global.setImmediate(fn);                                                                      // 43
    };                                                                                              // 44
    setImmediate.implementation = 'setImmediate';                                                   // 45
    return setImmediate;                                                                            // 46
  }                                                                                                 // 47
}                                                                                                   // 48
                                                                                                    // 49
                                                                                                    // 50
// Android 2.3.6, Chrome 26, Firefox 20, IE 8-9, iOS 5.1.1 Safari                                   // 51
                                                                                                    // 52
function usePostMessage() {                                                                         // 53
  // The test against `importScripts` prevents this implementation                                  // 54
  // from being installed inside a web worker, where                                                // 55
  // `global.postMessage` means something completely different and                                  // 56
  // can't be used for this purpose.                                                                // 57
                                                                                                    // 58
  if (!global.postMessage || global.importScripts) {                                                // 59
    return null;                                                                                    // 60
  }                                                                                                 // 61
                                                                                                    // 62
  // Avoid synchronous post message implementations.                                                // 63
                                                                                                    // 64
  var postMessageIsAsynchronous = true;                                                             // 65
  var oldOnMessage = global.onmessage;                                                              // 66
  global.onmessage = function () {                                                                  // 67
      postMessageIsAsynchronous = false;                                                            // 68
  };                                                                                                // 69
  global.postMessage("", "*");                                                                      // 70
  global.onmessage = oldOnMessage;                                                                  // 71
                                                                                                    // 72
  if (! postMessageIsAsynchronous)                                                                  // 73
    return null;                                                                                    // 74
                                                                                                    // 75
  var funcIndex = 0;                                                                                // 76
  var funcs = {};                                                                                   // 77
                                                                                                    // 78
  // Installs an event handler on `global` for the `message` event: see                             // 79
  // * https://developer.mozilla.org/en/DOM/window.postMessage                                      // 80
  // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages // 81
                                                                                                    // 82
  // XXX use Random.id() here?                                                                      // 83
  var MESSAGE_PREFIX = "Meteor._setImmediate." + Math.random() + '.';                               // 84
                                                                                                    // 85
  function isStringAndStartsWith(string, putativeStart) {                                           // 86
    return (typeof string === "string" &&                                                           // 87
            string.substring(0, putativeStart.length) === putativeStart);                           // 88
  }                                                                                                 // 89
                                                                                                    // 90
  function onGlobalMessage(event) {                                                                 // 91
    // This will catch all incoming messages (even from other                                       // 92
    // windows!), so we need to try reasonably hard to avoid letting                                // 93
    // anyone else trick us into firing off. We test the origin is                                  // 94
    // still this window, and that a (randomly generated)                                           // 95
    // unpredictable identifying prefix is present.                                                 // 96
    if (event.source === global &&                                                                  // 97
        isStringAndStartsWith(event.data, MESSAGE_PREFIX)) {                                        // 98
      var index = event.data.substring(MESSAGE_PREFIX.length);                                      // 99
      try {                                                                                         // 100
        if (funcs[index])                                                                           // 101
          funcs[index]();                                                                           // 102
      }                                                                                             // 103
      finally {                                                                                     // 104
        delete funcs[index];                                                                        // 105
      }                                                                                             // 106
    }                                                                                               // 107
  }                                                                                                 // 108
                                                                                                    // 109
  if (global.addEventListener) {                                                                    // 110
    global.addEventListener("message", onGlobalMessage, false);                                     // 111
  } else {                                                                                          // 112
    global.attachEvent("onmessage", onGlobalMessage);                                               // 113
  }                                                                                                 // 114
                                                                                                    // 115
  var setImmediate = function (fn) {                                                                // 116
    // Make `global` post a message to itself with the handle and                                   // 117
    // identifying prefix, thus asynchronously invoking our                                         // 118
    // onGlobalMessage listener above.                                                              // 119
    ++funcIndex;                                                                                    // 120
    funcs[funcIndex] = fn;                                                                          // 121
    global.postMessage(MESSAGE_PREFIX + funcIndex, "*");                                            // 122
  };                                                                                                // 123
  setImmediate.implementation = 'postMessage';                                                      // 124
  return setImmediate;                                                                              // 125
}                                                                                                   // 126
                                                                                                    // 127
                                                                                                    // 128
function useTimeout() {                                                                             // 129
  var setImmediate = function (fn) {                                                                // 130
    global.setTimeout(fn, 0);                                                                       // 131
  };                                                                                                // 132
  setImmediate.implementation = 'setTimeout';                                                       // 133
  return setImmediate;                                                                              // 134
}                                                                                                   // 135
                                                                                                    // 136
                                                                                                    // 137
Meteor._setImmediate =                                                                              // 138
  useSetImmediate() ||                                                                              // 139
  usePostMessage() ||                                                                               // 140
  useTimeout();                                                                                     // 141
                                                                                                    // 142
//////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

//////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                  //
// packages/meteor/timers.js                                                                        //
//                                                                                                  //
//////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                    //
var withoutInvocation = function (f) {                                                              // 1
  if (Package.livedata) {                                                                           // 2
    var _CurrentInvocation = Package.livedata.DDP._CurrentInvocation;                               // 3
    if (_CurrentInvocation.get() && _CurrentInvocation.get().isSimulation)                          // 4
      throw new Error("Can't set timers inside simulations");                                       // 5
    return function () { _CurrentInvocation.withValue(null, f); };                                  // 6
  }                                                                                                 // 7
  else                                                                                              // 8
    return f;                                                                                       // 9
};                                                                                                  // 10
                                                                                                    // 11
var bindAndCatch = function (context, f) {                                                          // 12
  return Meteor.bindEnvironment(withoutInvocation(f), context);                                     // 13
};                                                                                                  // 14
                                                                                                    // 15
_.extend(Meteor, {                                                                                  // 16
  // Meteor.setTimeout and Meteor.setInterval callbacks scheduled                                   // 17
  // inside a server method are not part of the method invocation and                               // 18
  // should clear out the CurrentInvocation environment variable.                                   // 19
                                                                                                    // 20
  setTimeout: function (f, duration) {                                                              // 21
    return setTimeout(bindAndCatch("setTimeout callback", f), duration);                            // 22
  },                                                                                                // 23
                                                                                                    // 24
  setInterval: function (f, duration) {                                                             // 25
    return setInterval(bindAndCatch("setInterval callback", f), duration);                          // 26
  },                                                                                                // 27
                                                                                                    // 28
  clearInterval: function(x) {                                                                      // 29
    return clearInterval(x);                                                                        // 30
  },                                                                                                // 31
                                                                                                    // 32
  clearTimeout: function(x) {                                                                       // 33
    return clearTimeout(x);                                                                         // 34
  },                                                                                                // 35
                                                                                                    // 36
  // XXX consider making this guarantee ordering of defer'd callbacks, like                         // 37
  // Deps.afterFlush or Node's nextTick (in practice). Then tests can do:                           // 38
  //    callSomethingThatDefersSomeWork();                                                          // 39
  //    Meteor.defer(expect(somethingThatValidatesThatTheWorkHappened));                            // 40
  defer: function (f) {                                                                             // 41
    Meteor._setImmediate(bindAndCatch("defer callback", f));                                        // 42
  }                                                                                                 // 43
});                                                                                                 // 44
                                                                                                    // 45
//////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

//////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                  //
// packages/meteor/errors.js                                                                        //
//                                                                                                  //
//////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                    //
// Makes an error subclass which properly contains a stack trace in most                            // 1
// environments. constructor can set fields on `this` (and should probably set                      // 2
// `message`, which is what gets displayed at the top of a stack trace).                            // 3
//                                                                                                  // 4
Meteor.makeErrorType = function (name, constructor) {                                               // 5
  var errorClass = function (/*arguments*/) {                                                       // 6
    var self = this;                                                                                // 7
                                                                                                    // 8
    // Ensure we get a proper stack trace in most Javascript environments                           // 9
    if (Error.captureStackTrace) {                                                                  // 10
      // V8 environments (Chrome and Node.js)                                                       // 11
      Error.captureStackTrace(self, errorClass);                                                    // 12
    } else {                                                                                        // 13
      // Firefox                                                                                    // 14
      var e = new Error;                                                                            // 15
      e.__proto__ = errorClass.prototype;                                                           // 16
      if (e instanceof errorClass)                                                                  // 17
        self = e;                                                                                   // 18
    }                                                                                               // 19
    // Safari magically works.                                                                      // 20
                                                                                                    // 21
    constructor.apply(self, arguments);                                                             // 22
                                                                                                    // 23
    self.errorType = name;                                                                          // 24
                                                                                                    // 25
    return self;                                                                                    // 26
  };                                                                                                // 27
                                                                                                    // 28
  Meteor._inherits(errorClass, Error);                                                              // 29
                                                                                                    // 30
  return errorClass;                                                                                // 31
};                                                                                                  // 32
                                                                                                    // 33
// This should probably be in the livedata package, but we don't want                               // 34
// to require you to use the livedata package to get it. Eventually we                              // 35
// should probably rename it to DDP.Error and put it back in the                                    // 36
// 'livedata' package (which we should rename to 'ddp' also.)                                       // 37
//                                                                                                  // 38
// Note: The DDP server assumes that Meteor.Error EJSON-serializes as an object                     // 39
// containing 'error' and optionally 'reason' and 'details'.                                        // 40
// The DDP client manually puts these into Meteor.Error objects. (We don't use                      // 41
// EJSON.addType here because the type is determined by location in the                             // 42
// protocol, not text on the wire.)                                                                 // 43
//                                                                                                  // 44
Meteor.Error = Meteor.makeErrorType(                                                                // 45
  "Meteor.Error",                                                                                   // 46
  function (error, reason, details) {                                                               // 47
    var self = this;                                                                                // 48
                                                                                                    // 49
    // Currently, a numeric code, likely similar to a HTTP code (eg,                                // 50
    // 404, 500). That is likely to change though.                                                  // 51
    self.error = error;                                                                             // 52
                                                                                                    // 53
    // Optional: A short human-readable summary of the error. Not                                   // 54
    // intended to be shown to end users, just developers. ("Not Found",                            // 55
    // "Internal Server Error")                                                                     // 56
    self.reason = reason;                                                                           // 57
                                                                                                    // 58
    // Optional: Additional information about the error, say for                                    // 59
    // debugging. It might be a (textual) stack trace if the server is                              // 60
    // willing to provide one. The corresponding thing in HTTP would be                             // 61
    // the body of a 404 or 500 response. (The difference is that we                                // 62
    // never expect this to be shown to end users, only developers, so                              // 63
    // it doesn't need to be pretty.)                                                               // 64
    self.details = details;                                                                         // 65
                                                                                                    // 66
    // This is what gets displayed at the top of a stack trace. Current                             // 67
    // format is "[404]" (if no reason is set) or "File not found [404]"                            // 68
    if (self.reason)                                                                                // 69
      self.message = self.reason + ' [' + self.error + ']';                                         // 70
    else                                                                                            // 71
      self.message = '[' + self.error + ']';                                                        // 72
  });                                                                                               // 73
                                                                                                    // 74
// Meteor.Error is basically data and is sent over DDP, so you should be able to                    // 75
// properly EJSON-clone it. This is especially important because if a                               // 76
// Meteor.Error is thrown through a Future, the error, reason, and details                          // 77
// properties become non-enumerable so a standard Object clone won't preserve                       // 78
// them and they will be lost from DDP.                                                             // 79
Meteor.Error.prototype.clone = function () {                                                        // 80
  var self = this;                                                                                  // 81
  return new Meteor.Error(self.error, self.reason, self.details);                                   // 82
};                                                                                                  // 83
                                                                                                    // 84
//////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

//////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                  //
// packages/meteor/fiber_stubs_client.js                                                            //
//                                                                                                  //
//////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                    //
// This file is a partial analogue to fiber_helpers.js, which allows the client                     // 1
// to use a queue too, and also to call noYieldsAllowed.                                            // 2
                                                                                                    // 3
// The client has no ability to yield, so noYieldsAllowed is a noop.                                // 4
//                                                                                                  // 5
Meteor._noYieldsAllowed = function (f) {                                                            // 6
  return f();                                                                                       // 7
};                                                                                                  // 8
                                                                                                    // 9
// An even simpler queue of tasks than the fiber-enabled one.  This one just                        // 10
// runs all the tasks when you call runTask or flush, synchronously.                                // 11
//                                                                                                  // 12
Meteor._SynchronousQueue = function () {                                                            // 13
  var self = this;                                                                                  // 14
  self._tasks = [];                                                                                 // 15
  self._running = false;                                                                            // 16
};                                                                                                  // 17
                                                                                                    // 18
_.extend(Meteor._SynchronousQueue.prototype, {                                                      // 19
  runTask: function (task) {                                                                        // 20
    var self = this;                                                                                // 21
    if (!self.safeToRunTask())                                                                      // 22
      throw new Error("Could not synchronously run a task from a running task");                    // 23
    self._tasks.push(task);                                                                         // 24
    var tasks = self._tasks;                                                                        // 25
    self._tasks = [];                                                                               // 26
    self._running = true;                                                                           // 27
    try {                                                                                           // 28
      while (!_.isEmpty(tasks)) {                                                                   // 29
        var t = tasks.shift();                                                                      // 30
        try {                                                                                       // 31
          t();                                                                                      // 32
        } catch (e) {                                                                               // 33
          if (_.isEmpty(tasks)) {                                                                   // 34
            // this was the last task, that is, the one we're calling runTask                       // 35
            // for.                                                                                 // 36
            throw e;                                                                                // 37
          } else {                                                                                  // 38
            Meteor._debug("Exception in queued task: " + e.stack);                                  // 39
          }                                                                                         // 40
        }                                                                                           // 41
      }                                                                                             // 42
    } finally {                                                                                     // 43
      self._running = false;                                                                        // 44
    }                                                                                               // 45
  },                                                                                                // 46
                                                                                                    // 47
  queueTask: function (task) {                                                                      // 48
    var self = this;                                                                                // 49
    var wasEmpty = _.isEmpty(self._tasks);                                                          // 50
    self._tasks.push(task);                                                                         // 51
    // Intentionally not using Meteor.setTimeout, because it doesn't like runing                    // 52
    // in stubs for now.                                                                            // 53
    if (wasEmpty)                                                                                   // 54
      setTimeout(_.bind(self.flush, self), 0);                                                      // 55
  },                                                                                                // 56
                                                                                                    // 57
  flush: function () {                                                                              // 58
    var self = this;                                                                                // 59
    self.runTask(function () {});                                                                   // 60
  },                                                                                                // 61
                                                                                                    // 62
  drain: function () {                                                                              // 63
    var self = this;                                                                                // 64
    if (!self.safeToRunTask())                                                                      // 65
      return;                                                                                       // 66
    while (!_.isEmpty(self._tasks)) {                                                               // 67
      self.flush();                                                                                 // 68
    }                                                                                               // 69
  },                                                                                                // 70
                                                                                                    // 71
  safeToRunTask: function () {                                                                      // 72
    var self = this;                                                                                // 73
    return !self._running;                                                                          // 74
  }                                                                                                 // 75
});                                                                                                 // 76
                                                                                                    // 77
//////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

//////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                  //
// packages/meteor/startup_client.js                                                                //
//                                                                                                  //
//////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                    //
var queue = [];                                                                                     // 1
var loaded = document.readyState === "loaded" ||                                                    // 2
  document.readyState == "complete";                                                                // 3
                                                                                                    // 4
var ready = function() {                                                                            // 5
  loaded = true;                                                                                    // 6
  while (queue.length)                                                                              // 7
    (queue.shift())();                                                                              // 8
};                                                                                                  // 9
                                                                                                    // 10
if (document.addEventListener) {                                                                    // 11
  document.addEventListener('DOMContentLoaded', ready, false);                                      // 12
  window.addEventListener('load', ready, false);                                                    // 13
} else {                                                                                            // 14
  document.attachEvent('onreadystatechange', function () {                                          // 15
    if (document.readyState === "complete")                                                         // 16
      ready();                                                                                      // 17
  });                                                                                               // 18
  window.attachEvent('load', ready);                                                                // 19
}                                                                                                   // 20
                                                                                                    // 21
Meteor.startup = function (cb) {                                                                    // 22
  var doScroll = !document.addEventListener &&                                                      // 23
    document.documentElement.doScroll;                                                              // 24
                                                                                                    // 25
  if (!doScroll || window !== top) {                                                                // 26
    if (loaded)                                                                                     // 27
      cb();                                                                                         // 28
    else                                                                                            // 29
      queue.push(cb);                                                                               // 30
  } else {                                                                                          // 31
    try { doScroll('left'); }                                                                       // 32
    catch (e) {                                                                                     // 33
      setTimeout(function() { Meteor.startup(cb); }, 50);                                           // 34
      return;                                                                                       // 35
    };                                                                                              // 36
    cb();                                                                                           // 37
  }                                                                                                 // 38
};                                                                                                  // 39
                                                                                                    // 40
//////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

//////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                  //
// packages/meteor/debug.js                                                                         //
//                                                                                                  //
//////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                    //
var suppress = 0;                                                                                   // 1
                                                                                                    // 2
// replacement for console.log. This is a temporary API. We should                                  // 3
// provide a real logging API soon (possibly just a polyfill for                                    // 4
// console?)                                                                                        // 5
//                                                                                                  // 6
// NOTE: this is used on the server to print the warning about                                      // 7
// having autopublish enabled when you probably meant to turn it                                    // 8
// off. it's not really the proper use of something called                                          // 9
// _debug. the intent is for this message to go to the terminal and                                 // 10
// be very visible. if you change _debug to go someplace else, etc,                                 // 11
// please fix the autopublish code to do something reasonable.                                      // 12
//                                                                                                  // 13
Meteor._debug = function (/* arguments */) {                                                        // 14
  if (suppress) {                                                                                   // 15
    suppress--;                                                                                     // 16
    return;                                                                                         // 17
  }                                                                                                 // 18
  if (typeof console !== 'undefined' &&                                                             // 19
      typeof console.log !== 'undefined') {                                                         // 20
    if (arguments.length == 0) { // IE Companion breaks otherwise                                   // 21
      // IE10 PP4 requires at least one argument                                                    // 22
      console.log('');                                                                              // 23
    } else {                                                                                        // 24
      // IE doesn't have console.log.apply, it's not a real Object.                                 // 25
      // http://stackoverflow.com/questions/5538972/console-log-apply-not-working-in-ie9            // 26
      // http://patik.com/blog/complete-cross-browser-console-log/                                  // 27
      if (typeof console.log.apply === "function") {                                                // 28
        // Most browsers                                                                            // 29
                                                                                                    // 30
        // Chrome and Safari only hyperlink URLs to source files in first argument of               // 31
        // console.log, so try to call it with one argument if possible.                            // 32
        // Approach taken here: If all arguments are strings, join them on space.                   // 33
        // See https://github.com/meteor/meteor/pull/732#issuecomment-13975991                      // 34
        var allArgumentsOfTypeString = true;                                                        // 35
        for (var i = 0; i < arguments.length; i++)                                                  // 36
          if (typeof arguments[i] !== "string")                                                     // 37
            allArgumentsOfTypeString = false;                                                       // 38
                                                                                                    // 39
        if (allArgumentsOfTypeString)                                                               // 40
          console.log.apply(console, [Array.prototype.join.call(arguments, " ")]);                  // 41
        else                                                                                        // 42
          console.log.apply(console, arguments);                                                    // 43
                                                                                                    // 44
      } else if (typeof Function.prototype.bind === "function") {                                   // 45
        // IE9                                                                                      // 46
        var log = Function.prototype.bind.call(console.log, console);                               // 47
        log.apply(console, arguments);                                                              // 48
      } else {                                                                                      // 49
        // IE8                                                                                      // 50
        Function.prototype.call.call(console.log, console, Array.prototype.slice.call(arguments));  // 51
      }                                                                                             // 52
    }                                                                                               // 53
  }                                                                                                 // 54
};                                                                                                  // 55
                                                                                                    // 56
// Suppress the next 'count' Meteor._debug messsages. Use this to                                   // 57
// stop tests from spamming the console.                                                            // 58
//                                                                                                  // 59
Meteor._suppress_log = function (count) {                                                           // 60
  suppress += count;                                                                                // 61
};                                                                                                  // 62
                                                                                                    // 63
//////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

//////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                  //
// packages/meteor/dynamics_browser.js                                                              //
//                                                                                                  //
//////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                    //
// Simple implementation of dynamic scoping, for use in browsers                                    // 1
                                                                                                    // 2
var nextSlot = 0;                                                                                   // 3
var currentValues = [];                                                                             // 4
                                                                                                    // 5
Meteor.EnvironmentVariable = function () {                                                          // 6
  this.slot = nextSlot++;                                                                           // 7
};                                                                                                  // 8
                                                                                                    // 9
_.extend(Meteor.EnvironmentVariable.prototype, {                                                    // 10
  get: function () {                                                                                // 11
    return currentValues[this.slot];                                                                // 12
  },                                                                                                // 13
                                                                                                    // 14
  getOrNullIfOutsideFiber: function () {                                                            // 15
    return this.get();                                                                              // 16
  },                                                                                                // 17
                                                                                                    // 18
  withValue: function (value, func) {                                                               // 19
    var saved = currentValues[this.slot];                                                           // 20
    try {                                                                                           // 21
      currentValues[this.slot] = value;                                                             // 22
      var ret = func();                                                                             // 23
    } finally {                                                                                     // 24
      currentValues[this.slot] = saved;                                                             // 25
    }                                                                                               // 26
    return ret;                                                                                     // 27
  }                                                                                                 // 28
});                                                                                                 // 29
                                                                                                    // 30
Meteor.bindEnvironment = function (func, onException, _this) {                                      // 31
  // needed in order to be able to create closures inside func and                                  // 32
  // have the closed variables not change back to their original                                    // 33
  // values                                                                                         // 34
  var boundValues = _.clone(currentValues);                                                         // 35
                                                                                                    // 36
  if (!onException || typeof(onException) === 'string') {                                           // 37
    var description = onException || "callback of async function";                                  // 38
    onException = function (error) {                                                                // 39
      Meteor._debug(                                                                                // 40
        "Exception in " + description + ":",                                                        // 41
        error && error.stack || error                                                               // 42
      );                                                                                            // 43
    };                                                                                              // 44
  }                                                                                                 // 45
                                                                                                    // 46
  return function (/* arguments */) {                                                               // 47
    var savedValues = currentValues;                                                                // 48
    try {                                                                                           // 49
      currentValues = boundValues;                                                                  // 50
      var ret = func.apply(_this, _.toArray(arguments));                                            // 51
    } catch (e) {                                                                                   // 52
      // note: callback-hook currently relies on the fact that if onException                       // 53
      // throws in the browser, the wrapped call throws.                                            // 54
      onException(e);                                                                               // 55
    } finally {                                                                                     // 56
      currentValues = savedValues;                                                                  // 57
    }                                                                                               // 58
    return ret;                                                                                     // 59
  };                                                                                                // 60
};                                                                                                  // 61
                                                                                                    // 62
Meteor._nodeCodeMustBeInFiber = function () {                                                       // 63
  // no-op on browser                                                                               // 64
};                                                                                                  // 65
                                                                                                    // 66
//////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

//////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                  //
// packages/meteor/url_common.js                                                                    //
//                                                                                                  //
//////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                    //
Meteor.absoluteUrl = function (path, options) {                                                     // 1
  // path is optional                                                                               // 2
  if (!options && typeof path === 'object') {                                                       // 3
    options = path;                                                                                 // 4
    path = undefined;                                                                               // 5
  }                                                                                                 // 6
  // merge options with defaults                                                                    // 7
  options = _.extend({}, Meteor.absoluteUrl.defaultOptions, options || {});                         // 8
                                                                                                    // 9
  var url = options.rootUrl;                                                                        // 10
  if (!url)                                                                                         // 11
    throw new Error("Must pass options.rootUrl or set ROOT_URL in the server environment");         // 12
                                                                                                    // 13
  if (!/^http[s]?:\/\//i.test(url)) // url starts with 'http://' or 'https://'                      // 14
    url = 'http://' + url; // we will later fix to https if options.secure is set                   // 15
                                                                                                    // 16
  if (!/\/$/.test(url)) // url ends with '/'                                                        // 17
    url += '/';                                                                                     // 18
                                                                                                    // 19
  if (path)                                                                                         // 20
    url += path;                                                                                    // 21
                                                                                                    // 22
  // turn http to https if secure option is set, and we're not talking                              // 23
  // to localhost.                                                                                  // 24
  if (options.secure &&                                                                             // 25
      /^http:/.test(url) && // url starts with 'http:'                                              // 26
      !/http:\/\/localhost[:\/]/.test(url) && // doesn't match localhost                            // 27
      !/http:\/\/127\.0\.0\.1[:\/]/.test(url)) // or 127.0.0.1                                      // 28
    url = url.replace(/^http:/, 'https:');                                                          // 29
                                                                                                    // 30
  if (options.replaceLocalhost)                                                                     // 31
    url = url.replace(/^http:\/\/localhost([:\/].*)/, 'http://127.0.0.1$1');                        // 32
                                                                                                    // 33
  return url;                                                                                       // 34
};                                                                                                  // 35
                                                                                                    // 36
// allow later packages to override default options                                                 // 37
Meteor.absoluteUrl.defaultOptions = { };                                                            // 38
if (typeof __meteor_runtime_config__ === "object" &&                                                // 39
    __meteor_runtime_config__.ROOT_URL)                                                             // 40
  Meteor.absoluteUrl.defaultOptions.rootUrl = __meteor_runtime_config__.ROOT_URL;                   // 41
                                                                                                    // 42
                                                                                                    // 43
Meteor._relativeToSiteRootUrl = function (link) {                                                   // 44
  if (typeof __meteor_runtime_config__ === "object" &&                                              // 45
      link.substr(0, 1) === "/")                                                                    // 46
    link = (__meteor_runtime_config__.ROOT_URL_PATH_PREFIX || "") + link;                           // 47
  return link;                                                                                      // 48
};                                                                                                  // 49
                                                                                                    // 50
//////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);


/* Exports */
if (typeof Package === 'undefined') Package = {};
Package.meteor = {
  Meteor: Meteor
};

})();

//# sourceMappingURL=439f867e12888606900664d4463e1b3ee3644e44.map
//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
//                                                                      //
// If you are using Chrome, open the Developer Tools and click the gear //
// icon in its lower right corner. In the General Settings panel, turn  //
// on 'Enable source maps'.                                             //
//                                                                      //
// If you are using Firefox 23, go to `about:config` and set the        //
// `devtools.debugger.source-maps-enabled` preference to true.          //
// (The preference should be on by default in Firefox 24; versions      //
// older than 23 do not support source maps.)                           //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

/* Imports */
var Meteor = Package.meteor.Meteor;
var _ = Package.underscore._;
var JSON = Package.json.JSON;
var EJSON = Package.ejson.EJSON;
var IdMap = Package['id-map'].IdMap;
var OrderedDict = Package['ordered-dict'].OrderedDict;
var Deps = Package.deps.Deps;
var Random = Package.random.Random;
var GeoJSON = Package['geojson-utils'].GeoJSON;

/* Package-scope variables */
var LocalCollection, Minimongo, MinimongoTest, MinimongoError, isArray, isPlainObject, isIndexable, isOperatorObject, isNumericKey, regexpElementMatcher, equalityElementMatcher, ELEMENT_OPERATORS, makeLookupFunction, expandArraysInBranches, projectionDetails, pathsToTree;

(function () {

////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                    //
// packages/minimongo/minimongo.js                                                                    //
//                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                      //
// XXX type checking on selectors (graceful error if malformed)                                       // 1
                                                                                                      // 2
// LocalCollection: a set of documents that supports queries and modifiers.                           // 3
                                                                                                      // 4
// Cursor: a specification for a particular subset of documents, w/                                   // 5
// a defined order, limit, and offset.  creating a Cursor with LocalCollection.find(),                // 6
                                                                                                      // 7
// ObserveHandle: the return value of a live query.                                                   // 8
                                                                                                      // 9
LocalCollection = function (name) {                                                                   // 10
  var self = this;                                                                                    // 11
  self.name = name;                                                                                   // 12
  // _id -> document (also containing id)                                                             // 13
  self._docs = new LocalCollection._IdMap;                                                            // 14
                                                                                                      // 15
  self._observeQueue = new Meteor._SynchronousQueue();                                                // 16
                                                                                                      // 17
  self.next_qid = 1; // live query id generator                                                       // 18
                                                                                                      // 19
  // qid -> live query object. keys:                                                                  // 20
  //  ordered: bool. ordered queries have addedBefore/movedBefore callbacks.                          // 21
  //  results: array (ordered) or object (unordered) of current results                               // 22
  //    (aliased with self._docs!)                                                                    // 23
  //  resultsSnapshot: snapshot of results. null if not paused.                                       // 24
  //  cursor: Cursor object for the query.                                                            // 25
  //  selector, sorter, (callbacks): functions                                                        // 26
  self.queries = {};                                                                                  // 27
                                                                                                      // 28
  // null if not saving originals; an IdMap from id to original document value if                     // 29
  // saving originals. See comments before saveOriginals().                                           // 30
  self._savedOriginals = null;                                                                        // 31
                                                                                                      // 32
  // True when observers are paused and we should not send callbacks.                                 // 33
  self.paused = false;                                                                                // 34
};                                                                                                    // 35
                                                                                                      // 36
Minimongo = {};                                                                                       // 37
                                                                                                      // 38
// Object exported only for unit testing.                                                             // 39
// Use it to export private functions to test in Tinytest.                                            // 40
MinimongoTest = {};                                                                                   // 41
                                                                                                      // 42
LocalCollection._applyChanges = function (doc, changeFields) {                                        // 43
  _.each(changeFields, function (value, key) {                                                        // 44
    if (value === undefined)                                                                          // 45
      delete doc[key];                                                                                // 46
    else                                                                                              // 47
      doc[key] = value;                                                                               // 48
  });                                                                                                 // 49
};                                                                                                    // 50
                                                                                                      // 51
MinimongoError = function (message) {                                                                 // 52
  var e = new Error(message);                                                                         // 53
  e.name = "MinimongoError";                                                                          // 54
  return e;                                                                                           // 55
};                                                                                                    // 56
                                                                                                      // 57
                                                                                                      // 58
// options may include sort, skip, limit, reactive                                                    // 59
// sort may be any of these forms:                                                                    // 60
//     {a: 1, b: -1}                                                                                  // 61
//     [["a", "asc"], ["b", "desc"]]                                                                  // 62
//     ["a", ["b", "desc"]]                                                                           // 63
//   (in the first form you're beholden to key enumeration order in                                   // 64
//   your javascript VM)                                                                              // 65
//                                                                                                    // 66
// reactive: if given, and false, don't register with Deps (default                                   // 67
// is true)                                                                                           // 68
//                                                                                                    // 69
// XXX possibly should support retrieving a subset of fields? and                                     // 70
// have it be a hint (ignored on the client, when not copying the                                     // 71
// doc?)                                                                                              // 72
//                                                                                                    // 73
// XXX sort does not yet support subkeys ('a.b') .. fix that!                                         // 74
// XXX add one more sort form: "key"                                                                  // 75
// XXX tests                                                                                          // 76
LocalCollection.prototype.find = function (selector, options) {                                       // 77
  // default syntax for everything is to omit the selector argument.                                  // 78
  // but if selector is explicitly passed in as false or undefined, we                                // 79
  // want a selector that matches nothing.                                                            // 80
  if (arguments.length === 0)                                                                         // 81
    selector = {};                                                                                    // 82
                                                                                                      // 83
  return new LocalCollection.Cursor(this, selector, options);                                         // 84
};                                                                                                    // 85
                                                                                                      // 86
// don't call this ctor directly.  use LocalCollection.find().                                        // 87
LocalCollection.Cursor = function (collection, selector, options) {                                   // 88
  var self = this;                                                                                    // 89
  if (!options) options = {};                                                                         // 90
                                                                                                      // 91
  self.collection = collection;                                                                       // 92
  self.sorter = null;                                                                                 // 93
                                                                                                      // 94
  if (LocalCollection._selectorIsId(selector)) {                                                      // 95
    // stash for fast path                                                                            // 96
    self._selectorId = selector;                                                                      // 97
    self.matcher = new Minimongo.Matcher(selector, self);                                             // 98
  } else {                                                                                            // 99
    self._selectorId = undefined;                                                                     // 100
    self.matcher = new Minimongo.Matcher(selector, self);                                             // 101
    if (self.matcher.hasGeoQuery() || options.sort) {                                                 // 102
      self.sorter = new Minimongo.Sorter(options.sort || [],                                          // 103
                                         { matcher: self.matcher });                                  // 104
    }                                                                                                 // 105
  }                                                                                                   // 106
  self.skip = options.skip;                                                                           // 107
  self.limit = options.limit;                                                                         // 108
  self.fields = options.fields;                                                                       // 109
                                                                                                      // 110
  if (self.fields)                                                                                    // 111
    self.projectionFn = LocalCollection._compileProjection(self.fields);                              // 112
                                                                                                      // 113
  self._transform = LocalCollection.wrapTransform(options.transform);                                 // 114
                                                                                                      // 115
  // db_objects is an array of the objects that match the cursor. (It's always                        // 116
  // an array, never an IdMap: LocalCollection.Cursor is always ordered.)                             // 117
  self.db_objects = null;                                                                             // 118
  self.cursor_pos = 0;                                                                                // 119
                                                                                                      // 120
  // by default, queries register w/ Deps when it is available.                                       // 121
  if (typeof Deps !== "undefined")                                                                    // 122
    self.reactive = (options.reactive === undefined) ? true : options.reactive;                       // 123
};                                                                                                    // 124
                                                                                                      // 125
LocalCollection.Cursor.prototype.rewind = function () {                                               // 126
  var self = this;                                                                                    // 127
  self.db_objects = null;                                                                             // 128
  self.cursor_pos = 0;                                                                                // 129
};                                                                                                    // 130
                                                                                                      // 131
LocalCollection.prototype.findOne = function (selector, options) {                                    // 132
  if (arguments.length === 0)                                                                         // 133
    selector = {};                                                                                    // 134
                                                                                                      // 135
  // NOTE: by setting limit 1 here, we end up using very inefficient                                  // 136
  // code that recomputes the whole query on each update. The upside is                               // 137
  // that when you reactively depend on a findOne you only get                                        // 138
  // invalidated when the found object changes, not any object in the                                 // 139
  // collection. Most findOne will be by id, which has a fast path, so                                // 140
  // this might not be a big deal. In most cases, invalidation causes                                 // 141
  // the called to re-query anyway, so this should be a net performance                               // 142
  // improvement.                                                                                     // 143
  options = options || {};                                                                            // 144
  options.limit = 1;                                                                                  // 145
                                                                                                      // 146
  return this.find(selector, options).fetch()[0];                                                     // 147
};                                                                                                    // 148
                                                                                                      // 149
LocalCollection.Cursor.prototype.forEach = function (callback, thisArg) {                             // 150
  var self = this;                                                                                    // 151
                                                                                                      // 152
  if (self.db_objects === null)                                                                       // 153
    self.db_objects = self._getRawObjects({ordered: true});                                           // 154
                                                                                                      // 155
  if (self.reactive)                                                                                  // 156
    self._depend({                                                                                    // 157
      addedBefore: true,                                                                              // 158
      removed: true,                                                                                  // 159
      changed: true,                                                                                  // 160
      movedBefore: true});                                                                            // 161
                                                                                                      // 162
  while (self.cursor_pos < self.db_objects.length) {                                                  // 163
    var elt = EJSON.clone(self.db_objects[self.cursor_pos]);                                          // 164
    if (self.projectionFn)                                                                            // 165
      elt = self.projectionFn(elt);                                                                   // 166
    if (self._transform)                                                                              // 167
      elt = self._transform(elt);                                                                     // 168
    callback.call(thisArg, elt, self.cursor_pos, self);                                               // 169
    ++self.cursor_pos;                                                                                // 170
  }                                                                                                   // 171
};                                                                                                    // 172
                                                                                                      // 173
LocalCollection.Cursor.prototype.getTransform = function () {                                         // 174
  return this._transform;                                                                             // 175
};                                                                                                    // 176
                                                                                                      // 177
LocalCollection.Cursor.prototype.map = function (callback, thisArg) {                                 // 178
  var self = this;                                                                                    // 179
  var res = [];                                                                                       // 180
  self.forEach(function (doc, index) {                                                                // 181
    res.push(callback.call(thisArg, doc, index, self));                                               // 182
  });                                                                                                 // 183
  return res;                                                                                         // 184
};                                                                                                    // 185
                                                                                                      // 186
LocalCollection.Cursor.prototype.fetch = function () {                                                // 187
  var self = this;                                                                                    // 188
  var res = [];                                                                                       // 189
  self.forEach(function (doc) {                                                                       // 190
    res.push(doc);                                                                                    // 191
  });                                                                                                 // 192
  return res;                                                                                         // 193
};                                                                                                    // 194
                                                                                                      // 195
LocalCollection.Cursor.prototype.count = function () {                                                // 196
  var self = this;                                                                                    // 197
                                                                                                      // 198
  if (self.reactive)                                                                                  // 199
    self._depend({added: true, removed: true},                                                        // 200
                 true /* allow the observe to be unordered */);                                       // 201
                                                                                                      // 202
  if (self.db_objects === null)                                                                       // 203
    self.db_objects = self._getRawObjects({ordered: true});                                           // 204
                                                                                                      // 205
  return self.db_objects.length;                                                                      // 206
};                                                                                                    // 207
                                                                                                      // 208
LocalCollection.Cursor.prototype._publishCursor = function (sub) {                                    // 209
  var self = this;                                                                                    // 210
  if (! self.collection.name)                                                                         // 211
    throw new Error("Can't publish a cursor from a collection without a name.");                      // 212
  var collection = self.collection.name;                                                              // 213
                                                                                                      // 214
  // XXX minimongo should not depend on mongo-livedata!                                               // 215
  return Meteor.Collection._publishCursor(self, sub, collection);                                     // 216
};                                                                                                    // 217
                                                                                                      // 218
LocalCollection.Cursor.prototype._getCollectionName = function () {                                   // 219
  var self = this;                                                                                    // 220
  return self.collection.name;                                                                        // 221
};                                                                                                    // 222
                                                                                                      // 223
LocalCollection._observeChangesCallbacksAreOrdered = function (callbacks) {                           // 224
  if (callbacks.added && callbacks.addedBefore)                                                       // 225
    throw new Error("Please specify only one of added() and addedBefore()");                          // 226
  return !!(callbacks.addedBefore || callbacks.movedBefore);                                          // 227
};                                                                                                    // 228
                                                                                                      // 229
LocalCollection._observeCallbacksAreOrdered = function (callbacks) {                                  // 230
  if (callbacks.addedAt && callbacks.added)                                                           // 231
    throw new Error("Please specify only one of added() and addedAt()");                              // 232
  if (callbacks.changedAt && callbacks.changed)                                                       // 233
    throw new Error("Please specify only one of changed() and changedAt()");                          // 234
  if (callbacks.removed && callbacks.removedAt)                                                       // 235
    throw new Error("Please specify only one of removed() and removedAt()");                          // 236
                                                                                                      // 237
  return !!(callbacks.addedAt || callbacks.movedTo || callbacks.changedAt                             // 238
            || callbacks.removedAt);                                                                  // 239
};                                                                                                    // 240
                                                                                                      // 241
// the handle that comes back from observe.                                                           // 242
LocalCollection.ObserveHandle = function () {};                                                       // 243
                                                                                                      // 244
// options to contain:                                                                                // 245
//  * callbacks for observe():                                                                        // 246
//    - addedAt (document, atIndex)                                                                   // 247
//    - added (document)                                                                              // 248
//    - changedAt (newDocument, oldDocument, atIndex)                                                 // 249
//    - changed (newDocument, oldDocument)                                                            // 250
//    - removedAt (document, atIndex)                                                                 // 251
//    - removed (document)                                                                            // 252
//    - movedTo (document, oldIndex, newIndex)                                                        // 253
//                                                                                                    // 254
// attributes available on returned query handle:                                                     // 255
//  * stop(): end updates                                                                             // 256
//  * collection: the collection this query is querying                                               // 257
//                                                                                                    // 258
// iff x is a returned query handle, (x instanceof                                                    // 259
// LocalCollection.ObserveHandle) is true                                                             // 260
//                                                                                                    // 261
// initial results delivered through added callback                                                   // 262
// XXX maybe callbacks should take a list of objects, to expose transactions?                         // 263
// XXX maybe support field limiting (to limit what you're notified on)                                // 264
                                                                                                      // 265
_.extend(LocalCollection.Cursor.prototype, {                                                          // 266
  observe: function (options) {                                                                       // 267
    var self = this;                                                                                  // 268
    return LocalCollection._observeFromObserveChanges(self, options);                                 // 269
  },                                                                                                  // 270
  observeChanges: function (options) {                                                                // 271
    var self = this;                                                                                  // 272
                                                                                                      // 273
    var ordered = LocalCollection._observeChangesCallbacksAreOrdered(options);                        // 274
                                                                                                      // 275
    // there are several places that assume you aren't combining skip/limit with                      // 276
    // unordered observe.  eg, update's EJSON.clone, and the "there are several"                      // 277
    // comment in _modifyAndNotify                                                                    // 278
    // XXX allow skip/limit with unordered observe                                                    // 279
    if (!options._allow_unordered && !ordered && (self.skip || self.limit))                           // 280
      throw new Error("must use ordered observe with skip or limit");                                 // 281
                                                                                                      // 282
    if (self.fields && (self.fields._id === 0 || self.fields._id === false))                          // 283
      throw Error("You may not observe a cursor with {fields: {_id: 0}}");                            // 284
                                                                                                      // 285
    var query = {                                                                                     // 286
      matcher: self.matcher, // not fast pathed                                                       // 287
      sorter: ordered && self.sorter,                                                                 // 288
      distances: (                                                                                    // 289
        self.matcher.hasGeoQuery() && ordered && new LocalCollection._IdMap),                         // 290
      resultsSnapshot: null,                                                                          // 291
      ordered: ordered,                                                                               // 292
      cursor: self,                                                                                   // 293
      projectionFn: self.projectionFn                                                                 // 294
    };                                                                                                // 295
    var qid;                                                                                          // 296
                                                                                                      // 297
    // Non-reactive queries call added[Before] and then never call anything                           // 298
    // else.                                                                                          // 299
    if (self.reactive) {                                                                              // 300
      qid = self.collection.next_qid++;                                                               // 301
      self.collection.queries[qid] = query;                                                           // 302
    }                                                                                                 // 303
    query.results = self._getRawObjects({                                                             // 304
      ordered: ordered, distances: query.distances});                                                 // 305
    if (self.collection.paused)                                                                       // 306
      query.resultsSnapshot = (ordered ? [] : new LocalCollection._IdMap);                            // 307
                                                                                                      // 308
    // wrap callbacks we were passed. callbacks only fire when not paused and                         // 309
    // are never undefined                                                                            // 310
    // Filters out blacklisted fields according to cursor's projection.                               // 311
    // XXX wrong place for this?                                                                      // 312
                                                                                                      // 313
    // furthermore, callbacks enqueue until the operation we're working on is                         // 314
    // done.                                                                                          // 315
    var wrapCallback = function (f, fieldsIndex, ignoreEmptyFields) {                                 // 316
      if (!f)                                                                                         // 317
        return function () {};                                                                        // 318
      return function (/*args*/) {                                                                    // 319
        var context = this;                                                                           // 320
        var args = arguments;                                                                         // 321
                                                                                                      // 322
        if (self.collection.paused)                                                                   // 323
          return;                                                                                     // 324
                                                                                                      // 325
        if (fieldsIndex !== undefined && self.projectionFn) {                                         // 326
          args[fieldsIndex] = self.projectionFn(args[fieldsIndex]);                                   // 327
          if (ignoreEmptyFields && _.isEmpty(args[fieldsIndex]))                                      // 328
            return;                                                                                   // 329
        }                                                                                             // 330
                                                                                                      // 331
        self.collection._observeQueue.queueTask(function () {                                         // 332
          f.apply(context, args);                                                                     // 333
        });                                                                                           // 334
      };                                                                                              // 335
    };                                                                                                // 336
    query.added = wrapCallback(options.added, 1);                                                     // 337
    query.changed = wrapCallback(options.changed, 1, true);                                           // 338
    query.removed = wrapCallback(options.removed);                                                    // 339
    if (ordered) {                                                                                    // 340
      query.addedBefore = wrapCallback(options.addedBefore, 1);                                       // 341
      query.movedBefore = wrapCallback(options.movedBefore);                                          // 342
    }                                                                                                 // 343
                                                                                                      // 344
    if (!options._suppress_initial && !self.collection.paused) {                                      // 345
      // XXX unify ordered and unordered interface                                                    // 346
      var each = ordered                                                                              // 347
            ? _.bind(_.each, null, query.results)                                                     // 348
            : _.bind(query.results.forEach, query.results);                                           // 349
      each(function (doc) {                                                                           // 350
        var fields = EJSON.clone(doc);                                                                // 351
                                                                                                      // 352
        delete fields._id;                                                                            // 353
        if (ordered)                                                                                  // 354
          query.addedBefore(doc._id, fields, null);                                                   // 355
        query.added(doc._id, fields);                                                                 // 356
      });                                                                                             // 357
    }                                                                                                 // 358
                                                                                                      // 359
    var handle = new LocalCollection.ObserveHandle;                                                   // 360
    _.extend(handle, {                                                                                // 361
      collection: self.collection,                                                                    // 362
      stop: function () {                                                                             // 363
        if (self.reactive)                                                                            // 364
          delete self.collection.queries[qid];                                                        // 365
      }                                                                                               // 366
    });                                                                                               // 367
                                                                                                      // 368
    if (self.reactive && Deps.active) {                                                               // 369
      // XXX in many cases, the same observe will be recreated when                                   // 370
      // the current autorun is rerun.  we could save work by                                         // 371
      // letting it linger across rerun and potentially get                                           // 372
      // repurposed if the same observe is performed, using logic                                     // 373
      // similar to that of Meteor.subscribe.                                                         // 374
      Deps.onInvalidate(function () {                                                                 // 375
        handle.stop();                                                                                // 376
      });                                                                                             // 377
    }                                                                                                 // 378
    // run the observe callbacks resulting from the initial contents                                  // 379
    // before we leave the observe.                                                                   // 380
    self.collection._observeQueue.drain();                                                            // 381
                                                                                                      // 382
    return handle;                                                                                    // 383
  }                                                                                                   // 384
});                                                                                                   // 385
                                                                                                      // 386
// Returns a collection of matching objects, but doesn't deep copy them.                              // 387
//                                                                                                    // 388
// If ordered is set, returns a sorted array, respecting sorter, skip, and limit                      // 389
// properties of the query.  if sorter is falsey, no sort -- you get the natural                      // 390
// order.                                                                                             // 391
//                                                                                                    // 392
// If ordered is not set, returns an object mapping from ID to doc (sorter, skip                      // 393
// and limit should not be set).                                                                      // 394
//                                                                                                    // 395
// If ordered is set and this cursor is a $near geoquery, then this function                          // 396
// will use an _IdMap to track each distance from the $near argument point in                         // 397
// order to use it as a sort key. If an _IdMap is passed in the 'distances'                           // 398
// argument, this function will clear it and use it for this purpose (otherwise                       // 399
// it will just create its own _IdMap). The observeChanges implementation uses                        // 400
// this to remember the distances after this function returns.                                        // 401
LocalCollection.Cursor.prototype._getRawObjects = function (options) {                                // 402
  var self = this;                                                                                    // 403
  options = options || {};                                                                            // 404
                                                                                                      // 405
  // XXX use OrderedDict instead of array, and make IdMap and OrderedDict                             // 406
  // compatible                                                                                       // 407
  var results = options.ordered ? [] : new LocalCollection._IdMap;                                    // 408
                                                                                                      // 409
  // fast path for single ID value                                                                    // 410
  if (self._selectorId !== undefined) {                                                               // 411
    // If you have non-zero skip and ask for a single id, you get                                     // 412
    // nothing. This is so it matches the behavior of the '{_id: foo}'                                // 413
    // path.                                                                                          // 414
    if (self.skip)                                                                                    // 415
      return results;                                                                                 // 416
                                                                                                      // 417
    var selectedDoc = self.collection._docs.get(self._selectorId);                                    // 418
    if (selectedDoc) {                                                                                // 419
      if (options.ordered)                                                                            // 420
        results.push(selectedDoc);                                                                    // 421
      else                                                                                            // 422
        results.set(self._selectorId, selectedDoc);                                                   // 423
    }                                                                                                 // 424
    return results;                                                                                   // 425
  }                                                                                                   // 426
                                                                                                      // 427
  // slow path for arbitrary selector, sort, skip, limit                                              // 428
                                                                                                      // 429
  // in the observeChanges case, distances is actually part of the "query" (ie,                       // 430
  // live results set) object.  in other cases, distances is only used inside                         // 431
  // this function.                                                                                   // 432
  var distances;                                                                                      // 433
  if (self.matcher.hasGeoQuery() && options.ordered) {                                                // 434
    if (options.distances) {                                                                          // 435
      distances = options.distances;                                                                  // 436
      distances.clear();                                                                              // 437
    } else {                                                                                          // 438
      distances = new LocalCollection._IdMap();                                                       // 439
    }                                                                                                 // 440
  }                                                                                                   // 441
                                                                                                      // 442
  self.collection._docs.forEach(function (doc, id) {                                                  // 443
    var matchResult = self.matcher.documentMatches(doc);                                              // 444
    if (matchResult.result) {                                                                         // 445
      if (options.ordered) {                                                                          // 446
        results.push(doc);                                                                            // 447
        if (distances && matchResult.distance !== undefined)                                          // 448
          distances.set(id, matchResult.distance);                                                    // 449
      } else {                                                                                        // 450
        results.set(id, doc);                                                                         // 451
      }                                                                                               // 452
    }                                                                                                 // 453
    // Fast path for limited unsorted queries.                                                        // 454
    // XXX 'length' check here seems wrong for ordered                                                // 455
    if (self.limit && !self.skip && !self.sorter &&                                                   // 456
        results.length === self.limit)                                                                // 457
      return false;  // break                                                                         // 458
    return true;  // continue                                                                         // 459
  });                                                                                                 // 460
                                                                                                      // 461
  if (!options.ordered)                                                                               // 462
    return results;                                                                                   // 463
                                                                                                      // 464
  if (self.sorter) {                                                                                  // 465
    var comparator = self.sorter.getComparator({distances: distances});                               // 466
    results.sort(comparator);                                                                         // 467
  }                                                                                                   // 468
                                                                                                      // 469
  var idx_start = self.skip || 0;                                                                     // 470
  var idx_end = self.limit ? (self.limit + idx_start) : results.length;                               // 471
  return results.slice(idx_start, idx_end);                                                           // 472
};                                                                                                    // 473
                                                                                                      // 474
// XXX Maybe we need a version of observe that just calls a callback if                               // 475
// anything changed.                                                                                  // 476
LocalCollection.Cursor.prototype._depend = function (changers, _allow_unordered) {                    // 477
  var self = this;                                                                                    // 478
                                                                                                      // 479
  if (Deps.active) {                                                                                  // 480
    var v = new Deps.Dependency;                                                                      // 481
    v.depend();                                                                                       // 482
    var notifyChange = _.bind(v.changed, v);                                                          // 483
                                                                                                      // 484
    var options = {                                                                                   // 485
      _suppress_initial: true,                                                                        // 486
      _allow_unordered: _allow_unordered                                                              // 487
    };                                                                                                // 488
    _.each(['added', 'changed', 'removed', 'addedBefore', 'movedBefore'],                             // 489
           function (fnName) {                                                                        // 490
             if (changers[fnName])                                                                    // 491
               options[fnName] = notifyChange;                                                        // 492
           });                                                                                        // 493
                                                                                                      // 494
    // observeChanges will stop() when this computation is invalidated                                // 495
    self.observeChanges(options);                                                                     // 496
  }                                                                                                   // 497
};                                                                                                    // 498
                                                                                                      // 499
// XXX enforce rule that field names can't start with '$' or contain '.'                              // 500
// (real mongodb does in fact enforce this)                                                           // 501
// XXX possibly enforce that 'undefined' does not appear (we assume                                   // 502
// this in our handling of null and $exists)                                                          // 503
LocalCollection.prototype.insert = function (doc, callback) {                                         // 504
  var self = this;                                                                                    // 505
  doc = EJSON.clone(doc);                                                                             // 506
                                                                                                      // 507
  if (!_.has(doc, '_id')) {                                                                           // 508
    // if you really want to use ObjectIDs, set this global.                                          // 509
    // Meteor.Collection specifies its own ids and does not use this code.                            // 510
    doc._id = LocalCollection._useOID ? new LocalCollection._ObjectID()                               // 511
                                      : Random.id();                                                  // 512
  }                                                                                                   // 513
  var id = doc._id;                                                                                   // 514
                                                                                                      // 515
  if (self._docs.has(id))                                                                             // 516
    throw MinimongoError("Duplicate _id '" + id + "'");                                               // 517
                                                                                                      // 518
  self._saveOriginal(id, undefined);                                                                  // 519
  self._docs.set(id, doc);                                                                            // 520
                                                                                                      // 521
  var queriesToRecompute = [];                                                                        // 522
  // trigger live queries that match                                                                  // 523
  for (var qid in self.queries) {                                                                     // 524
    var query = self.queries[qid];                                                                    // 525
    var matchResult = query.matcher.documentMatches(doc);                                             // 526
    if (matchResult.result) {                                                                         // 527
      if (query.distances && matchResult.distance !== undefined)                                      // 528
        query.distances.set(id, matchResult.distance);                                                // 529
      if (query.cursor.skip || query.cursor.limit)                                                    // 530
        queriesToRecompute.push(qid);                                                                 // 531
      else                                                                                            // 532
        LocalCollection._insertInResults(query, doc);                                                 // 533
    }                                                                                                 // 534
  }                                                                                                   // 535
                                                                                                      // 536
  _.each(queriesToRecompute, function (qid) {                                                         // 537
    if (self.queries[qid])                                                                            // 538
      LocalCollection._recomputeResults(self.queries[qid]);                                           // 539
  });                                                                                                 // 540
  self._observeQueue.drain();                                                                         // 541
                                                                                                      // 542
  // Defer because the caller likely doesn't expect the callback to be run                            // 543
  // immediately.                                                                                     // 544
  if (callback)                                                                                       // 545
    Meteor.defer(function () {                                                                        // 546
      callback(null, id);                                                                             // 547
    });                                                                                               // 548
  return id;                                                                                          // 549
};                                                                                                    // 550
                                                                                                      // 551
// Iterates over a subset of documents that could match selector; calls                               // 552
// f(doc, id) on each of them.  Specifically, if selector specifies                                   // 553
// specific _id's, it only looks at those.  doc is *not* cloned: it is the                            // 554
// same object that is in _docs.                                                                      // 555
LocalCollection.prototype._eachPossiblyMatchingDoc = function (selector, f) {                         // 556
  var self = this;                                                                                    // 557
  var specificIds = LocalCollection._idsMatchedBySelector(selector);                                  // 558
  if (specificIds) {                                                                                  // 559
    for (var i = 0; i < specificIds.length; ++i) {                                                    // 560
      var id = specificIds[i];                                                                        // 561
      var doc = self._docs.get(id);                                                                   // 562
      if (doc) {                                                                                      // 563
        var breakIfFalse = f(doc, id);                                                                // 564
        if (breakIfFalse === false)                                                                   // 565
          break;                                                                                      // 566
      }                                                                                               // 567
    }                                                                                                 // 568
  } else {                                                                                            // 569
    self._docs.forEach(f);                                                                            // 570
  }                                                                                                   // 571
};                                                                                                    // 572
                                                                                                      // 573
LocalCollection.prototype.remove = function (selector, callback) {                                    // 574
  var self = this;                                                                                    // 575
                                                                                                      // 576
  // Easy special case: if we're not calling observeChanges callbacks and we're                       // 577
  // not saving originals and we got asked to remove everything, then just empty                      // 578
  // everything directly.                                                                             // 579
  if (self.paused && !self._savedOriginals && EJSON.equals(selector, {})) {                           // 580
    var result = self._docs.size();                                                                   // 581
    self._docs.clear();                                                                               // 582
    _.each(self.queries, function (query) {                                                           // 583
      if (query.ordered) {                                                                            // 584
        query.results = [];                                                                           // 585
      } else {                                                                                        // 586
        query.results.clear();                                                                        // 587
      }                                                                                               // 588
    });                                                                                               // 589
    if (callback) {                                                                                   // 590
      Meteor.defer(function () {                                                                      // 591
        callback(null, result);                                                                       // 592
      });                                                                                             // 593
    }                                                                                                 // 594
    return result;                                                                                    // 595
  }                                                                                                   // 596
                                                                                                      // 597
  var matcher = new Minimongo.Matcher(selector, self);                                                // 598
  var remove = [];                                                                                    // 599
  self._eachPossiblyMatchingDoc(selector, function (doc, id) {                                        // 600
    if (matcher.documentMatches(doc).result)                                                          // 601
      remove.push(id);                                                                                // 602
  });                                                                                                 // 603
                                                                                                      // 604
  var queriesToRecompute = [];                                                                        // 605
  var queryRemove = [];                                                                               // 606
  for (var i = 0; i < remove.length; i++) {                                                           // 607
    var removeId = remove[i];                                                                         // 608
    var removeDoc = self._docs.get(removeId);                                                         // 609
    _.each(self.queries, function (query, qid) {                                                      // 610
      if (query.matcher.documentMatches(removeDoc).result) {                                          // 611
        if (query.cursor.skip || query.cursor.limit)                                                  // 612
          queriesToRecompute.push(qid);                                                               // 613
        else                                                                                          // 614
          queryRemove.push({qid: qid, doc: removeDoc});                                               // 615
      }                                                                                               // 616
    });                                                                                               // 617
    self._saveOriginal(removeId, removeDoc);                                                          // 618
    self._docs.remove(removeId);                                                                      // 619
  }                                                                                                   // 620
                                                                                                      // 621
  // run live query callbacks _after_ we've removed the documents.                                    // 622
  _.each(queryRemove, function (remove) {                                                             // 623
    var query = self.queries[remove.qid];                                                             // 624
    if (query) {                                                                                      // 625
      query.distances && query.distances.remove(remove.doc._id);                                      // 626
      LocalCollection._removeFromResults(query, remove.doc);                                          // 627
    }                                                                                                 // 628
  });                                                                                                 // 629
  _.each(queriesToRecompute, function (qid) {                                                         // 630
    var query = self.queries[qid];                                                                    // 631
    if (query)                                                                                        // 632
      LocalCollection._recomputeResults(query);                                                       // 633
  });                                                                                                 // 634
  self._observeQueue.drain();                                                                         // 635
  result = remove.length;                                                                             // 636
  if (callback)                                                                                       // 637
    Meteor.defer(function () {                                                                        // 638
      callback(null, result);                                                                         // 639
    });                                                                                               // 640
  return result;                                                                                      // 641
};                                                                                                    // 642
                                                                                                      // 643
// XXX atomicity: if multi is true, and one modification fails, do                                    // 644
// we rollback the whole operation, or what?                                                          // 645
LocalCollection.prototype.update = function (selector, mod, options, callback) {                      // 646
  var self = this;                                                                                    // 647
  if (! callback && options instanceof Function) {                                                    // 648
    callback = options;                                                                               // 649
    options = null;                                                                                   // 650
  }                                                                                                   // 651
  if (!options) options = {};                                                                         // 652
                                                                                                      // 653
  var matcher = new Minimongo.Matcher(selector, self);                                                // 654
                                                                                                      // 655
  // Save the original results of any query that we might need to                                     // 656
  // _recomputeResults on, because _modifyAndNotify will mutate the objects in                        // 657
  // it. (We don't need to save the original results of paused queries because                        // 658
  // they already have a resultsSnapshot and we won't be diffing in                                   // 659
  // _recomputeResults.)                                                                              // 660
  var qidToOriginalResults = {};                                                                      // 661
  _.each(self.queries, function (query, qid) {                                                        // 662
    // XXX for now, skip/limit implies ordered observe, so query.results is                           // 663
    // always an array                                                                                // 664
    if ((query.cursor.skip || query.cursor.limit) && !query.paused)                                   // 665
      qidToOriginalResults[qid] = EJSON.clone(query.results);                                         // 666
  });                                                                                                 // 667
  var recomputeQids = {};                                                                             // 668
                                                                                                      // 669
  var updateCount = 0;                                                                                // 670
                                                                                                      // 671
  self._eachPossiblyMatchingDoc(selector, function (doc, id) {                                        // 672
    var queryResult = matcher.documentMatches(doc);                                                   // 673
    if (queryResult.result) {                                                                         // 674
      // XXX Should we save the original even if mod ends up being a no-op?                           // 675
      self._saveOriginal(id, doc);                                                                    // 676
      self._modifyAndNotify(doc, mod, recomputeQids, queryResult.arrayIndices);                       // 677
      ++updateCount;                                                                                  // 678
      if (!options.multi)                                                                             // 679
        return false;  // break                                                                       // 680
    }                                                                                                 // 681
    return true;                                                                                      // 682
  });                                                                                                 // 683
                                                                                                      // 684
  _.each(recomputeQids, function (dummy, qid) {                                                       // 685
    var query = self.queries[qid];                                                                    // 686
    if (query)                                                                                        // 687
      LocalCollection._recomputeResults(query,                                                        // 688
                                        qidToOriginalResults[qid]);                                   // 689
  });                                                                                                 // 690
  self._observeQueue.drain();                                                                         // 691
                                                                                                      // 692
  // If we are doing an upsert, and we didn't modify any documents yet, then                          // 693
  // it's time to do an insert. Figure out what document we are inserting, and                        // 694
  // generate an id for it.                                                                           // 695
  var insertedId;                                                                                     // 696
  if (updateCount === 0 && options.upsert) {                                                          // 697
    var newDoc = LocalCollection._removeDollarOperators(selector);                                    // 698
    LocalCollection._modify(newDoc, mod, {isInsert: true});                                           // 699
    if (! newDoc._id && options.insertedId)                                                           // 700
      newDoc._id = options.insertedId;                                                                // 701
    insertedId = self.insert(newDoc);                                                                 // 702
    updateCount = 1;                                                                                  // 703
  }                                                                                                   // 704
                                                                                                      // 705
  // Return the number of affected documents, or in the upsert case, an object                        // 706
  // containing the number of affected docs and the id of the doc that was                            // 707
  // inserted, if any.                                                                                // 708
  var result;                                                                                         // 709
  if (options._returnObject) {                                                                        // 710
    result = {                                                                                        // 711
      numberAffected: updateCount                                                                     // 712
    };                                                                                                // 713
    if (insertedId !== undefined)                                                                     // 714
      result.insertedId = insertedId;                                                                 // 715
  } else {                                                                                            // 716
    result = updateCount;                                                                             // 717
  }                                                                                                   // 718
                                                                                                      // 719
  if (callback)                                                                                       // 720
    Meteor.defer(function () {                                                                        // 721
      callback(null, result);                                                                         // 722
    });                                                                                               // 723
  return result;                                                                                      // 724
};                                                                                                    // 725
                                                                                                      // 726
// A convenience wrapper on update. LocalCollection.upsert(sel, mod) is                               // 727
// equivalent to LocalCollection.update(sel, mod, { upsert: true, _returnObject:                      // 728
// true }).                                                                                           // 729
LocalCollection.prototype.upsert = function (selector, mod, options, callback) {                      // 730
  var self = this;                                                                                    // 731
  if (! callback && typeof options === "function") {                                                  // 732
    callback = options;                                                                               // 733
    options = {};                                                                                     // 734
  }                                                                                                   // 735
  return self.update(selector, mod, _.extend({}, options, {                                           // 736
    upsert: true,                                                                                     // 737
    _returnObject: true                                                                               // 738
  }), callback);                                                                                      // 739
};                                                                                                    // 740
                                                                                                      // 741
LocalCollection.prototype._modifyAndNotify = function (                                               // 742
    doc, mod, recomputeQids, arrayIndices) {                                                          // 743
  var self = this;                                                                                    // 744
                                                                                                      // 745
  var matched_before = {};                                                                            // 746
  for (var qid in self.queries) {                                                                     // 747
    var query = self.queries[qid];                                                                    // 748
    if (query.ordered) {                                                                              // 749
      matched_before[qid] = query.matcher.documentMatches(doc).result;                                // 750
    } else {                                                                                          // 751
      // Because we don't support skip or limit (yet) in unordered queries, we                        // 752
      // can just do a direct lookup.                                                                 // 753
      matched_before[qid] = query.results.has(doc._id);                                               // 754
    }                                                                                                 // 755
  }                                                                                                   // 756
                                                                                                      // 757
  var old_doc = EJSON.clone(doc);                                                                     // 758
                                                                                                      // 759
  LocalCollection._modify(doc, mod, {arrayIndices: arrayIndices});                                    // 760
                                                                                                      // 761
  for (qid in self.queries) {                                                                         // 762
    query = self.queries[qid];                                                                        // 763
    var before = matched_before[qid];                                                                 // 764
    var afterMatch = query.matcher.documentMatches(doc);                                              // 765
    var after = afterMatch.result;                                                                    // 766
    if (after && query.distances && afterMatch.distance !== undefined)                                // 767
      query.distances.set(doc._id, afterMatch.distance);                                              // 768
                                                                                                      // 769
    if (query.cursor.skip || query.cursor.limit) {                                                    // 770
      // We need to recompute any query where the doc may have been in the                            // 771
      // cursor's window either before or after the update. (Note that if skip                        // 772
      // or limit is set, "before" and "after" being true do not necessarily                          // 773
      // mean that the document is in the cursor's output after skip/limit is                         // 774
      // applied... but if they are false, then the document definitely is NOT                        // 775
      // in the output. So it's safe to skip recompute if neither before or                           // 776
      // after are true.)                                                                             // 777
      if (before || after)                                                                            // 778
        recomputeQids[qid] = true;                                                                    // 779
    } else if (before && !after) {                                                                    // 780
      LocalCollection._removeFromResults(query, doc);                                                 // 781
    } else if (!before && after) {                                                                    // 782
      LocalCollection._insertInResults(query, doc);                                                   // 783
    } else if (before && after) {                                                                     // 784
      LocalCollection._updateInResults(query, doc, old_doc);                                          // 785
    }                                                                                                 // 786
  }                                                                                                   // 787
};                                                                                                    // 788
                                                                                                      // 789
// XXX the sorted-query logic below is laughably inefficient. we'll                                   // 790
// need to come up with a better datastructure for this.                                              // 791
//                                                                                                    // 792
// XXX the logic for observing with a skip or a limit is even more                                    // 793
// laughably inefficient. we recompute the whole results every time!                                  // 794
                                                                                                      // 795
LocalCollection._insertInResults = function (query, doc) {                                            // 796
  var fields = EJSON.clone(doc);                                                                      // 797
  delete fields._id;                                                                                  // 798
  if (query.ordered) {                                                                                // 799
    if (!query.sorter) {                                                                              // 800
      query.addedBefore(doc._id, fields, null);                                                       // 801
      query.results.push(doc);                                                                        // 802
    } else {                                                                                          // 803
      var i = LocalCollection._insertInSortedList(                                                    // 804
        query.sorter.getComparator({distances: query.distances}),                                     // 805
        query.results, doc);                                                                          // 806
      var next = query.results[i+1];                                                                  // 807
      if (next)                                                                                       // 808
        next = next._id;                                                                              // 809
      else                                                                                            // 810
        next = null;                                                                                  // 811
      query.addedBefore(doc._id, fields, next);                                                       // 812
    }                                                                                                 // 813
    query.added(doc._id, fields);                                                                     // 814
  } else {                                                                                            // 815
    query.added(doc._id, fields);                                                                     // 816
    query.results.set(doc._id, doc);                                                                  // 817
  }                                                                                                   // 818
};                                                                                                    // 819
                                                                                                      // 820
LocalCollection._removeFromResults = function (query, doc) {                                          // 821
  if (query.ordered) {                                                                                // 822
    var i = LocalCollection._findInOrderedResults(query, doc);                                        // 823
    query.removed(doc._id);                                                                           // 824
    query.results.splice(i, 1);                                                                       // 825
  } else {                                                                                            // 826
    var id = doc._id;  // in case callback mutates doc                                                // 827
    query.removed(doc._id);                                                                           // 828
    query.results.remove(id);                                                                         // 829
  }                                                                                                   // 830
};                                                                                                    // 831
                                                                                                      // 832
LocalCollection._updateInResults = function (query, doc, old_doc) {                                   // 833
  if (!EJSON.equals(doc._id, old_doc._id))                                                            // 834
    throw new Error("Can't change a doc's _id while updating");                                       // 835
  var changedFields = LocalCollection._makeChangedFields(doc, old_doc);                               // 836
  if (!query.ordered) {                                                                               // 837
    if (!_.isEmpty(changedFields)) {                                                                  // 838
      query.changed(doc._id, changedFields);                                                          // 839
      query.results.set(doc._id, doc);                                                                // 840
    }                                                                                                 // 841
    return;                                                                                           // 842
  }                                                                                                   // 843
                                                                                                      // 844
  var orig_idx = LocalCollection._findInOrderedResults(query, doc);                                   // 845
                                                                                                      // 846
  if (!_.isEmpty(changedFields))                                                                      // 847
    query.changed(doc._id, changedFields);                                                            // 848
  if (!query.sorter)                                                                                  // 849
    return;                                                                                           // 850
                                                                                                      // 851
  // just take it out and put it back in again, and see if the index                                  // 852
  // changes                                                                                          // 853
  query.results.splice(orig_idx, 1);                                                                  // 854
  var new_idx = LocalCollection._insertInSortedList(                                                  // 855
    query.sorter.getComparator({distances: query.distances}),                                         // 856
    query.results, doc);                                                                              // 857
  if (orig_idx !== new_idx) {                                                                         // 858
    var next = query.results[new_idx+1];                                                              // 859
    if (next)                                                                                         // 860
      next = next._id;                                                                                // 861
    else                                                                                              // 862
      next = null;                                                                                    // 863
    query.movedBefore && query.movedBefore(doc._id, next);                                            // 864
  }                                                                                                   // 865
};                                                                                                    // 866
                                                                                                      // 867
// Recomputes the results of a query and runs observe callbacks for the                               // 868
// difference between the previous results and the current results (unless                            // 869
// paused). Used for skip/limit queries.                                                              // 870
//                                                                                                    // 871
// When this is used by insert or remove, it can just use query.results for the                       // 872
// old results (and there's no need to pass in oldResults), because these                             // 873
// operations don't mutate the documents in the collection. Update needs to pass                      // 874
// in an oldResults which was deep-copied before the modifier was applied.                            // 875
LocalCollection._recomputeResults = function (query, oldResults) {                                    // 876
  if (!oldResults)                                                                                    // 877
    oldResults = query.results;                                                                       // 878
  if (query.distances)                                                                                // 879
    query.distances.clear();                                                                          // 880
  query.results = query.cursor._getRawObjects({                                                       // 881
    ordered: query.ordered, distances: query.distances});                                             // 882
                                                                                                      // 883
  if (!query.paused) {                                                                                // 884
    LocalCollection._diffQueryChanges(                                                                // 885
      query.ordered, oldResults, query.results, query);                                               // 886
  }                                                                                                   // 887
};                                                                                                    // 888
                                                                                                      // 889
                                                                                                      // 890
LocalCollection._findInOrderedResults = function (query, doc) {                                       // 891
  if (!query.ordered)                                                                                 // 892
    throw new Error("Can't call _findInOrderedResults on unordered query");                           // 893
  for (var i = 0; i < query.results.length; i++)                                                      // 894
    if (query.results[i] === doc)                                                                     // 895
      return i;                                                                                       // 896
  throw Error("object missing from query");                                                           // 897
};                                                                                                    // 898
                                                                                                      // 899
// This binary search puts a value between any equal values, and the first                            // 900
// lesser value.                                                                                      // 901
LocalCollection._binarySearch = function (cmp, array, value) {                                        // 902
  var first = 0, rangeLength = array.length;                                                          // 903
                                                                                                      // 904
  while (rangeLength > 0) {                                                                           // 905
    var halfRange = Math.floor(rangeLength/2);                                                        // 906
    if (cmp(value, array[first + halfRange]) >= 0) {                                                  // 907
      first += halfRange + 1;                                                                         // 908
      rangeLength -= halfRange + 1;                                                                   // 909
    } else {                                                                                          // 910
      rangeLength = halfRange;                                                                        // 911
    }                                                                                                 // 912
  }                                                                                                   // 913
  return first;                                                                                       // 914
};                                                                                                    // 915
                                                                                                      // 916
LocalCollection._insertInSortedList = function (cmp, array, value) {                                  // 917
  if (array.length === 0) {                                                                           // 918
    array.push(value);                                                                                // 919
    return 0;                                                                                         // 920
  }                                                                                                   // 921
                                                                                                      // 922
  var idx = LocalCollection._binarySearch(cmp, array, value);                                         // 923
  array.splice(idx, 0, value);                                                                        // 924
  return idx;                                                                                         // 925
};                                                                                                    // 926
                                                                                                      // 927
// To track what documents are affected by a piece of code, call saveOriginals()                      // 928
// before it and retrieveOriginals() after it. retrieveOriginals returns an                           // 929
// object whose keys are the ids of the documents that were affected since the                        // 930
// call to saveOriginals(), and the values are equal to the document's contents                       // 931
// at the time of saveOriginals. (In the case of an inserted document, undefined                      // 932
// is the value.) You must alternate between calls to saveOriginals() and                             // 933
// retrieveOriginals().                                                                               // 934
LocalCollection.prototype.saveOriginals = function () {                                               // 935
  var self = this;                                                                                    // 936
  if (self._savedOriginals)                                                                           // 937
    throw new Error("Called saveOriginals twice without retrieveOriginals");                          // 938
  self._savedOriginals = new LocalCollection._IdMap;                                                  // 939
};                                                                                                    // 940
LocalCollection.prototype.retrieveOriginals = function () {                                           // 941
  var self = this;                                                                                    // 942
  if (!self._savedOriginals)                                                                          // 943
    throw new Error("Called retrieveOriginals without saveOriginals");                                // 944
                                                                                                      // 945
  var originals = self._savedOriginals;                                                               // 946
  self._savedOriginals = null;                                                                        // 947
  return originals;                                                                                   // 948
};                                                                                                    // 949
                                                                                                      // 950
LocalCollection.prototype._saveOriginal = function (id, doc) {                                        // 951
  var self = this;                                                                                    // 952
  // Are we even trying to save originals?                                                            // 953
  if (!self._savedOriginals)                                                                          // 954
    return;                                                                                           // 955
  // Have we previously mutated the original (and so 'doc' is not actually                            // 956
  // original)?  (Note the 'has' check rather than truth: we store undefined                          // 957
  // here for inserted docs!)                                                                         // 958
  if (self._savedOriginals.has(id))                                                                   // 959
    return;                                                                                           // 960
  self._savedOriginals.set(id, EJSON.clone(doc));                                                     // 961
};                                                                                                    // 962
                                                                                                      // 963
// Pause the observers. No callbacks from observers will fire until                                   // 964
// 'resumeObservers' is called.                                                                       // 965
LocalCollection.prototype.pauseObservers = function () {                                              // 966
  // No-op if already paused.                                                                         // 967
  if (this.paused)                                                                                    // 968
    return;                                                                                           // 969
                                                                                                      // 970
  // Set the 'paused' flag such that new observer messages don't fire.                                // 971
  this.paused = true;                                                                                 // 972
                                                                                                      // 973
  // Take a snapshot of the query results for each query.                                             // 974
  for (var qid in this.queries) {                                                                     // 975
    var query = this.queries[qid];                                                                    // 976
                                                                                                      // 977
    query.resultsSnapshot = EJSON.clone(query.results);                                               // 978
  }                                                                                                   // 979
};                                                                                                    // 980
                                                                                                      // 981
// Resume the observers. Observers immediately receive change                                         // 982
// notifications to bring them to the current state of the                                            // 983
// database. Note that this is not just replaying all the changes that                                // 984
// happened during the pause, it is a smarter 'coalesced' diff.                                       // 985
LocalCollection.prototype.resumeObservers = function () {                                             // 986
  var self = this;                                                                                    // 987
  // No-op if not paused.                                                                             // 988
  if (!this.paused)                                                                                   // 989
    return;                                                                                           // 990
                                                                                                      // 991
  // Unset the 'paused' flag. Make sure to do this first, otherwise                                   // 992
  // observer methods won't actually fire when we trigger them.                                       // 993
  this.paused = false;                                                                                // 994
                                                                                                      // 995
  for (var qid in this.queries) {                                                                     // 996
    var query = self.queries[qid];                                                                    // 997
    // Diff the current results against the snapshot and send to observers.                           // 998
    // pass the query object for its observer callbacks.                                              // 999
    LocalCollection._diffQueryChanges(                                                                // 1000
      query.ordered, query.resultsSnapshot, query.results, query);                                    // 1001
    query.resultsSnapshot = null;                                                                     // 1002
  }                                                                                                   // 1003
  self._observeQueue.drain();                                                                         // 1004
};                                                                                                    // 1005
                                                                                                      // 1006
                                                                                                      // 1007
// NB: used by livedata                                                                               // 1008
LocalCollection._idStringify = function (id) {                                                        // 1009
  if (id instanceof LocalCollection._ObjectID) {                                                      // 1010
    return id.valueOf();                                                                              // 1011
  } else if (typeof id === 'string') {                                                                // 1012
    if (id === "") {                                                                                  // 1013
      return id;                                                                                      // 1014
    } else if (id.substr(0, 1) === "-" || // escape previously dashed strings                         // 1015
               id.substr(0, 1) === "~" || // escape escaped numbers, true, false                      // 1016
               LocalCollection._looksLikeObjectID(id) || // escape object-id-form strings             // 1017
               id.substr(0, 1) === '{') { // escape object-form strings, for maybe implementing later // 1018
      return "-" + id;                                                                                // 1019
    } else {                                                                                          // 1020
      return id; // other strings go through unchanged.                                               // 1021
    }                                                                                                 // 1022
  } else if (id === undefined) {                                                                      // 1023
    return '-';                                                                                       // 1024
  } else if (typeof id === 'object' && id !== null) {                                                 // 1025
    throw new Error("Meteor does not currently support objects other than ObjectID as ids");          // 1026
  } else { // Numbers, true, false, null                                                              // 1027
    return "~" + JSON.stringify(id);                                                                  // 1028
  }                                                                                                   // 1029
};                                                                                                    // 1030
                                                                                                      // 1031
                                                                                                      // 1032
// NB: used by livedata                                                                               // 1033
LocalCollection._idParse = function (id) {                                                            // 1034
  if (id === "") {                                                                                    // 1035
    return id;                                                                                        // 1036
  } else if (id === '-') {                                                                            // 1037
    return undefined;                                                                                 // 1038
  } else if (id.substr(0, 1) === '-') {                                                               // 1039
    return id.substr(1);                                                                              // 1040
  } else if (id.substr(0, 1) === '~') {                                                               // 1041
    return JSON.parse(id.substr(1));                                                                  // 1042
  } else if (LocalCollection._looksLikeObjectID(id)) {                                                // 1043
    return new LocalCollection._ObjectID(id);                                                         // 1044
  } else {                                                                                            // 1045
    return id;                                                                                        // 1046
  }                                                                                                   // 1047
};                                                                                                    // 1048
                                                                                                      // 1049
LocalCollection._makeChangedFields = function (newDoc, oldDoc) {                                      // 1050
  var fields = {};                                                                                    // 1051
  LocalCollection._diffObjects(oldDoc, newDoc, {                                                      // 1052
    leftOnly: function (key, value) {                                                                 // 1053
      fields[key] = undefined;                                                                        // 1054
    },                                                                                                // 1055
    rightOnly: function (key, value) {                                                                // 1056
      fields[key] = value;                                                                            // 1057
    },                                                                                                // 1058
    both: function (key, leftValue, rightValue) {                                                     // 1059
      if (!EJSON.equals(leftValue, rightValue))                                                       // 1060
        fields[key] = rightValue;                                                                     // 1061
    }                                                                                                 // 1062
  });                                                                                                 // 1063
  return fields;                                                                                      // 1064
};                                                                                                    // 1065
                                                                                                      // 1066
////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                    //
// packages/minimongo/wrap_transform.js                                                               //
//                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                      //
// Wrap a transform function to return objects that have the _id field                                // 1
// of the untransformed document. This ensures that subsystems such as                                // 2
// the observe-sequence package that call `observe` can keep track of                                 // 3
// the documents identities.                                                                          // 4
//                                                                                                    // 5
// - Require that it returns objects                                                                  // 6
// - If the return value has an _id field, verify that it matches the                                 // 7
//   original _id field                                                                               // 8
// - If the return value doesn't have an _id field, add it back.                                      // 9
LocalCollection.wrapTransform = function (transform) {                                                // 10
  if (!transform)                                                                                     // 11
    return null;                                                                                      // 12
                                                                                                      // 13
  return function (doc) {                                                                             // 14
    if (!_.has(doc, '_id')) {                                                                         // 15
      // XXX do we ever have a transform on the oplog's collection? because that                      // 16
      // collection has no _id.                                                                       // 17
      throw new Error("can only transform documents with _id");                                       // 18
    }                                                                                                 // 19
                                                                                                      // 20
    var id = doc._id;                                                                                 // 21
    // XXX consider making deps a weak dependency and checking Package.deps here                      // 22
    var transformed = Deps.nonreactive(function () {                                                  // 23
      return transform(doc);                                                                          // 24
    });                                                                                               // 25
                                                                                                      // 26
    if (!isPlainObject(transformed)) {                                                                // 27
      throw new Error("transform must return object");                                                // 28
    }                                                                                                 // 29
                                                                                                      // 30
    if (_.has(transformed, '_id')) {                                                                  // 31
      if (!EJSON.equals(transformed._id, id)) {                                                       // 32
        throw new Error("transformed document can't have different _id");                             // 33
      }                                                                                               // 34
    } else {                                                                                          // 35
      transformed._id = id;                                                                           // 36
    }                                                                                                 // 37
    return transformed;                                                                               // 38
  };                                                                                                  // 39
};                                                                                                    // 40
                                                                                                      // 41
                                                                                                      // 42
////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                    //
// packages/minimongo/helpers.js                                                                      //
//                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                      //
// Like _.isArray, but doesn't regard polyfilled Uint8Arrays on old browsers as                       // 1
// arrays.                                                                                            // 2
// XXX maybe this should be EJSON.isArray                                                             // 3
isArray = function (x) {                                                                              // 4
  return _.isArray(x) && !EJSON.isBinary(x);                                                          // 5
};                                                                                                    // 6
                                                                                                      // 7
// XXX maybe this should be EJSON.isObject, though EJSON doesn't know about                           // 8
// RegExp                                                                                             // 9
// XXX note that _type(undefined) === 3!!!!                                                           // 10
isPlainObject = LocalCollection._isPlainObject = function (x) {                                       // 11
  return x && LocalCollection._f._type(x) === 3;                                                      // 12
};                                                                                                    // 13
                                                                                                      // 14
isIndexable = function (x) {                                                                          // 15
  return isArray(x) || isPlainObject(x);                                                              // 16
};                                                                                                    // 17
                                                                                                      // 18
// Returns true if this is an object with at least one key and all keys begin                         // 19
// with $.  Unless inconsistentOK is set, throws if some keys begin with $ and                        // 20
// others don't.                                                                                      // 21
isOperatorObject = function (valueSelector, inconsistentOK) {                                         // 22
  if (!isPlainObject(valueSelector))                                                                  // 23
    return false;                                                                                     // 24
                                                                                                      // 25
  var theseAreOperators = undefined;                                                                  // 26
  _.each(valueSelector, function (value, selKey) {                                                    // 27
    var thisIsOperator = selKey.substr(0, 1) === '$';                                                 // 28
    if (theseAreOperators === undefined) {                                                            // 29
      theseAreOperators = thisIsOperator;                                                             // 30
    } else if (theseAreOperators !== thisIsOperator) {                                                // 31
      if (!inconsistentOK)                                                                            // 32
        throw new Error("Inconsistent operator: " +                                                   // 33
                        JSON.stringify(valueSelector));                                               // 34
      theseAreOperators = false;                                                                      // 35
    }                                                                                                 // 36
  });                                                                                                 // 37
  return !!theseAreOperators;  // {} has no operators                                                 // 38
};                                                                                                    // 39
                                                                                                      // 40
                                                                                                      // 41
// string can be converted to integer                                                                 // 42
isNumericKey = function (s) {                                                                         // 43
  return /^[0-9]+$/.test(s);                                                                          // 44
};                                                                                                    // 45
                                                                                                      // 46
////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                    //
// packages/minimongo/selector.js                                                                     //
//                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                      //
// The minimongo selector compiler!                                                                   // 1
                                                                                                      // 2
// Terminology:                                                                                       // 3
//  - a "selector" is the EJSON object representing a selector                                        // 4
//  - a "matcher" is its compiled form (whether a full Minimongo.Matcher                              // 5
//    object or one of the component lambdas that matches parts of it)                                // 6
//  - a "result object" is an object with a "result" field and maybe                                  // 7
//    distance and arrayIndices.                                                                      // 8
//  - a "branched value" is an object with a "value" field and maybe                                  // 9
//    "dontIterate" and "arrayIndices".                                                               // 10
//  - a "document" is a top-level object that can be stored in a collection.                          // 11
//  - a "lookup function" is a function that takes in a document and returns                          // 12
//    an array of "branched values".                                                                  // 13
//  - a "branched matcher" maps from an array of branched values to a result                          // 14
//    object.                                                                                         // 15
//  - an "element matcher" maps from a single value to a bool.                                        // 16
                                                                                                      // 17
// Main entry point.                                                                                  // 18
//   var matcher = new Minimongo.Matcher({a: {$gt: 5}});                                              // 19
//   if (matcher.documentMatches({a: 7})) ...                                                         // 20
Minimongo.Matcher = function (selector) {                                                             // 21
  var self = this;                                                                                    // 22
  // A set (object mapping string -> *) of all of the document paths looked                           // 23
  // at by the selector. Also includes the empty string if it may look at any                         // 24
  // path (eg, $where).                                                                               // 25
  self._paths = {};                                                                                   // 26
  // Set to true if compilation finds a $near.                                                        // 27
  self._hasGeoQuery = false;                                                                          // 28
  // Set to true if compilation finds a $where.                                                       // 29
  self._hasWhere = false;                                                                             // 30
  // Set to false if compilation finds anything other than a simple equality or                       // 31
  // one or more of '$gt', '$gte', '$lt', '$lte', '$ne', '$in', '$nin' used with                      // 32
  // scalars as operands.                                                                             // 33
  self._isSimple = true;                                                                              // 34
  // Set to a dummy document which always matches this Matcher. Or set to null                        // 35
  // if such document is too hard to find.                                                            // 36
  self._matchingDocument = undefined;                                                                 // 37
  // A clone of the original selector. It may just be a function if the user                          // 38
  // passed in a function; otherwise is definitely an object (eg, IDs are                             // 39
  // translated into {_id: ID} first. Used by canBecomeTrueByModifier and                             // 40
  // Sorter._useWithMatcher.                                                                          // 41
  self._selector = null;                                                                              // 42
  self._docMatcher = self._compileSelector(selector);                                                 // 43
};                                                                                                    // 44
                                                                                                      // 45
_.extend(Minimongo.Matcher.prototype, {                                                               // 46
  documentMatches: function (doc) {                                                                   // 47
    if (!doc || typeof doc !== "object") {                                                            // 48
      throw Error("documentMatches needs a document");                                                // 49
    }                                                                                                 // 50
    return this._docMatcher(doc);                                                                     // 51
  },                                                                                                  // 52
  hasGeoQuery: function () {                                                                          // 53
    return this._hasGeoQuery;                                                                         // 54
  },                                                                                                  // 55
  hasWhere: function () {                                                                             // 56
    return this._hasWhere;                                                                            // 57
  },                                                                                                  // 58
  isSimple: function () {                                                                             // 59
    return this._isSimple;                                                                            // 60
  },                                                                                                  // 61
                                                                                                      // 62
  // Given a selector, return a function that takes one argument, a                                   // 63
  // document. It returns a result object.                                                            // 64
  _compileSelector: function (selector) {                                                             // 65
    var self = this;                                                                                  // 66
    // you can pass a literal function instead of a selector                                          // 67
    if (selector instanceof Function) {                                                               // 68
      self._isSimple = false;                                                                         // 69
      self._selector = selector;                                                                      // 70
      self._recordPathUsed('');                                                                       // 71
      return function (doc) {                                                                         // 72
        return {result: !!selector.call(doc)};                                                        // 73
      };                                                                                              // 74
    }                                                                                                 // 75
                                                                                                      // 76
    // shorthand -- scalars match _id                                                                 // 77
    if (LocalCollection._selectorIsId(selector)) {                                                    // 78
      self._selector = {_id: selector};                                                               // 79
      self._recordPathUsed('_id');                                                                    // 80
      return function (doc) {                                                                         // 81
        return {result: EJSON.equals(doc._id, selector)};                                             // 82
      };                                                                                              // 83
    }                                                                                                 // 84
                                                                                                      // 85
    // protect against dangerous selectors.  falsey and {_id: falsey} are both                        // 86
    // likely programmer error, and not what you want, particularly for                               // 87
    // destructive operations.                                                                        // 88
    if (!selector || (('_id' in selector) && !selector._id)) {                                        // 89
      self._isSimple = false;                                                                         // 90
      return nothingMatcher;                                                                          // 91
    }                                                                                                 // 92
                                                                                                      // 93
    // Top level can't be an array or true or binary.                                                 // 94
    if (typeof(selector) === 'boolean' || isArray(selector) ||                                        // 95
        EJSON.isBinary(selector))                                                                     // 96
      throw new Error("Invalid selector: " + selector);                                               // 97
                                                                                                      // 98
    self._selector = EJSON.clone(selector);                                                           // 99
    return compileDocumentSelector(selector, self, {isRoot: true});                                   // 100
  },                                                                                                  // 101
  _recordPathUsed: function (path) {                                                                  // 102
    this._paths[path] = true;                                                                         // 103
  },                                                                                                  // 104
  // Returns a list of key paths the given selector is looking for. It includes                       // 105
  // the empty string if there is a $where.                                                           // 106
  _getPaths: function () {                                                                            // 107
    return _.keys(this._paths);                                                                       // 108
  }                                                                                                   // 109
});                                                                                                   // 110
                                                                                                      // 111
                                                                                                      // 112
// Takes in a selector that could match a full document (eg, the original                             // 113
// selector). Returns a function mapping document->result object.                                     // 114
//                                                                                                    // 115
// matcher is the Matcher object we are compiling.                                                    // 116
//                                                                                                    // 117
// If this is the root document selector (ie, not wrapped in $and or the like),                       // 118
// then isRoot is true. (This is used by $near.)                                                      // 119
var compileDocumentSelector = function (docSelector, matcher, options) {                              // 120
  options = options || {};                                                                            // 121
  var docMatchers = [];                                                                               // 122
  _.each(docSelector, function (subSelector, key) {                                                   // 123
    if (key.substr(0, 1) === '$') {                                                                   // 124
      // Outer operators are either logical operators (they recurse back into                         // 125
      // this function), or $where.                                                                   // 126
      if (!_.has(LOGICAL_OPERATORS, key))                                                             // 127
        throw new Error("Unrecognized logical operator: " + key);                                     // 128
      matcher._isSimple = false;                                                                      // 129
      docMatchers.push(LOGICAL_OPERATORS[key](subSelector, matcher,                                   // 130
                                              options.inElemMatch));                                  // 131
    } else {                                                                                          // 132
      // Record this path, but only if we aren't in an elemMatcher, since in an                       // 133
      // elemMatch this is a path inside an object in an array, not in the doc                        // 134
      // root.                                                                                        // 135
      if (!options.inElemMatch)                                                                       // 136
        matcher._recordPathUsed(key);                                                                 // 137
      var lookUpByIndex = makeLookupFunction(key);                                                    // 138
      var valueMatcher =                                                                              // 139
        compileValueSelector(subSelector, matcher, options.isRoot);                                   // 140
      docMatchers.push(function (doc) {                                                               // 141
        var branchValues = lookUpByIndex(doc);                                                        // 142
        return valueMatcher(branchValues);                                                            // 143
      });                                                                                             // 144
    }                                                                                                 // 145
  });                                                                                                 // 146
                                                                                                      // 147
  return andDocumentMatchers(docMatchers);                                                            // 148
};                                                                                                    // 149
                                                                                                      // 150
// Takes in a selector that could match a key-indexed value in a document; eg,                        // 151
// {$gt: 5, $lt: 9}, or a regular expression, or any non-expression object (to                        // 152
// indicate equality).  Returns a branched matcher: a function mapping                                // 153
// [branched value]->result object.                                                                   // 154
var compileValueSelector = function (valueSelector, matcher, isRoot) {                                // 155
  if (valueSelector instanceof RegExp) {                                                              // 156
    matcher._isSimple = false;                                                                        // 157
    return convertElementMatcherToBranchedMatcher(                                                    // 158
      regexpElementMatcher(valueSelector));                                                           // 159
  } else if (isOperatorObject(valueSelector)) {                                                       // 160
    return operatorBranchedMatcher(valueSelector, matcher, isRoot);                                   // 161
  } else {                                                                                            // 162
    return convertElementMatcherToBranchedMatcher(                                                    // 163
      equalityElementMatcher(valueSelector));                                                         // 164
  }                                                                                                   // 165
};                                                                                                    // 166
                                                                                                      // 167
// Given an element matcher (which evaluates a single value), returns a branched                      // 168
// value (which evaluates the element matcher on all the branches and returns a                       // 169
// more structured return value possibly including arrayIndices).                                     // 170
var convertElementMatcherToBranchedMatcher = function (                                               // 171
    elementMatcher, options) {                                                                        // 172
  options = options || {};                                                                            // 173
  return function (branches) {                                                                        // 174
    var expanded = branches;                                                                          // 175
    if (!options.dontExpandLeafArrays) {                                                              // 176
      expanded = expandArraysInBranches(                                                              // 177
        branches, options.dontIncludeLeafArrays);                                                     // 178
    }                                                                                                 // 179
    var ret = {};                                                                                     // 180
    ret.result = _.any(expanded, function (element) {                                                 // 181
      var matched = elementMatcher(element.value);                                                    // 182
                                                                                                      // 183
      // Special case for $elemMatch: it means "true, and use this as an array                        // 184
      // index if I didn't already have one".                                                         // 185
      if (typeof matched === 'number') {                                                              // 186
        // XXX This code dates from when we only stored a single array index                          // 187
        // (for the outermost array). Should we be also including deeper array                        // 188
        // indices from the $elemMatch match?                                                         // 189
        if (!element.arrayIndices)                                                                    // 190
          element.arrayIndices = [matched];                                                           // 191
        matched = true;                                                                               // 192
      }                                                                                               // 193
                                                                                                      // 194
      // If some element matched, and it's tagged with array indices, include                         // 195
      // those indices in our result object.                                                          // 196
      if (matched && element.arrayIndices)                                                            // 197
        ret.arrayIndices = element.arrayIndices;                                                      // 198
                                                                                                      // 199
      return matched;                                                                                 // 200
    });                                                                                               // 201
    return ret;                                                                                       // 202
  };                                                                                                  // 203
};                                                                                                    // 204
                                                                                                      // 205
// Takes a RegExp object and returns an element matcher.                                              // 206
regexpElementMatcher = function (regexp) {                                                            // 207
  return function (value) {                                                                           // 208
    if (value instanceof RegExp) {                                                                    // 209
      // Comparing two regexps means seeing if the regexps are identical                              // 210
      // (really!). Underscore knows how.                                                             // 211
      return _.isEqual(value, regexp);                                                                // 212
    }                                                                                                 // 213
    // Regexps only work against strings.                                                             // 214
    if (typeof value !== 'string')                                                                    // 215
      return false;                                                                                   // 216
    return regexp.test(value);                                                                        // 217
  };                                                                                                  // 218
};                                                                                                    // 219
                                                                                                      // 220
// Takes something that is not an operator object and returns an element matcher                      // 221
// for equality with that thing.                                                                      // 222
equalityElementMatcher = function (elementSelector) {                                                 // 223
  if (isOperatorObject(elementSelector))                                                              // 224
    throw Error("Can't create equalityValueSelector for operator object");                            // 225
                                                                                                      // 226
  // Special-case: null and undefined are equal (if you got undefined in there                        // 227
  // somewhere, or if you got it due to some branch being non-existent in the                         // 228
  // weird special case), even though they aren't with EJSON.equals.                                  // 229
  if (elementSelector == null) {  // undefined or null                                                // 230
    return function (value) {                                                                         // 231
      return value == null;  // undefined or null                                                     // 232
    };                                                                                                // 233
  }                                                                                                   // 234
                                                                                                      // 235
  return function (value) {                                                                           // 236
    return LocalCollection._f._equal(elementSelector, value);                                         // 237
  };                                                                                                  // 238
};                                                                                                    // 239
                                                                                                      // 240
// Takes an operator object (an object with $ keys) and returns a branched                            // 241
// matcher for it.                                                                                    // 242
var operatorBranchedMatcher = function (valueSelector, matcher, isRoot) {                             // 243
  // Each valueSelector works separately on the various branches.  So one                             // 244
  // operator can match one branch and another can match another branch.  This                        // 245
  // is OK.                                                                                           // 246
                                                                                                      // 247
  var operatorMatchers = [];                                                                          // 248
  _.each(valueSelector, function (operand, operator) {                                                // 249
    // XXX we should actually implement $eq, which is new in 2.6                                      // 250
    var simpleRange = _.contains(['$lt', '$lte', '$gt', '$gte'], operator) &&                         // 251
      _.isNumber(operand);                                                                            // 252
    var simpleInequality = operator === '$ne' && !_.isObject(operand);                                // 253
    var simpleInclusion = _.contains(['$in', '$nin'], operator) &&                                    // 254
      _.isArray(operand) && !_.any(operand, _.isObject);                                              // 255
                                                                                                      // 256
    if (! (operator === '$eq' || simpleRange ||                                                       // 257
           simpleInclusion || simpleInequality)) {                                                    // 258
      matcher._isSimple = false;                                                                      // 259
    }                                                                                                 // 260
                                                                                                      // 261
    if (_.has(VALUE_OPERATORS, operator)) {                                                           // 262
      operatorMatchers.push(                                                                          // 263
        VALUE_OPERATORS[operator](operand, valueSelector, matcher, isRoot));                          // 264
    } else if (_.has(ELEMENT_OPERATORS, operator)) {                                                  // 265
      var options = ELEMENT_OPERATORS[operator];                                                      // 266
      operatorMatchers.push(                                                                          // 267
        convertElementMatcherToBranchedMatcher(                                                       // 268
          options.compileElementSelector(                                                             // 269
            operand, valueSelector, matcher),                                                         // 270
          options));                                                                                  // 271
    } else {                                                                                          // 272
      throw new Error("Unrecognized operator: " + operator);                                          // 273
    }                                                                                                 // 274
  });                                                                                                 // 275
                                                                                                      // 276
  return andBranchedMatchers(operatorMatchers);                                                       // 277
};                                                                                                    // 278
                                                                                                      // 279
var compileArrayOfDocumentSelectors = function (                                                      // 280
    selectors, matcher, inElemMatch) {                                                                // 281
  if (!isArray(selectors) || _.isEmpty(selectors))                                                    // 282
    throw Error("$and/$or/$nor must be nonempty array");                                              // 283
  return _.map(selectors, function (subSelector) {                                                    // 284
    if (!isPlainObject(subSelector))                                                                  // 285
      throw Error("$or/$and/$nor entries need to be full objects");                                   // 286
    return compileDocumentSelector(                                                                   // 287
      subSelector, matcher, {inElemMatch: inElemMatch});                                              // 288
  });                                                                                                 // 289
};                                                                                                    // 290
                                                                                                      // 291
// Operators that appear at the top level of a document selector.                                     // 292
var LOGICAL_OPERATORS = {                                                                             // 293
  $and: function (subSelector, matcher, inElemMatch) {                                                // 294
    var matchers = compileArrayOfDocumentSelectors(                                                   // 295
      subSelector, matcher, inElemMatch);                                                             // 296
    return andDocumentMatchers(matchers);                                                             // 297
  },                                                                                                  // 298
                                                                                                      // 299
  $or: function (subSelector, matcher, inElemMatch) {                                                 // 300
    var matchers = compileArrayOfDocumentSelectors(                                                   // 301
      subSelector, matcher, inElemMatch);                                                             // 302
                                                                                                      // 303
    // Special case: if there is only one matcher, use it directly, *preserving*                      // 304
    // any arrayIndices it returns.                                                                   // 305
    if (matchers.length === 1)                                                                        // 306
      return matchers[0];                                                                             // 307
                                                                                                      // 308
    return function (doc) {                                                                           // 309
      var result = _.any(matchers, function (f) {                                                     // 310
        return f(doc).result;                                                                         // 311
      });                                                                                             // 312
      // $or does NOT set arrayIndices when it has multiple                                           // 313
      // sub-expressions. (Tested against MongoDB.)                                                   // 314
      return {result: result};                                                                        // 315
    };                                                                                                // 316
  },                                                                                                  // 317
                                                                                                      // 318
  $nor: function (subSelector, matcher, inElemMatch) {                                                // 319
    var matchers = compileArrayOfDocumentSelectors(                                                   // 320
      subSelector, matcher, inElemMatch);                                                             // 321
    return function (doc) {                                                                           // 322
      var result = _.all(matchers, function (f) {                                                     // 323
        return !f(doc).result;                                                                        // 324
      });                                                                                             // 325
      // Never set arrayIndices, because we only match if nothing in particular                       // 326
      // "matched" (and because this is consistent with MongoDB).                                     // 327
      return {result: result};                                                                        // 328
    };                                                                                                // 329
  },                                                                                                  // 330
                                                                                                      // 331
  $where: function (selectorValue, matcher) {                                                         // 332
    // Record that *any* path may be used.                                                            // 333
    matcher._recordPathUsed('');                                                                      // 334
    matcher._hasWhere = true;                                                                         // 335
    if (!(selectorValue instanceof Function)) {                                                       // 336
      // XXX MongoDB seems to have more complex logic to decide where or or not                       // 337
      // to add "return"; not sure exactly what it is.                                                // 338
      selectorValue = Function("obj", "return " + selectorValue);                                     // 339
    }                                                                                                 // 340
    return function (doc) {                                                                           // 341
      // We make the document available as both `this` and `obj`.                                     // 342
      // XXX not sure what we should do if this throws                                                // 343
      return {result: selectorValue.call(doc, doc)};                                                  // 344
    };                                                                                                // 345
  },                                                                                                  // 346
                                                                                                      // 347
  // This is just used as a comment in the query (in MongoDB, it also ends up in                      // 348
  // query logs); it has no effect on the actual selection.                                           // 349
  $comment: function () {                                                                             // 350
    return function () {                                                                              // 351
      return {result: true};                                                                          // 352
    };                                                                                                // 353
  }                                                                                                   // 354
};                                                                                                    // 355
                                                                                                      // 356
// Returns a branched matcher that matches iff the given matcher does not.                            // 357
// Note that this implicitly "deMorganizes" the wrapped function.  ie, it                             // 358
// means that ALL branch values need to fail to match innerBranchedMatcher.                           // 359
var invertBranchedMatcher = function (branchedMatcher) {                                              // 360
  return function (branchValues) {                                                                    // 361
    var invertMe = branchedMatcher(branchValues);                                                     // 362
    // We explicitly choose to strip arrayIndices here: it doesn't make sense to                      // 363
    // say "update the array element that does not match something", at least                         // 364
    // in mongo-land.                                                                                 // 365
    return {result: !invertMe.result};                                                                // 366
  };                                                                                                  // 367
};                                                                                                    // 368
                                                                                                      // 369
// Operators that (unlike LOGICAL_OPERATORS) pertain to individual paths in a                         // 370
// document, but (unlike ELEMENT_OPERATORS) do not have a simple definition as                        // 371
// "match each branched value independently and combine with                                          // 372
// convertElementMatcherToBranchedMatcher".                                                           // 373
var VALUE_OPERATORS = {                                                                               // 374
  $not: function (operand, valueSelector, matcher) {                                                  // 375
    return invertBranchedMatcher(compileValueSelector(operand, matcher));                             // 376
  },                                                                                                  // 377
  $ne: function (operand) {                                                                           // 378
    return invertBranchedMatcher(convertElementMatcherToBranchedMatcher(                              // 379
      equalityElementMatcher(operand)));                                                              // 380
  },                                                                                                  // 381
  $nin: function (operand) {                                                                          // 382
    return invertBranchedMatcher(convertElementMatcherToBranchedMatcher(                              // 383
      ELEMENT_OPERATORS.$in.compileElementSelector(operand)));                                        // 384
  },                                                                                                  // 385
  $exists: function (operand) {                                                                       // 386
    var exists = convertElementMatcherToBranchedMatcher(function (value) {                            // 387
      return value !== undefined;                                                                     // 388
    });                                                                                               // 389
    return operand ? exists : invertBranchedMatcher(exists);                                          // 390
  },                                                                                                  // 391
  // $options just provides options for $regex; its logic is inside $regex                            // 392
  $options: function (operand, valueSelector) {                                                       // 393
    if (!_.has(valueSelector, '$regex'))                                                              // 394
      throw Error("$options needs a $regex");                                                         // 395
    return everythingMatcher;                                                                         // 396
  },                                                                                                  // 397
  // $maxDistance is basically an argument to $near                                                   // 398
  $maxDistance: function (operand, valueSelector) {                                                   // 399
    if (!valueSelector.$near)                                                                         // 400
      throw Error("$maxDistance needs a $near");                                                      // 401
    return everythingMatcher;                                                                         // 402
  },                                                                                                  // 403
  $all: function (operand, valueSelector, matcher) {                                                  // 404
    if (!isArray(operand))                                                                            // 405
      throw Error("$all requires array");                                                             // 406
    // Not sure why, but this seems to be what MongoDB does.                                          // 407
    if (_.isEmpty(operand))                                                                           // 408
      return nothingMatcher;                                                                          // 409
                                                                                                      // 410
    var branchedMatchers = [];                                                                        // 411
    _.each(operand, function (criterion) {                                                            // 412
      // XXX handle $all/$elemMatch combination                                                       // 413
      if (isOperatorObject(criterion))                                                                // 414
        throw Error("no $ expressions in $all");                                                      // 415
      // This is always a regexp or equality selector.                                                // 416
      branchedMatchers.push(compileValueSelector(criterion, matcher));                                // 417
    });                                                                                               // 418
    // andBranchedMatchers does NOT require all selectors to return true on the                       // 419
    // SAME branch.                                                                                   // 420
    return andBranchedMatchers(branchedMatchers);                                                     // 421
  },                                                                                                  // 422
  $near: function (operand, valueSelector, matcher, isRoot) {                                         // 423
    if (!isRoot)                                                                                      // 424
      throw Error("$near can't be inside another $ operator");                                        // 425
    matcher._hasGeoQuery = true;                                                                      // 426
                                                                                                      // 427
    // There are two kinds of geodata in MongoDB: coordinate pairs and                                // 428
    // GeoJSON. They use different distance metrics, too. GeoJSON queries are                         // 429
    // marked with a $geometry property.                                                              // 430
                                                                                                      // 431
    var maxDistance, point, distance;                                                                 // 432
    if (isPlainObject(operand) && _.has(operand, '$geometry')) {                                      // 433
      // GeoJSON "2dsphere" mode.                                                                     // 434
      maxDistance = operand.$maxDistance;                                                             // 435
      point = operand.$geometry;                                                                      // 436
      distance = function (value) {                                                                   // 437
        // XXX: for now, we don't calculate the actual distance between, say,                         // 438
        // polygon and circle. If people care about this use-case it will get                         // 439
        // a priority.                                                                                // 440
        if (!value || !value.type)                                                                    // 441
          return null;                                                                                // 442
        if (value.type === "Point") {                                                                 // 443
          return GeoJSON.pointDistance(point, value);                                                 // 444
        } else {                                                                                      // 445
          return GeoJSON.geometryWithinRadius(value, point, maxDistance)                              // 446
            ? 0 : maxDistance + 1;                                                                    // 447
        }                                                                                             // 448
      };                                                                                              // 449
    } else {                                                                                          // 450
      maxDistance = valueSelector.$maxDistance;                                                       // 451
      if (!isArray(operand) && !isPlainObject(operand))                                               // 452
        throw Error("$near argument must be coordinate pair or GeoJSON");                             // 453
      point = pointToArray(operand);                                                                  // 454
      distance = function (value) {                                                                   // 455
        if (!isArray(value) && !isPlainObject(value))                                                 // 456
          return null;                                                                                // 457
        return distanceCoordinatePairs(point, value);                                                 // 458
      };                                                                                              // 459
    }                                                                                                 // 460
                                                                                                      // 461
    return function (branchedValues) {                                                                // 462
      // There might be multiple points in the document that match the given                          // 463
      // field. Only one of them needs to be within $maxDistance, but we need to                      // 464
      // evaluate all of them and use the nearest one for the implicit sort                           // 465
      // specifier. (That's why we can't just use ELEMENT_OPERATORS here.)                            // 466
      //                                                                                              // 467
      // Note: This differs from MongoDB's implementation, where a document will                      // 468
      // actually show up *multiple times* in the result set, with one entry for                      // 469
      // each within-$maxDistance branching point.                                                    // 470
      branchedValues = expandArraysInBranches(branchedValues);                                        // 471
      var result = {result: false};                                                                   // 472
      _.each(branchedValues, function (branch) {                                                      // 473
        var curDistance = distance(branch.value);                                                     // 474
        // Skip branches that aren't real points or are too far away.                                 // 475
        if (curDistance === null || curDistance > maxDistance)                                        // 476
          return;                                                                                     // 477
        // Skip anything that's a tie.                                                                // 478
        if (result.distance !== undefined && result.distance <= curDistance)                          // 479
          return;                                                                                     // 480
        result.result = true;                                                                         // 481
        result.distance = curDistance;                                                                // 482
        if (!branch.arrayIndices)                                                                     // 483
          delete result.arrayIndices;                                                                 // 484
        else                                                                                          // 485
          result.arrayIndices = branch.arrayIndices;                                                  // 486
      });                                                                                             // 487
      return result;                                                                                  // 488
    };                                                                                                // 489
  }                                                                                                   // 490
};                                                                                                    // 491
                                                                                                      // 492
// Helpers for $near.                                                                                 // 493
var distanceCoordinatePairs = function (a, b) {                                                       // 494
  a = pointToArray(a);                                                                                // 495
  b = pointToArray(b);                                                                                // 496
  var x = a[0] - b[0];                                                                                // 497
  var y = a[1] - b[1];                                                                                // 498
  if (_.isNaN(x) || _.isNaN(y))                                                                       // 499
    return null;                                                                                      // 500
  return Math.sqrt(x * x + y * y);                                                                    // 501
};                                                                                                    // 502
// Makes sure we get 2 elements array and assume the first one to be x and                            // 503
// the second one to y no matter what user passes.                                                    // 504
// In case user passes { lon: x, lat: y } returns [x, y]                                              // 505
var pointToArray = function (point) {                                                                 // 506
  return _.map(point, _.identity);                                                                    // 507
};                                                                                                    // 508
                                                                                                      // 509
// Helper for $lt/$gt/$lte/$gte.                                                                      // 510
var makeInequality = function (cmpValueComparator) {                                                  // 511
  return {                                                                                            // 512
    compileElementSelector: function (operand) {                                                      // 513
      // Arrays never compare false with non-arrays for any inequality.                               // 514
      // XXX This was behavior we observed in pre-release MongoDB 2.5, but                            // 515
      //     it seems to have been reverted.                                                          // 516
      //     See https://jira.mongodb.org/browse/SERVER-11444                                         // 517
      if (isArray(operand)) {                                                                         // 518
        return function () {                                                                          // 519
          return false;                                                                               // 520
        };                                                                                            // 521
      }                                                                                               // 522
                                                                                                      // 523
      // Special case: consider undefined and null the same (so true with                             // 524
      // $gte/$lte).                                                                                  // 525
      if (operand === undefined)                                                                      // 526
        operand = null;                                                                               // 527
                                                                                                      // 528
      var operandType = LocalCollection._f._type(operand);                                            // 529
                                                                                                      // 530
      return function (value) {                                                                       // 531
        if (value === undefined)                                                                      // 532
          value = null;                                                                               // 533
        // Comparisons are never true among things of different type (except                          // 534
        // null vs undefined).                                                                        // 535
        if (LocalCollection._f._type(value) !== operandType)                                          // 536
          return false;                                                                               // 537
        return cmpValueComparator(LocalCollection._f._cmp(value, operand));                           // 538
      };                                                                                              // 539
    }                                                                                                 // 540
  };                                                                                                  // 541
};                                                                                                    // 542
                                                                                                      // 543
// Each element selector contains:                                                                    // 544
//  - compileElementSelector, a function with args:                                                   // 545
//    - operand - the "right hand side" of the operator                                               // 546
//    - valueSelector - the "context" for the operator (so that $regex can find                       // 547
//      $options)                                                                                     // 548
//    - matcher - the Matcher this is going into (so that $elemMatch can compile                      // 549
//      more things)                                                                                  // 550
//    returning a function mapping a single value to bool.                                            // 551
//  - dontExpandLeafArrays, a bool which prevents expandArraysInBranches from                         // 552
//    being called                                                                                    // 553
//  - dontIncludeLeafArrays, a bool which causes an argument to be passed to                          // 554
//    expandArraysInBranches if it is called                                                          // 555
ELEMENT_OPERATORS = {                                                                                 // 556
  $lt: makeInequality(function (cmpValue) {                                                           // 557
    return cmpValue < 0;                                                                              // 558
  }),                                                                                                 // 559
  $gt: makeInequality(function (cmpValue) {                                                           // 560
    return cmpValue > 0;                                                                              // 561
  }),                                                                                                 // 562
  $lte: makeInequality(function (cmpValue) {                                                          // 563
    return cmpValue <= 0;                                                                             // 564
  }),                                                                                                 // 565
  $gte: makeInequality(function (cmpValue) {                                                          // 566
    return cmpValue >= 0;                                                                             // 567
  }),                                                                                                 // 568
  $mod: {                                                                                             // 569
    compileElementSelector: function (operand) {                                                      // 570
      if (!(isArray(operand) && operand.length === 2                                                  // 571
            && typeof(operand[0]) === 'number'                                                        // 572
            && typeof(operand[1]) === 'number')) {                                                    // 573
        throw Error("argument to $mod must be an array of two numbers");                              // 574
      }                                                                                               // 575
      // XXX could require to be ints or round or something                                           // 576
      var divisor = operand[0];                                                                       // 577
      var remainder = operand[1];                                                                     // 578
      return function (value) {                                                                       // 579
        return typeof value === 'number' && value % divisor === remainder;                            // 580
      };                                                                                              // 581
    }                                                                                                 // 582
  },                                                                                                  // 583
  $in: {                                                                                              // 584
    compileElementSelector: function (operand) {                                                      // 585
      if (!isArray(operand))                                                                          // 586
        throw Error("$in needs an array");                                                            // 587
                                                                                                      // 588
      var elementMatchers = [];                                                                       // 589
      _.each(operand, function (option) {                                                             // 590
        if (option instanceof RegExp)                                                                 // 591
          elementMatchers.push(regexpElementMatcher(option));                                         // 592
        else if (isOperatorObject(option))                                                            // 593
          throw Error("cannot nest $ under $in");                                                     // 594
        else                                                                                          // 595
          elementMatchers.push(equalityElementMatcher(option));                                       // 596
      });                                                                                             // 597
                                                                                                      // 598
      return function (value) {                                                                       // 599
        // Allow {a: {$in: [null]}} to match when 'a' does not exist.                                 // 600
        if (value === undefined)                                                                      // 601
          value = null;                                                                               // 602
        return _.any(elementMatchers, function (e) {                                                  // 603
          return e(value);                                                                            // 604
        });                                                                                           // 605
      };                                                                                              // 606
    }                                                                                                 // 607
  },                                                                                                  // 608
  $size: {                                                                                            // 609
    // {a: [[5, 5]]} must match {a: {$size: 1}} but not {a: {$size: 2}}, so we                        // 610
    // don't want to consider the element [5,5] in the leaf array [[5,5]] as a                        // 611
    // possible value.                                                                                // 612
    dontExpandLeafArrays: true,                                                                       // 613
    compileElementSelector: function (operand) {                                                      // 614
      if (typeof operand === 'string') {                                                              // 615
        // Don't ask me why, but by experimentation, this seems to be what Mongo                      // 616
        // does.                                                                                      // 617
        operand = 0;                                                                                  // 618
      } else if (typeof operand !== 'number') {                                                       // 619
        throw Error("$size needs a number");                                                          // 620
      }                                                                                               // 621
      return function (value) {                                                                       // 622
        return isArray(value) && value.length === operand;                                            // 623
      };                                                                                              // 624
    }                                                                                                 // 625
  },                                                                                                  // 626
  $type: {                                                                                            // 627
    // {a: [5]} must not match {a: {$type: 4}} (4 means array), but it should                         // 628
    // match {a: {$type: 1}} (1 means number), and {a: [[5]]} must match {$a:                         // 629
    // {$type: 4}}. Thus, when we see a leaf array, we *should* expand it but                         // 630
    // should *not* include it itself.                                                                // 631
    dontIncludeLeafArrays: true,                                                                      // 632
    compileElementSelector: function (operand) {                                                      // 633
      if (typeof operand !== 'number')                                                                // 634
        throw Error("$type needs a number");                                                          // 635
      return function (value) {                                                                       // 636
        return value !== undefined                                                                    // 637
          && LocalCollection._f._type(value) === operand;                                             // 638
      };                                                                                              // 639
    }                                                                                                 // 640
  },                                                                                                  // 641
  $regex: {                                                                                           // 642
    compileElementSelector: function (operand, valueSelector) {                                       // 643
      if (!(typeof operand === 'string' || operand instanceof RegExp))                                // 644
        throw Error("$regex has to be a string or RegExp");                                           // 645
                                                                                                      // 646
      var regexp;                                                                                     // 647
      if (valueSelector.$options !== undefined) {                                                     // 648
        // Options passed in $options (even the empty string) always overrides                        // 649
        // options in the RegExp object itself. (See also                                             // 650
        // Meteor.Collection._rewriteSelector.)                                                       // 651
                                                                                                      // 652
        // Be clear that we only support the JS-supported options, not extended                       // 653
        // ones (eg, Mongo supports x and s). Ideally we would implement x and s                      // 654
        // by transforming the regexp, but not today...                                               // 655
        if (/[^gim]/.test(valueSelector.$options))                                                    // 656
          throw new Error("Only the i, m, and g regexp options are supported");                       // 657
                                                                                                      // 658
        var regexSource = operand instanceof RegExp ? operand.source : operand;                       // 659
        regexp = new RegExp(regexSource, valueSelector.$options);                                     // 660
      } else if (operand instanceof RegExp) {                                                         // 661
        regexp = operand;                                                                             // 662
      } else {                                                                                        // 663
        regexp = new RegExp(operand);                                                                 // 664
      }                                                                                               // 665
      return regexpElementMatcher(regexp);                                                            // 666
    }                                                                                                 // 667
  },                                                                                                  // 668
  $elemMatch: {                                                                                       // 669
    dontExpandLeafArrays: true,                                                                       // 670
    compileElementSelector: function (operand, valueSelector, matcher) {                              // 671
      if (!isPlainObject(operand))                                                                    // 672
        throw Error("$elemMatch need an object");                                                     // 673
                                                                                                      // 674
      var subMatcher, isDocMatcher;                                                                   // 675
      if (isOperatorObject(operand, true)) {                                                          // 676
        subMatcher = compileValueSelector(operand, matcher);                                          // 677
        isDocMatcher = false;                                                                         // 678
      } else {                                                                                        // 679
        // This is NOT the same as compileValueSelector(operand), and not just                        // 680
        // because of the slightly different calling convention.                                      // 681
        // {$elemMatch: {x: 3}} means "an element has a field x:3", not                               // 682
        // "consists only of a field x:3". Also, regexps and sub-$ are allowed.                       // 683
        subMatcher = compileDocumentSelector(operand, matcher,                                        // 684
                                             {inElemMatch: true});                                    // 685
        isDocMatcher = true;                                                                          // 686
      }                                                                                               // 687
                                                                                                      // 688
      return function (value) {                                                                       // 689
        if (!isArray(value))                                                                          // 690
          return false;                                                                               // 691
        for (var i = 0; i < value.length; ++i) {                                                      // 692
          var arrayElement = value[i];                                                                // 693
          var arg;                                                                                    // 694
          if (isDocMatcher) {                                                                         // 695
            // We can only match {$elemMatch: {b: 3}} against objects.                                // 696
            // (We can also match against arrays, if there's numeric indices,                         // 697
            // eg {$elemMatch: {'0.b': 3}} or {$elemMatch: {0: 3}}.)                                  // 698
            if (!isPlainObject(arrayElement) && !isArray(arrayElement))                               // 699
              return false;                                                                           // 700
            arg = arrayElement;                                                                       // 701
          } else {                                                                                    // 702
            // dontIterate ensures that {a: {$elemMatch: {$gt: 5}}} matches                           // 703
            // {a: [8]} but not {a: [[8]]}                                                            // 704
            arg = [{value: arrayElement, dontIterate: true}];                                         // 705
          }                                                                                           // 706
          // XXX support $near in $elemMatch by propagating $distance?                                // 707
          if (subMatcher(arg).result)                                                                 // 708
            return i;   // specially understood to mean "use as arrayIndices"                         // 709
        }                                                                                             // 710
        return false;                                                                                 // 711
      };                                                                                              // 712
    }                                                                                                 // 713
  }                                                                                                   // 714
};                                                                                                    // 715
                                                                                                      // 716
// makeLookupFunction(key) returns a lookup function.                                                 // 717
//                                                                                                    // 718
// A lookup function takes in a document and returns an array of matching                             // 719
// branches.  If no arrays are found while looking up the key, this array will                        // 720
// have exactly one branches (possibly 'undefined', if some segment of the key                        // 721
// was not found).                                                                                    // 722
//                                                                                                    // 723
// If arrays are found in the middle, this can have more than one element, since                      // 724
// we "branch". When we "branch", if there are more key segments to look up,                          // 725
// then we only pursue branches that are plain objects (not arrays or scalars).                       // 726
// This means we can actually end up with no branches!                                                // 727
//                                                                                                    // 728
// We do *NOT* branch on arrays that are found at the end (ie, at the last                            // 729
// dotted member of the key). We just return that array; if you want to                               // 730
// effectively "branch" over the array's values, post-process the lookup                              // 731
// function with expandArraysInBranches.                                                              // 732
//                                                                                                    // 733
// Each branch is an object with keys:                                                                // 734
//  - value: the value at the branch                                                                  // 735
//  - dontIterate: an optional bool; if true, it means that 'value' is an array                       // 736
//    that expandArraysInBranches should NOT expand. This specifically happens                        // 737
//    when there is a numeric index in the key, and ensures the                                       // 738
//    perhaps-surprising MongoDB behavior where {'a.0': 5} does NOT                                   // 739
//    match {a: [[5]]}.                                                                               // 740
//  - arrayIndices: if any array indexing was done during lookup (either due to                       // 741
//    explicit numeric indices or implicit branching), this will be an array of                       // 742
//    the array indices used, from outermost to innermost; it is falsey or                            // 743
//    absent if no array index is used. If an explicit numeric index is used,                         // 744
//    the index will be followed in arrayIndices by the string 'x'.                                   // 745
//                                                                                                    // 746
//    Note: arrayIndices is used for two purposes. First, it is used to                               // 747
//    implement the '$' modifier feature, which only ever looks at its first                          // 748
//    element.                                                                                        // 749
//                                                                                                    // 750
//    Second, it is used for sort key generation, which needs to be able to tell                      // 751
//    the difference between different paths. Moreover, it needs to                                   // 752
//    differentiate between explicit and implicit branching, which is why                             // 753
//    there's the somewhat hacky 'x' entry: this means that explicit and                              // 754
//    implicit array lookups will have different full arrayIndices paths. (That                       // 755
//    code only requires that different paths have different arrayIndices; it                         // 756
//    doesn't actually "parse" arrayIndices. As an alternative, arrayIndices                          // 757
//    could contain objects with flags like "implicit", but I think that only                         // 758
//    makes the code surrounding them more complex.)                                                  // 759
//                                                                                                    // 760
//    (By the way, this field ends up getting passed around a lot without                             // 761
//    cloning, so never mutate any arrayIndices field/var in this package!)                           // 762
//                                                                                                    // 763
//                                                                                                    // 764
// At the top level, you may only pass in a plain object or array.                                    // 765
//                                                                                                    // 766
// See the test 'minimongo - lookup' for some examples of what lookup functions                       // 767
// return.                                                                                            // 768
makeLookupFunction = function (key) {                                                                 // 769
  var parts = key.split('.');                                                                         // 770
  var firstPart = parts.length ? parts[0] : '';                                                       // 771
  var firstPartIsNumeric = isNumericKey(firstPart);                                                   // 772
  var lookupRest;                                                                                     // 773
  if (parts.length > 1) {                                                                             // 774
    lookupRest = makeLookupFunction(parts.slice(1).join('.'));                                        // 775
  }                                                                                                   // 776
                                                                                                      // 777
  var elideUnnecessaryFields = function (retVal) {                                                    // 778
    if (!retVal.dontIterate)                                                                          // 779
      delete retVal.dontIterate;                                                                      // 780
    if (retVal.arrayIndices && !retVal.arrayIndices.length)                                           // 781
      delete retVal.arrayIndices;                                                                     // 782
    return retVal;                                                                                    // 783
  };                                                                                                  // 784
                                                                                                      // 785
  // Doc will always be a plain object or an array.                                                   // 786
  // apply an explicit numeric index, an array.                                                       // 787
  return function (doc, arrayIndices) {                                                               // 788
    if (!arrayIndices)                                                                                // 789
      arrayIndices = [];                                                                              // 790
                                                                                                      // 791
    if (isArray(doc)) {                                                                               // 792
      // If we're being asked to do an invalid lookup into an array (non-integer                      // 793
      // or out-of-bounds), return no results (which is different from returning                      // 794
      // a single undefined result, in that `null` equality checks won't match).                      // 795
      if (!(firstPartIsNumeric && firstPart < doc.length))                                            // 796
        return [];                                                                                    // 797
                                                                                                      // 798
      // Remember that we used this array index. Include an 'x' to indicate that                      // 799
      // the previous index came from being considered as an explicit array                           // 800
      // index (not branching).                                                                       // 801
      arrayIndices = arrayIndices.concat(+firstPart, 'x');                                            // 802
    }                                                                                                 // 803
                                                                                                      // 804
    // Do our first lookup.                                                                           // 805
    var firstLevel = doc[firstPart];                                                                  // 806
                                                                                                      // 807
    // If there is no deeper to dig, return what we found.                                            // 808
    //                                                                                                // 809
    // If what we found is an array, most value selectors will choose to treat                        // 810
    // the elements of the array as matchable values in their own right, but                          // 811
    // that's done outside of the lookup function. (Exceptions to this are $size                      // 812
    // and stuff relating to $elemMatch.  eg, {a: {$size: 2}} does not match {a:                      // 813
    // [[1, 2]]}.)                                                                                    // 814
    //                                                                                                // 815
    // That said, if we just did an *explicit* array lookup (on doc) to find                          // 816
    // firstLevel, and firstLevel is an array too, we do NOT want value                               // 817
    // selectors to iterate over it.  eg, {'a.0': 5} does not match {a: [[5]]}.                       // 818
    // So in that case, we mark the return value as "don't iterate".                                  // 819
    if (!lookupRest) {                                                                                // 820
      return [elideUnnecessaryFields({                                                                // 821
        value: firstLevel,                                                                            // 822
        dontIterate: isArray(doc) && isArray(firstLevel),                                             // 823
        arrayIndices: arrayIndices})];                                                                // 824
    }                                                                                                 // 825
                                                                                                      // 826
    // We need to dig deeper.  But if we can't, because what we've found is not                       // 827
    // an array or plain object, we're done. If we just did a numeric index into                      // 828
    // an array, we return nothing here (this is a change in Mongo 2.5 from                           // 829
    // Mongo 2.4, where {'a.0.b': null} stopped matching {a: [5]}). Otherwise,                        // 830
    // return a single `undefined` (which can, for example, match via equality                        // 831
    // with `null`).                                                                                  // 832
    if (!isIndexable(firstLevel)) {                                                                   // 833
      if (isArray(doc))                                                                               // 834
        return [];                                                                                    // 835
      return [elideUnnecessaryFields({value: undefined,                                               // 836
                                      arrayIndices: arrayIndices})];                                  // 837
    }                                                                                                 // 838
                                                                                                      // 839
    var result = [];                                                                                  // 840
    var appendToResult = function (more) {                                                            // 841
      Array.prototype.push.apply(result, more);                                                       // 842
    };                                                                                                // 843
                                                                                                      // 844
    // Dig deeper: look up the rest of the parts on whatever we've found.                             // 845
    // (lookupRest is smart enough to not try to do invalid lookups into                              // 846
    // firstLevel if it's an array.)                                                                  // 847
    appendToResult(lookupRest(firstLevel, arrayIndices));                                             // 848
                                                                                                      // 849
    // If we found an array, then in *addition* to potentially treating the next                      // 850
    // part as a literal integer lookup, we should also "branch": try to look up                      // 851
    // the rest of the parts on each array element in parallel.                                       // 852
    //                                                                                                // 853
    // In this case, we *only* dig deeper into array elements that are plain                          // 854
    // objects. (Recall that we only got this far if we have further to dig.)                         // 855
    // This makes sense: we certainly don't dig deeper into non-indexable                             // 856
    // objects. And it would be weird to dig into an array: it's simpler to have                      // 857
    // a rule that explicit integer indexes only apply to an outer array, not to                      // 858
    // an array you find after a branching search.                                                    // 859
    if (isArray(firstLevel)) {                                                                        // 860
      _.each(firstLevel, function (branch, arrayIndex) {                                              // 861
        if (isPlainObject(branch)) {                                                                  // 862
          appendToResult(lookupRest(                                                                  // 863
            branch,                                                                                   // 864
            arrayIndices.concat(arrayIndex)));                                                        // 865
        }                                                                                             // 866
      });                                                                                             // 867
    }                                                                                                 // 868
                                                                                                      // 869
    return result;                                                                                    // 870
  };                                                                                                  // 871
};                                                                                                    // 872
MinimongoTest.makeLookupFunction = makeLookupFunction;                                                // 873
                                                                                                      // 874
expandArraysInBranches = function (branches, skipTheArrays) {                                         // 875
  var branchesOut = [];                                                                               // 876
  _.each(branches, function (branch) {                                                                // 877
    var thisIsArray = isArray(branch.value);                                                          // 878
    // We include the branch itself, *UNLESS* we it's an array that we're going                       // 879
    // to iterate and we're told to skip arrays.  (That's right, we include some                      // 880
    // arrays even skipTheArrays is true: these are arrays that were found via                        // 881
    // explicit numerical indices.)                                                                   // 882
    if (!(skipTheArrays && thisIsArray && !branch.dontIterate)) {                                     // 883
      branchesOut.push({                                                                              // 884
        value: branch.value,                                                                          // 885
        arrayIndices: branch.arrayIndices                                                             // 886
      });                                                                                             // 887
    }                                                                                                 // 888
    if (thisIsArray && !branch.dontIterate) {                                                         // 889
      _.each(branch.value, function (leaf, i) {                                                       // 890
        branchesOut.push({                                                                            // 891
          value: leaf,                                                                                // 892
          arrayIndices: (branch.arrayIndices || []).concat(i)                                         // 893
        });                                                                                           // 894
      });                                                                                             // 895
    }                                                                                                 // 896
  });                                                                                                 // 897
  return branchesOut;                                                                                 // 898
};                                                                                                    // 899
                                                                                                      // 900
var nothingMatcher = function (docOrBranchedValues) {                                                 // 901
  return {result: false};                                                                             // 902
};                                                                                                    // 903
                                                                                                      // 904
var everythingMatcher = function (docOrBranchedValues) {                                              // 905
  return {result: true};                                                                              // 906
};                                                                                                    // 907
                                                                                                      // 908
                                                                                                      // 909
// NB: We are cheating and using this function to implement "AND" for both                            // 910
// "document matchers" and "branched matchers". They both return result objects                       // 911
// but the argument is different: for the former it's a whole doc, whereas for                        // 912
// the latter it's an array of "branched values".                                                     // 913
var andSomeMatchers = function (subMatchers) {                                                        // 914
  if (subMatchers.length === 0)                                                                       // 915
    return everythingMatcher;                                                                         // 916
  if (subMatchers.length === 1)                                                                       // 917
    return subMatchers[0];                                                                            // 918
                                                                                                      // 919
  return function (docOrBranches) {                                                                   // 920
    var ret = {};                                                                                     // 921
    ret.result = _.all(subMatchers, function (f) {                                                    // 922
      var subResult = f(docOrBranches);                                                               // 923
      // Copy a 'distance' number out of the first sub-matcher that has                               // 924
      // one. Yes, this means that if there are multiple $near fields in a                            // 925
      // query, something arbitrary happens; this appears to be consistent with                       // 926
      // Mongo.                                                                                       // 927
      if (subResult.result && subResult.distance !== undefined                                        // 928
          && ret.distance === undefined) {                                                            // 929
        ret.distance = subResult.distance;                                                            // 930
      }                                                                                               // 931
      // Similarly, propagate arrayIndices from sub-matchers... but to match                          // 932
      // MongoDB behavior, this time the *last* sub-matcher with arrayIndices                         // 933
      // wins.                                                                                        // 934
      if (subResult.result && subResult.arrayIndices) {                                               // 935
        ret.arrayIndices = subResult.arrayIndices;                                                    // 936
      }                                                                                               // 937
      return subResult.result;                                                                        // 938
    });                                                                                               // 939
                                                                                                      // 940
    // If we didn't actually match, forget any extra metadata we came up with.                        // 941
    if (!ret.result) {                                                                                // 942
      delete ret.distance;                                                                            // 943
      delete ret.arrayIndices;                                                                        // 944
    }                                                                                                 // 945
    return ret;                                                                                       // 946
  };                                                                                                  // 947
};                                                                                                    // 948
                                                                                                      // 949
var andDocumentMatchers = andSomeMatchers;                                                            // 950
var andBranchedMatchers = andSomeMatchers;                                                            // 951
                                                                                                      // 952
                                                                                                      // 953
// helpers used by compiled selector code                                                             // 954
LocalCollection._f = {                                                                                // 955
  // XXX for _all and _in, consider building 'inquery' at compile time..                              // 956
                                                                                                      // 957
  _type: function (v) {                                                                               // 958
    if (typeof v === "number")                                                                        // 959
      return 1;                                                                                       // 960
    if (typeof v === "string")                                                                        // 961
      return 2;                                                                                       // 962
    if (typeof v === "boolean")                                                                       // 963
      return 8;                                                                                       // 964
    if (isArray(v))                                                                                   // 965
      return 4;                                                                                       // 966
    if (v === null)                                                                                   // 967
      return 10;                                                                                      // 968
    if (v instanceof RegExp)                                                                          // 969
      // note that typeof(/x/) === "object"                                                           // 970
      return 11;                                                                                      // 971
    if (typeof v === "function")                                                                      // 972
      return 13;                                                                                      // 973
    if (v instanceof Date)                                                                            // 974
      return 9;                                                                                       // 975
    if (EJSON.isBinary(v))                                                                            // 976
      return 5;                                                                                       // 977
    if (v instanceof LocalCollection._ObjectID)                                                       // 978
      return 7;                                                                                       // 979
    return 3; // object                                                                               // 980
                                                                                                      // 981
    // XXX support some/all of these:                                                                 // 982
    // 14, symbol                                                                                     // 983
    // 15, javascript code with scope                                                                 // 984
    // 16, 18: 32-bit/64-bit integer                                                                  // 985
    // 17, timestamp                                                                                  // 986
    // 255, minkey                                                                                    // 987
    // 127, maxkey                                                                                    // 988
  },                                                                                                  // 989
                                                                                                      // 990
  // deep equality test: use for literal document and array matches                                   // 991
  _equal: function (a, b) {                                                                           // 992
    return EJSON.equals(a, b, {keyOrderSensitive: true});                                             // 993
  },                                                                                                  // 994
                                                                                                      // 995
  // maps a type code to a value that can be used to sort values of                                   // 996
  // different types                                                                                  // 997
  _typeorder: function (t) {                                                                          // 998
    // http://www.mongodb.org/display/DOCS/What+is+the+Compare+Order+for+BSON+Types                   // 999
    // XXX what is the correct sort position for Javascript code?                                     // 1000
    // ('100' in the matrix below)                                                                    // 1001
    // XXX minkey/maxkey                                                                              // 1002
    return [-1,  // (not a type)                                                                      // 1003
            1,   // number                                                                            // 1004
            2,   // string                                                                            // 1005
            3,   // object                                                                            // 1006
            4,   // array                                                                             // 1007
            5,   // binary                                                                            // 1008
            -1,  // deprecated                                                                        // 1009
            6,   // ObjectID                                                                          // 1010
            7,   // bool                                                                              // 1011
            8,   // Date                                                                              // 1012
            0,   // null                                                                              // 1013
            9,   // RegExp                                                                            // 1014
            -1,  // deprecated                                                                        // 1015
            100, // JS code                                                                           // 1016
            2,   // deprecated (symbol)                                                               // 1017
            100, // JS code                                                                           // 1018
            1,   // 32-bit int                                                                        // 1019
            8,   // Mongo timestamp                                                                   // 1020
            1    // 64-bit int                                                                        // 1021
           ][t];                                                                                      // 1022
  },                                                                                                  // 1023
                                                                                                      // 1024
  // compare two values of unknown type according to BSON ordering                                    // 1025
  // semantics. (as an extension, consider 'undefined' to be less than                                // 1026
  // any other value.) return negative if a is less, positive if b is                                 // 1027
  // less, or 0 if equal                                                                              // 1028
  _cmp: function (a, b) {                                                                             // 1029
    if (a === undefined)                                                                              // 1030
      return b === undefined ? 0 : -1;                                                                // 1031
    if (b === undefined)                                                                              // 1032
      return 1;                                                                                       // 1033
    var ta = LocalCollection._f._type(a);                                                             // 1034
    var tb = LocalCollection._f._type(b);                                                             // 1035
    var oa = LocalCollection._f._typeorder(ta);                                                       // 1036
    var ob = LocalCollection._f._typeorder(tb);                                                       // 1037
    if (oa !== ob)                                                                                    // 1038
      return oa < ob ? -1 : 1;                                                                        // 1039
    if (ta !== tb)                                                                                    // 1040
      // XXX need to implement this if we implement Symbol or integers, or                            // 1041
      // Timestamp                                                                                    // 1042
      throw Error("Missing type coercion logic in _cmp");                                             // 1043
    if (ta === 7) { // ObjectID                                                                       // 1044
      // Convert to string.                                                                           // 1045
      ta = tb = 2;                                                                                    // 1046
      a = a.toHexString();                                                                            // 1047
      b = b.toHexString();                                                                            // 1048
    }                                                                                                 // 1049
    if (ta === 9) { // Date                                                                           // 1050
      // Convert to millis.                                                                           // 1051
      ta = tb = 1;                                                                                    // 1052
      a = a.getTime();                                                                                // 1053
      b = b.getTime();                                                                                // 1054
    }                                                                                                 // 1055
                                                                                                      // 1056
    if (ta === 1) // double                                                                           // 1057
      return a - b;                                                                                   // 1058
    if (tb === 2) // string                                                                           // 1059
      return a < b ? -1 : (a === b ? 0 : 1);                                                          // 1060
    if (ta === 3) { // Object                                                                         // 1061
      // this could be much more efficient in the expected case ...                                   // 1062
      var to_array = function (obj) {                                                                 // 1063
        var ret = [];                                                                                 // 1064
        for (var key in obj) {                                                                        // 1065
          ret.push(key);                                                                              // 1066
          ret.push(obj[key]);                                                                         // 1067
        }                                                                                             // 1068
        return ret;                                                                                   // 1069
      };                                                                                              // 1070
      return LocalCollection._f._cmp(to_array(a), to_array(b));                                       // 1071
    }                                                                                                 // 1072
    if (ta === 4) { // Array                                                                          // 1073
      for (var i = 0; ; i++) {                                                                        // 1074
        if (i === a.length)                                                                           // 1075
          return (i === b.length) ? 0 : -1;                                                           // 1076
        if (i === b.length)                                                                           // 1077
          return 1;                                                                                   // 1078
        var s = LocalCollection._f._cmp(a[i], b[i]);                                                  // 1079
        if (s !== 0)                                                                                  // 1080
          return s;                                                                                   // 1081
      }                                                                                               // 1082
    }                                                                                                 // 1083
    if (ta === 5) { // binary                                                                         // 1084
      // Surprisingly, a small binary blob is always less than a large one in                         // 1085
      // Mongo.                                                                                       // 1086
      if (a.length !== b.length)                                                                      // 1087
        return a.length - b.length;                                                                   // 1088
      for (i = 0; i < a.length; i++) {                                                                // 1089
        if (a[i] < b[i])                                                                              // 1090
          return -1;                                                                                  // 1091
        if (a[i] > b[i])                                                                              // 1092
          return 1;                                                                                   // 1093
      }                                                                                               // 1094
      return 0;                                                                                       // 1095
    }                                                                                                 // 1096
    if (ta === 8) { // boolean                                                                        // 1097
      if (a) return b ? 0 : 1;                                                                        // 1098
      return b ? -1 : 0;                                                                              // 1099
    }                                                                                                 // 1100
    if (ta === 10) // null                                                                            // 1101
      return 0;                                                                                       // 1102
    if (ta === 11) // regexp                                                                          // 1103
      throw Error("Sorting not supported on regular expression"); // XXX                              // 1104
    // 13: javascript code                                                                            // 1105
    // 14: symbol                                                                                     // 1106
    // 15: javascript code with scope                                                                 // 1107
    // 16: 32-bit integer                                                                             // 1108
    // 17: timestamp                                                                                  // 1109
    // 18: 64-bit integer                                                                             // 1110
    // 255: minkey                                                                                    // 1111
    // 127: maxkey                                                                                    // 1112
    if (ta === 13) // javascript code                                                                 // 1113
      throw Error("Sorting not supported on Javascript code"); // XXX                                 // 1114
    throw Error("Unknown type to sort");                                                              // 1115
  }                                                                                                   // 1116
};                                                                                                    // 1117
                                                                                                      // 1118
// Oddball function used by upsert.                                                                   // 1119
LocalCollection._removeDollarOperators = function (selector) {                                        // 1120
  var selectorDoc = {};                                                                               // 1121
  for (var k in selector)                                                                             // 1122
    if (k.substr(0, 1) !== '$')                                                                       // 1123
      selectorDoc[k] = selector[k];                                                                   // 1124
  return selectorDoc;                                                                                 // 1125
};                                                                                                    // 1126
                                                                                                      // 1127
////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                    //
// packages/minimongo/sort.js                                                                         //
//                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                      //
// Give a sort spec, which can be in any of these forms:                                              // 1
//   {"key1": 1, "key2": -1}                                                                          // 2
//   [["key1", "asc"], ["key2", "desc"]]                                                              // 3
//   ["key1", ["key2", "desc"]]                                                                       // 4
//                                                                                                    // 5
// (.. with the first form being dependent on the key enumeration                                     // 6
// behavior of your javascript VM, which usually does what you mean in                                // 7
// this case if the key names don't look like integers ..)                                            // 8
//                                                                                                    // 9
// return a function that takes two objects, and returns -1 if the                                    // 10
// first object comes first in order, 1 if the second object comes                                    // 11
// first, or 0 if neither object comes before the other.                                              // 12
                                                                                                      // 13
Minimongo.Sorter = function (spec, options) {                                                         // 14
  var self = this;                                                                                    // 15
  options = options || {};                                                                            // 16
                                                                                                      // 17
  self._sortSpecParts = [];                                                                           // 18
                                                                                                      // 19
  var addSpecPart = function (path, ascending) {                                                      // 20
    if (!path)                                                                                        // 21
      throw Error("sort keys must be non-empty");                                                     // 22
    if (path.charAt(0) === '$')                                                                       // 23
      throw Error("unsupported sort key: " + path);                                                   // 24
    self._sortSpecParts.push({                                                                        // 25
      path: path,                                                                                     // 26
      lookup: makeLookupFunction(path),                                                               // 27
      ascending: ascending                                                                            // 28
    });                                                                                               // 29
  };                                                                                                  // 30
                                                                                                      // 31
  if (spec instanceof Array) {                                                                        // 32
    for (var i = 0; i < spec.length; i++) {                                                           // 33
      if (typeof spec[i] === "string") {                                                              // 34
        addSpecPart(spec[i], true);                                                                   // 35
      } else {                                                                                        // 36
        addSpecPart(spec[i][0], spec[i][1] !== "desc");                                               // 37
      }                                                                                               // 38
    }                                                                                                 // 39
  } else if (typeof spec === "object") {                                                              // 40
    _.each(spec, function (value, key) {                                                              // 41
      addSpecPart(key, value >= 0);                                                                   // 42
    });                                                                                               // 43
  } else {                                                                                            // 44
    throw Error("Bad sort specification: " + JSON.stringify(spec));                                   // 45
  }                                                                                                   // 46
                                                                                                      // 47
  // To implement affectedByModifier, we piggy-back on top of Matcher's                               // 48
  // affectedByModifier code; we create a selector that is affected by the same                       // 49
  // modifiers as this sort order. This is only implemented on the server.                            // 50
  if (self.affectedByModifier) {                                                                      // 51
    var selector = {};                                                                                // 52
    _.each(self._sortSpecParts, function (spec) {                                                     // 53
      selector[spec.path] = 1;                                                                        // 54
    });                                                                                               // 55
    self._selectorForAffectedByModifier = new Minimongo.Matcher(selector);                            // 56
  }                                                                                                   // 57
                                                                                                      // 58
  self._keyComparator = composeComparators(                                                           // 59
    _.map(self._sortSpecParts, function (spec, i) {                                                   // 60
      return self._keyFieldComparator(i);                                                             // 61
    }));                                                                                              // 62
                                                                                                      // 63
  // If you specify a matcher for this Sorter, _keyFilter may be set to a                             // 64
  // function which selects whether or not a given "sort key" (tuple of values                        // 65
  // for the different sort spec fields) is compatible with the selector.                             // 66
  self._keyFilter = null;                                                                             // 67
  options.matcher && self._useWithMatcher(options.matcher);                                           // 68
};                                                                                                    // 69
                                                                                                      // 70
// In addition to these methods, sorter_project.js defines combineIntoProjection                      // 71
// on the server only.                                                                                // 72
_.extend(Minimongo.Sorter.prototype, {                                                                // 73
  getComparator: function (options) {                                                                 // 74
    var self = this;                                                                                  // 75
                                                                                                      // 76
    // If we have no distances, just use the comparator from the source                               // 77
    // specification (which defaults to "everything is equal".                                        // 78
    if (!options || !options.distances) {                                                             // 79
      return self._getBaseComparator();                                                               // 80
    }                                                                                                 // 81
                                                                                                      // 82
    var distances = options.distances;                                                                // 83
                                                                                                      // 84
    // Return a comparator which first tries the sort specification, and if that                      // 85
    // says "it's equal", breaks ties using $near distances.                                          // 86
    return composeComparators([self._getBaseComparator(), function (a, b) {                           // 87
      if (!distances.has(a._id))                                                                      // 88
        throw Error("Missing distance for " + a._id);                                                 // 89
      if (!distances.has(b._id))                                                                      // 90
        throw Error("Missing distance for " + b._id);                                                 // 91
      return distances.get(a._id) - distances.get(b._id);                                             // 92
    }]);                                                                                              // 93
  },                                                                                                  // 94
                                                                                                      // 95
  _getPaths: function () {                                                                            // 96
    var self = this;                                                                                  // 97
    return _.pluck(self._sortSpecParts, 'path');                                                      // 98
  },                                                                                                  // 99
                                                                                                      // 100
  // Finds the minimum key from the doc, according to the sort specs.  (We say                        // 101
  // "minimum" here but this is with respect to the sort spec, so "descending"                        // 102
  // sort fields mean we're finding the max for that field.)                                          // 103
  //                                                                                                  // 104
  // Note that this is NOT "find the minimum value of the first field, the                            // 105
  // minimum value of the second field, etc"... it's "choose the                                      // 106
  // lexicographically minimum value of the key vector, allowing only keys which                      // 107
  // you can find along the same paths".  ie, for a doc {a: [{x: 0, y: 5}, {x:                        // 108
  // 1, y: 3}]} with sort spec {'a.x': 1, 'a.y': 1}, the only keys are [0,5] and                      // 109
  // [1,3], and the minimum key is [0,5]; notably, [0,3] is NOT a key.                                // 110
  _getMinKeyFromDoc: function (doc) {                                                                 // 111
    var self = this;                                                                                  // 112
    var minKey = null;                                                                                // 113
                                                                                                      // 114
    self._generateKeysFromDoc(doc, function (key) {                                                   // 115
      if (!self._keyCompatibleWithSelector(key))                                                      // 116
        return;                                                                                       // 117
                                                                                                      // 118
      if (minKey === null) {                                                                          // 119
        minKey = key;                                                                                 // 120
        return;                                                                                       // 121
      }                                                                                               // 122
      if (self._compareKeys(key, minKey) < 0) {                                                       // 123
        minKey = key;                                                                                 // 124
      }                                                                                               // 125
    });                                                                                               // 126
                                                                                                      // 127
    // This could happen if our key filter somehow filters out all the keys even                      // 128
    // though somehow the selector matches.                                                           // 129
    if (minKey === null)                                                                              // 130
      throw Error("sort selector found no keys in doc?");                                             // 131
    return minKey;                                                                                    // 132
  },                                                                                                  // 133
                                                                                                      // 134
  _keyCompatibleWithSelector: function (key) {                                                        // 135
    var self = this;                                                                                  // 136
    return !self._keyFilter || self._keyFilter(key);                                                  // 137
  },                                                                                                  // 138
                                                                                                      // 139
  // Iterates over each possible "key" from doc (ie, over each branch), calling                       // 140
  // 'cb' with the key.                                                                               // 141
  _generateKeysFromDoc: function (doc, cb) {                                                          // 142
    var self = this;                                                                                  // 143
                                                                                                      // 144
    if (self._sortSpecParts.length === 0)                                                             // 145
      throw new Error("can't generate keys without a spec");                                          // 146
                                                                                                      // 147
    // maps index -> ({'' -> value} or {path -> value})                                               // 148
    var valuesByIndexAndPath = [];                                                                    // 149
                                                                                                      // 150
    var pathFromIndices = function (indices) {                                                        // 151
      return indices.join(',') + ',';                                                                 // 152
    };                                                                                                // 153
                                                                                                      // 154
    var knownPaths = null;                                                                            // 155
                                                                                                      // 156
    _.each(self._sortSpecParts, function (spec, whichField) {                                         // 157
      // Expand any leaf arrays that we find, and ignore those arrays                                 // 158
      // themselves.  (We never sort based on an array itself.)                                       // 159
      var branches = expandArraysInBranches(spec.lookup(doc), true);                                  // 160
                                                                                                      // 161
      // If there are no values for a key (eg, key goes to an empty array),                           // 162
      // pretend we found one null value.                                                             // 163
      if (!branches.length)                                                                           // 164
        branches = [{value: null}];                                                                   // 165
                                                                                                      // 166
      var usedPaths = false;                                                                          // 167
      valuesByIndexAndPath[whichField] = {};                                                          // 168
      _.each(branches, function (branch) {                                                            // 169
        if (!branch.arrayIndices) {                                                                   // 170
          // If there are no array indices for a branch, then it must be the                          // 171
          // only branch, because the only thing that produces multiple branches                      // 172
          // is the use of arrays.                                                                    // 173
          if (branches.length > 1)                                                                    // 174
            throw Error("multiple branches but no array used?");                                      // 175
          valuesByIndexAndPath[whichField][''] = branch.value;                                        // 176
          return;                                                                                     // 177
        }                                                                                             // 178
                                                                                                      // 179
        usedPaths = true;                                                                             // 180
        var path = pathFromIndices(branch.arrayIndices);                                              // 181
        if (_.has(valuesByIndexAndPath[whichField], path))                                            // 182
          throw Error("duplicate path: " + path);                                                     // 183
        valuesByIndexAndPath[whichField][path] = branch.value;                                        // 184
                                                                                                      // 185
        // If two sort fields both go into arrays, they have to go into the                           // 186
        // exact same arrays and we have to find the same paths.  This is                             // 187
        // roughly the same condition that makes MongoDB throw this strange                           // 188
        // error message.  eg, the main thing is that if sort spec is {a: 1,                          // 189
        // b:1} then a and b cannot both be arrays.                                                   // 190
        //                                                                                            // 191
        // (In MongoDB it seems to be OK to have {a: 1, 'a.x.y': 1} where 'a'                         // 192
        // and 'a.x.y' are both arrays, but we don't allow this for now.                              // 193
        // #NestedArraySort                                                                           // 194
        // XXX achieve full compatibility here                                                        // 195
        if (knownPaths && !_.has(knownPaths, path)) {                                                 // 196
          throw Error("cannot index parallel arrays");                                                // 197
        }                                                                                             // 198
      });                                                                                             // 199
                                                                                                      // 200
      if (knownPaths) {                                                                               // 201
        // Similarly to above, paths must match everywhere, unless this is a                          // 202
        // non-array field.                                                                           // 203
        if (!_.has(valuesByIndexAndPath[whichField], '') &&                                           // 204
            _.size(knownPaths) !== _.size(valuesByIndexAndPath[whichField])) {                        // 205
          throw Error("cannot index parallel arrays!");                                               // 206
        }                                                                                             // 207
      } else if (usedPaths) {                                                                         // 208
        knownPaths = {};                                                                              // 209
        _.each(valuesByIndexAndPath[whichField], function (x, path) {                                 // 210
          knownPaths[path] = true;                                                                    // 211
        });                                                                                           // 212
      }                                                                                               // 213
    });                                                                                               // 214
                                                                                                      // 215
    if (!knownPaths) {                                                                                // 216
      // Easy case: no use of arrays.                                                                 // 217
      var soleKey = _.map(valuesByIndexAndPath, function (values) {                                   // 218
        if (!_.has(values, ''))                                                                       // 219
          throw Error("no value in sole key case?");                                                  // 220
        return values[''];                                                                            // 221
      });                                                                                             // 222
      cb(soleKey);                                                                                    // 223
      return;                                                                                         // 224
    }                                                                                                 // 225
                                                                                                      // 226
    _.each(knownPaths, function (x, path) {                                                           // 227
      var key = _.map(valuesByIndexAndPath, function (values) {                                       // 228
        if (_.has(values, ''))                                                                        // 229
          return values[''];                                                                          // 230
        if (!_.has(values, path))                                                                     // 231
          throw Error("missing path?");                                                               // 232
        return values[path];                                                                          // 233
      });                                                                                             // 234
      cb(key);                                                                                        // 235
    });                                                                                               // 236
  },                                                                                                  // 237
                                                                                                      // 238
  // Takes in two keys: arrays whose lengths match the number of spec                                 // 239
  // parts. Returns negative, 0, or positive based on using the sort spec to                          // 240
  // compare fields.                                                                                  // 241
  _compareKeys: function (key1, key2) {                                                               // 242
    var self = this;                                                                                  // 243
    if (key1.length !== self._sortSpecParts.length ||                                                 // 244
        key2.length !== self._sortSpecParts.length) {                                                 // 245
      throw Error("Key has wrong length");                                                            // 246
    }                                                                                                 // 247
                                                                                                      // 248
    return self._keyComparator(key1, key2);                                                           // 249
  },                                                                                                  // 250
                                                                                                      // 251
  // Given an index 'i', returns a comparator that compares two key arrays based                      // 252
  // on field 'i'.                                                                                    // 253
  _keyFieldComparator: function (i) {                                                                 // 254
    var self = this;                                                                                  // 255
    var invert = !self._sortSpecParts[i].ascending;                                                   // 256
    return function (key1, key2) {                                                                    // 257
      var compare = LocalCollection._f._cmp(key1[i], key2[i]);                                        // 258
      if (invert)                                                                                     // 259
        compare = -compare;                                                                           // 260
      return compare;                                                                                 // 261
    };                                                                                                // 262
  },                                                                                                  // 263
                                                                                                      // 264
  // Returns a comparator that represents the sort specification (but not                             // 265
  // including a possible geoquery distance tie-breaker).                                             // 266
  _getBaseComparator: function () {                                                                   // 267
    var self = this;                                                                                  // 268
                                                                                                      // 269
    // If we're only sorting on geoquery distance and no specs, just say                              // 270
    // everything is equal.                                                                           // 271
    if (!self._sortSpecParts.length) {                                                                // 272
      return function (doc1, doc2) {                                                                  // 273
        return 0;                                                                                     // 274
      };                                                                                              // 275
    }                                                                                                 // 276
                                                                                                      // 277
    return function (doc1, doc2) {                                                                    // 278
      var key1 = self._getMinKeyFromDoc(doc1);                                                        // 279
      var key2 = self._getMinKeyFromDoc(doc2);                                                        // 280
      return self._compareKeys(key1, key2);                                                           // 281
    };                                                                                                // 282
  },                                                                                                  // 283
                                                                                                      // 284
  // In MongoDB, if you have documents                                                                // 285
  //    {_id: 'x', a: [1, 10]} and                                                                    // 286
  //    {_id: 'y', a: [5, 15]},                                                                       // 287
  // then C.find({}, {sort: {a: 1}}) puts x before y (1 comes before 5).                              // 288
  // But  C.find({a: {$gt: 3}}, {sort: {a: 1}}) puts y before x (1 does not                           // 289
  // match the selector, and 5 comes before 10).                                                      // 290
  //                                                                                                  // 291
  // The way this works is pretty subtle!  For example, if the documents                              // 292
  // are instead {_id: 'x', a: [{x: 1}, {x: 10}]}) and                                                // 293
  //             {_id: 'y', a: [{x: 5}, {x: 15}]}),                                                   // 294
  // then C.find({'a.x': {$gt: 3}}, {sort: {'a.x': 1}}) and                                           // 295
  //      C.find({a: {$elemMatch: {x: {$gt: 3}}}}, {sort: {'a.x': 1}})                                // 296
  // both follow this rule (y before x).  (ie, you do have to apply this                              // 297
  // through $elemMatch.)                                                                             // 298
  //                                                                                                  // 299
  // So if you pass a matcher to this sorter's constructor, we will attempt to                        // 300
  // skip sort keys that don't match the selector. The logic here is pretty                           // 301
  // subtle and undocumented; we've gotten as close as we can figure out based                        // 302
  // on our understanding of Mongo's behavior.                                                        // 303
  _useWithMatcher: function (matcher) {                                                               // 304
    var self = this;                                                                                  // 305
                                                                                                      // 306
    if (self._keyFilter)                                                                              // 307
      throw Error("called _useWithMatcher twice?");                                                   // 308
                                                                                                      // 309
    // If we are only sorting by distance, then we're not going to bother to                          // 310
    // build a key filter.                                                                            // 311
    // XXX figure out how geoqueries interact with this stuff                                         // 312
    if (_.isEmpty(self._sortSpecParts))                                                               // 313
      return;                                                                                         // 314
                                                                                                      // 315
    var selector = matcher._selector;                                                                 // 316
                                                                                                      // 317
    // If the user just passed a literal function to find(), then we can't get a                      // 318
    // key filter from it.                                                                            // 319
    if (selector instanceof Function)                                                                 // 320
      return;                                                                                         // 321
                                                                                                      // 322
    var constraintsByPath = {};                                                                       // 323
    _.each(self._sortSpecParts, function (spec, i) {                                                  // 324
      constraintsByPath[spec.path] = [];                                                              // 325
    });                                                                                               // 326
                                                                                                      // 327
    _.each(selector, function (subSelector, key) {                                                    // 328
      // XXX support $and and $or                                                                     // 329
                                                                                                      // 330
      var constraints = constraintsByPath[key];                                                       // 331
      if (!constraints)                                                                               // 332
        return;                                                                                       // 333
                                                                                                      // 334
      // XXX it looks like the real MongoDB implementation isn't "does the                            // 335
      // regexp match" but "does the value fall into a range named by the                             // 336
      // literal prefix of the regexp", ie "foo" in /^foo(bar|baz)+/  But                             // 337
      // "does the regexp match" is a good approximation.                                             // 338
      if (subSelector instanceof RegExp) {                                                            // 339
        // As far as we can tell, using either of the options that both we and                        // 340
        // MongoDB support ('i' and 'm') disables use of the key filter. This                         // 341
        // makes sense: MongoDB mostly appears to be calculating ranges of an                         // 342
        // index to use, which means it only cares about regexps that match                           // 343
        // one range (with a literal prefix), and both 'i' and 'm' prevent the                        // 344
        // literal prefix of the regexp from actually meaning one range.                              // 345
        if (subSelector.ignoreCase || subSelector.multiline)                                          // 346
          return;                                                                                     // 347
        constraints.push(regexpElementMatcher(subSelector));                                          // 348
        return;                                                                                       // 349
      }                                                                                               // 350
                                                                                                      // 351
      if (isOperatorObject(subSelector)) {                                                            // 352
        _.each(subSelector, function (operand, operator) {                                            // 353
          if (_.contains(['$lt', '$lte', '$gt', '$gte'], operator)) {                                 // 354
            // XXX this depends on us knowing that these operators don't use any                      // 355
            // of the arguments to compileElementSelector other than operand.                         // 356
            constraints.push(                                                                         // 357
              ELEMENT_OPERATORS[operator].compileElementSelector(operand));                           // 358
          }                                                                                           // 359
                                                                                                      // 360
          // See comments in the RegExp block above.                                                  // 361
          if (operator === '$regex' && !subSelector.$options) {                                       // 362
            constraints.push(                                                                         // 363
              ELEMENT_OPERATORS.$regex.compileElementSelector(                                        // 364
                operand, subSelector));                                                               // 365
          }                                                                                           // 366
                                                                                                      // 367
          // XXX support {$exists: true}, $mod, $type, $in, $elemMatch                                // 368
        });                                                                                           // 369
        return;                                                                                       // 370
      }                                                                                               // 371
                                                                                                      // 372
      // OK, it's an equality thing.                                                                  // 373
      constraints.push(equalityElementMatcher(subSelector));                                          // 374
    });                                                                                               // 375
                                                                                                      // 376
    // It appears that the first sort field is treated differently from the                           // 377
    // others; we shouldn't create a key filter unless the first sort field is                        // 378
    // restricted, though after that point we can restrict the other sort fields                      // 379
    // or not as we wish.                                                                             // 380
    if (_.isEmpty(constraintsByPath[self._sortSpecParts[0].path]))                                    // 381
      return;                                                                                         // 382
                                                                                                      // 383
    self._keyFilter = function (key) {                                                                // 384
      return _.all(self._sortSpecParts, function (specPart, index) {                                  // 385
        return _.all(constraintsByPath[specPart.path], function (f) {                                 // 386
          return f(key[index]);                                                                       // 387
        });                                                                                           // 388
      });                                                                                             // 389
    };                                                                                                // 390
  }                                                                                                   // 391
});                                                                                                   // 392
                                                                                                      // 393
// Given an array of comparators                                                                      // 394
// (functions (a,b)->(negative or positive or zero)), returns a single                                // 395
// comparator which uses each comparator in order and returns the first                               // 396
// non-zero value.                                                                                    // 397
var composeComparators = function (comparatorArray) {                                                 // 398
  return function (a, b) {                                                                            // 399
    for (var i = 0; i < comparatorArray.length; ++i) {                                                // 400
      var compare = comparatorArray[i](a, b);                                                         // 401
      if (compare !== 0)                                                                              // 402
        return compare;                                                                               // 403
    }                                                                                                 // 404
    return 0;                                                                                         // 405
  };                                                                                                  // 406
};                                                                                                    // 407
                                                                                                      // 408
////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                    //
// packages/minimongo/projection.js                                                                   //
//                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                      //
// Knows how to compile a fields projection to a predicate function.                                  // 1
// @returns - Function: a closure that filters out an object according to the                         // 2
//            fields projection rules:                                                                // 3
//            @param obj - Object: MongoDB-styled document                                            // 4
//            @returns - Object: a document with the fields filtered out                              // 5
//                       according to projection rules. Doesn't retain subfields                      // 6
//                       of passed argument.                                                          // 7
LocalCollection._compileProjection = function (fields) {                                              // 8
  LocalCollection._checkSupportedProjection(fields);                                                  // 9
                                                                                                      // 10
  var _idProjection = _.isUndefined(fields._id) ? true : fields._id;                                  // 11
  var details = projectionDetails(fields);                                                            // 12
                                                                                                      // 13
  // returns transformed doc according to ruleTree                                                    // 14
  var transform = function (doc, ruleTree) {                                                          // 15
    // Special case for "sets"                                                                        // 16
    if (_.isArray(doc))                                                                               // 17
      return _.map(doc, function (subdoc) { return transform(subdoc, ruleTree); });                   // 18
                                                                                                      // 19
    var res = details.including ? {} : EJSON.clone(doc);                                              // 20
    _.each(ruleTree, function (rule, key) {                                                           // 21
      if (!_.has(doc, key))                                                                           // 22
        return;                                                                                       // 23
      if (_.isObject(rule)) {                                                                         // 24
        // For sub-objects/subsets we branch                                                          // 25
        if (_.isObject(doc[key]))                                                                     // 26
          res[key] = transform(doc[key], rule);                                                       // 27
        // Otherwise we don't even touch this subfield                                                // 28
      } else if (details.including)                                                                   // 29
        res[key] = EJSON.clone(doc[key]);                                                             // 30
      else                                                                                            // 31
        delete res[key];                                                                              // 32
    });                                                                                               // 33
                                                                                                      // 34
    return res;                                                                                       // 35
  };                                                                                                  // 36
                                                                                                      // 37
  return function (obj) {                                                                             // 38
    var res = transform(obj, details.tree);                                                           // 39
                                                                                                      // 40
    if (_idProjection && _.has(obj, '_id'))                                                           // 41
      res._id = obj._id;                                                                              // 42
    if (!_idProjection && _.has(res, '_id'))                                                          // 43
      delete res._id;                                                                                 // 44
    return res;                                                                                       // 45
  };                                                                                                  // 46
};                                                                                                    // 47
                                                                                                      // 48
// Traverses the keys of passed projection and constructs a tree where all                            // 49
// leaves are either all True or all False                                                            // 50
// @returns Object:                                                                                   // 51
//  - tree - Object - tree representation of keys involved in projection                              // 52
//  (exception for '_id' as it is a special case handled separately)                                  // 53
//  - including - Boolean - "take only certain fields" type of projection                             // 54
projectionDetails = function (fields) {                                                               // 55
  // Find the non-_id keys (_id is handled specially because it is included unless                    // 56
  // explicitly excluded). Sort the keys, so that our code to detect overlaps                         // 57
  // like 'foo' and 'foo.bar' can assume that 'foo' comes first.                                      // 58
  var fieldsKeys = _.keys(fields).sort();                                                             // 59
                                                                                                      // 60
  // If there are other rules other than '_id', treat '_id' differently in a                          // 61
  // separate case. If '_id' is the only rule, use it to understand if it is                          // 62
  // including/excluding projection.                                                                  // 63
  if (fieldsKeys.length > 0 && !(fieldsKeys.length === 1 && fieldsKeys[0] === '_id'))                 // 64
    fieldsKeys = _.reject(fieldsKeys, function (key) { return key === '_id'; });                      // 65
                                                                                                      // 66
  var including = null; // Unknown                                                                    // 67
                                                                                                      // 68
  _.each(fieldsKeys, function (keyPath) {                                                             // 69
    var rule = !!fields[keyPath];                                                                     // 70
    if (including === null)                                                                           // 71
      including = rule;                                                                               // 72
    if (including !== rule)                                                                           // 73
      // This error message is copies from MongoDB shell                                              // 74
      throw MinimongoError("You cannot currently mix including and excluding fields.");               // 75
  });                                                                                                 // 76
                                                                                                      // 77
                                                                                                      // 78
  var projectionRulesTree = pathsToTree(                                                              // 79
    fieldsKeys,                                                                                       // 80
    function (path) { return including; },                                                            // 81
    function (node, path, fullPath) {                                                                 // 82
      // Check passed projection fields' keys: If you have two rules such as                          // 83
      // 'foo.bar' and 'foo.bar.baz', then the result becomes ambiguous. If                           // 84
      // that happens, there is a probability you are doing something wrong,                          // 85
      // framework should notify you about such mistake earlier on cursor                             // 86
      // compilation step than later during runtime.  Note, that real mongo                           // 87
      // doesn't do anything about it and the later rule appears in projection                        // 88
      // project, more priority it takes.                                                             // 89
      //                                                                                              // 90
      // Example, assume following in mongo shell:                                                    // 91
      // > db.coll.insert({ a: { b: 23, c: 44 } })                                                    // 92
      // > db.coll.find({}, { 'a': 1, 'a.b': 1 })                                                     // 93
      // { "_id" : ObjectId("520bfe456024608e8ef24af3"), "a" : { "b" : 23 } }                         // 94
      // > db.coll.find({}, { 'a.b': 1, 'a': 1 })                                                     // 95
      // { "_id" : ObjectId("520bfe456024608e8ef24af3"), "a" : { "b" : 23, "c" : 44 } }               // 96
      //                                                                                              // 97
      // Note, how second time the return set of keys is different.                                   // 98
                                                                                                      // 99
      var currentPath = fullPath;                                                                     // 100
      var anotherPath = path;                                                                         // 101
      throw MinimongoError("both " + currentPath + " and " + anotherPath +                            // 102
                           " found in fields option, using both of them may trigger " +               // 103
                           "unexpected behavior. Did you mean to use only one of them?");             // 104
    });                                                                                               // 105
                                                                                                      // 106
  return {                                                                                            // 107
    tree: projectionRulesTree,                                                                        // 108
    including: including                                                                              // 109
  };                                                                                                  // 110
};                                                                                                    // 111
                                                                                                      // 112
// paths - Array: list of mongo style paths                                                           // 113
// newLeafFn - Function: of form function(path) should return a scalar value to                       // 114
//                       put into list created for that path                                          // 115
// conflictFn - Function: of form function(node, path, fullPath) is called                            // 116
//                        when building a tree path for 'fullPath' node on                            // 117
//                        'path' was already a leaf with a value. Must return a                       // 118
//                        conflict resolution.                                                        // 119
// initial tree - Optional Object: starting tree.                                                     // 120
// @returns - Object: tree represented as a set of nested objects                                     // 121
pathsToTree = function (paths, newLeafFn, conflictFn, tree) {                                         // 122
  tree = tree || {};                                                                                  // 123
  _.each(paths, function (keyPath) {                                                                  // 124
    var treePos = tree;                                                                               // 125
    var pathArr = keyPath.split('.');                                                                 // 126
                                                                                                      // 127
    // use _.all just for iteration with break                                                        // 128
    var success = _.all(pathArr.slice(0, -1), function (key, idx) {                                   // 129
      if (!_.has(treePos, key))                                                                       // 130
        treePos[key] = {};                                                                            // 131
      else if (!_.isObject(treePos[key])) {                                                           // 132
        treePos[key] = conflictFn(treePos[key],                                                       // 133
                                  pathArr.slice(0, idx + 1).join('.'),                                // 134
                                  keyPath);                                                           // 135
        // break out of loop if we are failing for this path                                          // 136
        if (!_.isObject(treePos[key]))                                                                // 137
          return false;                                                                               // 138
      }                                                                                               // 139
                                                                                                      // 140
      treePos = treePos[key];                                                                         // 141
      return true;                                                                                    // 142
    });                                                                                               // 143
                                                                                                      // 144
    if (success) {                                                                                    // 145
      var lastKey = _.last(pathArr);                                                                  // 146
      if (!_.has(treePos, lastKey))                                                                   // 147
        treePos[lastKey] = newLeafFn(keyPath);                                                        // 148
      else                                                                                            // 149
        treePos[lastKey] = conflictFn(treePos[lastKey], keyPath, keyPath);                            // 150
    }                                                                                                 // 151
  });                                                                                                 // 152
                                                                                                      // 153
  return tree;                                                                                        // 154
};                                                                                                    // 155
                                                                                                      // 156
LocalCollection._checkSupportedProjection = function (fields) {                                       // 157
  if (!_.isObject(fields) || _.isArray(fields))                                                       // 158
    throw MinimongoError("fields option must be an object");                                          // 159
                                                                                                      // 160
  _.each(fields, function (val, keyPath) {                                                            // 161
    if (_.contains(keyPath.split('.'), '$'))                                                          // 162
      throw MinimongoError("Minimongo doesn't support $ operator in projections yet.");               // 163
    if (_.indexOf([1, 0, true, false], val) === -1)                                                   // 164
      throw MinimongoError("Projection values should be one of 1, 0, true, or false");                // 165
  });                                                                                                 // 166
};                                                                                                    // 167
                                                                                                      // 168
                                                                                                      // 169
////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                    //
// packages/minimongo/modify.js                                                                       //
//                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                      //
// XXX need a strategy for passing the binding of $ into this                                         // 1
// function, from the compiled selector                                                               // 2
//                                                                                                    // 3
// maybe just {key.up.to.just.before.dollarsign: array_index}                                         // 4
//                                                                                                    // 5
// XXX atomicity: if one modification fails, do we roll back the whole                                // 6
// change?                                                                                            // 7
//                                                                                                    // 8
// options:                                                                                           // 9
//   - isInsert is set when _modify is being called to compute the document to                        // 10
//     insert as part of an upsert operation. We use this primarily to figure                         // 11
//     out when to set the fields in $setOnInsert, if present.                                        // 12
LocalCollection._modify = function (doc, mod, options) {                                              // 13
  options = options || {};                                                                            // 14
  if (!isPlainObject(mod))                                                                            // 15
    throw MinimongoError("Modifier must be an object");                                               // 16
  var isModifier = isOperatorObject(mod);                                                             // 17
                                                                                                      // 18
  var newDoc;                                                                                         // 19
                                                                                                      // 20
  if (!isModifier) {                                                                                  // 21
    if (mod._id && !EJSON.equals(doc._id, mod._id))                                                   // 22
      throw MinimongoError("Cannot change the _id of a document");                                    // 23
                                                                                                      // 24
    // replace the whole document                                                                     // 25
    for (var k in mod) {                                                                              // 26
      if (/\./.test(k))                                                                               // 27
        throw MinimongoError(                                                                         // 28
          "When replacing document, field name may not contain '.'");                                 // 29
    }                                                                                                 // 30
    newDoc = mod;                                                                                     // 31
  } else {                                                                                            // 32
    // apply modifiers to the doc.                                                                    // 33
    newDoc = EJSON.clone(doc);                                                                        // 34
                                                                                                      // 35
    _.each(mod, function (operand, op) {                                                              // 36
      var modFunc = MODIFIERS[op];                                                                    // 37
      // Treat $setOnInsert as $set if this is an insert.                                             // 38
      if (options.isInsert && op === '$setOnInsert')                                                  // 39
        modFunc = MODIFIERS['$set'];                                                                  // 40
      if (!modFunc)                                                                                   // 41
        throw MinimongoError("Invalid modifier specified " + op);                                     // 42
      _.each(operand, function (arg, keypath) {                                                       // 43
        // XXX mongo doesn't allow mod field names to end in a period,                                // 44
        // but I don't see why.. it allows '' as a key, as does JS                                    // 45
        if (keypath.length && keypath[keypath.length-1] === '.')                                      // 46
          throw MinimongoError(                                                                       // 47
            "Invalid mod field name, may not end in a period");                                       // 48
                                                                                                      // 49
        if (keypath === '_id')                                                                        // 50
          throw MinimongoError("Mod on _id not allowed");                                             // 51
                                                                                                      // 52
        var keyparts = keypath.split('.');                                                            // 53
        var noCreate = _.has(NO_CREATE_MODIFIERS, op);                                                // 54
        var forbidArray = (op === "$rename");                                                         // 55
        var target = findModTarget(newDoc, keyparts, {                                                // 56
          noCreate: NO_CREATE_MODIFIERS[op],                                                          // 57
          forbidArray: (op === "$rename"),                                                            // 58
          arrayIndices: options.arrayIndices                                                          // 59
        });                                                                                           // 60
        var field = keyparts.pop();                                                                   // 61
        modFunc(target, field, arg, keypath, newDoc);                                                 // 62
      });                                                                                             // 63
    });                                                                                               // 64
  }                                                                                                   // 65
                                                                                                      // 66
  // move new document into place.                                                                    // 67
  _.each(_.keys(doc), function (k) {                                                                  // 68
    // Note: this used to be for (var k in doc) however, this does not                                // 69
    // work right in Opera. Deleting from a doc while iterating over it                               // 70
    // would sometimes cause opera to skip some keys.                                                 // 71
                                                                                                      // 72
    // isInsert: if we're constructing a document to insert (via upsert)                              // 73
    // and we're in replacement mode, not modify mode, DON'T take the                                 // 74
    // _id from the query.  This matches mongo's behavior.                                            // 75
    if (k !== '_id' || options.isInsert)                                                              // 76
      delete doc[k];                                                                                  // 77
  });                                                                                                 // 78
  _.each(newDoc, function (v, k) {                                                                    // 79
    doc[k] = v;                                                                                       // 80
  });                                                                                                 // 81
};                                                                                                    // 82
                                                                                                      // 83
// for a.b.c.2.d.e, keyparts should be ['a', 'b', 'c', '2', 'd', 'e'],                                // 84
// and then you would operate on the 'e' property of the returned                                     // 85
// object.                                                                                            // 86
//                                                                                                    // 87
// if options.noCreate is falsey, creates intermediate levels of                                      // 88
// structure as necessary, like mkdir -p (and raises an exception if                                  // 89
// that would mean giving a non-numeric property to an array.) if                                     // 90
// options.noCreate is true, return undefined instead.                                                // 91
//                                                                                                    // 92
// may modify the last element of keyparts to signal to the caller that it needs                      // 93
// to use a different value to index into the returned object (for example,                           // 94
// ['a', '01'] -> ['a', 1]).                                                                          // 95
//                                                                                                    // 96
// if forbidArray is true, return null if the keypath goes through an array.                          // 97
//                                                                                                    // 98
// if options.arrayIndices is set, use its first element for the (first) '$' in                       // 99
// the path.                                                                                          // 100
var findModTarget = function (doc, keyparts, options) {                                               // 101
  options = options || {};                                                                            // 102
  var usedArrayIndex = false;                                                                         // 103
  for (var i = 0; i < keyparts.length; i++) {                                                         // 104
    var last = (i === keyparts.length - 1);                                                           // 105
    var keypart = keyparts[i];                                                                        // 106
    var indexable = isIndexable(doc);                                                                 // 107
    if (!indexable) {                                                                                 // 108
      if (options.noCreate)                                                                           // 109
        return undefined;                                                                             // 110
      var e = MinimongoError(                                                                         // 111
        "cannot use the part '" + keypart + "' to traverse " + doc);                                  // 112
      e.setPropertyError = true;                                                                      // 113
      throw e;                                                                                        // 114
    }                                                                                                 // 115
    if (doc instanceof Array) {                                                                       // 116
      if (options.forbidArray)                                                                        // 117
        return null;                                                                                  // 118
      if (keypart === '$') {                                                                          // 119
        if (usedArrayIndex)                                                                           // 120
          throw MinimongoError("Too many positional (i.e. '$') elements");                            // 121
        if (!options.arrayIndices || !options.arrayIndices.length) {                                  // 122
          throw MinimongoError("The positional operator did not find the " +                          // 123
                               "match needed from the query");                                        // 124
        }                                                                                             // 125
        keypart = options.arrayIndices[0];                                                            // 126
        usedArrayIndex = true;                                                                        // 127
      } else if (isNumericKey(keypart)) {                                                             // 128
        keypart = parseInt(keypart);                                                                  // 129
      } else {                                                                                        // 130
        if (options.noCreate)                                                                         // 131
          return undefined;                                                                           // 132
        throw MinimongoError(                                                                         // 133
          "can't append to array using string field name ["                                           // 134
                    + keypart + "]");                                                                 // 135
      }                                                                                               // 136
      if (last)                                                                                       // 137
        // handle 'a.01'                                                                              // 138
        keyparts[i] = keypart;                                                                        // 139
      if (options.noCreate && keypart >= doc.length)                                                  // 140
        return undefined;                                                                             // 141
      while (doc.length < keypart)                                                                    // 142
        doc.push(null);                                                                               // 143
      if (!last) {                                                                                    // 144
        if (doc.length === keypart)                                                                   // 145
          doc.push({});                                                                               // 146
        else if (typeof doc[keypart] !== "object")                                                    // 147
          throw MinimongoError("can't modify field '" + keyparts[i + 1] +                             // 148
                      "' of list value " + JSON.stringify(doc[keypart]));                             // 149
      }                                                                                               // 150
    } else {                                                                                          // 151
      if (keypart.length && keypart.substr(0, 1) === '$')                                             // 152
        throw MinimongoError("can't set field named " + keypart);                                     // 153
      if (!(keypart in doc)) {                                                                        // 154
        if (options.noCreate)                                                                         // 155
          return undefined;                                                                           // 156
        if (!last)                                                                                    // 157
          doc[keypart] = {};                                                                          // 158
      }                                                                                               // 159
    }                                                                                                 // 160
                                                                                                      // 161
    if (last)                                                                                         // 162
      return doc;                                                                                     // 163
    doc = doc[keypart];                                                                               // 164
  }                                                                                                   // 165
                                                                                                      // 166
  // notreached                                                                                       // 167
};                                                                                                    // 168
                                                                                                      // 169
var NO_CREATE_MODIFIERS = {                                                                           // 170
  $unset: true,                                                                                       // 171
  $pop: true,                                                                                         // 172
  $rename: true,                                                                                      // 173
  $pull: true,                                                                                        // 174
  $pullAll: true                                                                                      // 175
};                                                                                                    // 176
                                                                                                      // 177
var MODIFIERS = {                                                                                     // 178
  $inc: function (target, field, arg) {                                                               // 179
    if (typeof arg !== "number")                                                                      // 180
      throw MinimongoError("Modifier $inc allowed for numbers only");                                 // 181
    if (field in target) {                                                                            // 182
      if (typeof target[field] !== "number")                                                          // 183
        throw MinimongoError("Cannot apply $inc modifier to non-number");                             // 184
      target[field] += arg;                                                                           // 185
    } else {                                                                                          // 186
      target[field] = arg;                                                                            // 187
    }                                                                                                 // 188
  },                                                                                                  // 189
  $set: function (target, field, arg) {                                                               // 190
    if (!_.isObject(target)) { // not an array or an object                                           // 191
      var e = MinimongoError("Cannot set property on non-object field");                              // 192
      e.setPropertyError = true;                                                                      // 193
      throw e;                                                                                        // 194
    }                                                                                                 // 195
    if (target === null) {                                                                            // 196
      var e = MinimongoError("Cannot set property on null");                                          // 197
      e.setPropertyError = true;                                                                      // 198
      throw e;                                                                                        // 199
    }                                                                                                 // 200
    target[field] = EJSON.clone(arg);                                                                 // 201
  },                                                                                                  // 202
  $setOnInsert: function (target, field, arg) {                                                       // 203
    // converted to `$set` in `_modify`                                                               // 204
  },                                                                                                  // 205
  $unset: function (target, field, arg) {                                                             // 206
    if (target !== undefined) {                                                                       // 207
      if (target instanceof Array) {                                                                  // 208
        if (field in target)                                                                          // 209
          target[field] = null;                                                                       // 210
      } else                                                                                          // 211
        delete target[field];                                                                         // 212
    }                                                                                                 // 213
  },                                                                                                  // 214
  $push: function (target, field, arg) {                                                              // 215
    if (target[field] === undefined)                                                                  // 216
      target[field] = [];                                                                             // 217
    if (!(target[field] instanceof Array))                                                            // 218
      throw MinimongoError("Cannot apply $push modifier to non-array");                               // 219
                                                                                                      // 220
    if (!(arg && arg.$each)) {                                                                        // 221
      // Simple mode: not $each                                                                       // 222
      target[field].push(EJSON.clone(arg));                                                           // 223
      return;                                                                                         // 224
    }                                                                                                 // 225
                                                                                                      // 226
    // Fancy mode: $each (and maybe $slice and $sort)                                                 // 227
    var toPush = arg.$each;                                                                           // 228
    if (!(toPush instanceof Array))                                                                   // 229
      throw MinimongoError("$each must be an array");                                                 // 230
                                                                                                      // 231
    // Parse $slice.                                                                                  // 232
    var slice = undefined;                                                                            // 233
    if ('$slice' in arg) {                                                                            // 234
      if (typeof arg.$slice !== "number")                                                             // 235
        throw MinimongoError("$slice must be a numeric value");                                       // 236
      // XXX should check to make sure integer                                                        // 237
      if (arg.$slice > 0)                                                                             // 238
        throw MinimongoError("$slice in $push must be zero or negative");                             // 239
      slice = arg.$slice;                                                                             // 240
    }                                                                                                 // 241
                                                                                                      // 242
    // Parse $sort.                                                                                   // 243
    var sortFunction = undefined;                                                                     // 244
    if (arg.$sort) {                                                                                  // 245
      if (slice === undefined)                                                                        // 246
        throw MinimongoError("$sort requires $slice to be present");                                  // 247
      // XXX this allows us to use a $sort whose value is an array, but that's                        // 248
      // actually an extension of the Node driver, so it won't work                                   // 249
      // server-side. Could be confusing!                                                             // 250
      // XXX is it correct that we don't do geo-stuff here?                                           // 251
      sortFunction = new Minimongo.Sorter(arg.$sort).getComparator();                                 // 252
      for (var i = 0; i < toPush.length; i++) {                                                       // 253
        if (LocalCollection._f._type(toPush[i]) !== 3) {                                              // 254
          throw MinimongoError("$push like modifiers using $sort " +                                  // 255
                      "require all elements to be objects");                                          // 256
        }                                                                                             // 257
      }                                                                                               // 258
    }                                                                                                 // 259
                                                                                                      // 260
    // Actually push.                                                                                 // 261
    for (var j = 0; j < toPush.length; j++)                                                           // 262
      target[field].push(EJSON.clone(toPush[j]));                                                     // 263
                                                                                                      // 264
    // Actually sort.                                                                                 // 265
    if (sortFunction)                                                                                 // 266
      target[field].sort(sortFunction);                                                               // 267
                                                                                                      // 268
    // Actually slice.                                                                                // 269
    if (slice !== undefined) {                                                                        // 270
      if (slice === 0)                                                                                // 271
        target[field] = [];  // differs from Array.slice!                                             // 272
      else                                                                                            // 273
        target[field] = target[field].slice(slice);                                                   // 274
    }                                                                                                 // 275
  },                                                                                                  // 276
  $pushAll: function (target, field, arg) {                                                           // 277
    if (!(typeof arg === "object" && arg instanceof Array))                                           // 278
      throw MinimongoError("Modifier $pushAll/pullAll allowed for arrays only");                      // 279
    var x = target[field];                                                                            // 280
    if (x === undefined)                                                                              // 281
      target[field] = arg;                                                                            // 282
    else if (!(x instanceof Array))                                                                   // 283
      throw MinimongoError("Cannot apply $pushAll modifier to non-array");                            // 284
    else {                                                                                            // 285
      for (var i = 0; i < arg.length; i++)                                                            // 286
        x.push(arg[i]);                                                                               // 287
    }                                                                                                 // 288
  },                                                                                                  // 289
  $addToSet: function (target, field, arg) {                                                          // 290
    var x = target[field];                                                                            // 291
    if (x === undefined)                                                                              // 292
      target[field] = [arg];                                                                          // 293
    else if (!(x instanceof Array))                                                                   // 294
      throw MinimongoError("Cannot apply $addToSet modifier to non-array");                           // 295
    else {                                                                                            // 296
      var isEach = false;                                                                             // 297
      if (typeof arg === "object") {                                                                  // 298
        for (var k in arg) {                                                                          // 299
          if (k === "$each")                                                                          // 300
            isEach = true;                                                                            // 301
          break;                                                                                      // 302
        }                                                                                             // 303
      }                                                                                               // 304
      var values = isEach ? arg["$each"] : [arg];                                                     // 305
      _.each(values, function (value) {                                                               // 306
        for (var i = 0; i < x.length; i++)                                                            // 307
          if (LocalCollection._f._equal(value, x[i]))                                                 // 308
            return;                                                                                   // 309
        x.push(EJSON.clone(value));                                                                   // 310
      });                                                                                             // 311
    }                                                                                                 // 312
  },                                                                                                  // 313
  $pop: function (target, field, arg) {                                                               // 314
    if (target === undefined)                                                                         // 315
      return;                                                                                         // 316
    var x = target[field];                                                                            // 317
    if (x === undefined)                                                                              // 318
      return;                                                                                         // 319
    else if (!(x instanceof Array))                                                                   // 320
      throw MinimongoError("Cannot apply $pop modifier to non-array");                                // 321
    else {                                                                                            // 322
      if (typeof arg === 'number' && arg < 0)                                                         // 323
        x.splice(0, 1);                                                                               // 324
      else                                                                                            // 325
        x.pop();                                                                                      // 326
    }                                                                                                 // 327
  },                                                                                                  // 328
  $pull: function (target, field, arg) {                                                              // 329
    if (target === undefined)                                                                         // 330
      return;                                                                                         // 331
    var x = target[field];                                                                            // 332
    if (x === undefined)                                                                              // 333
      return;                                                                                         // 334
    else if (!(x instanceof Array))                                                                   // 335
      throw MinimongoError("Cannot apply $pull/pullAll modifier to non-array");                       // 336
    else {                                                                                            // 337
      var out = [];                                                                                   // 338
      if (typeof arg === "object" && !(arg instanceof Array)) {                                       // 339
        // XXX would be much nicer to compile this once, rather than                                  // 340
        // for each document we modify.. but usually we're not                                        // 341
        // modifying that many documents, so we'll let it slide for                                   // 342
        // now                                                                                        // 343
                                                                                                      // 344
        // XXX Minimongo.Matcher isn't up for the job, because we need                                // 345
        // to permit stuff like {$pull: {a: {$gt: 4}}}.. something                                    // 346
        // like {$gt: 4} is not normally a complete selector.                                         // 347
        // same issue as $elemMatch possibly?                                                         // 348
        var matcher = new Minimongo.Matcher(arg);                                                     // 349
        for (var i = 0; i < x.length; i++)                                                            // 350
          if (!matcher.documentMatches(x[i]).result)                                                  // 351
            out.push(x[i]);                                                                           // 352
      } else {                                                                                        // 353
        for (var i = 0; i < x.length; i++)                                                            // 354
          if (!LocalCollection._f._equal(x[i], arg))                                                  // 355
            out.push(x[i]);                                                                           // 356
      }                                                                                               // 357
      target[field] = out;                                                                            // 358
    }                                                                                                 // 359
  },                                                                                                  // 360
  $pullAll: function (target, field, arg) {                                                           // 361
    if (!(typeof arg === "object" && arg instanceof Array))                                           // 362
      throw MinimongoError("Modifier $pushAll/pullAll allowed for arrays only");                      // 363
    if (target === undefined)                                                                         // 364
      return;                                                                                         // 365
    var x = target[field];                                                                            // 366
    if (x === undefined)                                                                              // 367
      return;                                                                                         // 368
    else if (!(x instanceof Array))                                                                   // 369
      throw MinimongoError("Cannot apply $pull/pullAll modifier to non-array");                       // 370
    else {                                                                                            // 371
      var out = [];                                                                                   // 372
      for (var i = 0; i < x.length; i++) {                                                            // 373
        var exclude = false;                                                                          // 374
        for (var j = 0; j < arg.length; j++) {                                                        // 375
          if (LocalCollection._f._equal(x[i], arg[j])) {                                              // 376
            exclude = true;                                                                           // 377
            break;                                                                                    // 378
          }                                                                                           // 379
        }                                                                                             // 380
        if (!exclude)                                                                                 // 381
          out.push(x[i]);                                                                             // 382
      }                                                                                               // 383
      target[field] = out;                                                                            // 384
    }                                                                                                 // 385
  },                                                                                                  // 386
  $rename: function (target, field, arg, keypath, doc) {                                              // 387
    if (keypath === arg)                                                                              // 388
      // no idea why mongo has this restriction..                                                     // 389
      throw MinimongoError("$rename source must differ from target");                                 // 390
    if (target === null)                                                                              // 391
      throw MinimongoError("$rename source field invalid");                                           // 392
    if (typeof arg !== "string")                                                                      // 393
      throw MinimongoError("$rename target must be a string");                                        // 394
    if (target === undefined)                                                                         // 395
      return;                                                                                         // 396
    var v = target[field];                                                                            // 397
    delete target[field];                                                                             // 398
                                                                                                      // 399
    var keyparts = arg.split('.');                                                                    // 400
    var target2 = findModTarget(doc, keyparts, {forbidArray: true});                                  // 401
    if (target2 === null)                                                                             // 402
      throw MinimongoError("$rename target field invalid");                                           // 403
    var field2 = keyparts.pop();                                                                      // 404
    target2[field2] = v;                                                                              // 405
  },                                                                                                  // 406
  $bit: function (target, field, arg) {                                                               // 407
    // XXX mongo only supports $bit on integers, and we only support                                  // 408
    // native javascript numbers (doubles) so far, so we can't support $bit                           // 409
    throw MinimongoError("$bit is not supported");                                                    // 410
  }                                                                                                   // 411
};                                                                                                    // 412
                                                                                                      // 413
////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                    //
// packages/minimongo/diff.js                                                                         //
//                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                      //
                                                                                                      // 1
// ordered: bool.                                                                                     // 2
// old_results and new_results: collections of documents.                                             // 3
//    if ordered, they are arrays.                                                                    // 4
//    if unordered, they are IdMaps                                                                   // 5
LocalCollection._diffQueryChanges = function (ordered, oldResults, newResults,                        // 6
                                       observer) {                                                    // 7
  if (ordered)                                                                                        // 8
    LocalCollection._diffQueryOrderedChanges(                                                         // 9
      oldResults, newResults, observer);                                                              // 10
  else                                                                                                // 11
    LocalCollection._diffQueryUnorderedChanges(                                                       // 12
      oldResults, newResults, observer);                                                              // 13
};                                                                                                    // 14
                                                                                                      // 15
LocalCollection._diffQueryUnorderedChanges = function (oldResults, newResults,                        // 16
                                                       observer) {                                    // 17
  if (observer.movedBefore) {                                                                         // 18
    throw new Error("_diffQueryUnordered called with a movedBefore observer!");                       // 19
  }                                                                                                   // 20
                                                                                                      // 21
  newResults.forEach(function (newDoc, id) {                                                          // 22
    var oldDoc = oldResults.get(id);                                                                  // 23
    if (oldDoc) {                                                                                     // 24
      if (observer.changed && !EJSON.equals(oldDoc, newDoc)) {                                        // 25
        observer.changed(                                                                             // 26
          id, LocalCollection._makeChangedFields(newDoc, oldDoc));                                    // 27
      }                                                                                               // 28
    } else if (observer.added) {                                                                      // 29
      var fields = EJSON.clone(newDoc);                                                               // 30
      delete fields._id;                                                                              // 31
      observer.added(newDoc._id, fields);                                                             // 32
    }                                                                                                 // 33
  });                                                                                                 // 34
                                                                                                      // 35
  if (observer.removed) {                                                                             // 36
    oldResults.forEach(function (oldDoc, id) {                                                        // 37
      if (!newResults.has(id))                                                                        // 38
        observer.removed(id);                                                                         // 39
    });                                                                                               // 40
  }                                                                                                   // 41
};                                                                                                    // 42
                                                                                                      // 43
                                                                                                      // 44
LocalCollection._diffQueryOrderedChanges = function (old_results, new_results, observer) {            // 45
                                                                                                      // 46
  var new_presence_of_id = {};                                                                        // 47
  _.each(new_results, function (doc) {                                                                // 48
    if (new_presence_of_id[doc._id])                                                                  // 49
      Meteor._debug("Duplicate _id in new_results");                                                  // 50
    new_presence_of_id[doc._id] = true;                                                               // 51
  });                                                                                                 // 52
                                                                                                      // 53
  var old_index_of_id = {};                                                                           // 54
  _.each(old_results, function (doc, i) {                                                             // 55
    if (doc._id in old_index_of_id)                                                                   // 56
      Meteor._debug("Duplicate _id in old_results");                                                  // 57
    old_index_of_id[doc._id] = i;                                                                     // 58
  });                                                                                                 // 59
                                                                                                      // 60
  // ALGORITHM:                                                                                       // 61
  //                                                                                                  // 62
  // To determine which docs should be considered "moved" (and which                                  // 63
  // merely change position because of other docs moving) we run                                      // 64
  // a "longest common subsequence" (LCS) algorithm.  The LCS of the                                  // 65
  // old doc IDs and the new doc IDs gives the docs that should NOT be                                // 66
  // considered moved.                                                                                // 67
                                                                                                      // 68
  // To actually call the appropriate callbacks to get from the old state to the                      // 69
  // new state:                                                                                       // 70
                                                                                                      // 71
  // First, we call removed() on all the items that only appear in the old                            // 72
  // state.                                                                                           // 73
                                                                                                      // 74
  // Then, once we have the items that should not move, we walk through the new                       // 75
  // results array group-by-group, where a "group" is a set of items that have                        // 76
  // moved, anchored on the end by an item that should not move.  One by one, we                      // 77
  // move each of those elements into place "before" the anchoring end-of-group                       // 78
  // item, and fire changed events on them if necessary.  Then we fire a changed                      // 79
  // event on the anchor, and move on to the next group.  There is always at                          // 80
  // least one group; the last group is anchored by a virtual "null" id at the                        // 81
  // end.                                                                                             // 82
                                                                                                      // 83
  // Asymptotically: O(N k) where k is number of ops, or potentially                                  // 84
  // O(N log N) if inner loop of LCS were made to be binary search.                                   // 85
                                                                                                      // 86
                                                                                                      // 87
  //////// LCS (longest common sequence, with respect to _id)                                         // 88
  // (see Wikipedia article on Longest Increasing Subsequence,                                        // 89
  // where the LIS is taken of the sequence of old indices of the                                     // 90
  // docs in new_results)                                                                             // 91
  //                                                                                                  // 92
  // unmoved: the output of the algorithm; members of the LCS,                                        // 93
  // in the form of indices into new_results                                                          // 94
  var unmoved = [];                                                                                   // 95
  // max_seq_len: length of LCS found so far                                                          // 96
  var max_seq_len = 0;                                                                                // 97
  // seq_ends[i]: the index into new_results of the last doc in a                                     // 98
  // common subsequence of length of i+1 <= max_seq_len                                               // 99
  var N = new_results.length;                                                                         // 100
  var seq_ends = new Array(N);                                                                        // 101
  // ptrs:  the common subsequence ending with new_results[n] extends                                 // 102
  // a common subsequence ending with new_results[ptr[n]], unless                                     // 103
  // ptr[n] is -1.                                                                                    // 104
  var ptrs = new Array(N);                                                                            // 105
  // virtual sequence of old indices of new results                                                   // 106
  var old_idx_seq = function(i_new) {                                                                 // 107
    return old_index_of_id[new_results[i_new]._id];                                                   // 108
  };                                                                                                  // 109
  // for each item in new_results, use it to extend a common subsequence                              // 110
  // of length j <= max_seq_len                                                                       // 111
  for(var i=0; i<N; i++) {                                                                            // 112
    if (old_index_of_id[new_results[i]._id] !== undefined) {                                          // 113
      var j = max_seq_len;                                                                            // 114
      // this inner loop would traditionally be a binary search,                                      // 115
      // but scanning backwards we will likely find a subseq to extend                                // 116
      // pretty soon, bounded for example by the total number of ops.                                 // 117
      // If this were to be changed to a binary search, we'd still want                               // 118
      // to scan backwards a bit as an optimization.                                                  // 119
      while (j > 0) {                                                                                 // 120
        if (old_idx_seq(seq_ends[j-1]) < old_idx_seq(i))                                              // 121
          break;                                                                                      // 122
        j--;                                                                                          // 123
      }                                                                                               // 124
                                                                                                      // 125
      ptrs[i] = (j === 0 ? -1 : seq_ends[j-1]);                                                       // 126
      seq_ends[j] = i;                                                                                // 127
      if (j+1 > max_seq_len)                                                                          // 128
        max_seq_len = j+1;                                                                            // 129
    }                                                                                                 // 130
  }                                                                                                   // 131
                                                                                                      // 132
  // pull out the LCS/LIS into unmoved                                                                // 133
  var idx = (max_seq_len === 0 ? -1 : seq_ends[max_seq_len-1]);                                       // 134
  while (idx >= 0) {                                                                                  // 135
    unmoved.push(idx);                                                                                // 136
    idx = ptrs[idx];                                                                                  // 137
  }                                                                                                   // 138
  // the unmoved item list is built backwards, so fix that                                            // 139
  unmoved.reverse();                                                                                  // 140
                                                                                                      // 141
  // the last group is always anchored by the end of the result list, which is                        // 142
  // an id of "null"                                                                                  // 143
  unmoved.push(new_results.length);                                                                   // 144
                                                                                                      // 145
  _.each(old_results, function (doc) {                                                                // 146
    if (!new_presence_of_id[doc._id])                                                                 // 147
      observer.removed && observer.removed(doc._id);                                                  // 148
  });                                                                                                 // 149
  // for each group of things in the new_results that is anchored by an unmoved                       // 150
  // element, iterate through the things before it.                                                   // 151
  var startOfGroup = 0;                                                                               // 152
  _.each(unmoved, function (endOfGroup) {                                                             // 153
    var groupId = new_results[endOfGroup] ? new_results[endOfGroup]._id : null;                       // 154
    var oldDoc;                                                                                       // 155
    var newDoc;                                                                                       // 156
    var fields;                                                                                       // 157
    for (var i = startOfGroup; i < endOfGroup; i++) {                                                 // 158
      newDoc = new_results[i];                                                                        // 159
      if (!_.has(old_index_of_id, newDoc._id)) {                                                      // 160
        fields = EJSON.clone(newDoc);                                                                 // 161
        delete fields._id;                                                                            // 162
        observer.addedBefore && observer.addedBefore(newDoc._id, fields, groupId);                    // 163
        observer.added && observer.added(newDoc._id, fields);                                         // 164
      } else {                                                                                        // 165
        // moved                                                                                      // 166
        oldDoc = old_results[old_index_of_id[newDoc._id]];                                            // 167
        fields = LocalCollection._makeChangedFields(newDoc, oldDoc);                                  // 168
        if (!_.isEmpty(fields)) {                                                                     // 169
          observer.changed && observer.changed(newDoc._id, fields);                                   // 170
        }                                                                                             // 171
        observer.movedBefore && observer.movedBefore(newDoc._id, groupId);                            // 172
      }                                                                                               // 173
    }                                                                                                 // 174
    if (groupId) {                                                                                    // 175
      newDoc = new_results[endOfGroup];                                                               // 176
      oldDoc = old_results[old_index_of_id[newDoc._id]];                                              // 177
      fields = LocalCollection._makeChangedFields(newDoc, oldDoc);                                    // 178
      if (!_.isEmpty(fields)) {                                                                       // 179
        observer.changed && observer.changed(newDoc._id, fields);                                     // 180
      }                                                                                               // 181
    }                                                                                                 // 182
    startOfGroup = endOfGroup+1;                                                                      // 183
  });                                                                                                 // 184
                                                                                                      // 185
                                                                                                      // 186
};                                                                                                    // 187
                                                                                                      // 188
                                                                                                      // 189
// General helper for diff-ing two objects.                                                           // 190
// callbacks is an object like so:                                                                    // 191
// { leftOnly: function (key, leftValue) {...},                                                       // 192
//   rightOnly: function (key, rightValue) {...},                                                     // 193
//   both: function (key, leftValue, rightValue) {...},                                               // 194
// }                                                                                                  // 195
LocalCollection._diffObjects = function (left, right, callbacks) {                                    // 196
  _.each(left, function (leftValue, key) {                                                            // 197
    if (_.has(right, key))                                                                            // 198
      callbacks.both && callbacks.both(key, leftValue, right[key]);                                   // 199
    else                                                                                              // 200
      callbacks.leftOnly && callbacks.leftOnly(key, leftValue);                                       // 201
  });                                                                                                 // 202
  if (callbacks.rightOnly) {                                                                          // 203
    _.each(right, function(rightValue, key) {                                                         // 204
      if (!_.has(left, key))                                                                          // 205
        callbacks.rightOnly(key, rightValue);                                                         // 206
    });                                                                                               // 207
  }                                                                                                   // 208
};                                                                                                    // 209
                                                                                                      // 210
////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                    //
// packages/minimongo/id_map.js                                                                       //
//                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                      //
LocalCollection._IdMap = function () {                                                                // 1
  var self = this;                                                                                    // 2
  IdMap.call(self, LocalCollection._idStringify, LocalCollection._idParse);                           // 3
};                                                                                                    // 4
                                                                                                      // 5
Meteor._inherits(LocalCollection._IdMap, IdMap);                                                      // 6
                                                                                                      // 7
                                                                                                      // 8
////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                    //
// packages/minimongo/observe.js                                                                      //
//                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                      //
// XXX maybe move these into another ObserveHelpers package or something                              // 1
                                                                                                      // 2
// _CachingChangeObserver is an object which receives observeChanges callbacks                        // 3
// and keeps a cache of the current cursor state up to date in self.docs. Users                       // 4
// of this class should read the docs field but not modify it. You should pass                        // 5
// the "applyChange" field as the callbacks to the underlying observeChanges                          // 6
// call. Optionally, you can specify your own observeChanges callbacks which are                      // 7
// invoked immediately before the docs field is updated; this object is made                          // 8
// available as `this` to those callbacks.                                                            // 9
LocalCollection._CachingChangeObserver = function (options) {                                         // 10
  var self = this;                                                                                    // 11
  options = options || {};                                                                            // 12
                                                                                                      // 13
  var orderedFromCallbacks = options.callbacks &&                                                     // 14
        LocalCollection._observeChangesCallbacksAreOrdered(options.callbacks);                        // 15
  if (_.has(options, 'ordered')) {                                                                    // 16
    self.ordered = options.ordered;                                                                   // 17
    if (options.callbacks && options.ordered !== orderedFromCallbacks)                                // 18
      throw Error("ordered option doesn't match callbacks");                                          // 19
  } else if (options.callbacks) {                                                                     // 20
    self.ordered = orderedFromCallbacks;                                                              // 21
  } else {                                                                                            // 22
    throw Error("must provide ordered or callbacks");                                                 // 23
  }                                                                                                   // 24
  var callbacks = options.callbacks || {};                                                            // 25
                                                                                                      // 26
  if (self.ordered) {                                                                                 // 27
    self.docs = new OrderedDict(LocalCollection._idStringify);                                        // 28
    self.applyChange = {                                                                              // 29
      addedBefore: function (id, fields, before) {                                                    // 30
        var doc = EJSON.clone(fields);                                                                // 31
        doc._id = id;                                                                                 // 32
        callbacks.addedBefore && callbacks.addedBefore.call(                                          // 33
          self, id, fields, before);                                                                  // 34
        // This line triggers if we provide added with movedBefore.                                   // 35
        callbacks.added && callbacks.added.call(self, id, fields);                                    // 36
        // XXX could `before` be a falsy ID?  Technically                                             // 37
        // idStringify seems to allow for them -- though                                              // 38
        // OrderedDict won't call stringify on a falsy arg.                                           // 39
        self.docs.putBefore(id, doc, before || null);                                                 // 40
      },                                                                                              // 41
      movedBefore: function (id, before) {                                                            // 42
        var doc = self.docs.get(id);                                                                  // 43
        callbacks.movedBefore && callbacks.movedBefore.call(self, id, before);                        // 44
        self.docs.moveBefore(id, before || null);                                                     // 45
      }                                                                                               // 46
    };                                                                                                // 47
  } else {                                                                                            // 48
    self.docs = new LocalCollection._IdMap;                                                           // 49
    self.applyChange = {                                                                              // 50
      added: function (id, fields) {                                                                  // 51
        var doc = EJSON.clone(fields);                                                                // 52
        callbacks.added && callbacks.added.call(self, id, fields);                                    // 53
        doc._id = id;                                                                                 // 54
        self.docs.set(id,  doc);                                                                      // 55
      }                                                                                               // 56
    };                                                                                                // 57
  }                                                                                                   // 58
                                                                                                      // 59
  // The methods in _IdMap and OrderedDict used by these callbacks are                                // 60
  // identical.                                                                                       // 61
  self.applyChange.changed = function (id, fields) {                                                  // 62
    var doc = self.docs.get(id);                                                                      // 63
    if (!doc)                                                                                         // 64
      throw new Error("Unknown id for changed: " + id);                                               // 65
    callbacks.changed && callbacks.changed.call(                                                      // 66
      self, id, EJSON.clone(fields));                                                                 // 67
    LocalCollection._applyChanges(doc, fields);                                                       // 68
  };                                                                                                  // 69
  self.applyChange.removed = function (id) {                                                          // 70
    callbacks.removed && callbacks.removed.call(self, id);                                            // 71
    self.docs.remove(id);                                                                             // 72
  };                                                                                                  // 73
};                                                                                                    // 74
                                                                                                      // 75
LocalCollection._observeFromObserveChanges = function (cursor, observeCallbacks) {                    // 76
  var transform = cursor.getTransform() || function (doc) {return doc;};                              // 77
  var suppressed = !!observeCallbacks._suppress_initial;                                              // 78
                                                                                                      // 79
  var observeChangesCallbacks;                                                                        // 80
  if (LocalCollection._observeCallbacksAreOrdered(observeCallbacks)) {                                // 81
    // The "_no_indices" option sets all index arguments to -1 and skips the                          // 82
    // linear scans required to generate them.  This lets observers that don't                        // 83
    // need absolute indices benefit from the other features of this API --                           // 84
    // relative order, transforms, and applyChanges -- without the speed hit.                         // 85
    var indices = !observeCallbacks._no_indices;                                                      // 86
    observeChangesCallbacks = {                                                                       // 87
      addedBefore: function (id, fields, before) {                                                    // 88
        var self = this;                                                                              // 89
        if (suppressed || !(observeCallbacks.addedAt || observeCallbacks.added))                      // 90
          return;                                                                                     // 91
        var doc = transform(_.extend(fields, {_id: id}));                                             // 92
        if (observeCallbacks.addedAt) {                                                               // 93
          var index = indices                                                                         // 94
                ? (before ? self.docs.indexOf(before) : self.docs.size()) : -1;                       // 95
          observeCallbacks.addedAt(doc, index, before);                                               // 96
        } else {                                                                                      // 97
          observeCallbacks.added(doc);                                                                // 98
        }                                                                                             // 99
      },                                                                                              // 100
      changed: function (id, fields) {                                                                // 101
        var self = this;                                                                              // 102
        if (!(observeCallbacks.changedAt || observeCallbacks.changed))                                // 103
          return;                                                                                     // 104
        var doc = EJSON.clone(self.docs.get(id));                                                     // 105
        if (!doc)                                                                                     // 106
          throw new Error("Unknown id for changed: " + id);                                           // 107
        var oldDoc = transform(EJSON.clone(doc));                                                     // 108
        LocalCollection._applyChanges(doc, fields);                                                   // 109
        doc = transform(doc);                                                                         // 110
        if (observeCallbacks.changedAt) {                                                             // 111
          var index = indices ? self.docs.indexOf(id) : -1;                                           // 112
          observeCallbacks.changedAt(doc, oldDoc, index);                                             // 113
        } else {                                                                                      // 114
          observeCallbacks.changed(doc, oldDoc);                                                      // 115
        }                                                                                             // 116
      },                                                                                              // 117
      movedBefore: function (id, before) {                                                            // 118
        var self = this;                                                                              // 119
        if (!observeCallbacks.movedTo)                                                                // 120
          return;                                                                                     // 121
        var from = indices ? self.docs.indexOf(id) : -1;                                              // 122
                                                                                                      // 123
        var to = indices                                                                              // 124
              ? (before ? self.docs.indexOf(before) : self.docs.size()) : -1;                         // 125
        // When not moving backwards, adjust for the fact that removing the                           // 126
        // document slides everything back one slot.                                                  // 127
        if (to > from)                                                                                // 128
          --to;                                                                                       // 129
        observeCallbacks.movedTo(transform(EJSON.clone(self.docs.get(id))),                           // 130
                                 from, to, before || null);                                           // 131
      },                                                                                              // 132
      removed: function (id) {                                                                        // 133
        var self = this;                                                                              // 134
        if (!(observeCallbacks.removedAt || observeCallbacks.removed))                                // 135
          return;                                                                                     // 136
        // technically maybe there should be an EJSON.clone here, but it's about                      // 137
        // to be removed from self.docs!                                                              // 138
        var doc = transform(self.docs.get(id));                                                       // 139
        if (observeCallbacks.removedAt) {                                                             // 140
          var index = indices ? self.docs.indexOf(id) : -1;                                           // 141
          observeCallbacks.removedAt(doc, index);                                                     // 142
        } else {                                                                                      // 143
          observeCallbacks.removed(doc);                                                              // 144
        }                                                                                             // 145
      }                                                                                               // 146
    };                                                                                                // 147
  } else {                                                                                            // 148
    observeChangesCallbacks = {                                                                       // 149
      added: function (id, fields) {                                                                  // 150
        if (!suppressed && observeCallbacks.added) {                                                  // 151
          var doc = _.extend(fields, {_id:  id});                                                     // 152
          observeCallbacks.added(transform(doc));                                                     // 153
        }                                                                                             // 154
      },                                                                                              // 155
      changed: function (id, fields) {                                                                // 156
        var self = this;                                                                              // 157
        if (observeCallbacks.changed) {                                                               // 158
          var oldDoc = self.docs.get(id);                                                             // 159
          var doc = EJSON.clone(oldDoc);                                                              // 160
          LocalCollection._applyChanges(doc, fields);                                                 // 161
          observeCallbacks.changed(transform(doc), transform(oldDoc));                                // 162
        }                                                                                             // 163
      },                                                                                              // 164
      removed: function (id) {                                                                        // 165
        var self = this;                                                                              // 166
        if (observeCallbacks.removed) {                                                               // 167
          observeCallbacks.removed(transform(self.docs.get(id)));                                     // 168
        }                                                                                             // 169
      }                                                                                               // 170
    };                                                                                                // 171
  }                                                                                                   // 172
                                                                                                      // 173
  var changeObserver = new LocalCollection._CachingChangeObserver(                                    // 174
    {callbacks: observeChangesCallbacks});                                                            // 175
  var handle = cursor.observeChanges(changeObserver.applyChange);                                     // 176
  suppressed = false;                                                                                 // 177
                                                                                                      // 178
  if (changeObserver.ordered) {                                                                       // 179
    // Fetches the current list of documents, in order, as an array.  Can be                          // 180
    // called at any time.  Internal API assumed by the `observe-sequence`                            // 181
    // package (used by Meteor UI for `#each` blocks).  Only defined on ordered                       // 182
    // observes (those that listen on `addedAt` or similar).  Continues to work                       // 183
    // after `stop()` is called on the handle.                                                        // 184
    //                                                                                                // 185
    // Because we already materialize the full OrderedDict of all documents, it                       // 186
    // seems nice to provide access to the view rather than making the data                           // 187
    // consumer reconstitute it.  This gives the consumer a shot at doing                             // 188
    // something smart with the feed like proxying it, since firing callbacks                         // 189
    // like `changed` and `movedTo` basically requires omniscience (knowing old                       // 190
    // and new documents, old and new indices, and the correct value for                              // 191
    // `before`).                                                                                     // 192
    //                                                                                                // 193
    // NOTE: If called from an observe callback for a certain change, the result                      // 194
    // is *not* guaranteed to be a snapshot of the cursor up to that                                  // 195
    // change. This is because the callbacks are invoked before updating docs.                        // 196
    handle._fetch = function () {                                                                     // 197
      var docsArray = [];                                                                             // 198
      changeObserver.docs.forEach(function (doc) {                                                    // 199
        docsArray.push(transform(EJSON.clone(doc)));                                                  // 200
      });                                                                                             // 201
      return docsArray;                                                                               // 202
    };                                                                                                // 203
  }                                                                                                   // 204
                                                                                                      // 205
  return handle;                                                                                      // 206
};                                                                                                    // 207
                                                                                                      // 208
////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                    //
// packages/minimongo/objectid.js                                                                     //
//                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                      //
LocalCollection._looksLikeObjectID = function (str) {                                                 // 1
  return str.length === 24 && str.match(/^[0-9a-f]*$/);                                               // 2
};                                                                                                    // 3
                                                                                                      // 4
LocalCollection._ObjectID = function (hexString) {                                                    // 5
  //random-based impl of Mongo ObjectID                                                               // 6
  var self = this;                                                                                    // 7
  if (hexString) {                                                                                    // 8
    hexString = hexString.toLowerCase();                                                              // 9
    if (!LocalCollection._looksLikeObjectID(hexString)) {                                             // 10
      throw new Error("Invalid hexadecimal string for creating an ObjectID");                         // 11
    }                                                                                                 // 12
    // meant to work with _.isEqual(), which relies on structural equality                            // 13
    self._str = hexString;                                                                            // 14
  } else {                                                                                            // 15
    self._str = Random.hexString(24);                                                                 // 16
  }                                                                                                   // 17
};                                                                                                    // 18
                                                                                                      // 19
LocalCollection._ObjectID.prototype.toString = function () {                                          // 20
  var self = this;                                                                                    // 21
  return "ObjectID(\"" + self._str + "\")";                                                           // 22
};                                                                                                    // 23
                                                                                                      // 24
LocalCollection._ObjectID.prototype.equals = function (other) {                                       // 25
  var self = this;                                                                                    // 26
  return other instanceof LocalCollection._ObjectID &&                                                // 27
    self.valueOf() === other.valueOf();                                                               // 28
};                                                                                                    // 29
                                                                                                      // 30
LocalCollection._ObjectID.prototype.clone = function () {                                             // 31
  var self = this;                                                                                    // 32
  return new LocalCollection._ObjectID(self._str);                                                    // 33
};                                                                                                    // 34
                                                                                                      // 35
LocalCollection._ObjectID.prototype.typeName = function() {                                           // 36
  return "oid";                                                                                       // 37
};                                                                                                    // 38
                                                                                                      // 39
LocalCollection._ObjectID.prototype.getTimestamp = function() {                                       // 40
  var self = this;                                                                                    // 41
  return parseInt(self._str.substr(0, 8), 16);                                                        // 42
};                                                                                                    // 43
                                                                                                      // 44
LocalCollection._ObjectID.prototype.valueOf =                                                         // 45
    LocalCollection._ObjectID.prototype.toJSONValue =                                                 // 46
    LocalCollection._ObjectID.prototype.toHexString =                                                 // 47
    function () { return this._str; };                                                                // 48
                                                                                                      // 49
// Is this selector just shorthand for lookup by _id?                                                 // 50
LocalCollection._selectorIsId = function (selector) {                                                 // 51
  return (typeof selector === "string") ||                                                            // 52
    (typeof selector === "number") ||                                                                 // 53
    selector instanceof LocalCollection._ObjectID;                                                    // 54
};                                                                                                    // 55
                                                                                                      // 56
// Is the selector just lookup by _id (shorthand or not)?                                             // 57
LocalCollection._selectorIsIdPerhapsAsObject = function (selector) {                                  // 58
  return LocalCollection._selectorIsId(selector) ||                                                   // 59
    (selector && typeof selector === "object" &&                                                      // 60
     selector._id && LocalCollection._selectorIsId(selector._id) &&                                   // 61
     _.size(selector) === 1);                                                                         // 62
};                                                                                                    // 63
                                                                                                      // 64
// If this is a selector which explicitly constrains the match by ID to a finite                      // 65
// number of documents, returns a list of their IDs.  Otherwise returns                               // 66
// null. Note that the selector may have other restrictions so it may not even                        // 67
// match those document!  We care about $in and $and since those are generated                        // 68
// access-controlled update and remove.                                                               // 69
LocalCollection._idsMatchedBySelector = function (selector) {                                         // 70
  // Is the selector just an ID?                                                                      // 71
  if (LocalCollection._selectorIsId(selector))                                                        // 72
    return [selector];                                                                                // 73
  if (!selector)                                                                                      // 74
    return null;                                                                                      // 75
                                                                                                      // 76
  // Do we have an _id clause?                                                                        // 77
  if (_.has(selector, '_id')) {                                                                       // 78
    // Is the _id clause just an ID?                                                                  // 79
    if (LocalCollection._selectorIsId(selector._id))                                                  // 80
      return [selector._id];                                                                          // 81
    // Is the _id clause {_id: {$in: ["x", "y", "z"]}}?                                               // 82
    if (selector._id && selector._id.$in                                                              // 83
        && _.isArray(selector._id.$in)                                                                // 84
        && !_.isEmpty(selector._id.$in)                                                               // 85
        && _.all(selector._id.$in, LocalCollection._selectorIsId)) {                                  // 86
      return selector._id.$in;                                                                        // 87
    }                                                                                                 // 88
    return null;                                                                                      // 89
  }                                                                                                   // 90
                                                                                                      // 91
  // If this is a top-level $and, and any of the clauses constrain their                              // 92
  // documents, then the whole selector is constrained by any one clause's                            // 93
  // constraint. (Well, by their intersection, but that seems unlikely.)                              // 94
  if (selector.$and && _.isArray(selector.$and)) {                                                    // 95
    for (var i = 0; i < selector.$and.length; ++i) {                                                  // 96
      var subIds = LocalCollection._idsMatchedBySelector(selector.$and[i]);                           // 97
      if (subIds)                                                                                     // 98
        return subIds;                                                                                // 99
    }                                                                                                 // 100
  }                                                                                                   // 101
                                                                                                      // 102
  return null;                                                                                        // 103
};                                                                                                    // 104
                                                                                                      // 105
EJSON.addType("oid",  function (str) {                                                                // 106
  return new LocalCollection._ObjectID(str);                                                          // 107
});                                                                                                   // 108
                                                                                                      // 109
////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);


/* Exports */
if (typeof Package === 'undefined') Package = {};
Package.minimongo = {
  LocalCollection: LocalCollection,
  Minimongo: Minimongo,
  MinimongoTest: MinimongoTest
};

})();

//# sourceMappingURL=1ebd7d8eb9c17ed0884109321521fb03dd914e35.map
//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
//                                                                      //
// If you are using Chrome, open the Developer Tools and click the gear //
// icon in its lower right corner. In the General Settings panel, turn  //
// on 'Enable source maps'.                                             //
//                                                                      //
// If you are using Firefox 23, go to `about:config` and set the        //
// `devtools.debugger.source-maps-enabled` preference to true.          //
// (The preference should be on by default in Firefox 24; versions      //
// older than 23 do not support source maps.)                           //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

/* Imports */
var Meteor = Package.meteor.Meteor;
var Deps = Package.deps.Deps;
var LocalCollection = Package.minimongo.LocalCollection;
var Minimongo = Package.minimongo.Minimongo;
var _ = Package.underscore._;
var Random = Package.random.Random;

/* Package-scope variables */
var ObserveSequence;

(function () {

//////////////////////////////////////////////////////////////////////////////////////////
//                                                                                      //
// packages/observe-sequence/observe_sequence.js                                        //
//                                                                                      //
//////////////////////////////////////////////////////////////////////////////////////////
                                                                                        //
var warn = function () {                                                                // 1
  if (ObserveSequence._suppressWarnings) {                                              // 2
    ObserveSequence._suppressWarnings--;                                                // 3
  } else {                                                                              // 4
    if (typeof console !== 'undefined' && console.warn)                                 // 5
      console.warn.apply(console, arguments);                                           // 6
                                                                                        // 7
    ObserveSequence._loggedWarnings++;                                                  // 8
  }                                                                                     // 9
};                                                                                      // 10
                                                                                        // 11
var idStringify = LocalCollection._idStringify;                                         // 12
var idParse = LocalCollection._idParse;                                                 // 13
                                                                                        // 14
ObserveSequence = {                                                                     // 15
  _suppressWarnings: 0,                                                                 // 16
  _loggedWarnings: 0,                                                                   // 17
                                                                                        // 18
  // A mechanism similar to cursor.observe which receives a reactive                    // 19
  // function returning a sequence type and firing appropriate callbacks                // 20
  // when the value changes.                                                            // 21
  //                                                                                    // 22
  // @param sequenceFunc {Function} a reactive function returning a                     // 23
  //     sequence type. The currently supported sequence types are:                     // 24
  //     'null', arrays and cursors.                                                    // 25
  //                                                                                    // 26
  // @param callbacks {Object} similar to a specific subset of                          // 27
  //     callbacks passed to `cursor.observe`                                           // 28
  //     (http://docs.meteor.com/#observe), with minor variations to                    // 29
  //     support the fact that not all sequences contain objects with                   // 30
  //     _id fields.  Specifically:                                                     // 31
  //                                                                                    // 32
  //     * addedAt(id, item, atIndex, beforeId)                                         // 33
  //     * changedAt(id, newItem, oldItem, atIndex)                                     // 34
  //     * removedAt(id, oldItem, atIndex)                                              // 35
  //     * movedTo(id, item, fromIndex, toIndex, beforeId)                              // 36
  //                                                                                    // 37
  // @returns {Object(stop: Function)} call 'stop' on the return value                  // 38
  //     to stop observing this sequence function.                                      // 39
  //                                                                                    // 40
  // We don't make any assumptions about our ability to compare sequence                // 41
  // elements (ie, we don't assume EJSON.equals works; maybe there is extra             // 42
  // state/random methods on the objects) so unlike cursor.observe, we may              // 43
  // sometimes call changedAt() when nothing actually changed.                          // 44
  // XXX consider if we *can* make the stronger assumption and avoid                    // 45
  //     no-op changedAt calls (in some cases?)                                         // 46
  //                                                                                    // 47
  // XXX currently only supports the callbacks used by our                              // 48
  // implementation of {{#each}}, but this can be expanded.                             // 49
  //                                                                                    // 50
  // XXX #each doesn't use the indices (though we'll eventually need                    // 51
  // a way to get them when we support `@index`), but calling                           // 52
  // `cursor.observe` causes the index to be calculated on every                        // 53
  // callback using a linear scan (unless you turn it off by passing                    // 54
  // `_no_indices`).  Any way to avoid calculating indices on a pure                    // 55
  // cursor observe like we used to?                                                    // 56
  observe: function (sequenceFunc, callbacks) {                                         // 57
    var lastSeq = null;                                                                 // 58
    var activeObserveHandle = null;                                                     // 59
                                                                                        // 60
    // 'lastSeqArray' contains the previous value of the sequence                       // 61
    // we're observing. It is an array of objects with '_id' and                        // 62
    // 'item' fields.  'item' is the element in the array, or the                       // 63
    // document in the cursor.                                                          // 64
    //                                                                                  // 65
    // '_id' is whichever of the following is relevant, unless it has                   // 66
    // already appeared -- in which case it's randomly generated.                       // 67
    //                                                                                  // 68
    // * if 'item' is an object:                                                        // 69
    //   * an '_id' field, if present                                                   // 70
    //   * otherwise, the index in the array                                            // 71
    //                                                                                  // 72
    // * if 'item' is a number or string, use that value                                // 73
    //                                                                                  // 74
    // XXX this can be generalized by allowing {{#each}} to accept a                    // 75
    // general 'key' argument which could be a function, a dotted                       // 76
    // field name, or the special @index value.                                         // 77
    var lastSeqArray = []; // elements are objects of form {_id, item}                  // 78
    var computation = Deps.autorun(function () {                                        // 79
      var seq = sequenceFunc();                                                         // 80
                                                                                        // 81
      Deps.nonreactive(function () {                                                    // 82
        var seqArray; // same structure as `lastSeqArray` above.                        // 83
                                                                                        // 84
        // If we were previously observing a cursor, replace lastSeqArray with          // 85
        // more up-to-date information (specifically, the state of the observe          // 86
        // before it was stopped, which may be older than the DB).                      // 87
        if (activeObserveHandle) {                                                      // 88
          lastSeqArray = _.map(activeObserveHandle._fetch(), function (doc) {           // 89
            return {_id: doc._id, item: doc};                                           // 90
          });                                                                           // 91
          activeObserveHandle.stop();                                                   // 92
          activeObserveHandle = null;                                                   // 93
        }                                                                               // 94
                                                                                        // 95
        if (!seq) {                                                                     // 96
          seqArray = [];                                                                // 97
          diffArray(lastSeqArray, seqArray, callbacks);                                 // 98
        } else if (seq instanceof Array) {                                              // 99
          var idsUsed = {};                                                             // 100
          seqArray = _.map(seq, function (item, index) {                                // 101
            var id;                                                                     // 102
            if (typeof item === 'string') {                                             // 103
              // ensure not empty, since other layers (eg DomRange) assume this as well // 104
              id = "-" + item;                                                          // 105
            } else if (typeof item === 'number' ||                                      // 106
                       typeof item === 'boolean' ||                                     // 107
                       item === undefined) {                                            // 108
              id = item;                                                                // 109
            } else if (typeof item === 'object') {                                      // 110
              id = (item && item._id) || index;                                         // 111
            } else {                                                                    // 112
              throw new Error("{{#each}} doesn't support arrays with " +                // 113
                              "elements of type " + typeof item);                       // 114
            }                                                                           // 115
                                                                                        // 116
            var idString = idStringify(id);                                             // 117
            if (idsUsed[idString]) {                                                    // 118
              warn("duplicate id " + id + " in", seq);                                  // 119
              id = Random.id();                                                         // 120
            } else {                                                                    // 121
              idsUsed[idString] = true;                                                 // 122
            }                                                                           // 123
                                                                                        // 124
            return { _id: id, item: item };                                             // 125
          });                                                                           // 126
                                                                                        // 127
          diffArray(lastSeqArray, seqArray, callbacks);                                 // 128
        } else if (isMinimongoCursor(seq)) {                                            // 129
          var cursor = seq;                                                             // 130
          seqArray = [];                                                                // 131
                                                                                        // 132
          var initial = true; // are we observing initial data from cursor?             // 133
          activeObserveHandle = cursor.observe({                                        // 134
            addedAt: function (document, atIndex, before) {                             // 135
              if (initial) {                                                            // 136
                // keep track of initial data so that we can diff once                  // 137
                // we exit `observe`.                                                   // 138
                if (before !== null)                                                    // 139
                  throw new Error("Expected initial data from observe in order");       // 140
                seqArray.push({ _id: document._id, item: document });                   // 141
              } else {                                                                  // 142
                callbacks.addedAt(document._id, document, atIndex, before);             // 143
              }                                                                         // 144
            },                                                                          // 145
            changedAt: function (newDocument, oldDocument, atIndex) {                   // 146
              callbacks.changedAt(newDocument._id, newDocument, oldDocument,            // 147
                                  atIndex);                                             // 148
            },                                                                          // 149
            removedAt: function (oldDocument, atIndex) {                                // 150
              callbacks.removedAt(oldDocument._id, oldDocument, atIndex);               // 151
            },                                                                          // 152
            movedTo: function (document, fromIndex, toIndex, before) {                  // 153
              callbacks.movedTo(                                                        // 154
                document._id, document, fromIndex, toIndex, before);                    // 155
            }                                                                           // 156
          });                                                                           // 157
          initial = false;                                                              // 158
                                                                                        // 159
          // diff the old sequnce with initial data in the new cursor. this will        // 160
          // fire `addedAt` callbacks on the initial data.                              // 161
          diffArray(lastSeqArray, seqArray, callbacks);                                 // 162
                                                                                        // 163
        } else {                                                                        // 164
          throw badSequenceError();                                                     // 165
        }                                                                               // 166
                                                                                        // 167
        lastSeq = seq;                                                                  // 168
        lastSeqArray = seqArray;                                                        // 169
      });                                                                               // 170
    });                                                                                 // 171
                                                                                        // 172
    return {                                                                            // 173
      stop: function () {                                                               // 174
        computation.stop();                                                             // 175
        if (activeObserveHandle)                                                        // 176
          activeObserveHandle.stop();                                                   // 177
      }                                                                                 // 178
    };                                                                                  // 179
  },                                                                                    // 180
                                                                                        // 181
  // Fetch the items of `seq` into an array, where `seq` is of one of the               // 182
  // sequence types accepted by `observe`.  If `seq` is a cursor, a                     // 183
  // dependency is established.                                                         // 184
  fetch: function (seq) {                                                               // 185
    if (!seq) {                                                                         // 186
      return [];                                                                        // 187
    } else if (seq instanceof Array) {                                                  // 188
      return seq;                                                                       // 189
    } else if (isMinimongoCursor(seq)) {                                                // 190
      return seq.fetch();                                                               // 191
    } else {                                                                            // 192
      throw badSequenceError();                                                         // 193
    }                                                                                   // 194
  }                                                                                     // 195
};                                                                                      // 196
                                                                                        // 197
var badSequenceError = function () {                                                    // 198
  return new Error("{{#each}} currently only accepts " +                                // 199
                   "arrays, cursors or falsey values.");                                // 200
};                                                                                      // 201
                                                                                        // 202
var isMinimongoCursor = function (seq) {                                                // 203
  var minimongo = Package.minimongo;                                                    // 204
  return !!minimongo && (seq instanceof minimongo.LocalCollection.Cursor);              // 205
};                                                                                      // 206
                                                                                        // 207
// Calculates the differences between `lastSeqArray` and                                // 208
// `seqArray` and calls appropriate functions from `callbacks`.                         // 209
// Reuses Minimongo's diff algorithm implementation.                                    // 210
var diffArray = function (lastSeqArray, seqArray, callbacks) {                          // 211
  var diffFn = Package.minimongo.LocalCollection._diffQueryOrderedChanges;              // 212
  var oldIdObjects = [];                                                                // 213
  var newIdObjects = [];                                                                // 214
  var posOld = {}; // maps from idStringify'd ids                                       // 215
  var posNew = {}; // ditto                                                             // 216
  var posCur = {};                                                                      // 217
  var lengthCur = lastSeqArray.length;                                                  // 218
                                                                                        // 219
  _.each(seqArray, function (doc, i) {                                                  // 220
    newIdObjects.push({_id: doc._id});                                                  // 221
    posNew[idStringify(doc._id)] = i;                                                   // 222
  });                                                                                   // 223
  _.each(lastSeqArray, function (doc, i) {                                              // 224
    oldIdObjects.push({_id: doc._id});                                                  // 225
    posOld[idStringify(doc._id)] = i;                                                   // 226
    posCur[idStringify(doc._id)] = i;                                                   // 227
  });                                                                                   // 228
                                                                                        // 229
  // Arrays can contain arbitrary objects. We don't diff the                            // 230
  // objects. Instead we always fire 'changedAt' callback on every                      // 231
  // object. The consumer of `observe-sequence` should deal with                        // 232
  // it appropriately.                                                                  // 233
  diffFn(oldIdObjects, newIdObjects, {                                                  // 234
    addedBefore: function (id, doc, before) {                                           // 235
      var position = before ? posCur[idStringify(before)] : lengthCur;                  // 236
                                                                                        // 237
      _.each(posCur, function (pos, id) {                                               // 238
        if (pos >= position)                                                            // 239
          posCur[id]++;                                                                 // 240
      });                                                                               // 241
                                                                                        // 242
      lengthCur++;                                                                      // 243
      posCur[idStringify(id)] = position;                                               // 244
                                                                                        // 245
      callbacks.addedAt(                                                                // 246
        id,                                                                             // 247
        seqArray[posNew[idStringify(id)]].item,                                         // 248
        position,                                                                       // 249
        before);                                                                        // 250
    },                                                                                  // 251
    movedBefore: function (id, before) {                                                // 252
      var prevPosition = posCur[idStringify(id)];                                       // 253
      var position = before ? posCur[idStringify(before)] : lengthCur - 1;              // 254
                                                                                        // 255
      _.each(posCur, function (pos, id) {                                               // 256
        if (pos >= prevPosition && pos <= position)                                     // 257
          posCur[id]--;                                                                 // 258
        else if (pos <= prevPosition && pos >= position)                                // 259
          posCur[id]++;                                                                 // 260
      });                                                                               // 261
                                                                                        // 262
      posCur[idStringify(id)] = position;                                               // 263
                                                                                        // 264
      callbacks.movedTo(                                                                // 265
        id,                                                                             // 266
        seqArray[posNew[idStringify(id)]].item,                                         // 267
        prevPosition,                                                                   // 268
        position,                                                                       // 269
        before);                                                                        // 270
    },                                                                                  // 271
    removed: function (id) {                                                            // 272
      var prevPosition = posCur[idStringify(id)];                                       // 273
                                                                                        // 274
      _.each(posCur, function (pos, id) {                                               // 275
        if (pos >= prevPosition)                                                        // 276
          posCur[id]--;                                                                 // 277
      });                                                                               // 278
                                                                                        // 279
      delete posCur[idStringify(id)];                                                   // 280
      lengthCur--;                                                                      // 281
                                                                                        // 282
      callbacks.removedAt(                                                              // 283
        id,                                                                             // 284
        lastSeqArray[posOld[idStringify(id)]].item,                                     // 285
        prevPosition);                                                                  // 286
    }                                                                                   // 287
  });                                                                                   // 288
                                                                                        // 289
  _.each(posNew, function (pos, idString) {                                             // 290
    var id = idParse(idString);                                                         // 291
    if (_.has(posOld, idString)) {                                                      // 292
      // specifically for primitive types, compare equality before                      // 293
      // firing the 'changedAt' callback. otherwise, always fire it                     // 294
      // because doing a deep EJSON comparison is not guaranteed to                     // 295
      // work (an array can contain arbitrary objects, and 'transform'                  // 296
      // can be used on cursors). also, deep diffing is not                             // 297
      // necessarily the most efficient (if only a specific subfield                    // 298
      // of the object is later accessed).                                              // 299
      var newItem = seqArray[pos].item;                                                 // 300
      var oldItem = lastSeqArray[posOld[idString]].item;                                // 301
                                                                                        // 302
      if (typeof newItem === 'object' || newItem !== oldItem)                           // 303
          callbacks.changedAt(id, newItem, oldItem, pos);                               // 304
      }                                                                                 // 305
  });                                                                                   // 306
};                                                                                      // 307
                                                                                        // 308
//////////////////////////////////////////////////////////////////////////////////////////

}).call(this);


/* Exports */
if (typeof Package === 'undefined') Package = {};
Package['observe-sequence'] = {
  ObserveSequence: ObserveSequence
};

})();

//# sourceMappingURL=4e05989af52e13ed5032f712022fe58c7ee894ed.map
//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
//                                                                      //
// If you are using Chrome, open the Developer Tools and click the gear //
// icon in its lower right corner. In the General Settings panel, turn  //
// on 'Enable source maps'.                                             //
//                                                                      //
// If you are using Firefox 23, go to `about:config` and set the        //
// `devtools.debugger.source-maps-enabled` preference to true.          //
// (The preference should be on by default in Firefox 24; versions      //
// older than 23 do not support source maps.)                           //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

/* Imports */
var Meteor = Package.meteor.Meteor;
var _ = Package.underscore._;

/* Package-scope variables */
var OrderedDict;

(function () {

///////////////////////////////////////////////////////////////////////////////////
//                                                                               //
// packages/ordered-dict/ordered_dict.js                                         //
//                                                                               //
///////////////////////////////////////////////////////////////////////////////////
                                                                                 //
// This file defines an ordered dictionary abstraction that is useful for        // 1
// maintaining a dataset backed by observeChanges.  It supports ordering items   // 2
// by specifying the item they now come before.                                  // 3
                                                                                 // 4
// The implementation is a dictionary that contains nodes of a doubly-linked     // 5
// list as its values.                                                           // 6
                                                                                 // 7
// constructs a new element struct                                               // 8
// next and prev are whole elements, not keys.                                   // 9
var element = function (key, value, next, prev) {                                // 10
  return {                                                                       // 11
    key: key,                                                                    // 12
    value: value,                                                                // 13
    next: next,                                                                  // 14
    prev: prev                                                                   // 15
  };                                                                             // 16
};                                                                               // 17
OrderedDict = function (/* ... */) {                                             // 18
  var self = this;                                                               // 19
  self._dict = {};                                                               // 20
  self._first = null;                                                            // 21
  self._last = null;                                                             // 22
  self._size = 0;                                                                // 23
  var args = _.toArray(arguments);                                               // 24
  self._stringify = function (x) { return x; };                                  // 25
  if (typeof args[0] === 'function')                                             // 26
    self._stringify = args.shift();                                              // 27
  _.each(args, function (kv) {                                                   // 28
    self.putBefore(kv[0], kv[1], null);                                          // 29
  });                                                                            // 30
};                                                                               // 31
                                                                                 // 32
_.extend(OrderedDict.prototype, {                                                // 33
  // the "prefix keys with a space" thing comes from here                        // 34
  // https://github.com/documentcloud/underscore/issues/376#issuecomment-2815649 // 35
  _k: function (key) { return " " + this._stringify(key); },                     // 36
                                                                                 // 37
  empty: function () {                                                           // 38
    var self = this;                                                             // 39
    return !self._first;                                                         // 40
  },                                                                             // 41
  size: function () {                                                            // 42
    var self = this;                                                             // 43
    return self._size;                                                           // 44
  },                                                                             // 45
  _linkEltIn: function (elt) {                                                   // 46
    var self = this;                                                             // 47
    if (!elt.next) {                                                             // 48
      elt.prev = self._last;                                                     // 49
      if (self._last)                                                            // 50
        self._last.next = elt;                                                   // 51
      self._last = elt;                                                          // 52
    } else {                                                                     // 53
      elt.prev = elt.next.prev;                                                  // 54
      elt.next.prev = elt;                                                       // 55
      if (elt.prev)                                                              // 56
        elt.prev.next = elt;                                                     // 57
    }                                                                            // 58
    if (self._first === null || self._first === elt.next)                        // 59
      self._first = elt;                                                         // 60
  },                                                                             // 61
  _linkEltOut: function (elt) {                                                  // 62
    var self = this;                                                             // 63
    if (elt.next)                                                                // 64
      elt.next.prev = elt.prev;                                                  // 65
    if (elt.prev)                                                                // 66
      elt.prev.next = elt.next;                                                  // 67
    if (elt === self._last)                                                      // 68
      self._last = elt.prev;                                                     // 69
    if (elt === self._first)                                                     // 70
      self._first = elt.next;                                                    // 71
  },                                                                             // 72
  putBefore: function (key, item, before) {                                      // 73
    var self = this;                                                             // 74
    if (self._dict[self._k(key)])                                                // 75
      throw new Error("Item " + key + " already present in OrderedDict");        // 76
    var elt = before ?                                                           // 77
          element(key, item, self._dict[self._k(before)]) :                      // 78
          element(key, item, null);                                              // 79
    if (elt.next === undefined)                                                  // 80
      throw new Error("could not find item to put this one before");             // 81
    self._linkEltIn(elt);                                                        // 82
    self._dict[self._k(key)] = elt;                                              // 83
    self._size++;                                                                // 84
  },                                                                             // 85
  append: function (key, item) {                                                 // 86
    var self = this;                                                             // 87
    self.putBefore(key, item, null);                                             // 88
  },                                                                             // 89
  remove: function (key) {                                                       // 90
    var self = this;                                                             // 91
    var elt = self._dict[self._k(key)];                                          // 92
    if (elt === undefined)                                                       // 93
      throw new Error("Item " + key + " not present in OrderedDict");            // 94
    self._linkEltOut(elt);                                                       // 95
    self._size--;                                                                // 96
    delete self._dict[self._k(key)];                                             // 97
    return elt.value;                                                            // 98
  },                                                                             // 99
  get: function (key) {                                                          // 100
    var self = this;                                                             // 101
    if (self.has(key))                                                           // 102
        return self._dict[self._k(key)].value;                                   // 103
    return undefined;                                                            // 104
  },                                                                             // 105
  has: function (key) {                                                          // 106
    var self = this;                                                             // 107
    return _.has(self._dict, self._k(key));                                      // 108
  },                                                                             // 109
  // Iterate through the items in this dictionary in order, calling              // 110
  // iter(value, key, index) on each one.                                        // 111
                                                                                 // 112
  // Stops whenever iter returns OrderedDict.BREAK, or after the last element.   // 113
  forEach: function (iter) {                                                     // 114
    var self = this;                                                             // 115
    var i = 0;                                                                   // 116
    var elt = self._first;                                                       // 117
    while (elt !== null) {                                                       // 118
      var b = iter(elt.value, elt.key, i);                                       // 119
      if (b === OrderedDict.BREAK)                                               // 120
        return;                                                                  // 121
      elt = elt.next;                                                            // 122
      i++;                                                                       // 123
    }                                                                            // 124
  },                                                                             // 125
  first: function () {                                                           // 126
    var self = this;                                                             // 127
    if (self.empty())                                                            // 128
      return undefined;                                                          // 129
    return self._first.key;                                                      // 130
  },                                                                             // 131
  firstValue: function () {                                                      // 132
    var self = this;                                                             // 133
    if (self.empty())                                                            // 134
      return undefined;                                                          // 135
    return self._first.value;                                                    // 136
  },                                                                             // 137
  last: function () {                                                            // 138
    var self = this;                                                             // 139
    if (self.empty())                                                            // 140
      return undefined;                                                          // 141
    return self._last.key;                                                       // 142
  },                                                                             // 143
  lastValue: function () {                                                       // 144
    var self = this;                                                             // 145
    if (self.empty())                                                            // 146
      return undefined;                                                          // 147
    return self._last.value;                                                     // 148
  },                                                                             // 149
  prev: function (key) {                                                         // 150
    var self = this;                                                             // 151
    if (self.has(key)) {                                                         // 152
      var elt = self._dict[self._k(key)];                                        // 153
      if (elt.prev)                                                              // 154
        return elt.prev.key;                                                     // 155
    }                                                                            // 156
    return null;                                                                 // 157
  },                                                                             // 158
  next: function (key) {                                                         // 159
    var self = this;                                                             // 160
    if (self.has(key)) {                                                         // 161
      var elt = self._dict[self._k(key)];                                        // 162
      if (elt.next)                                                              // 163
        return elt.next.key;                                                     // 164
    }                                                                            // 165
    return null;                                                                 // 166
  },                                                                             // 167
  moveBefore: function (key, before) {                                           // 168
    var self = this;                                                             // 169
    var elt = self._dict[self._k(key)];                                          // 170
    var eltBefore = before ? self._dict[self._k(before)] : null;                 // 171
    if (elt === undefined)                                                       // 172
      throw new Error("Item to move is not present");                            // 173
    if (eltBefore === undefined) {                                               // 174
      throw new Error("Could not find element to move this one before");         // 175
    }                                                                            // 176
    if (eltBefore === elt.next) // no moving necessary                           // 177
      return;                                                                    // 178
    // remove from its old place                                                 // 179
    self._linkEltOut(elt);                                                       // 180
    // patch into its new place                                                  // 181
    elt.next = eltBefore;                                                        // 182
    self._linkEltIn(elt);                                                        // 183
  },                                                                             // 184
  // Linear, sadly.                                                              // 185
  indexOf: function (key) {                                                      // 186
    var self = this;                                                             // 187
    var ret = null;                                                              // 188
    self.forEach(function (v, k, i) {                                            // 189
      if (self._k(k) === self._k(key)) {                                         // 190
        ret = i;                                                                 // 191
        return OrderedDict.BREAK;                                                // 192
      }                                                                          // 193
      return undefined;                                                          // 194
    });                                                                          // 195
    return ret;                                                                  // 196
  },                                                                             // 197
  _checkRep: function () {                                                       // 198
    var self = this;                                                             // 199
    _.each(self._dict, function (k, v) {                                         // 200
      if (v.next === v)                                                          // 201
        throw new Error("Next is a loop");                                       // 202
      if (v.prev === v)                                                          // 203
        throw new Error("Prev is a loop");                                       // 204
    });                                                                          // 205
  }                                                                              // 206
                                                                                 // 207
});                                                                              // 208
OrderedDict.BREAK = {"break": true};                                             // 209
                                                                                 // 210
///////////////////////////////////////////////////////////////////////////////////

}).call(this);


/* Exports */
if (typeof Package === 'undefined') Package = {};
Package['ordered-dict'] = {
  OrderedDict: OrderedDict
};

})();

//# sourceMappingURL=bf8af2f26c8d96bf8b2e6b407d3ed69f23c2cd37.map
//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
//                                                                      //
// If you are using Chrome, open the Developer Tools and click the gear //
// icon in its lower right corner. In the General Settings panel, turn  //
// on 'Enable source maps'.                                             //
//                                                                      //
// If you are using Firefox 23, go to `about:config` and set the        //
// `devtools.debugger.source-maps-enabled` preference to true.          //
// (The preference should be on by default in Firefox 24; versions      //
// older than 23 do not support source maps.)                           //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

/* Imports */
var Meteor = Package.meteor.Meteor;
var _ = Package.underscore._;

/* Package-scope variables */
var Random;

(function () {

//////////////////////////////////////////////////////////////////////////////////////
//                                                                                  //
// packages/random/random.js                                                        //
//                                                                                  //
//////////////////////////////////////////////////////////////////////////////////////
                                                                                    //
// We use cryptographically strong PRNGs (crypto.getRandomBytes() on the server,    // 1
// window.crypto.getRandomValues() in the browser) when available. If these         // 2
// PRNGs fail, we fall back to the Alea PRNG, which is not cryptographically        // 3
// strong, and we seed it with various sources such as the date, Math.random,       // 4
// and window size on the client.  When using crypto.getRandomValues(), our         // 5
// primitive is hexString(), from which we construct fraction(). When using         // 6
// window.crypto.getRandomValues() or alea, the primitive is fraction and we use    // 7
// that to construct hex string.                                                    // 8
                                                                                    // 9
if (Meteor.isServer)                                                                // 10
  var nodeCrypto = Npm.require('crypto');                                           // 11
                                                                                    // 12
// see http://baagoe.org/en/wiki/Better_random_numbers_for_javascript               // 13
// for a full discussion and Alea implementation.                                   // 14
var Alea = function () {                                                            // 15
  function Mash() {                                                                 // 16
    var n = 0xefc8249d;                                                             // 17
                                                                                    // 18
    var mash = function(data) {                                                     // 19
      data = data.toString();                                                       // 20
      for (var i = 0; i < data.length; i++) {                                       // 21
        n += data.charCodeAt(i);                                                    // 22
        var h = 0.02519603282416938 * n;                                            // 23
        n = h >>> 0;                                                                // 24
        h -= n;                                                                     // 25
        h *= n;                                                                     // 26
        n = h >>> 0;                                                                // 27
        h -= n;                                                                     // 28
        n += h * 0x100000000; // 2^32                                               // 29
      }                                                                             // 30
      return (n >>> 0) * 2.3283064365386963e-10; // 2^-32                           // 31
    };                                                                              // 32
                                                                                    // 33
    mash.version = 'Mash 0.9';                                                      // 34
    return mash;                                                                    // 35
  }                                                                                 // 36
                                                                                    // 37
  return (function (args) {                                                         // 38
    var s0 = 0;                                                                     // 39
    var s1 = 0;                                                                     // 40
    var s2 = 0;                                                                     // 41
    var c = 1;                                                                      // 42
                                                                                    // 43
    if (args.length == 0) {                                                         // 44
      args = [+new Date];                                                           // 45
    }                                                                               // 46
    var mash = Mash();                                                              // 47
    s0 = mash(' ');                                                                 // 48
    s1 = mash(' ');                                                                 // 49
    s2 = mash(' ');                                                                 // 50
                                                                                    // 51
    for (var i = 0; i < args.length; i++) {                                         // 52
      s0 -= mash(args[i]);                                                          // 53
      if (s0 < 0) {                                                                 // 54
        s0 += 1;                                                                    // 55
      }                                                                             // 56
      s1 -= mash(args[i]);                                                          // 57
      if (s1 < 0) {                                                                 // 58
        s1 += 1;                                                                    // 59
      }                                                                             // 60
      s2 -= mash(args[i]);                                                          // 61
      if (s2 < 0) {                                                                 // 62
        s2 += 1;                                                                    // 63
      }                                                                             // 64
    }                                                                               // 65
    mash = null;                                                                    // 66
                                                                                    // 67
    var random = function() {                                                       // 68
      var t = 2091639 * s0 + c * 2.3283064365386963e-10; // 2^-32                   // 69
      s0 = s1;                                                                      // 70
      s1 = s2;                                                                      // 71
      return s2 = t - (c = t | 0);                                                  // 72
    };                                                                              // 73
    random.uint32 = function() {                                                    // 74
      return random() * 0x100000000; // 2^32                                        // 75
    };                                                                              // 76
    random.fract53 = function() {                                                   // 77
      return random() +                                                             // 78
        (random() * 0x200000 | 0) * 1.1102230246251565e-16; // 2^-53                // 79
    };                                                                              // 80
    random.version = 'Alea 0.9';                                                    // 81
    random.args = args;                                                             // 82
    return random;                                                                  // 83
                                                                                    // 84
  } (Array.prototype.slice.call(arguments)));                                       // 85
};                                                                                  // 86
                                                                                    // 87
var UNMISTAKABLE_CHARS = "23456789ABCDEFGHJKLMNPQRSTWXYZabcdefghijkmnopqrstuvwxyz"; // 88
var BASE64_CHARS = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ" +         // 89
  "0123456789-_";                                                                   // 90
                                                                                    // 91
// If seeds are provided, then the alea PRNG will be used, since cryptographic      // 92
// PRNGs (Node crypto and window.crypto.getRandomValues) don't allow us to          // 93
// specify seeds. The caller is responsible for making sure to provide a seed       // 94
// for alea if a csprng is not available.                                           // 95
var RandomGenerator = function (seedArray) {                                        // 96
  var self = this;                                                                  // 97
  if (seedArray !== undefined)                                                      // 98
    self.alea = Alea.apply(null, seedArray);                                        // 99
};                                                                                  // 100
                                                                                    // 101
RandomGenerator.prototype.fraction = function () {                                  // 102
  var self = this;                                                                  // 103
  if (self.alea) {                                                                  // 104
    return self.alea();                                                             // 105
  } else if (nodeCrypto) {                                                          // 106
    var numerator = parseInt(self.hexString(8), 16);                                // 107
    return numerator * 2.3283064365386963e-10; // 2^-32                             // 108
  } else if (typeof window !== "undefined" && window.crypto &&                      // 109
             window.crypto.getRandomValues) {                                       // 110
    var array = new Uint32Array(1);                                                 // 111
    window.crypto.getRandomValues(array);                                           // 112
    return array[0] * 2.3283064365386963e-10; // 2^-32                              // 113
  } else {                                                                          // 114
    throw new Error('No random generator available');                               // 115
  }                                                                                 // 116
};                                                                                  // 117
                                                                                    // 118
RandomGenerator.prototype.hexString = function (digits) {                           // 119
  var self = this;                                                                  // 120
  if (nodeCrypto && ! self.alea) {                                                  // 121
    var numBytes = Math.ceil(digits / 2);                                           // 122
    var bytes;                                                                      // 123
    // Try to get cryptographically strong randomness. Fall back to                 // 124
    // non-cryptographically strong if not available.                               // 125
    try {                                                                           // 126
      bytes = nodeCrypto.randomBytes(numBytes);                                     // 127
    } catch (e) {                                                                   // 128
      // XXX should re-throw any error except insufficient entropy                  // 129
      bytes = nodeCrypto.pseudoRandomBytes(numBytes);                               // 130
    }                                                                               // 131
    var result = bytes.toString("hex");                                             // 132
    // If the number of digits is odd, we'll have generated an extra 4 bits         // 133
    // of randomness, so we need to trim the last digit.                            // 134
    return result.substring(0, digits);                                             // 135
  } else {                                                                          // 136
    var hexDigits = [];                                                             // 137
    for (var i = 0; i < digits; ++i) {                                              // 138
      hexDigits.push(self.choice("0123456789abcdef"));                              // 139
    }                                                                               // 140
    return hexDigits.join('');                                                      // 141
  }                                                                                 // 142
};                                                                                  // 143
                                                                                    // 144
RandomGenerator.prototype._randomString = function (charsCount,                     // 145
                                                    alphabet) {                     // 146
  var self = this;                                                                  // 147
  var digits = [];                                                                  // 148
  for (var i = 0; i < charsCount; i++) {                                            // 149
    digits[i] = self.choice(alphabet);                                              // 150
  }                                                                                 // 151
  return digits.join("");                                                           // 152
};                                                                                  // 153
                                                                                    // 154
RandomGenerator.prototype.id = function (charsCount) {                              // 155
  var self = this;                                                                  // 156
  // 17 characters is around 96 bits of entropy, which is the amount of             // 157
  // state in the Alea PRNG.                                                        // 158
  if (charsCount === undefined)                                                     // 159
    charsCount = 17;                                                                // 160
                                                                                    // 161
  return self._randomString(charsCount, UNMISTAKABLE_CHARS);                        // 162
};                                                                                  // 163
                                                                                    // 164
RandomGenerator.prototype.secret = function (charsCount) {                          // 165
  var self = this;                                                                  // 166
  // Default to 256 bits of entropy, or 43 characters at 6 bits per                 // 167
  // character.                                                                     // 168
  if (charsCount === undefined)                                                     // 169
    charsCount = 43;                                                                // 170
  return self._randomString(charsCount, BASE64_CHARS);                              // 171
};                                                                                  // 172
                                                                                    // 173
RandomGenerator.prototype.choice = function (arrayOrString) {                       // 174
  var index = Math.floor(this.fraction() * arrayOrString.length);                   // 175
  if (typeof arrayOrString === "string")                                            // 176
    return arrayOrString.substr(index, 1);                                          // 177
  else                                                                              // 178
    return arrayOrString[index];                                                    // 179
};                                                                                  // 180
                                                                                    // 181
// instantiate RNG.  Heuristically collect entropy from various sources when a      // 182
// cryptographic PRNG isn't available.                                              // 183
                                                                                    // 184
// client sources                                                                   // 185
var height = (typeof window !== 'undefined' && window.innerHeight) ||               // 186
      (typeof document !== 'undefined'                                              // 187
       && document.documentElement                                                  // 188
       && document.documentElement.clientHeight) ||                                 // 189
      (typeof document !== 'undefined'                                              // 190
       && document.body                                                             // 191
       && document.body.clientHeight) ||                                            // 192
      1;                                                                            // 193
                                                                                    // 194
var width = (typeof window !== 'undefined' && window.innerWidth) ||                 // 195
      (typeof document !== 'undefined'                                              // 196
       && document.documentElement                                                  // 197
       && document.documentElement.clientWidth) ||                                  // 198
      (typeof document !== 'undefined'                                              // 199
       && document.body                                                             // 200
       && document.body.clientWidth) ||                                             // 201
      1;                                                                            // 202
                                                                                    // 203
var agent = (typeof navigator !== 'undefined' && navigator.userAgent) || "";        // 204
                                                                                    // 205
if (nodeCrypto ||                                                                   // 206
    (typeof window !== "undefined" &&                                               // 207
     window.crypto && window.crypto.getRandomValues))                               // 208
  Random = new RandomGenerator();                                                   // 209
else                                                                                // 210
  Random = new RandomGenerator([new Date(), height, width, agent, Math.random()]);  // 211
                                                                                    // 212
Random.createWithSeeds = function () {                                              // 213
  if (arguments.length === 0) {                                                     // 214
    throw new Error('No seeds were provided');                                      // 215
  }                                                                                 // 216
  return new RandomGenerator(arguments);                                            // 217
};                                                                                  // 218
                                                                                    // 219
//////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

//////////////////////////////////////////////////////////////////////////////////////
//                                                                                  //
// packages/random/deprecated.js                                                    //
//                                                                                  //
//////////////////////////////////////////////////////////////////////////////////////
                                                                                    //
// Before this package existed, we used to use this Meteor.uuid()                   // 1
// implementing the RFC 4122 v4 UUID. It is no longer documented                    // 2
// and will go away.                                                                // 3
// XXX COMPAT WITH 0.5.6                                                            // 4
Meteor.uuid = function () {                                                         // 5
  var HEX_DIGITS = "0123456789abcdef";                                              // 6
  var s = [];                                                                       // 7
  for (var i = 0; i < 36; i++) {                                                    // 8
    s[i] = Random.choice(HEX_DIGITS);                                               // 9
  }                                                                                 // 10
  s[14] = "4";                                                                      // 11
  s[19] = HEX_DIGITS.substr((parseInt(s[19],16) & 0x3) | 0x8, 1);                   // 12
  s[8] = s[13] = s[18] = s[23] = "-";                                               // 13
                                                                                    // 14
  var uuid = s.join("");                                                            // 15
  return uuid;                                                                      // 16
};                                                                                  // 17
                                                                                    // 18
//////////////////////////////////////////////////////////////////////////////////////

}).call(this);


/* Exports */
if (typeof Package === 'undefined') Package = {};
Package.random = {
  Random: Random
};

})();

//# sourceMappingURL=fe7b46080c91ce482acf6fc326afbc5b176f0502.map
//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
//                                                                      //
// If you are using Chrome, open the Developer Tools and click the gear //
// icon in its lower right corner. In the General Settings panel, turn  //
// on 'Enable source maps'.                                             //
//                                                                      //
// If you are using Firefox 23, go to `about:config` and set the        //
// `devtools.debugger.source-maps-enabled` preference to true.          //
// (The preference should be on by default in Firefox 24; versions      //
// older than 23 do not support source maps.)                           //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

/* Imports */
var Meteor = Package.meteor.Meteor;
var Spacebars = Package.spacebars.Spacebars;
var HTMLTools = Package['html-tools'].HTMLTools;
var _ = Package.underscore._;
var UI = Package.ui.UI;
var Handlebars = Package.ui.Handlebars;
var HTML = Package.htmljs.HTML;

/* Package-scope variables */
var parseNumber, parseIdentifierName, parseStringLiteral, toJSLiteral, toObjectLiteralKey, TemplateTag;

(function () {

//////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                      //
// packages/spacebars-compiler/tokens.js                                                                //
//                                                                                                      //
//////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                        //
                                                                                                        // 1
// Adapted from source code of http://xregexp.com/plugins/#unicode                                      // 2
var unicodeCategories = {                                                                               // 3
  Ll: "0061-007A00B500DF-00F600F8-00FF01010103010501070109010B010D010F01110113011501170119011B011D011F01210123012501270129012B012D012F01310133013501370138013A013C013E014001420144014601480149014B014D014F01510153015501570159015B015D015F01610163016501670169016B016D016F0171017301750177017A017C017E-0180018301850188018C018D019201950199-019B019E01A101A301A501A801AA01AB01AD01B001B401B601B901BA01BD-01BF01C601C901CC01CE01D001D201D401D601D801DA01DC01DD01DF01E101E301E501E701E901EB01ED01EF01F001F301F501F901FB01FD01FF02010203020502070209020B020D020F02110213021502170219021B021D021F02210223022502270229022B022D022F02310233-0239023C023F0240024202470249024B024D024F-02930295-02AF037103730377037B-037D039003AC-03CE03D003D103D5-03D703D903DB03DD03DF03E103E303E503E703E903EB03ED03EF-03F303F503F803FB03FC0430-045F04610463046504670469046B046D046F04710473047504770479047B047D047F0481048B048D048F04910493049504970499049B049D049F04A104A304A504A704A904AB04AD04AF04B104B304B504B704B904BB04BD04BF04C204C404C604C804CA04CC04CE04CF04D104D304D504D704D904DB04DD04DF04E104E304E504E704E904EB04ED04EF04F104F304F504F704F904FB04FD04FF05010503050505070509050B050D050F05110513051505170519051B051D051F05210523052505270561-05871D00-1D2B1D6B-1D771D79-1D9A1E011E031E051E071E091E0B1E0D1E0F1E111E131E151E171E191E1B1E1D1E1F1E211E231E251E271E291E2B1E2D1E2F1E311E331E351E371E391E3B1E3D1E3F1E411E431E451E471E491E4B1E4D1E4F1E511E531E551E571E591E5B1E5D1E5F1E611E631E651E671E691E6B1E6D1E6F1E711E731E751E771E791E7B1E7D1E7F1E811E831E851E871E891E8B1E8D1E8F1E911E931E95-1E9D1E9F1EA11EA31EA51EA71EA91EAB1EAD1EAF1EB11EB31EB51EB71EB91EBB1EBD1EBF1EC11EC31EC51EC71EC91ECB1ECD1ECF1ED11ED31ED51ED71ED91EDB1EDD1EDF1EE11EE31EE51EE71EE91EEB1EED1EEF1EF11EF31EF51EF71EF91EFB1EFD1EFF-1F071F10-1F151F20-1F271F30-1F371F40-1F451F50-1F571F60-1F671F70-1F7D1F80-1F871F90-1F971FA0-1FA71FB0-1FB41FB61FB71FBE1FC2-1FC41FC61FC71FD0-1FD31FD61FD71FE0-1FE71FF2-1FF41FF61FF7210A210E210F2113212F21342139213C213D2146-2149214E21842C30-2C5E2C612C652C662C682C6A2C6C2C712C732C742C76-2C7B2C812C832C852C872C892C8B2C8D2C8F2C912C932C952C972C992C9B2C9D2C9F2CA12CA32CA52CA72CA92CAB2CAD2CAF2CB12CB32CB52CB72CB92CBB2CBD2CBF2CC12CC32CC52CC72CC92CCB2CCD2CCF2CD12CD32CD52CD72CD92CDB2CDD2CDF2CE12CE32CE42CEC2CEE2CF32D00-2D252D272D2DA641A643A645A647A649A64BA64DA64FA651A653A655A657A659A65BA65DA65FA661A663A665A667A669A66BA66DA681A683A685A687A689A68BA68DA68FA691A693A695A697A723A725A727A729A72BA72DA72F-A731A733A735A737A739A73BA73DA73FA741A743A745A747A749A74BA74DA74FA751A753A755A757A759A75BA75DA75FA761A763A765A767A769A76BA76DA76FA771-A778A77AA77CA77FA781A783A785A787A78CA78EA791A793A7A1A7A3A7A5A7A7A7A9A7FAFB00-FB06FB13-FB17FF41-FF5A",
  Lm: "02B0-02C102C6-02D102E0-02E402EC02EE0374037A0559064006E506E607F407F507FA081A0824082809710E460EC610FC17D718431AA71C78-1C7D1D2C-1D6A1D781D9B-1DBF2071207F2090-209C2C7C2C7D2D6F2E2F30053031-3035303B309D309E30FC-30FEA015A4F8-A4FDA60CA67FA717-A71FA770A788A7F8A7F9A9CFAA70AADDAAF3AAF4FF70FF9EFF9F",
  Lo: "00AA00BA01BB01C0-01C3029405D0-05EA05F0-05F20620-063F0641-064A066E066F0671-06D306D506EE06EF06FA-06FC06FF07100712-072F074D-07A507B107CA-07EA0800-08150840-085808A008A2-08AC0904-0939093D09500958-09610972-09770979-097F0985-098C098F09900993-09A809AA-09B009B209B6-09B909BD09CE09DC09DD09DF-09E109F009F10A05-0A0A0A0F0A100A13-0A280A2A-0A300A320A330A350A360A380A390A59-0A5C0A5E0A72-0A740A85-0A8D0A8F-0A910A93-0AA80AAA-0AB00AB20AB30AB5-0AB90ABD0AD00AE00AE10B05-0B0C0B0F0B100B13-0B280B2A-0B300B320B330B35-0B390B3D0B5C0B5D0B5F-0B610B710B830B85-0B8A0B8E-0B900B92-0B950B990B9A0B9C0B9E0B9F0BA30BA40BA8-0BAA0BAE-0BB90BD00C05-0C0C0C0E-0C100C12-0C280C2A-0C330C35-0C390C3D0C580C590C600C610C85-0C8C0C8E-0C900C92-0CA80CAA-0CB30CB5-0CB90CBD0CDE0CE00CE10CF10CF20D05-0D0C0D0E-0D100D12-0D3A0D3D0D4E0D600D610D7A-0D7F0D85-0D960D9A-0DB10DB3-0DBB0DBD0DC0-0DC60E01-0E300E320E330E40-0E450E810E820E840E870E880E8A0E8D0E94-0E970E99-0E9F0EA1-0EA30EA50EA70EAA0EAB0EAD-0EB00EB20EB30EBD0EC0-0EC40EDC-0EDF0F000F40-0F470F49-0F6C0F88-0F8C1000-102A103F1050-1055105A-105D106110651066106E-10701075-1081108E10D0-10FA10FD-1248124A-124D1250-12561258125A-125D1260-1288128A-128D1290-12B012B2-12B512B8-12BE12C012C2-12C512C8-12D612D8-13101312-13151318-135A1380-138F13A0-13F41401-166C166F-167F1681-169A16A0-16EA1700-170C170E-17111720-17311740-17511760-176C176E-17701780-17B317DC1820-18421844-18771880-18A818AA18B0-18F51900-191C1950-196D1970-19741980-19AB19C1-19C71A00-1A161A20-1A541B05-1B331B45-1B4B1B83-1BA01BAE1BAF1BBA-1BE51C00-1C231C4D-1C4F1C5A-1C771CE9-1CEC1CEE-1CF11CF51CF62135-21382D30-2D672D80-2D962DA0-2DA62DA8-2DAE2DB0-2DB62DB8-2DBE2DC0-2DC62DC8-2DCE2DD0-2DD62DD8-2DDE3006303C3041-3096309F30A1-30FA30FF3105-312D3131-318E31A0-31BA31F0-31FF3400-4DB54E00-9FCCA000-A014A016-A48CA4D0-A4F7A500-A60BA610-A61FA62AA62BA66EA6A0-A6E5A7FB-A801A803-A805A807-A80AA80C-A822A840-A873A882-A8B3A8F2-A8F7A8FBA90A-A925A930-A946A960-A97CA984-A9B2AA00-AA28AA40-AA42AA44-AA4BAA60-AA6FAA71-AA76AA7AAA80-AAAFAAB1AAB5AAB6AAB9-AABDAAC0AAC2AADBAADCAAE0-AAEAAAF2AB01-AB06AB09-AB0EAB11-AB16AB20-AB26AB28-AB2EABC0-ABE2AC00-D7A3D7B0-D7C6D7CB-D7FBF900-FA6DFA70-FAD9FB1DFB1F-FB28FB2A-FB36FB38-FB3CFB3EFB40FB41FB43FB44FB46-FBB1FBD3-FD3DFD50-FD8FFD92-FDC7FDF0-FDFBFE70-FE74FE76-FEFCFF66-FF6FFF71-FF9DFFA0-FFBEFFC2-FFC7FFCA-FFCFFFD2-FFD7FFDA-FFDC",
  Lt: "01C501C801CB01F21F88-1F8F1F98-1F9F1FA8-1FAF1FBC1FCC1FFC",                                        // 7
  Lu: "0041-005A00C0-00D600D8-00DE01000102010401060108010A010C010E01100112011401160118011A011C011E01200122012401260128012A012C012E01300132013401360139013B013D013F0141014301450147014A014C014E01500152015401560158015A015C015E01600162016401660168016A016C016E017001720174017601780179017B017D018101820184018601870189-018B018E-0191019301940196-0198019C019D019F01A001A201A401A601A701A901AC01AE01AF01B1-01B301B501B701B801BC01C401C701CA01CD01CF01D101D301D501D701D901DB01DE01E001E201E401E601E801EA01EC01EE01F101F401F6-01F801FA01FC01FE02000202020402060208020A020C020E02100212021402160218021A021C021E02200222022402260228022A022C022E02300232023A023B023D023E02410243-02460248024A024C024E03700372037603860388-038A038C038E038F0391-03A103A3-03AB03CF03D2-03D403D803DA03DC03DE03E003E203E403E603E803EA03EC03EE03F403F703F903FA03FD-042F04600462046404660468046A046C046E04700472047404760478047A047C047E0480048A048C048E04900492049404960498049A049C049E04A004A204A404A604A804AA04AC04AE04B004B204B404B604B804BA04BC04BE04C004C104C304C504C704C904CB04CD04D004D204D404D604D804DA04DC04DE04E004E204E404E604E804EA04EC04EE04F004F204F404F604F804FA04FC04FE05000502050405060508050A050C050E05100512051405160518051A051C051E05200522052405260531-055610A0-10C510C710CD1E001E021E041E061E081E0A1E0C1E0E1E101E121E141E161E181E1A1E1C1E1E1E201E221E241E261E281E2A1E2C1E2E1E301E321E341E361E381E3A1E3C1E3E1E401E421E441E461E481E4A1E4C1E4E1E501E521E541E561E581E5A1E5C1E5E1E601E621E641E661E681E6A1E6C1E6E1E701E721E741E761E781E7A1E7C1E7E1E801E821E841E861E881E8A1E8C1E8E1E901E921E941E9E1EA01EA21EA41EA61EA81EAA1EAC1EAE1EB01EB21EB41EB61EB81EBA1EBC1EBE1EC01EC21EC41EC61EC81ECA1ECC1ECE1ED01ED21ED41ED61ED81EDA1EDC1EDE1EE01EE21EE41EE61EE81EEA1EEC1EEE1EF01EF21EF41EF61EF81EFA1EFC1EFE1F08-1F0F1F18-1F1D1F28-1F2F1F38-1F3F1F48-1F4D1F591F5B1F5D1F5F1F68-1F6F1FB8-1FBB1FC8-1FCB1FD8-1FDB1FE8-1FEC1FF8-1FFB21022107210B-210D2110-211221152119-211D212421262128212A-212D2130-2133213E213F214521832C00-2C2E2C602C62-2C642C672C692C6B2C6D-2C702C722C752C7E-2C802C822C842C862C882C8A2C8C2C8E2C902C922C942C962C982C9A2C9C2C9E2CA02CA22CA42CA62CA82CAA2CAC2CAE2CB02CB22CB42CB62CB82CBA2CBC2CBE2CC02CC22CC42CC62CC82CCA2CCC2CCE2CD02CD22CD42CD62CD82CDA2CDC2CDE2CE02CE22CEB2CED2CF2A640A642A644A646A648A64AA64CA64EA650A652A654A656A658A65AA65CA65EA660A662A664A666A668A66AA66CA680A682A684A686A688A68AA68CA68EA690A692A694A696A722A724A726A728A72AA72CA72EA732A734A736A738A73AA73CA73EA740A742A744A746A748A74AA74CA74EA750A752A754A756A758A75AA75CA75EA760A762A764A766A768A76AA76CA76EA779A77BA77DA77EA780A782A784A786A78BA78DA790A792A7A0A7A2A7A4A7A6A7A8A7AAFF21-FF3A",
  Mc: "0903093B093E-09400949-094C094E094F0982098309BE-09C009C709C809CB09CC09D70A030A3E-0A400A830ABE-0AC00AC90ACB0ACC0B020B030B3E0B400B470B480B4B0B4C0B570BBE0BBF0BC10BC20BC6-0BC80BCA-0BCC0BD70C01-0C030C41-0C440C820C830CBE0CC0-0CC40CC70CC80CCA0CCB0CD50CD60D020D030D3E-0D400D46-0D480D4A-0D4C0D570D820D830DCF-0DD10DD8-0DDF0DF20DF30F3E0F3F0F7F102B102C10311038103B103C105610571062-10641067-106D108310841087-108C108F109A-109C17B617BE-17C517C717C81923-19261929-192B193019311933-193819B0-19C019C819C91A19-1A1B1A551A571A611A631A641A6D-1A721B041B351B3B1B3D-1B411B431B441B821BA11BA61BA71BAA1BAC1BAD1BE71BEA-1BEC1BEE1BF21BF31C24-1C2B1C341C351CE11CF21CF3302E302FA823A824A827A880A881A8B4-A8C3A952A953A983A9B4A9B5A9BAA9BBA9BD-A9C0AA2FAA30AA33AA34AA4DAA7BAAEBAAEEAAEFAAF5ABE3ABE4ABE6ABE7ABE9ABEAABEC",
  Mn: "0300-036F0483-04870591-05BD05BF05C105C205C405C505C70610-061A064B-065F067006D6-06DC06DF-06E406E706E806EA-06ED07110730-074A07A6-07B007EB-07F30816-0819081B-08230825-08270829-082D0859-085B08E4-08FE0900-0902093A093C0941-0948094D0951-095709620963098109BC09C1-09C409CD09E209E30A010A020A3C0A410A420A470A480A4B-0A4D0A510A700A710A750A810A820ABC0AC1-0AC50AC70AC80ACD0AE20AE30B010B3C0B3F0B41-0B440B4D0B560B620B630B820BC00BCD0C3E-0C400C46-0C480C4A-0C4D0C550C560C620C630CBC0CBF0CC60CCC0CCD0CE20CE30D41-0D440D4D0D620D630DCA0DD2-0DD40DD60E310E34-0E3A0E47-0E4E0EB10EB4-0EB90EBB0EBC0EC8-0ECD0F180F190F350F370F390F71-0F7E0F80-0F840F860F870F8D-0F970F99-0FBC0FC6102D-10301032-10371039103A103D103E10581059105E-10601071-1074108210851086108D109D135D-135F1712-17141732-1734175217531772177317B417B517B7-17BD17C617C9-17D317DD180B-180D18A91920-19221927192819321939-193B1A171A181A561A58-1A5E1A601A621A65-1A6C1A73-1A7C1A7F1B00-1B031B341B36-1B3A1B3C1B421B6B-1B731B801B811BA2-1BA51BA81BA91BAB1BE61BE81BE91BED1BEF-1BF11C2C-1C331C361C371CD0-1CD21CD4-1CE01CE2-1CE81CED1CF41DC0-1DE61DFC-1DFF20D0-20DC20E120E5-20F02CEF-2CF12D7F2DE0-2DFF302A-302D3099309AA66FA674-A67DA69FA6F0A6F1A802A806A80BA825A826A8C4A8E0-A8F1A926-A92DA947-A951A980-A982A9B3A9B6-A9B9A9BCAA29-AA2EAA31AA32AA35AA36AA43AA4CAAB0AAB2-AAB4AAB7AAB8AABEAABFAAC1AAECAAEDAAF6ABE5ABE8ABEDFB1EFE00-FE0FFE20-FE26",
  Nd: "0030-00390660-066906F0-06F907C0-07C90966-096F09E6-09EF0A66-0A6F0AE6-0AEF0B66-0B6F0BE6-0BEF0C66-0C6F0CE6-0CEF0D66-0D6F0E50-0E590ED0-0ED90F20-0F291040-10491090-109917E0-17E91810-18191946-194F19D0-19D91A80-1A891A90-1A991B50-1B591BB0-1BB91C40-1C491C50-1C59A620-A629A8D0-A8D9A900-A909A9D0-A9D9AA50-AA59ABF0-ABF9FF10-FF19",
  Nl: "16EE-16F02160-21822185-218830073021-30293038-303AA6E6-A6EF",                                     // 12
  Pc: "005F203F20402054FE33FE34FE4D-FE4FFF3F"                                                           // 13
};                                                                                                      // 14
                                                                                                        // 15
var unicodeClass = function (abbrev) {                                                                  // 16
  return '[' +                                                                                          // 17
    unicodeCategories[abbrev].replace(/[0-9A-F]{4}/ig, "\\u$&") + ']';                                  // 18
};                                                                                                      // 19
                                                                                                        // 20
// See ECMA-262 spec, 3rd edition, Section 7.6                                                          // 21
// Match one or more characters that can start an identifier.                                           // 22
// This is IdentifierStart+.                                                                            // 23
var rIdentifierPrefix = new RegExp(                                                                     // 24
  "^([a-zA-Z$_]+|\\\\u[0-9a-fA-F]{4}|" +                                                                // 25
    [unicodeClass('Lu'), unicodeClass('Ll'), unicodeClass('Lt'),                                        // 26
     unicodeClass('Lm'), unicodeClass('Lo'), unicodeClass('Nl')].join('|') +                            // 27
    ")+");                                                                                              // 28
// Match one or more characters that can continue an identifier.                                        // 29
// This is (IdentifierPart and not IdentifierStart)+.                                                   // 30
// To match a full identifier, match rIdentifierPrefix, then                                            // 31
// match rIdentifierMiddle followed by rIdentifierPrefix until they both fail.                          // 32
var rIdentifierMiddle = new RegExp(                                                                     // 33
  "^([0-9]|" + [unicodeClass('Mn'), unicodeClass('Mc'), unicodeClass('Nd'),                             // 34
                unicodeClass('Pc')].join('|') + ")+");                                                  // 35
                                                                                                        // 36
                                                                                                        // 37
// See ECMA-262 spec, 3rd edition, Section 7.8.3                                                        // 38
var rHexLiteral = /^0[xX][0-9a-fA-F]+(?!\w)/;                                                           // 39
var rDecLiteral =                                                                                       // 40
      /^(((0|[1-9][0-9]*)(\.[0-9]*)?)|\.[0-9]+)([Ee][+-]?[0-9]+)?(?!\w)/;                               // 41
                                                                                                        // 42
// Section 7.8.4                                                                                        // 43
var rStringQuote = /^["']/;                                                                             // 44
// Match one or more characters besides quotes, backslashes, or line ends                               // 45
var rStringMiddle = /^(?=.)[^"'\\]+?((?!.)|(?=["'\\]))/;                                                // 46
// Match one escape sequence, including the backslash.                                                  // 47
var rEscapeSequence =                                                                                   // 48
      /^\\(['"\\bfnrtv]|0(?![0-9])|x[0-9a-fA-F]{2}|u[0-9a-fA-F]{4}|(?=.)[^ux0-9])/;                     // 49
// Match one ES5 line continuation                                                                      // 50
var rLineContinuation =                                                                                 // 51
      /^\\(\r\n|[\u000A\u000D\u2028\u2029])/;                                                           // 52
                                                                                                        // 53
                                                                                                        // 54
parseNumber = function (scanner) {                                                                      // 55
  var startPos = scanner.pos;                                                                           // 56
                                                                                                        // 57
  var isNegative = false;                                                                               // 58
  if (scanner.peek() === '-') {                                                                         // 59
    scanner.pos++;                                                                                      // 60
    isNegative = true;                                                                                  // 61
  }                                                                                                     // 62
  // Note that we allow `"-0xa"`, unlike `Number(...)`.                                                 // 63
                                                                                                        // 64
  var rest = scanner.rest();                                                                            // 65
  var match = rDecLiteral.exec(rest) || rHexLiteral.exec(rest);                                         // 66
  if (! match) {                                                                                        // 67
    scanner.pos = startPos;                                                                             // 68
    return null;                                                                                        // 69
  }                                                                                                     // 70
  var matchText = match[0];                                                                             // 71
  scanner.pos += matchText.length;                                                                      // 72
                                                                                                        // 73
  var text = (isNegative ? '-' : '') + matchText;                                                       // 74
  var value = Number(matchText);                                                                        // 75
  value = (isNegative ? -value : value);                                                                // 76
  return { text: text, value: value };                                                                  // 77
};                                                                                                      // 78
                                                                                                        // 79
parseIdentifierName = function (scanner) {                                                              // 80
  var startPos = scanner.pos;                                                                           // 81
  var rest = scanner.rest();                                                                            // 82
  var match = rIdentifierPrefix.exec(rest);                                                             // 83
  if (! match)                                                                                          // 84
    return null;                                                                                        // 85
  scanner.pos += match[0].length;                                                                       // 86
  rest = scanner.rest();                                                                                // 87
  var foundMore = true;                                                                                 // 88
                                                                                                        // 89
  while (foundMore) {                                                                                   // 90
    foundMore = false;                                                                                  // 91
                                                                                                        // 92
    match = rIdentifierMiddle.exec(rest);                                                               // 93
    if (match) {                                                                                        // 94
      foundMore = true;                                                                                 // 95
      scanner.pos += match[0].length;                                                                   // 96
      rest = scanner.rest();                                                                            // 97
    }                                                                                                   // 98
                                                                                                        // 99
    match = rIdentifierPrefix.exec(rest);                                                               // 100
    if (match) {                                                                                        // 101
      foundMore = true;                                                                                 // 102
      scanner.pos += match[0].length;                                                                   // 103
      rest = scanner.rest();                                                                            // 104
    }                                                                                                   // 105
  }                                                                                                     // 106
                                                                                                        // 107
  return scanner.input.substring(startPos, scanner.pos);                                                // 108
};                                                                                                      // 109
                                                                                                        // 110
parseStringLiteral = function (scanner) {                                                               // 111
  var startPos = scanner.pos;                                                                           // 112
  var rest = scanner.rest();                                                                            // 113
  var match = rStringQuote.exec(rest);                                                                  // 114
  if (! match)                                                                                          // 115
    return null;                                                                                        // 116
                                                                                                        // 117
  var quote = match[0];                                                                                 // 118
  scanner.pos++;                                                                                        // 119
  rest = scanner.rest();                                                                                // 120
                                                                                                        // 121
  var jsonLiteral = '"';                                                                                // 122
                                                                                                        // 123
  while (match) {                                                                                       // 124
    match = rStringMiddle.exec(rest);                                                                   // 125
    if (match) {                                                                                        // 126
      jsonLiteral += match[0];                                                                          // 127
    } else {                                                                                            // 128
      match = rEscapeSequence.exec(rest);                                                               // 129
      if (match) {                                                                                      // 130
        var esc = match[0];                                                                             // 131
        // Convert all string escapes to JSON-compatible string escapes, so we                          // 132
        // can use JSON.parse for some of the work.  JSON strings are not the                           // 133
        // same as JS strings.  They don't support `\0`, `\v`, `\'`, or hex                             // 134
        // escapes.                                                                                     // 135
        if (esc === '\\0')                                                                              // 136
          jsonLiteral += '\\u0000';                                                                     // 137
        else if (esc === '\\v')                                                                         // 138
          // Note: IE 8 doesn't correctly parse '\v' in JavaScript.                                     // 139
          jsonLiteral += '\\u000b';                                                                     // 140
        else if (esc.charAt(1) === 'x')                                                                 // 141
          jsonLiteral += '\\u00' + esc.slice(2);                                                        // 142
        else if (esc === '\\\'')                                                                        // 143
          jsonLiteral += "'";                                                                           // 144
        else                                                                                            // 145
          jsonLiteral += esc;                                                                           // 146
      } else {                                                                                          // 147
        match = rLineContinuation.exec(rest);                                                           // 148
        if (! match) {                                                                                  // 149
          match = rStringQuote.exec(rest);                                                              // 150
          if (match) {                                                                                  // 151
            var c = match[0];                                                                           // 152
            if (c !== quote) {                                                                          // 153
              if (c === '"')                                                                            // 154
                jsonLiteral += '\\';                                                                    // 155
              jsonLiteral += c;                                                                         // 156
            }                                                                                           // 157
          }                                                                                             // 158
        }                                                                                               // 159
      }                                                                                                 // 160
    }                                                                                                   // 161
    if (match) {                                                                                        // 162
      scanner.pos += match[0].length;                                                                   // 163
      rest = scanner.rest();                                                                            // 164
      if (match[0] === quote)                                                                           // 165
        break;                                                                                          // 166
    }                                                                                                   // 167
  }                                                                                                     // 168
                                                                                                        // 169
  if (match[0] !== quote)                                                                               // 170
    scanner.fatal("Unterminated string literal");                                                       // 171
                                                                                                        // 172
  jsonLiteral += '"';                                                                                   // 173
  var text = scanner.input.substring(startPos, scanner.pos);                                            // 174
  var value = JSON.parse(jsonLiteral);                                                                  // 175
  return { text: text, value: value };                                                                  // 176
};                                                                                                      // 177
                                                                                                        // 178
// expose for testing                                                                                   // 179
Spacebars._$ = {                                                                                        // 180
  parseNumber: parseNumber,                                                                             // 181
  parseIdentifierName: parseIdentifierName,                                                             // 182
  parseStringLiteral: parseStringLiteral                                                                // 183
};                                                                                                      // 184
                                                                                                        // 185
//////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

//////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                      //
// packages/spacebars-compiler/tojs.js                                                                  //
//                                                                                                      //
//////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                        //
                                                                                                        // 1
// Turns any JSONable value into a JavaScript literal.                                                  // 2
toJSLiteral = function (obj) {                                                                          // 3
  // See <http://timelessrepo.com/json-isnt-a-javascript-subset> for `\u2028\u2029`.                    // 4
  // Also escape Unicode surrogates.                                                                    // 5
  return (JSON.stringify(obj)                                                                           // 6
          .replace(/[\u2028\u2029\ud800-\udfff]/g, function (c) {                                       // 7
            return '\\u' + ('000' + c.charCodeAt(0).toString(16)).slice(-4);                            // 8
          }));                                                                                          // 9
};                                                                                                      // 10
                                                                                                        // 11
                                                                                                        // 12
                                                                                                        // 13
var jsReservedWordSet = (function (set) {                                                               // 14
  _.each("abstract else instanceof super boolean enum int switch break export interface synchronized byte extends let this case false long throw catch final native throws char finally new transient class float null true const for package try continue function private typeof debugger goto protected var default if public void delete implements return volatile do import short while double in static with".split(' '), function (w) {
    set[w] = 1;                                                                                         // 16
  });                                                                                                   // 17
  return set;                                                                                           // 18
})({});                                                                                                 // 19
                                                                                                        // 20
toObjectLiteralKey = function (k) {                                                                     // 21
  if (/^[a-zA-Z$_][a-zA-Z$0-9_]*$/.test(k) && jsReservedWordSet[k] !== 1)                               // 22
    return k;                                                                                           // 23
  return toJSLiteral(k);                                                                                // 24
};                                                                                                      // 25
                                                                                                        // 26
// This method is generic, i.e. it can be transplanted to non-Tags                                      // 27
// and it will still work by accessing `this.tagName`, `this.attrs`,                                    // 28
// and `this.children`.  It's ok if `this.attrs` has content that                                       // 29
// isn't allowed in an attribute (this feature is used by                                               // 30
// HTMLTools.Special.prototype.toJS).                                                                   // 31
HTML.Tag.prototype.toJS = function (options) {                                                          // 32
  var argStrs = [];                                                                                     // 33
  if (this.attrs) {                                                                                     // 34
    var kvStrs = [];                                                                                    // 35
    for (var k in this.attrs) {                                                                         // 36
      if (! HTML.isNully(this.attrs[k]))                                                                // 37
        kvStrs.push(toObjectLiteralKey(k) + ': ' +                                                      // 38
                    HTML.toJS(this.attrs[k], options));                                                 // 39
    }                                                                                                   // 40
    if (kvStrs.length)                                                                                  // 41
      argStrs.push('{' + kvStrs.join(', ') + '}');                                                      // 42
  }                                                                                                     // 43
                                                                                                        // 44
  for (var i = 0; i < this.children.length; i++) {                                                      // 45
    argStrs.push(HTML.toJS(this.children[i], options));                                                 // 46
  }                                                                                                     // 47
                                                                                                        // 48
  var tagName = this.tagName;                                                                           // 49
  var tagSymbol;                                                                                        // 50
  if (! (this instanceof HTML.Tag))                                                                     // 51
    // a CharRef or Comment, say                                                                        // 52
    tagSymbol = (tagName.indexOf('.') >= 0 ? tagName : 'HTML.' + tagName);                              // 53
  else if (! HTML.isTagEnsured(tagName))                                                                // 54
    tagSymbol = 'HTML.getTag(' + toJSLiteral(tagName) + ')';                                            // 55
  else                                                                                                  // 56
    tagSymbol = 'HTML.' + HTML.getSymbolName(tagName);                                                  // 57
                                                                                                        // 58
  return tagSymbol + '(' + argStrs.join(', ') + ')';                                                    // 59
};                                                                                                      // 60
                                                                                                        // 61
HTML.CharRef.prototype.toJS = function (options) {                                                      // 62
  return HTML.Tag.prototype.toJS.call({tagName: "CharRef",                                              // 63
                                       attrs: {html: this.html,                                         // 64
                                               str: this.str},                                          // 65
                                       children: []},                                                   // 66
                                      options);                                                         // 67
};                                                                                                      // 68
                                                                                                        // 69
HTML.Comment.prototype.toJS = function (options) {                                                      // 70
  return HTML.Tag.prototype.toJS.call({tagName: "Comment",                                              // 71
                                       attrs: null,                                                     // 72
                                       children: [this.value]},                                         // 73
                                      options);                                                         // 74
};                                                                                                      // 75
                                                                                                        // 76
HTML.Raw.prototype.toJS = function (options) {                                                          // 77
  return HTML.Tag.prototype.toJS.call({tagName: "Raw",                                                  // 78
                                       attrs: null,                                                     // 79
                                       children: [this.value]},                                         // 80
                                      options);                                                         // 81
};                                                                                                      // 82
                                                                                                        // 83
HTML.EmitCode.prototype.toJS = function (options) {                                                     // 84
  return this.value;                                                                                    // 85
};                                                                                                      // 86
                                                                                                        // 87
HTML.toJS = function (node, options) {                                                                  // 88
  if (node == null) {                                                                                   // 89
    // null or undefined                                                                                // 90
    return 'null';                                                                                      // 91
  } else if ((typeof node === 'string') || (typeof node === 'boolean') || (typeof node === 'number')) { // 92
    // string (or something that will be rendered as a string)                                          // 93
    return toJSLiteral(node);                                                                           // 94
  } else if (node instanceof Array) {                                                                   // 95
    // array                                                                                            // 96
    var parts = [];                                                                                     // 97
    for (var i = 0; i < node.length; i++)                                                               // 98
      parts.push(HTML.toJS(node[i], options));                                                          // 99
    return '[' + parts.join(', ') + ']';                                                                // 100
  } else if (node.toJS) {                                                                               // 101
    // Tag or something else                                                                            // 102
    return node.toJS(options);                                                                          // 103
  } else {                                                                                              // 104
    throw new Error("Expected tag, string, array, null, undefined, or " +                               // 105
                    "object with a toJS method; found: " + node);                                       // 106
  }                                                                                                     // 107
};                                                                                                      // 108
                                                                                                        // 109
//////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

//////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                      //
// packages/spacebars-compiler/templatetag.js                                                           //
//                                                                                                      //
//////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                        //
// A TemplateTag is the result of parsing a single `{{...}}` tag.                                       // 1
//                                                                                                      // 2
// The `.type` of a TemplateTag is one of:                                                              // 3
//                                                                                                      // 4
// - `"DOUBLE"` - `{{foo}}`                                                                             // 5
// - `"TRIPLE"` - `{{{foo}}}`                                                                           // 6
// - `"COMMENT"` - `{{! foo}}`                                                                          // 7
// - `"INCLUSION"` - `{{> foo}}`                                                                        // 8
// - `"BLOCKOPEN"` - `{{#foo}}`                                                                         // 9
// - `"BLOCKCLOSE"` - `{{/foo}}`                                                                        // 10
// - `"ELSE"` - `{{else}}`                                                                              // 11
//                                                                                                      // 12
// Besides `type`, the mandatory properties of a TemplateTag are:                                       // 13
//                                                                                                      // 14
// - `path` - An array of one or more strings.  The path of `{{foo.bar}}`                               // 15
//   is `["foo", "bar"]`.  Applies to DOUBLE, TRIPLE, INCLUSION, BLOCKOPEN,                             // 16
//   and BLOCKCLOSE.                                                                                    // 17
//                                                                                                      // 18
// - `args` - An array of zero or more argument specs.  An argument spec                                // 19
//   is a two or three element array, consisting of a type, value, and                                  // 20
//   optional keyword name.  For example, the `args` of `{{foo "bar" x=3}}`                             // 21
//   are `[["STRING", "bar"], ["NUMBER", 3, "x"]]`.  Applies to DOUBLE,                                 // 22
//   TRIPLE, INCLUSION, and BLOCKOPEN.                                                                  // 23
//                                                                                                      // 24
// - `value` - For COMMENT tags, a string of the comment's text.                                        // 25
//                                                                                                      // 26
// These additional are typically set during parsing:                                                   // 27
//                                                                                                      // 28
// - `position` - The HTMLTools.TEMPLATE_TAG_POSITION specifying at what sort                           // 29
//   of site the TemplateTag was encountered (e.g. at element level or as                               // 30
//   part of an attribute value). Its absence implies                                                   // 31
//   TEMPLATE_TAG_POSITION.ELEMENT.                                                                     // 32
//                                                                                                      // 33
// - `content` and `elseContent` - When a BLOCKOPEN tag's contents are                                  // 34
//   parsed, they are put here.  `elseContent` will only be present if                                  // 35
//   an `{{else}}` was found.                                                                           // 36
                                                                                                        // 37
var TEMPLATE_TAG_POSITION = HTMLTools.TEMPLATE_TAG_POSITION;                                            // 38
                                                                                                        // 39
TemplateTag = Spacebars.TemplateTag = function () {};                                                   // 40
                                                                                                        // 41
var makeStacheTagStartRegex = function (r) {                                                            // 42
  return new RegExp(r.source + /(?![{>!#/])/.source,                                                    // 43
                    r.ignoreCase ? 'i' : '');                                                           // 44
};                                                                                                      // 45
                                                                                                        // 46
var starts = {                                                                                          // 47
  ELSE: makeStacheTagStartRegex(/^\{\{\s*else(?=[\s}])/i),                                              // 48
  DOUBLE: makeStacheTagStartRegex(/^\{\{\s*(?!\s)/),                                                    // 49
  TRIPLE: makeStacheTagStartRegex(/^\{\{\{\s*(?!\s)/),                                                  // 50
  BLOCKCOMMENT: makeStacheTagStartRegex(/^\{\{\s*!--/),                                                 // 51
  COMMENT: makeStacheTagStartRegex(/^\{\{\s*!/),                                                        // 52
  INCLUSION: makeStacheTagStartRegex(/^\{\{\s*>\s*(?!\s)/),                                             // 53
  BLOCKOPEN: makeStacheTagStartRegex(/^\{\{\s*#\s*(?!\s)/),                                             // 54
  BLOCKCLOSE: makeStacheTagStartRegex(/^\{\{\s*\/\s*(?!\s)/)                                            // 55
};                                                                                                      // 56
                                                                                                        // 57
var ends = {                                                                                            // 58
  DOUBLE: /^\s*\}\}/,                                                                                   // 59
  TRIPLE: /^\s*\}\}\}/                                                                                  // 60
};                                                                                                      // 61
                                                                                                        // 62
// Parse a tag from the provided scanner or string.  If the input                                       // 63
// doesn't start with `{{`, returns null.  Otherwise, either succeeds                                   // 64
// and returns a Spacebars.TemplateTag, or throws an error (using                                       // 65
// `scanner.fatal` if a scanner is provided).                                                           // 66
TemplateTag.parse = function (scannerOrString) {                                                        // 67
  var scanner = scannerOrString;                                                                        // 68
  if (typeof scanner === 'string')                                                                      // 69
    scanner = new HTMLTools.Scanner(scannerOrString);                                                   // 70
                                                                                                        // 71
  if (! (scanner.peek() === '{' &&                                                                      // 72
         (scanner.rest()).slice(0, 2) === '{{'))                                                        // 73
    return null;                                                                                        // 74
                                                                                                        // 75
  var run = function (regex) {                                                                          // 76
    // regex is assumed to start with `^`                                                               // 77
    var result = regex.exec(scanner.rest());                                                            // 78
    if (! result)                                                                                       // 79
      return null;                                                                                      // 80
    var ret = result[0];                                                                                // 81
    scanner.pos += ret.length;                                                                          // 82
    return ret;                                                                                         // 83
  };                                                                                                    // 84
                                                                                                        // 85
  var advance = function (amount) {                                                                     // 86
    scanner.pos += amount;                                                                              // 87
  };                                                                                                    // 88
                                                                                                        // 89
  var scanIdentifier = function (isFirstInPath) {                                                       // 90
    var id = parseIdentifierName(scanner);                                                              // 91
    if (! id)                                                                                           // 92
      expected('IDENTIFIER');                                                                           // 93
    if (isFirstInPath &&                                                                                // 94
        (id === 'null' || id === 'true' || id === 'false'))                                             // 95
      scanner.fatal("Can't use null, true, or false, as an identifier at start of path");               // 96
                                                                                                        // 97
    return id;                                                                                          // 98
  };                                                                                                    // 99
                                                                                                        // 100
  var scanPath = function () {                                                                          // 101
    var segments = [];                                                                                  // 102
                                                                                                        // 103
    // handle initial `.`, `..`, `./`, `../`, `../..`, `../../`, etc                                    // 104
    var dots;                                                                                           // 105
    if ((dots = run(/^[\.\/]+/))) {                                                                     // 106
      var ancestorStr = '.'; // eg `../../..` maps to `....`                                            // 107
      var endsWithSlash = /\/$/.test(dots);                                                             // 108
                                                                                                        // 109
      if (endsWithSlash)                                                                                // 110
        dots = dots.slice(0, -1);                                                                       // 111
                                                                                                        // 112
      _.each(dots.split('/'), function(dotClause, index) {                                              // 113
        if (index === 0) {                                                                              // 114
          if (dotClause !== '.' && dotClause !== '..')                                                  // 115
            expected("`.`, `..`, `./` or `../`");                                                       // 116
        } else {                                                                                        // 117
          if (dotClause !== '..')                                                                       // 118
            expected("`..` or `../`");                                                                  // 119
        }                                                                                               // 120
                                                                                                        // 121
        if (dotClause === '..')                                                                         // 122
          ancestorStr += '.';                                                                           // 123
      });                                                                                               // 124
                                                                                                        // 125
      segments.push(ancestorStr);                                                                       // 126
                                                                                                        // 127
      if (!endsWithSlash)                                                                               // 128
        return segments;                                                                                // 129
    }                                                                                                   // 130
                                                                                                        // 131
    while (true) {                                                                                      // 132
      // scan a path segment                                                                            // 133
                                                                                                        // 134
      if (run(/^\[/)) {                                                                                 // 135
        var seg = run(/^[\s\S]*?\]/);                                                                   // 136
        if (! seg)                                                                                      // 137
          error("Unterminated path segment");                                                           // 138
        seg = seg.slice(0, -1);                                                                         // 139
        if (! seg && ! segments.length)                                                                 // 140
          error("Path can't start with empty string");                                                  // 141
        segments.push(seg);                                                                             // 142
      } else {                                                                                          // 143
        var id = scanIdentifier(! segments.length);                                                     // 144
        if (id === 'this') {                                                                            // 145
          if (! segments.length) {                                                                      // 146
            // initial `this`                                                                           // 147
            segments.push('.');                                                                         // 148
          } else {                                                                                      // 149
            error("Can only use `this` at the beginning of a path.\nInstead of `foo.this` or `../this`, just write `foo` or `..`.");
          }                                                                                             // 151
        } else {                                                                                        // 152
          segments.push(id);                                                                            // 153
        }                                                                                               // 154
      }                                                                                                 // 155
                                                                                                        // 156
      var sep = run(/^[\.\/]/);                                                                         // 157
      if (! sep)                                                                                        // 158
        break;                                                                                          // 159
    }                                                                                                   // 160
                                                                                                        // 161
    return segments;                                                                                    // 162
  };                                                                                                    // 163
                                                                                                        // 164
  // scan the keyword portion of a keyword argument                                                     // 165
  // (the "foo" portion in "foo=bar").                                                                  // 166
  // Result is either the keyword matched, or null                                                      // 167
  // if we're not at a keyword argument position.                                                       // 168
  var scanArgKeyword = function () {                                                                    // 169
    var match = /^([^\{\}\(\)\>#=\s]+)\s*=\s*/.exec(scanner.rest());                                    // 170
    if (match) {                                                                                        // 171
      scanner.pos += match[0].length;                                                                   // 172
      return match[1];                                                                                  // 173
    } else {                                                                                            // 174
      return null;                                                                                      // 175
    }                                                                                                   // 176
  };                                                                                                    // 177
                                                                                                        // 178
  // scan an argument; succeeds or errors.                                                              // 179
  // Result is an array of two or three items:                                                          // 180
  // type , value, and (indicating a keyword argument)                                                  // 181
  // keyword name.                                                                                      // 182
  var scanArg = function () {                                                                           // 183
    var keyword = scanArgKeyword(); // null if not parsing a kwarg                                      // 184
    var value = scanArgValue();                                                                         // 185
    return keyword ? value.concat(keyword) : value;                                                     // 186
  };                                                                                                    // 187
                                                                                                        // 188
  // scan an argument value (for keyword or positional arguments);                                      // 189
  // succeeds or errors.  Result is an array of type, value.                                            // 190
  var scanArgValue = function () {                                                                      // 191
    var startPos = scanner.pos;                                                                         // 192
    var result;                                                                                         // 193
    if ((result = parseNumber(scanner))) {                                                              // 194
      return ['NUMBER', result.value];                                                                  // 195
    } else if ((result = parseStringLiteral(scanner))) {                                                // 196
      return ['STRING', result.value];                                                                  // 197
    } else if (/^[\.\[]/.test(scanner.peek())) {                                                        // 198
      return ['PATH', scanPath()];                                                                      // 199
    } else if ((result = parseIdentifierName(scanner))) {                                               // 200
      var id = result;                                                                                  // 201
      if (id === 'null') {                                                                              // 202
        return ['NULL', null];                                                                          // 203
      } else if (id === 'true' || id === 'false') {                                                     // 204
        return ['BOOLEAN', id === 'true'];                                                              // 205
      } else {                                                                                          // 206
        scanner.pos = startPos; // unconsume `id`                                                       // 207
        return ['PATH', scanPath()];                                                                    // 208
      }                                                                                                 // 209
    } else {                                                                                            // 210
      expected('identifier, number, string, boolean, or null');                                         // 211
    }                                                                                                   // 212
  };                                                                                                    // 213
                                                                                                        // 214
  var type;                                                                                             // 215
                                                                                                        // 216
  var error = function (msg) {                                                                          // 217
    scanner.fatal(msg);                                                                                 // 218
  };                                                                                                    // 219
                                                                                                        // 220
  var expected = function (what) {                                                                      // 221
    error('Expected ' + what);                                                                          // 222
  };                                                                                                    // 223
                                                                                                        // 224
  // must do ELSE first; order of others doesn't matter                                                 // 225
                                                                                                        // 226
  if (run(starts.ELSE)) type = 'ELSE';                                                                  // 227
  else if (run(starts.DOUBLE)) type = 'DOUBLE';                                                         // 228
  else if (run(starts.TRIPLE)) type = 'TRIPLE';                                                         // 229
  else if (run(starts.BLOCKCOMMENT)) type = 'BLOCKCOMMENT';                                             // 230
  else if (run(starts.COMMENT)) type = 'COMMENT';                                                       // 231
  else if (run(starts.INCLUSION)) type = 'INCLUSION';                                                   // 232
  else if (run(starts.BLOCKOPEN)) type = 'BLOCKOPEN';                                                   // 233
  else if (run(starts.BLOCKCLOSE)) type = 'BLOCKCLOSE';                                                 // 234
  else                                                                                                  // 235
    error('Unknown stache tag');                                                                        // 236
                                                                                                        // 237
  var tag = new TemplateTag;                                                                            // 238
  tag.type = type;                                                                                      // 239
                                                                                                        // 240
  if (type === 'BLOCKCOMMENT') {                                                                        // 241
    var result = run(/^[\s\S]*?--\s*?\}\}/);                                                            // 242
    if (! result)                                                                                       // 243
      error("Unclosed block comment");                                                                  // 244
    tag.value = result.slice(0, result.lastIndexOf('--'));                                              // 245
  } else if (type === 'COMMENT') {                                                                      // 246
    var result = run(/^[\s\S]*?\}\}/);                                                                  // 247
    if (! result)                                                                                       // 248
      error("Unclosed comment");                                                                        // 249
    tag.value = result.slice(0, -2);                                                                    // 250
  } else if (type === 'BLOCKCLOSE') {                                                                   // 251
    tag.path = scanPath();                                                                              // 252
    if (! run(ends.DOUBLE))                                                                             // 253
      expected('`}}`');                                                                                 // 254
  } else if (type === 'ELSE') {                                                                         // 255
    if (! run(ends.DOUBLE))                                                                             // 256
      expected('`}}`');                                                                                 // 257
  } else {                                                                                              // 258
    // DOUBLE, TRIPLE, BLOCKOPEN, INCLUSION                                                             // 259
    tag.path = scanPath();                                                                              // 260
    tag.args = [];                                                                                      // 261
    var foundKwArg = false;                                                                             // 262
    while (true) {                                                                                      // 263
      run(/^\s*/);                                                                                      // 264
      if (type === 'TRIPLE') {                                                                          // 265
        if (run(ends.TRIPLE))                                                                           // 266
          break;                                                                                        // 267
        else if (scanner.peek() === '}')                                                                // 268
          expected('`}}}`');                                                                            // 269
      } else {                                                                                          // 270
        if (run(ends.DOUBLE))                                                                           // 271
          break;                                                                                        // 272
        else if (scanner.peek() === '}')                                                                // 273
          expected('`}}`');                                                                             // 274
      }                                                                                                 // 275
      var newArg = scanArg();                                                                           // 276
      if (newArg.length === 3) {                                                                        // 277
        foundKwArg = true;                                                                              // 278
      } else {                                                                                          // 279
        if (foundKwArg)                                                                                 // 280
          error("Can't have a non-keyword argument after a keyword argument");                          // 281
      }                                                                                                 // 282
      tag.args.push(newArg);                                                                            // 283
                                                                                                        // 284
      if (run(/^(?=[\s}])/) !== '')                                                                     // 285
        expected('space');                                                                              // 286
    }                                                                                                   // 287
  }                                                                                                     // 288
                                                                                                        // 289
  return tag;                                                                                           // 290
};                                                                                                      // 291
                                                                                                        // 292
// Returns a Spacebars.TemplateTag parsed from `scanner`, leaving scanner                               // 293
// at its original position.                                                                            // 294
//                                                                                                      // 295
// An error will still be thrown if there is not a valid template tag at                                // 296
// the current position.                                                                                // 297
TemplateTag.peek = function (scanner) {                                                                 // 298
  var startPos = scanner.pos;                                                                           // 299
  var result = TemplateTag.parse(scanner);                                                              // 300
  scanner.pos = startPos;                                                                               // 301
  return result;                                                                                        // 302
};                                                                                                      // 303
                                                                                                        // 304
// Like `TemplateTag.parse`, but in the case of blocks, parse the complete                              // 305
// `{{#foo}}...{{/foo}}` with `content` and possible `elseContent`, rather                              // 306
// than just the BLOCKOPEN tag.                                                                         // 307
//                                                                                                      // 308
// In addition:                                                                                         // 309
//                                                                                                      // 310
// - Throws an error if `{{else}}` or `{{/foo}}` tag is encountered.                                    // 311
//                                                                                                      // 312
// - Returns `null` for a COMMENT.  (This case is distinguishable from                                  // 313
//   parsing no tag by the fact that the scanner is advanced.)                                          // 314
//                                                                                                      // 315
// - Takes an HTMLTools.TEMPLATE_TAG_POSITION `position` and sets it as the                             // 316
//   TemplateTag's `.position` property.                                                                // 317
//                                                                                                      // 318
// - Validates the tag's well-formedness and legality at in its position.                               // 319
TemplateTag.parseCompleteTag = function (scannerOrString, position) {                                   // 320
  var scanner = scannerOrString;                                                                        // 321
  if (typeof scanner === 'string')                                                                      // 322
    scanner = new HTMLTools.Scanner(scannerOrString);                                                   // 323
                                                                                                        // 324
  var startPos = scanner.pos; // for error messages                                                     // 325
  var result = TemplateTag.parse(scannerOrString);                                                      // 326
  if (! result)                                                                                         // 327
    return result;                                                                                      // 328
                                                                                                        // 329
  if (result.type === 'BLOCKCOMMENT')                                                                   // 330
    return null;                                                                                        // 331
                                                                                                        // 332
  if (result.type === 'COMMENT')                                                                        // 333
    return null;                                                                                        // 334
                                                                                                        // 335
  if (result.type === 'ELSE')                                                                           // 336
    scanner.fatal("Unexpected {{else}}");                                                               // 337
                                                                                                        // 338
  if (result.type === 'BLOCKCLOSE')                                                                     // 339
    scanner.fatal("Unexpected closing template tag");                                                   // 340
                                                                                                        // 341
  position = (position || TEMPLATE_TAG_POSITION.ELEMENT);                                               // 342
  if (position !== TEMPLATE_TAG_POSITION.ELEMENT)                                                       // 343
    result.position = position;                                                                         // 344
                                                                                                        // 345
  if (result.type === 'BLOCKOPEN') {                                                                    // 346
    // parse block contents                                                                             // 347
                                                                                                        // 348
    // Construct a string version of `.path` for comparing start and                                    // 349
    // end tags.  For example, `foo/[0]` was parsed into `["foo", "0"]`                                 // 350
    // and now becomes `foo,0`.  This form may also show up in error                                    // 351
    // messages.                                                                                        // 352
    var blockName = result.path.join(',');                                                              // 353
                                                                                                        // 354
    var textMode = null;                                                                                // 355
      if (blockName === 'markdown' ||                                                                   // 356
          position === TEMPLATE_TAG_POSITION.IN_RAWTEXT) {                                              // 357
        textMode = HTML.TEXTMODE.STRING;                                                                // 358
      } else if (position === TEMPLATE_TAG_POSITION.IN_RCDATA ||                                        // 359
                 position === TEMPLATE_TAG_POSITION.IN_ATTRIBUTE) {                                     // 360
        textMode = HTML.TEXTMODE.RCDATA;                                                                // 361
      }                                                                                                 // 362
      var parserOptions = {                                                                             // 363
        getSpecialTag: TemplateTag.parseCompleteTag,                                                    // 364
        shouldStop: isAtBlockCloseOrElse,                                                               // 365
        textMode: textMode                                                                              // 366
      };                                                                                                // 367
    result.content = HTMLTools.parseFragment(scanner, parserOptions);                                   // 368
                                                                                                        // 369
    if (scanner.rest().slice(0, 2) !== '{{')                                                            // 370
      scanner.fatal("Expected {{else}} or block close for " + blockName);                               // 371
                                                                                                        // 372
    var lastPos = scanner.pos; // save for error messages                                               // 373
    var tmplTag = TemplateTag.parse(scanner); // {{else}} or {{/foo}}                                   // 374
                                                                                                        // 375
    if (tmplTag.type === 'ELSE') {                                                                      // 376
      // parse {{else}} and content up to close tag                                                     // 377
      result.elseContent = HTMLTools.parseFragment(scanner, parserOptions);                             // 378
                                                                                                        // 379
      if (scanner.rest().slice(0, 2) !== '{{')                                                          // 380
        scanner.fatal("Expected block close for " + blockName);                                         // 381
                                                                                                        // 382
      lastPos = scanner.pos;                                                                            // 383
      tmplTag = TemplateTag.parse(scanner);                                                             // 384
    }                                                                                                   // 385
                                                                                                        // 386
    if (tmplTag.type === 'BLOCKCLOSE') {                                                                // 387
      var blockName2 = tmplTag.path.join(',');                                                          // 388
      if (blockName !== blockName2) {                                                                   // 389
        scanner.pos = lastPos;                                                                          // 390
        scanner.fatal('Expected tag to close ' + blockName + ', found ' +                               // 391
                      blockName2);                                                                      // 392
      }                                                                                                 // 393
    } else {                                                                                            // 394
      scanner.pos = lastPos;                                                                            // 395
      scanner.fatal('Expected tag to close ' + blockName + ', found ' +                                 // 396
                    tmplTag.type);                                                                      // 397
    }                                                                                                   // 398
  }                                                                                                     // 399
                                                                                                        // 400
  var finalPos = scanner.pos;                                                                           // 401
  scanner.pos = startPos;                                                                               // 402
  validateTag(result, scanner);                                                                         // 403
  scanner.pos = finalPos;                                                                               // 404
                                                                                                        // 405
  return result;                                                                                        // 406
};                                                                                                      // 407
                                                                                                        // 408
var isAtBlockCloseOrElse = function (scanner) {                                                         // 409
  // Detect `{{else}}` or `{{/foo}}`.                                                                   // 410
  //                                                                                                    // 411
  // We do as much work ourselves before deferring to `TemplateTag.peek`,                               // 412
  // for efficiency (we're called for every input token) and to be                                      // 413
  // less obtrusive, because `TemplateTag.peek` will throw an error if it                               // 414
  // sees `{{` followed by a malformed tag.                                                             // 415
  var rest, type;                                                                                       // 416
  return (scanner.peek() === '{' &&                                                                     // 417
          (rest = scanner.rest()).slice(0, 2) === '{{' &&                                               // 418
          /^\{\{\s*(\/|else\b)/.test(rest) &&                                                           // 419
          (type = TemplateTag.peek(scanner).type) &&                                                    // 420
          (type === 'BLOCKCLOSE' || type === 'ELSE'));                                                  // 421
};                                                                                                      // 422
                                                                                                        // 423
// Validate that `templateTag` is correctly formed and legal for its                                    // 424
// HTML position.  Use `scanner` to report errors. On success, does                                     // 425
// nothing.                                                                                             // 426
var validateTag = function (ttag, scanner) {                                                            // 427
                                                                                                        // 428
  if (ttag.type === 'INCLUSION' || ttag.type === 'BLOCKOPEN') {                                         // 429
    var args = ttag.args;                                                                               // 430
    if (args.length > 1 && args[0].length === 2 && args[0][0] !== 'PATH') {                             // 431
      // we have a positional argument that is not a PATH followed by                                   // 432
      // other arguments                                                                                // 433
      scanner.fatal("First argument must be a function, to be called on the rest of the arguments; found " + args[0][0]);
    }                                                                                                   // 435
  }                                                                                                     // 436
                                                                                                        // 437
  var position = ttag.position || TEMPLATE_TAG_POSITION.ELEMENT;                                        // 438
  if (position === TEMPLATE_TAG_POSITION.IN_ATTRIBUTE) {                                                // 439
    if (ttag.type === 'DOUBLE') {                                                                       // 440
      return;                                                                                           // 441
    } else if (ttag.type === 'BLOCKOPEN') {                                                             // 442
      var path = ttag.path;                                                                             // 443
      var path0 = path[0];                                                                              // 444
      if (! (path.length === 1 && (path0 === 'if' ||                                                    // 445
                                   path0 === 'unless' ||                                                // 446
                                   path0 === 'with' ||                                                  // 447
                                   path0 === 'each'))) {                                                // 448
        scanner.fatal("Custom block helpers are not allowed in an HTML attribute, only built-in ones like #each and #if");
      }                                                                                                 // 450
    } else {                                                                                            // 451
      scanner.fatal(ttag.type + " template tag is not allowed in an HTML attribute");                   // 452
    }                                                                                                   // 453
  } else if (position === TEMPLATE_TAG_POSITION.IN_START_TAG) {                                         // 454
    if (! (ttag.type === 'DOUBLE')) {                                                                   // 455
      scanner.fatal("Reactive HTML attributes must either have a constant name or consist of a single {{helper}} providing a dictionary of names and values.  A template tag of type " + ttag.type + " is not allowed here.");
    }                                                                                                   // 457
    if (scanner.peek() === '=') {                                                                       // 458
      scanner.fatal("Template tags are not allowed in attribute names, only in attribute values or in the form of a single {{helper}} that evaluates to a dictionary of name=value pairs.");
    }                                                                                                   // 460
  }                                                                                                     // 461
                                                                                                        // 462
};                                                                                                      // 463
                                                                                                        // 464
//////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

//////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                      //
// packages/spacebars-compiler/spacebars-compiler.js                                                    //
//                                                                                                      //
//////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                        //
                                                                                                        // 1
                                                                                                        // 2
                                                                                                        // 3
Spacebars.parse = function (input) {                                                                    // 4
                                                                                                        // 5
  var tree = HTMLTools.parseFragment(                                                                   // 6
    input,                                                                                              // 7
    { getSpecialTag: TemplateTag.parseCompleteTag });                                                   // 8
                                                                                                        // 9
  return tree;                                                                                          // 10
};                                                                                                      // 11
                                                                                                        // 12
// ============================================================                                         // 13
// Optimizer for optimizing HTMLjs into raw HTML string when                                            // 14
// it doesn't contain template tags.                                                                    // 15
                                                                                                        // 16
var optimize = function (tree) {                                                                        // 17
                                                                                                        // 18
  var pushRawHTML = function (array, html) {                                                            // 19
    var N = array.length;                                                                               // 20
    if (N > 0 && (array[N-1] instanceof HTML.Raw)) {                                                    // 21
      array[N-1] = HTML.Raw(array[N-1].value + html);                                                   // 22
    } else {                                                                                            // 23
      array.push(HTML.Raw(html));                                                                       // 24
    }                                                                                                   // 25
  };                                                                                                    // 26
                                                                                                        // 27
  var isPureChars = function (html) {                                                                   // 28
    return (html.indexOf('&') < 0 && html.indexOf('<') < 0);                                            // 29
  };                                                                                                    // 30
                                                                                                        // 31
  // Returns `null` if no specials are found in the array, so that the                                  // 32
  // parent can perform the actual optimization.  Otherwise, returns                                    // 33
  // an array of parts which have been optimized as much as possible.                                   // 34
  // `forceOptimize` forces the latter case.                                                            // 35
  var optimizeArrayParts = function (array, optimizePartsFunc, forceOptimize) {                         // 36
    var result = null;                                                                                  // 37
    if (forceOptimize)                                                                                  // 38
      result = [];                                                                                      // 39
    for (var i = 0, N = array.length; i < N; i++) {                                                     // 40
      var part = optimizePartsFunc(array[i]);                                                           // 41
      if (part !== null) {                                                                              // 42
        // something special found                                                                      // 43
        if (result === null) {                                                                          // 44
          // This is our first special item.  Stringify the other parts.                                // 45
          result = [];                                                                                  // 46
          for (var j = 0; j < i; j++)                                                                   // 47
            pushRawHTML(result, HTML.toHTML(array[j]));                                                 // 48
        }                                                                                               // 49
        result.push(part);                                                                              // 50
      } else {                                                                                          // 51
        // just plain HTML found                                                                        // 52
        if (result !== null) {                                                                          // 53
          // we've already found something special, so convert this to Raw                              // 54
          pushRawHTML(result, HTML.toHTML(array[i]));                                                   // 55
        }                                                                                               // 56
      }                                                                                                 // 57
    }                                                                                                   // 58
    if (result !== null) {                                                                              // 59
      // clean up unnecessary HTML.Raw wrappers around pure character data                              // 60
      for (var j = 0; j < result.length; j++) {                                                         // 61
        if ((result[j] instanceof HTML.Raw) &&                                                          // 62
            isPureChars(result[j].value))                                                               // 63
          // replace HTML.Raw with simple string                                                        // 64
          result[j] = result[j].value;                                                                  // 65
      }                                                                                                 // 66
    }                                                                                                   // 67
    return result;                                                                                      // 68
  };                                                                                                    // 69
                                                                                                        // 70
  var doesAttributeValueHaveSpecials = function (v) {                                                   // 71
    if (v instanceof HTMLTools.Special)                                                                 // 72
      return true;                                                                                      // 73
    if (typeof v === 'function')                                                                        // 74
      return true;                                                                                      // 75
                                                                                                        // 76
    if (v instanceof Array) {                                                                           // 77
      for (var i = 0; i < v.length; i++)                                                                // 78
        if (doesAttributeValueHaveSpecials(v[i]))                                                       // 79
          return true;                                                                                  // 80
      return false;                                                                                     // 81
    }                                                                                                   // 82
                                                                                                        // 83
    return false;                                                                                       // 84
  };                                                                                                    // 85
                                                                                                        // 86
  var optimizeParts = function (node) {                                                                 // 87
    // If we have nothing special going on, returns `null` (so that the                                 // 88
    // parent can optimize).  Otherwise returns a replacement for `node`                                // 89
    // with optimized parts.                                                                            // 90
    if ((node == null) || (typeof node === 'string') ||                                                 // 91
        (node instanceof HTML.CharRef) || (node instanceof HTML.Comment) ||                             // 92
        (node instanceof HTML.Raw)) {                                                                   // 93
      // not special; let parent decide how whether to optimize                                         // 94
      return null;                                                                                      // 95
    } else if (node instanceof HTML.Tag) {                                                              // 96
      var tagName = node.tagName;                                                                       // 97
      if (tagName === 'textarea' ||                                                                     // 98
          (! (HTML.isKnownElement(tagName) &&                                                           // 99
              ! HTML.isKnownSVGElement(tagName)))) {                                                    // 100
        // optimizing into a TEXTAREA's RCDATA would require being a little                             // 101
        // more clever.  foreign elements like SVG can't be stringified for                             // 102
        // innerHTML.                                                                                   // 103
        return node;                                                                                    // 104
      }                                                                                                 // 105
                                                                                                        // 106
      var mustOptimize = false;                                                                         // 107
                                                                                                        // 108
      // Avoid ever producing HTML containing `<table><tr>...`, because the                             // 109
      // browser will insert a TBODY.  If we just `createElement("table")` and                          // 110
      // `createElement("tr")`, on the other hand, no TBODY is necessary                                // 111
      // (assuming IE 8+).                                                                              // 112
      if (tagName === 'table')                                                                          // 113
        mustOptimize = true;                                                                            // 114
                                                                                                        // 115
      if (node.attrs && ! mustOptimize) {                                                               // 116
        var attrs = node.attrs;                                                                         // 117
        for (var k in attrs) {                                                                          // 118
          if (doesAttributeValueHaveSpecials(attrs[k])) {                                               // 119
            mustOptimize = true;                                                                        // 120
            break;                                                                                      // 121
          }                                                                                             // 122
        }                                                                                               // 123
      }                                                                                                 // 124
                                                                                                        // 125
      var newChildren = optimizeArrayParts(node.children, optimizeParts, mustOptimize);                 // 126
                                                                                                        // 127
      if (newChildren === null)                                                                         // 128
        return null;                                                                                    // 129
                                                                                                        // 130
      var newTag = HTML.getTag(node.tagName).apply(null, newChildren);                                  // 131
      newTag.attrs = node.attrs;                                                                        // 132
                                                                                                        // 133
      return newTag;                                                                                    // 134
                                                                                                        // 135
    } else if (node instanceof Array) {                                                                 // 136
      return optimizeArrayParts(node, optimizeParts);                                                   // 137
    } else {                                                                                            // 138
      return node;                                                                                      // 139
    }                                                                                                   // 140
  };                                                                                                    // 141
                                                                                                        // 142
  var optTree = optimizeParts(tree);                                                                    // 143
  if (optTree !== null)                                                                                 // 144
    // tree was optimized in parts                                                                      // 145
    return optTree;                                                                                     // 146
                                                                                                        // 147
  optTree = HTML.Raw(HTML.toHTML(tree));                                                                // 148
                                                                                                        // 149
  if (isPureChars(optTree.value))                                                                       // 150
    return optTree.value;                                                                               // 151
                                                                                                        // 152
  return optTree;                                                                                       // 153
};                                                                                                      // 154
                                                                                                        // 155
// ============================================================                                         // 156
// Code-generation of template tags                                                                     // 157
                                                                                                        // 158
var builtInBlockHelpers = {                                                                             // 159
  'if': 'UI.If',                                                                                        // 160
  'unless': 'UI.Unless',                                                                                // 161
  'with': 'Spacebars.With',                                                                             // 162
  'each': 'UI.Each'                                                                                     // 163
};                                                                                                      // 164
                                                                                                        // 165
// These must be prefixed with `UI.` when you use them in a template.                                   // 166
var builtInLexicals = {                                                                                 // 167
  'contentBlock': 'template.__content',                                                                 // 168
  'elseBlock': 'template.__elseContent'                                                                 // 169
};                                                                                                      // 170
                                                                                                        // 171
// A "reserved name" can't be used as a <template> name.  This                                          // 172
// function is used by the template file scanner.                                                       // 173
Spacebars.isReservedName = function (name) {                                                            // 174
  return builtInBlockHelpers.hasOwnProperty(name);                                                      // 175
};                                                                                                      // 176
                                                                                                        // 177
var codeGenTemplateTag = function (tag) {                                                               // 178
  if (tag.position === HTMLTools.TEMPLATE_TAG_POSITION.IN_START_TAG) {                                  // 179
    // only `tag.type === 'DOUBLE'` allowed (by earlier validation)                                     // 180
    return HTML.EmitCode('function () { return ' +                                                      // 181
                         codeGenMustache(tag.path, tag.args, 'attrMustache')                            // 182
                         + '; }');                                                                      // 183
  } else {                                                                                              // 184
    if (tag.type === 'DOUBLE') {                                                                        // 185
      return HTML.EmitCode('function () { return ' +                                                    // 186
                           codeGenMustache(tag.path, tag.args) + '; }');                                // 187
    } else if (tag.type === 'TRIPLE') {                                                                 // 188
      return HTML.EmitCode('function () { return Spacebars.makeRaw(' +                                  // 189
                           codeGenMustache(tag.path, tag.args) + '); }');                               // 190
    } else if (tag.type === 'INCLUSION' || tag.type === 'BLOCKOPEN') {                                  // 191
      var path = tag.path;                                                                              // 192
                                                                                                        // 193
      if (tag.type === 'BLOCKOPEN' &&                                                                   // 194
          builtInBlockHelpers.hasOwnProperty(path[0])) {                                                // 195
        // if, unless, with, each.                                                                      // 196
        //                                                                                              // 197
        // If someone tries to do `{{> if}}`, we don't                                                  // 198
        // get here, but an error is thrown when we try to codegen the path.                            // 199
                                                                                                        // 200
        // Note: If we caught these errors earlier, while scanning, we'd be able to                     // 201
        // provide nice line numbers.                                                                   // 202
        if (path.length > 1)                                                                            // 203
          throw new Error("Unexpected dotted path beginning with " + path[0]);                          // 204
        if (! tag.args.length)                                                                          // 205
          throw new Error("#" + path[0] + " requires an argument");                                     // 206
                                                                                                        // 207
        var codeParts = codeGenInclusionParts(tag);                                                     // 208
        var dataFunc = codeParts.dataFunc; // must exist (tag.args.length > 0)                          // 209
        var contentBlock = codeParts.content; // must exist                                             // 210
        var elseContentBlock = codeParts.elseContent; // may not exist                                  // 211
                                                                                                        // 212
        var callArgs = [dataFunc, contentBlock];                                                        // 213
        if (elseContentBlock)                                                                           // 214
          callArgs.push(elseContentBlock);                                                              // 215
                                                                                                        // 216
        return HTML.EmitCode(                                                                           // 217
          builtInBlockHelpers[path[0]] + '(' + callArgs.join(', ') + ')');                              // 218
                                                                                                        // 219
      } else {                                                                                          // 220
        var compCode = codeGenPath(path, {lookupTemplate: true});                                       // 221
                                                                                                        // 222
        if (path.length !== 1) {                                                                        // 223
          // path code may be reactive; wrap it                                                         // 224
          compCode = 'function () { return ' + compCode + '; }';                                        // 225
        }                                                                                               // 226
                                                                                                        // 227
        var codeParts = codeGenInclusionParts(tag);                                                     // 228
        var dataFunc = codeParts.dataFunc;                                                              // 229
        var content = codeParts.content;                                                                // 230
        var elseContent = codeParts.elseContent;                                                        // 231
                                                                                                        // 232
        var includeArgs = [compCode];                                                                   // 233
        if (content) {                                                                                  // 234
          includeArgs.push(content);                                                                    // 235
          if (elseContent)                                                                              // 236
            includeArgs.push(elseContent);                                                              // 237
        }                                                                                               // 238
                                                                                                        // 239
        var includeCode =                                                                               // 240
              'Spacebars.include(' + includeArgs.join(', ') + ')';                                      // 241
                                                                                                        // 242
        if (dataFunc) {                                                                                 // 243
          includeCode =                                                                                 // 244
            'Spacebars.TemplateWith(' + dataFunc + ', UI.block(' +                                      // 245
            Spacebars.codeGen(HTML.EmitCode(includeCode)) + '))';                                       // 246
        }                                                                                               // 247
                                                                                                        // 248
        if (path[0] === 'UI' &&                                                                         // 249
            (path[1] === 'contentBlock' || path[1] === 'elseBlock')) {                                  // 250
          includeCode = 'UI.InTemplateScope(template, ' + includeCode + ')';                            // 251
        }                                                                                               // 252
                                                                                                        // 253
        return HTML.EmitCode(includeCode);                                                              // 254
      }                                                                                                 // 255
    } else {                                                                                            // 256
      // Can't get here; TemplateTag validation should catch any                                        // 257
      // inappropriate tag types that might come out of the parser.                                     // 258
      throw new Error("Unexpected template tag type: " + tag.type);                                     // 259
    }                                                                                                   // 260
  }                                                                                                     // 261
};                                                                                                      // 262
                                                                                                        // 263
var makeObjectLiteral = function (obj) {                                                                // 264
  var parts = [];                                                                                       // 265
  for (var k in obj)                                                                                    // 266
    parts.push(toObjectLiteralKey(k) + ': ' + obj[k]);                                                  // 267
  return '{' + parts.join(', ') + '}';                                                                  // 268
};                                                                                                      // 269
                                                                                                        // 270
// `path` is an array of at least one string.                                                           // 271
//                                                                                                      // 272
// If `path.length > 1`, the generated code may be reactive                                             // 273
// (i.e. it may invalidate the current computation).                                                    // 274
//                                                                                                      // 275
// No code is generated to call the result if it's a function.                                          // 276
//                                                                                                      // 277
// Options:                                                                                             // 278
//                                                                                                      // 279
// - lookupTemplate {Boolean} If true, generated code also looks in                                     // 280
//   the list of templates. (After helpers, before data context).                                       // 281
//   Used when generating code for `{{> foo}}` or `{{#foo}}`. Only                                      // 282
//   used for non-dotted paths.                                                                         // 283
var codeGenPath = function (path, opts) {                                                               // 284
  if (builtInBlockHelpers.hasOwnProperty(path[0]))                                                      // 285
    throw new Error("Can't use the built-in '" + path[0] + "' here");                                   // 286
  // Let `{{#if UI.contentBlock}}` check whether this template was invoked via                          // 287
  // inclusion or as a block helper, in addition to supporting                                          // 288
  // `{{> UI.contentBlock}}`.                                                                           // 289
  if (path.length >= 2 &&                                                                               // 290
      path[0] === 'UI' && builtInLexicals.hasOwnProperty(path[1])) {                                    // 291
    if (path.length > 2)                                                                                // 292
      throw new Error("Unexpected dotted path beginning with " +                                        // 293
                      path[0] + '.' + path[1]);                                                         // 294
    return builtInLexicals[path[1]];                                                                    // 295
  }                                                                                                     // 296
                                                                                                        // 297
  var args = [toJSLiteral(path[0])];                                                                    // 298
  var lookupMethod = 'lookup';                                                                          // 299
  if (opts && opts.lookupTemplate && path.length === 1)                                                 // 300
    lookupMethod = 'lookupTemplate';                                                                    // 301
  var code = 'self.' + lookupMethod + '(' + args.join(', ') + ')';                                      // 302
                                                                                                        // 303
  if (path.length > 1) {                                                                                // 304
    code = 'Spacebars.dot(' + code + ', ' +                                                             // 305
      _.map(path.slice(1), toJSLiteral).join(', ') + ')';                                               // 306
  }                                                                                                     // 307
                                                                                                        // 308
  return code;                                                                                          // 309
};                                                                                                      // 310
                                                                                                        // 311
// Generates code for an `[argType, argValue]` argument spec,                                           // 312
// ignoring the third element (keyword argument name) if present.                                       // 313
//                                                                                                      // 314
// The resulting code may be reactive (in the case of a PATH of                                         // 315
// more than one element) and is not wrapped in a closure.                                              // 316
var codeGenArgValue = function (arg) {                                                                  // 317
  var argType = arg[0];                                                                                 // 318
  var argValue = arg[1];                                                                                // 319
                                                                                                        // 320
  var argCode;                                                                                          // 321
  switch (argType) {                                                                                    // 322
  case 'STRING':                                                                                        // 323
  case 'NUMBER':                                                                                        // 324
  case 'BOOLEAN':                                                                                       // 325
  case 'NULL':                                                                                          // 326
    argCode = toJSLiteral(argValue);                                                                    // 327
    break;                                                                                              // 328
  case 'PATH':                                                                                          // 329
    argCode = codeGenPath(argValue);                                                                    // 330
    break;                                                                                              // 331
  default:                                                                                              // 332
    // can't get here                                                                                   // 333
    throw new Error("Unexpected arg type: " + argType);                                                 // 334
  }                                                                                                     // 335
                                                                                                        // 336
  return argCode;                                                                                       // 337
};                                                                                                      // 338
                                                                                                        // 339
// Generates a call to `Spacebars.fooMustache` on evaluated arguments.                                  // 340
// The resulting code has no function literals and must be wrapped in                                   // 341
// one for fine-grained reactivity.                                                                     // 342
var codeGenMustache = function (path, args, mustacheType) {                                             // 343
  var nameCode = codeGenPath(path);                                                                     // 344
  var argCode = codeGenMustacheArgs(args);                                                              // 345
  var mustache = (mustacheType || 'mustache');                                                          // 346
                                                                                                        // 347
  return 'Spacebars.' + mustache + '(' + nameCode +                                                     // 348
    (argCode ? ', ' + argCode.join(', ') : '') + ')';                                                   // 349
};                                                                                                      // 350
                                                                                                        // 351
// returns: array of source strings, or null if no                                                      // 352
// args at all.                                                                                         // 353
var codeGenMustacheArgs = function (tagArgs) {                                                          // 354
  var kwArgs = null; // source -> source                                                                // 355
  var args = null; // [source]                                                                          // 356
                                                                                                        // 357
  // tagArgs may be null                                                                                // 358
  _.each(tagArgs, function (arg) {                                                                      // 359
    var argCode = codeGenArgValue(arg);                                                                 // 360
                                                                                                        // 361
    if (arg.length > 2) {                                                                               // 362
      // keyword argument (represented as [type, value, name])                                          // 363
      kwArgs = (kwArgs || {});                                                                          // 364
      kwArgs[arg[2]] = argCode;                                                                         // 365
    } else {                                                                                            // 366
      // positional argument                                                                            // 367
      args = (args || []);                                                                              // 368
      args.push(argCode);                                                                               // 369
    }                                                                                                   // 370
  });                                                                                                   // 371
                                                                                                        // 372
  // put kwArgs in options dictionary at end of args                                                    // 373
  if (kwArgs) {                                                                                         // 374
    args = (args || []);                                                                                // 375
    args.push('Spacebars.kw(' + makeObjectLiteral(kwArgs) + ')');                                       // 376
  }                                                                                                     // 377
                                                                                                        // 378
  return args;                                                                                          // 379
};                                                                                                      // 380
                                                                                                        // 381
// Takes an inclusion tag and returns an object containing these properties,                            // 382
// all optional, whose values are JS source code:                                                       // 383
//                                                                                                      // 384
// - `dataFunc` - source code of a data function literal                                                // 385
// - `content` - source code of a content block                                                         // 386
// - `elseContent` - source code of an elseContent block                                                // 387
//                                                                                                      // 388
// Implements the calling convention for inclusions.                                                    // 389
var codeGenInclusionParts = function (tag) {                                                            // 390
  var ret = {};                                                                                         // 391
                                                                                                        // 392
  if ('content' in tag) {                                                                               // 393
    ret.content = (                                                                                     // 394
      'UI.block(' + Spacebars.codeGen(tag.content) + ')');                                              // 395
  }                                                                                                     // 396
  if ('elseContent' in tag) {                                                                           // 397
    ret.elseContent = (                                                                                 // 398
      'UI.block(' + Spacebars.codeGen(tag.elseContent) + ')');                                          // 399
  }                                                                                                     // 400
                                                                                                        // 401
  var dataFuncCode = null;                                                                              // 402
                                                                                                        // 403
  var args = tag.args;                                                                                  // 404
  if (! args.length) {                                                                                  // 405
    // e.g. `{{#foo}}`                                                                                  // 406
    return ret;                                                                                         // 407
  } else if (args[0].length === 3) {                                                                    // 408
    // keyword arguments only, e.g. `{{> point x=1 y=2}}`                                               // 409
    var dataProps = {};                                                                                 // 410
    _.each(args, function (arg) {                                                                       // 411
      var argKey = arg[2];                                                                              // 412
      dataProps[argKey] = 'Spacebars.call(' + codeGenArgValue(arg) + ')';                               // 413
    });                                                                                                 // 414
    dataFuncCode = makeObjectLiteral(dataProps);                                                        // 415
  } else if (args[0][0] !== 'PATH') {                                                                   // 416
    // literal first argument, e.g. `{{> foo "blah"}}`                                                  // 417
    //                                                                                                  // 418
    // tag validation has confirmed, in this case, that there is only                                   // 419
    // one argument (`args.length === 1`)                                                               // 420
    dataFuncCode = codeGenArgValue(args[0]);                                                            // 421
  } else if (args.length === 1) {                                                                       // 422
    // one argument, must be a PATH                                                                     // 423
    dataFuncCode = 'Spacebars.call(' + codeGenPath(args[0][1]) + ')';                                   // 424
  } else {                                                                                              // 425
    dataFuncCode = codeGenMustache(args[0][1], args.slice(1),                                           // 426
                                   'dataMustache');                                                     // 427
  }                                                                                                     // 428
                                                                                                        // 429
  ret.dataFunc = 'function () { return ' + dataFuncCode + '; }';                                        // 430
                                                                                                        // 431
  return ret;                                                                                           // 432
};                                                                                                      // 433
                                                                                                        // 434
                                                                                                        // 435
// ============================================================                                         // 436
// Main compiler                                                                                        // 437
                                                                                                        // 438
var replaceSpecials = function (node) {                                                                 // 439
  if (node instanceof HTML.Tag) {                                                                       // 440
    // potential optimization: don't always create a new tag                                            // 441
    var newChildren = _.map(node.children, replaceSpecials);                                            // 442
    var newTag = HTML.getTag(node.tagName).apply(null, newChildren);                                    // 443
    var oldAttrs = node.attrs;                                                                          // 444
    var newAttrs = null;                                                                                // 445
                                                                                                        // 446
    if (oldAttrs) {                                                                                     // 447
      _.each(oldAttrs, function (value, name) {                                                         // 448
        if (name.charAt(0) !== '$') {                                                                   // 449
          newAttrs = (newAttrs || {});                                                                  // 450
          newAttrs[name] = replaceSpecials(value);                                                      // 451
        }                                                                                               // 452
      });                                                                                               // 453
                                                                                                        // 454
      if (oldAttrs.$specials && oldAttrs.$specials.length) {                                            // 455
        newAttrs = (newAttrs || {});                                                                    // 456
        newAttrs.$dynamic = _.map(oldAttrs.$specials, function (special) {                              // 457
          return codeGenTemplateTag(special.value);                                                     // 458
        });                                                                                             // 459
      }                                                                                                 // 460
    }                                                                                                   // 461
                                                                                                        // 462
    newTag.attrs = newAttrs;                                                                            // 463
    return newTag;                                                                                      // 464
  } else if (node instanceof Array) {                                                                   // 465
    return _.map(node, replaceSpecials);                                                                // 466
  } else if (node instanceof HTMLTools.Special) {                                                       // 467
    return codeGenTemplateTag(node.value);                                                              // 468
  } else {                                                                                              // 469
    return node;                                                                                        // 470
  }                                                                                                     // 471
};                                                                                                      // 472
                                                                                                        // 473
Spacebars.compile = function (input, options) {                                                         // 474
  var tree = Spacebars.parse(input);                                                                    // 475
  return Spacebars.codeGen(tree, options);                                                              // 476
};                                                                                                      // 477
                                                                                                        // 478
Spacebars.codeGen = function (parseTree, options) {                                                     // 479
  // is this a template, rather than a block passed to                                                  // 480
  // a block helper, say                                                                                // 481
  var isTemplate = (options && options.isTemplate);                                                     // 482
                                                                                                        // 483
  var tree = parseTree;                                                                                 // 484
                                                                                                        // 485
  // The flags `isTemplate` and `isBody` are kind of a hack.                                            // 486
  if (isTemplate || (options && options.isBody)) {                                                      // 487
    // optimizing fragments would require being smarter about whether we are                            // 488
    // in a TEXTAREA, say.                                                                              // 489
    tree = optimize(tree);                                                                              // 490
  }                                                                                                     // 491
                                                                                                        // 492
  tree = replaceSpecials(tree);                                                                         // 493
                                                                                                        // 494
  var code = '(function () { var self = this; ';                                                        // 495
  if (isTemplate) {                                                                                     // 496
    // support `{{> UI.contentBlock}}` and `{{> UI.elseBlock}}` with                                    // 497
    // lexical scope by creating a local variable in the                                                // 498
    // template's render function.                                                                      // 499
    code += 'var template = this; ';                                                                    // 500
  }                                                                                                     // 501
  code += 'return ';                                                                                    // 502
  code += HTML.toJS(tree);                                                                              // 503
  code += '; })';                                                                                       // 504
                                                                                                        // 505
  code = beautify(code);                                                                                // 506
                                                                                                        // 507
  return code;                                                                                          // 508
};                                                                                                      // 509
                                                                                                        // 510
var beautify = function (code) {                                                                        // 511
  if (Package.minifiers && Package.minifiers.UglifyJSMinify) {                                          // 512
    var result = UglifyJSMinify(code,                                                                   // 513
                                { fromString: true,                                                     // 514
                                  mangle: false,                                                        // 515
                                  compress: false,                                                      // 516
                                  output: { beautify: true,                                             // 517
                                            indent_level: 2,                                            // 518
                                            width: 80 } });                                             // 519
    var output = result.code;                                                                           // 520
    // Uglify interprets our expression as a statement and may add a semicolon.                         // 521
    // Strip trailing semicolon.                                                                        // 522
    output = output.replace(/;$/, '');                                                                  // 523
    return output;                                                                                      // 524
  } else {                                                                                              // 525
    // don't actually beautify; no UglifyJS                                                             // 526
    return code;                                                                                        // 527
  }                                                                                                     // 528
};                                                                                                      // 529
                                                                                                        // 530
// expose for compiler output tests                                                                     // 531
Spacebars._beautify = beautify;                                                                         // 532
                                                                                                        // 533
//////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);


/* Exports */
if (typeof Package === 'undefined') Package = {};
Package['spacebars-compiler'] = {};

})();

//# sourceMappingURL=33e84568aca49d98ec8dbfc2793f89ea35e1e65e.map
//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
//                                                                      //
// If you are using Chrome, open the Developer Tools and click the gear //
// icon in its lower right corner. In the General Settings panel, turn  //
// on 'Enable source maps'.                                             //
//                                                                      //
// If you are using Firefox 23, go to `about:config` and set the        //
// `devtools.debugger.source-maps-enabled` preference to true.          //
// (The preference should be on by default in Firefox 24; versions      //
// older than 23 do not support source maps.)                           //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

/* Imports */
var Meteor = Package.meteor.Meteor;
var HTML = Package.htmljs.HTML;
var UI = Package.ui.UI;
var Handlebars = Package.ui.Handlebars;

/* Package-scope variables */
var Spacebars;

(function () {

//////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                          //
// packages/spacebars/spacebars-runtime.js                                                                  //
//                                                                                                          //
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                            //
Spacebars = {};                                                                                             // 1
                                                                                                            // 2
// * `templateOrFunction` - template (component) or function returning a template                           // 3
// or null                                                                                                  // 4
Spacebars.include = function (templateOrFunction, contentBlock, elseContentBlock) {                         // 5
  if (contentBlock && ! UI.isComponent(contentBlock))                                                       // 6
    throw new Error('Second argument to Spacebars.include must be a template or UI.block if present');      // 7
  if (elseContentBlock && ! UI.isComponent(elseContentBlock))                                               // 8
    throw new Error('Third argument to Spacebars.include must be a template or UI.block if present');       // 9
                                                                                                            // 10
  var props = null;                                                                                         // 11
  if (contentBlock) {                                                                                       // 12
    props = (props || {});                                                                                  // 13
    props.__content = contentBlock;                                                                         // 14
  }                                                                                                         // 15
  if (elseContentBlock) {                                                                                   // 16
    props = (props || {});                                                                                  // 17
    props.__elseContent = elseContentBlock;                                                                 // 18
  }                                                                                                         // 19
                                                                                                            // 20
  if (UI.isComponent(templateOrFunction))                                                                   // 21
    return templateOrFunction.extend(props);                                                                // 22
                                                                                                            // 23
  var func = templateOrFunction;                                                                            // 24
                                                                                                            // 25
  var f = function () {                                                                                     // 26
    var emboxedFunc = UI.namedEmboxValue('Spacebars.include', func);                                        // 27
    f.stop = function () {                                                                                  // 28
      emboxedFunc.stop();                                                                                   // 29
    };                                                                                                      // 30
    var tmpl = emboxedFunc();                                                                               // 31
                                                                                                            // 32
    if (tmpl === null)                                                                                      // 33
      return null;                                                                                          // 34
    if (! UI.isComponent(tmpl))                                                                             // 35
      throw new Error("Expected null or template in return value from inclusion function, found: " + tmpl); // 36
                                                                                                            // 37
    return tmpl.extend(props);                                                                              // 38
  };                                                                                                        // 39
                                                                                                            // 40
  return f;                                                                                                 // 41
};                                                                                                          // 42
                                                                                                            // 43
// Executes `{{foo bar baz}}` when called on `(foo, bar, baz)`.                                             // 44
// If `bar` and `baz` are functions, they are called before                                                 // 45
// `foo` is called on them.                                                                                 // 46
//                                                                                                          // 47
// This is the shared part of Spacebars.mustache and                                                        // 48
// Spacebars.attrMustache, which differ in how they post-process the                                        // 49
// result.                                                                                                  // 50
Spacebars.mustacheImpl = function (value/*, args*/) {                                                       // 51
  var args = arguments;                                                                                     // 52
  // if we have any arguments (pos or kw), add an options argument                                          // 53
  // if there isn't one.                                                                                    // 54
  if (args.length > 1) {                                                                                    // 55
    var kw = args[args.length - 1];                                                                         // 56
    if (! (kw instanceof Spacebars.kw)) {                                                                   // 57
      kw = Spacebars.kw();                                                                                  // 58
      // clone arguments into an actual array, then push                                                    // 59
      // the empty kw object.                                                                               // 60
      args = Array.prototype.slice.call(arguments);                                                         // 61
      args.push(kw);                                                                                        // 62
    } else {                                                                                                // 63
      // For each keyword arg, call it if it's a function                                                   // 64
      var newHash = {};                                                                                     // 65
      for (var k in kw.hash) {                                                                              // 66
        var v = kw.hash[k];                                                                                 // 67
        newHash[k] = (typeof v === 'function' ? v() : v);                                                   // 68
      }                                                                                                     // 69
      args[args.length - 1] = Spacebars.kw(newHash);                                                        // 70
    }                                                                                                       // 71
  }                                                                                                         // 72
                                                                                                            // 73
  return Spacebars.call.apply(null, args);                                                                  // 74
};                                                                                                          // 75
                                                                                                            // 76
Spacebars.mustache = function (value/*, args*/) {                                                           // 77
  var result = Spacebars.mustacheImpl.apply(null, arguments);                                               // 78
                                                                                                            // 79
  if (result instanceof Spacebars.SafeString)                                                               // 80
    return HTML.Raw(result.toString());                                                                     // 81
  else                                                                                                      // 82
    // map `null`, `undefined`, and `false` to null, which is important                                     // 83
    // so that attributes with nully values are considered absent.                                          // 84
    // stringify anything else (e.g. strings, booleans, numbers including 0).                               // 85
    return (result == null || result === false) ? null : String(result);                                    // 86
};                                                                                                          // 87
                                                                                                            // 88
Spacebars.attrMustache = function (value/*, args*/) {                                                       // 89
  var result = Spacebars.mustacheImpl.apply(null, arguments);                                               // 90
                                                                                                            // 91
  if (result == null || result === '') {                                                                    // 92
    return null;                                                                                            // 93
  } else if (typeof result === 'object') {                                                                  // 94
    return result;                                                                                          // 95
  } else if (typeof result === 'string' && HTML.isValidAttributeName(result)) {                             // 96
    var obj = {};                                                                                           // 97
    obj[result] = '';                                                                                       // 98
    return obj;                                                                                             // 99
  } else {                                                                                                  // 100
    throw new Error("Expected valid attribute name, '', null, or object");                                  // 101
  }                                                                                                         // 102
};                                                                                                          // 103
                                                                                                            // 104
Spacebars.dataMustache = function (value/*, args*/) {                                                       // 105
  var result = Spacebars.mustacheImpl.apply(null, arguments);                                               // 106
                                                                                                            // 107
  return result;                                                                                            // 108
};                                                                                                          // 109
                                                                                                            // 110
// Idempotently wrap in `HTML.Raw`.                                                                         // 111
//                                                                                                          // 112
// Called on the return value from `Spacebars.mustache` in case the                                         // 113
// template uses triple-stache (`{{{foo bar baz}}}`).                                                       // 114
Spacebars.makeRaw = function (value) {                                                                      // 115
  if (value == null) // null or undefined                                                                   // 116
    return null;                                                                                            // 117
  else if (value instanceof HTML.Raw)                                                                       // 118
    return value;                                                                                           // 119
  else                                                                                                      // 120
    return HTML.Raw(value);                                                                                 // 121
};                                                                                                          // 122
                                                                                                            // 123
// If `value` is a function, called it on the `args`, after                                                 // 124
// evaluating the args themselves (by calling them if they are                                              // 125
// functions).  Otherwise, simply return `value` (and assert that                                           // 126
// there are no args).                                                                                      // 127
Spacebars.call = function (value/*, args*/) {                                                               // 128
  if (typeof value === 'function') {                                                                        // 129
    // evaluate arguments if they are functions (by calling them)                                           // 130
    var newArgs = [];                                                                                       // 131
    for (var i = 1; i < arguments.length; i++) {                                                            // 132
      var arg = arguments[i];                                                                               // 133
      newArgs[i-1] = (typeof arg === 'function' ? arg() : arg);                                             // 134
    }                                                                                                       // 135
                                                                                                            // 136
    return value.apply(null, newArgs);                                                                      // 137
  } else {                                                                                                  // 138
    if (arguments.length > 1)                                                                               // 139
      throw new Error("Can't call non-function: " + value);                                                 // 140
                                                                                                            // 141
    return value;                                                                                           // 142
  }                                                                                                         // 143
};                                                                                                          // 144
                                                                                                            // 145
// Call this as `Spacebars.kw({ ... })`.  The return value                                                  // 146
// is `instanceof Spacebars.kw`.                                                                            // 147
Spacebars.kw = function (hash) {                                                                            // 148
  if (! (this instanceof Spacebars.kw))                                                                     // 149
    // called without new; call with new                                                                    // 150
    return new Spacebars.kw(hash);                                                                          // 151
                                                                                                            // 152
  this.hash = hash || {};                                                                                   // 153
};                                                                                                          // 154
                                                                                                            // 155
// Call this as `Spacebars.SafeString("some HTML")`.  The return value                                      // 156
// is `instanceof Spacebars.SafeString` (and `instanceof Handlebars.SafeString).                            // 157
Spacebars.SafeString = function (html) {                                                                    // 158
  if (! (this instanceof Spacebars.SafeString))                                                             // 159
    // called without new; call with new                                                                    // 160
    return new Spacebars.SafeString(html);                                                                  // 161
                                                                                                            // 162
  return new Handlebars.SafeString(html);                                                                   // 163
};                                                                                                          // 164
Spacebars.SafeString.prototype = Handlebars.SafeString.prototype;                                           // 165
                                                                                                            // 166
// `Spacebars.dot(foo, "bar", "baz")` performs a special kind                                               // 167
// of `foo.bar.baz` that allows safe indexing of `null` and                                                 // 168
// indexing of functions (which calls the function).  If the                                                // 169
// result is a function, it is always a bound function (e.g.                                                // 170
// a wrapped version of `baz` that always uses `foo.bar` as                                                 // 171
// `this`).                                                                                                 // 172
//                                                                                                          // 173
// In `Spacebars.dot(foo, "bar")`, `foo` is assumed to be either                                            // 174
// a non-function value or a "fully-bound" function wrapping a value,                                       // 175
// where fully-bound means it takes no arguments and ignores `this`.                                        // 176
//                                                                                                          // 177
// `Spacebars.dot(foo, "bar")` performs the following steps:                                                // 178
//                                                                                                          // 179
// * If `foo` is falsy, return `foo`.                                                                       // 180
//                                                                                                          // 181
// * If `foo` is a function, call it (set `foo` to `foo()`).                                                // 182
//                                                                                                          // 183
// * If `foo` is falsy now, return `foo`.                                                                   // 184
//                                                                                                          // 185
// * Return `foo.bar`, binding it to `foo` if it's a function.                                              // 186
Spacebars.dot = function (value, id1/*, id2, ...*/) {                                                       // 187
  if (arguments.length > 2) {                                                                               // 188
    // Note: doing this recursively is probably less efficient than                                         // 189
    // doing it in an iterative loop.                                                                       // 190
    var argsForRecurse = [];                                                                                // 191
    argsForRecurse.push(Spacebars.dot(value, id1));                                                         // 192
    argsForRecurse.push.apply(argsForRecurse,                                                               // 193
                              Array.prototype.slice.call(arguments, 2));                                    // 194
    return Spacebars.dot.apply(null, argsForRecurse);                                                       // 195
  }                                                                                                         // 196
                                                                                                            // 197
  if (typeof value === 'function')                                                                          // 198
    value = value();                                                                                        // 199
                                                                                                            // 200
  if (! value)                                                                                              // 201
    return value; // falsy, don't index, pass through                                                       // 202
                                                                                                            // 203
  var result = value[id1];                                                                                  // 204
  if (typeof result !== 'function')                                                                         // 205
    return result;                                                                                          // 206
  // `value[id1]` (or `value()[id1]`) is a function.                                                        // 207
  // Bind it so that when called, `value` will be placed in `this`.                                         // 208
  return function (/*arguments*/) {                                                                         // 209
    return result.apply(value, arguments);                                                                  // 210
  };                                                                                                        // 211
};                                                                                                          // 212
                                                                                                            // 213
// Implement Spacebars's #with, which renders its else case (or nothing)                                    // 214
// if the argument is falsy.                                                                                // 215
Spacebars.With = function (argFunc, contentBlock, elseContentBlock) {                                       // 216
  return UI.Component.extend({                                                                              // 217
    init: function () {                                                                                     // 218
      this.v = UI.emboxValue(argFunc, UI.safeEquals);                                                       // 219
    },                                                                                                      // 220
    render: function () {                                                                                   // 221
      return UI.If(this.v, UI.With(this.v, contentBlock), elseContentBlock);                                // 222
    },                                                                                                      // 223
    materialized: (function () {                                                                            // 224
      var f = function () {                                                                                 // 225
        var self = this;                                                                                    // 226
        if (Deps.active) {                                                                                  // 227
          Deps.onInvalidate(function () {                                                                   // 228
            self.v.stop();                                                                                  // 229
          });                                                                                               // 230
        }                                                                                                   // 231
      };                                                                                                    // 232
      f.isWith = true;                                                                                      // 233
      return f;                                                                                             // 234
    })()                                                                                                    // 235
  });                                                                                                       // 236
};                                                                                                          // 237
                                                                                                            // 238
Spacebars.TemplateWith = function (argFunc, contentBlock) {                                                 // 239
  var w = UI.With(argFunc, contentBlock);                                                                   // 240
  w.__isTemplateWith = true;                                                                                // 241
  return w;                                                                                                 // 242
};                                                                                                          // 243
                                                                                                            // 244
//////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);


/* Exports */
if (typeof Package === 'undefined') Package = {};
Package.spacebars = {
  Spacebars: Spacebars
};

})();

//# sourceMappingURL=f49560fc90a8d71b7637d9596696078881b8c812.map
//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
//                                                                      //
// If you are using Chrome, open the Developer Tools and click the gear //
// icon in its lower right corner. In the General Settings panel, turn  //
// on 'Enable source maps'.                                             //
//                                                                      //
// If you are using Firefox 23, go to `about:config` and set the        //
// `devtools.debugger.source-maps-enabled` preference to true.          //
// (The preference should be on by default in Firefox 24; versions      //
// older than 23 do not support source maps.)                           //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

/* Imports */
var Meteor = Package.meteor.Meteor;
var UI = Package.ui.UI;
var Handlebars = Package.ui.Handlebars;
var HTML = Package.htmljs.HTML;

/* Package-scope variables */
var Template;

(function () {

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
// packages/templating/global_template_object.js                                                                      //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                      //
// Create an empty template object. Packages and apps add templates on                                                // 1
// to this object.                                                                                                    // 2
Template = {};                                                                                                        // 3
                                                                                                                      // 4
Template.__define__ = function (templateName, renderFunc) {                                                           // 5
  if (Template.hasOwnProperty(templateName))                                                                          // 6
    throw new Error("There are multiple templates named '" + templateName + "'. Each template needs a unique name."); // 7
                                                                                                                      // 8
  Template[templateName] = UI.Component.extend({                                                                      // 9
    kind: "Template_" + templateName,                                                                                 // 10
    render: renderFunc,                                                                                               // 11
    __helperHost: true                                                                                                // 12
  });                                                                                                                 // 13
};                                                                                                                    // 14
                                                                                                                      // 15
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);


/* Exports */
if (typeof Package === 'undefined') Package = {};
Package.templating = {
  Template: Template
};

})();

//# sourceMappingURL=b36d51fd34724d5d501d8557cd9f846874d95aef.map
//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
//                                                                      //
// If you are using Chrome, open the Developer Tools and click the gear //
// icon in its lower right corner. In the General Settings panel, turn  //
// on 'Enable source maps'.                                             //
//                                                                      //
// If you are using Firefox 23, go to `about:config` and set the        //
// `devtools.debugger.source-maps-enabled` preference to true.          //
// (The preference should be on by default in Firefox 24; versions      //
// older than 23 do not support source maps.)                           //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

/* Imports */
var Meteor = Package.meteor.Meteor;
var $ = Package.jquery.$;
var jQuery = Package.jquery.jQuery;
var Deps = Package.deps.Deps;
var Random = Package.random.Random;
var EJSON = Package.ejson.EJSON;
var _ = Package.underscore._;
var OrderedDict = Package['ordered-dict'].OrderedDict;
var LocalCollection = Package.minimongo.LocalCollection;
var Minimongo = Package.minimongo.Minimongo;
var ObserveSequence = Package['observe-sequence'].ObserveSequence;
var HTML = Package.htmljs.HTML;

/* Package-scope variables */
var UI, Handlebars, reportUIException, _extend, Component, findComponentWithProp, findComponentWithHelper, getComponentData, updateTemplateInstance, AttributeHandler, makeAttributeHandler, ElementAttributesUpdater;

(function () {

//////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                      //
// packages/ui/exceptions.js                                                                            //
//                                                                                                      //
//////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                        //
                                                                                                        // 1
var debugFunc;                                                                                          // 2
                                                                                                        // 3
// Meteor UI calls into user code in many places, and it's nice to catch exceptions                     // 4
// propagated from user code immediately so that the whole system doesn't just                          // 5
// break.  Catching exceptions is easy; reporting them is hard.  This helper                            // 6
// reports exceptions.                                                                                  // 7
//                                                                                                      // 8
// Usage:                                                                                               // 9
//                                                                                                      // 10
// ```                                                                                                  // 11
// try {                                                                                                // 12
//   // ... someStuff ...                                                                               // 13
// } catch (e) {                                                                                        // 14
//   reportUIException(e);                                                                              // 15
// }                                                                                                    // 16
// ```                                                                                                  // 17
//                                                                                                      // 18
// An optional second argument overrides the default message.                                           // 19
                                                                                                        // 20
reportUIException = function (e, msg) {                                                                 // 21
  if (! debugFunc)                                                                                      // 22
    // adapted from Deps                                                                                // 23
    debugFunc = function () {                                                                           // 24
      return (typeof Meteor !== "undefined" ? Meteor._debug :                                           // 25
              ((typeof console !== "undefined") && console.log ? console.log :                          // 26
               function () {}));                                                                        // 27
    };                                                                                                  // 28
                                                                                                        // 29
  // In Chrome, `e.stack` is a multiline string that starts with the message                            // 30
  // and contains a stack trace.  Furthermore, `console.log` makes it clickable.                        // 31
  // `console.log` supplies the space between the two arguments.                                        // 32
  debugFunc()(msg || 'Exception in Meteor UI:', e.stack || e.message);                                  // 33
};                                                                                                      // 34
                                                                                                        // 35
//////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

//////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                      //
// packages/ui/base.js                                                                                  //
//                                                                                                      //
//////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                        //
UI = {};                                                                                                // 1
                                                                                                        // 2
// A very basic operation like Underscore's `_.extend` that                                             // 3
// copies `src`'s own, enumerable properties onto `tgt` and                                             // 4
// returns `tgt`.                                                                                       // 5
_extend = function (tgt, src) {                                                                         // 6
  for (var k in src)                                                                                    // 7
    if (src.hasOwnProperty(k))                                                                          // 8
      tgt[k] = src[k];                                                                                  // 9
  return tgt;                                                                                           // 10
};                                                                                                      // 11
                                                                                                        // 12
// Defines a single non-enumerable, read-only property                                                  // 13
// on `tgt`.                                                                                            // 14
// It won't be non-enumerable in IE 8, so its                                                           // 15
// non-enumerability can't be relied on for logic                                                       // 16
// purposes, it just makes things prettier in                                                           // 17
// the dev console.                                                                                     // 18
var _defineNonEnum = function (tgt, name, value) {                                                      // 19
  try {                                                                                                 // 20
    Object.defineProperty(tgt, name, {value: value});                                                   // 21
  } catch (e) {                                                                                         // 22
    // IE < 9                                                                                           // 23
    tgt[name] = value;                                                                                  // 24
  }                                                                                                     // 25
  return tgt;                                                                                           // 26
};                                                                                                      // 27
                                                                                                        // 28
// Named function (like `function Component() {}` below) make                                           // 29
// inspection in debuggers more descriptive. In IE, this sets the                                       // 30
// value of the `Component` var in the function scope in which it's                                     // 31
// executed. We already have a top-level `Component` var so we create                                   // 32
// a new function scope to not write it over in IE.                                                     // 33
(function () {                                                                                          // 34
                                                                                                        // 35
  // Components and Component kinds are the same thing, just                                            // 36
  // objects; there are no constructor functions, no `new`,                                             // 37
  // and no `instanceof`.  A Component object is like a class,                                          // 38
  // until it is inited, at which point it becomes more like                                            // 39
  // an instance.                                                                                       // 40
  //                                                                                                    // 41
  // `y = x.extend({ ...new props })` creates a new Component                                           // 42
  // `y` with `x` as its prototype, plus additional properties                                          // 43
  // on `y` itself.  `extend` is used both to subclass and to                                           // 44
  // create instances (and the hope is we can gloss over the                                            // 45
  // difference in the docs).                                                                           // 46
  UI.Component = (function (constr) {                                                                   // 47
                                                                                                        // 48
    // Make sure the "class name" that Chrome infers for                                                // 49
    // UI.Component is "Component", and that                                                            // 50
    // `new UI.Component._constr` (which is what `extend`                                               // 51
    // does) also produces objects whose inferred class                                                 // 52
    // name is "Component".  Chrome's name inference rules                                              // 53
    // are a little mysterious, but a function name in                                                  // 54
    // the source code (as in `function Component() {}`)                                                // 55
    // seems to be reliable and high precedence.                                                        // 56
    var C = new constr;                                                                                 // 57
    _defineNonEnum(C, '_constr', constr);                                                               // 58
    _defineNonEnum(C, '_super', null);                                                                  // 59
    return C;                                                                                           // 60
  })(function Component() {});                                                                          // 61
})();                                                                                                   // 62
                                                                                                        // 63
_extend(UI, {                                                                                           // 64
  nextGuid: 2, // Component is 1!                                                                       // 65
                                                                                                        // 66
  isComponent: function (obj) {                                                                         // 67
    return obj && UI.isKindOf(obj, UI.Component);                                                       // 68
  },                                                                                                    // 69
  // `UI.isKindOf(a, b)` where `a` and `b` are Components                                               // 70
  // (or kinds) asks if `a` is or descends from                                                         // 71
  // (transitively extends) `b`.                                                                        // 72
  isKindOf: function (a, b) {                                                                           // 73
    while (a) {                                                                                         // 74
      if (a === b)                                                                                      // 75
        return true;                                                                                    // 76
      a = a._super;                                                                                     // 77
    }                                                                                                   // 78
    return false;                                                                                       // 79
  },                                                                                                    // 80
  // use these to produce error messages for developers                                                 // 81
  // (though throwing a more specific error message is                                                  // 82
  // even better)                                                                                       // 83
  _requireNotDestroyed: function (c) {                                                                  // 84
    if (c.isDestroyed)                                                                                  // 85
      throw new Error("Component has been destroyed; can't perform this operation");                    // 86
  },                                                                                                    // 87
  _requireInited: function (c) {                                                                        // 88
    if (! c.isInited)                                                                                   // 89
      throw new Error("Component must be inited to perform this operation");                            // 90
  },                                                                                                    // 91
  _requireDom: function (c) {                                                                           // 92
    if (! c.dom)                                                                                        // 93
      throw new Error("Component must be built into DOM to perform this operation");                    // 94
  }                                                                                                     // 95
});                                                                                                     // 96
                                                                                                        // 97
Component = UI.Component;                                                                               // 98
                                                                                                        // 99
_extend(UI.Component, {                                                                                 // 100
  kind: "Component",                                                                                    // 101
  guid: "1",                                                                                            // 102
  dom: null,                                                                                            // 103
  // Has this Component ever been inited?                                                               // 104
  isInited: false,                                                                                      // 105
  // Has this Component been destroyed?  Only inited Components                                         // 106
  // can be destroyed.                                                                                  // 107
  isDestroyed: false,                                                                                   // 108
  // Component that created this component (typically also                                              // 109
  // the DOM containment parent).                                                                       // 110
  // No child pointers (except in `dom`).                                                               // 111
  parent: null,                                                                                         // 112
                                                                                                        // 113
  // create a new subkind or instance whose proto pointer                                               // 114
  // points to this, with additional props set.                                                         // 115
  extend: function (props) {                                                                            // 116
    // this function should never cause `props` to be                                                   // 117
    // mutated in case people want to reuse `props` objects                                             // 118
    // in a mixin-like way.                                                                             // 119
                                                                                                        // 120
    if (this.isInited)                                                                                  // 121
      // Disallow extending inited Components so that                                                   // 122
      // inited Components don't inherit instance-specific                                              // 123
      // properties from other inited Components, just                                                  // 124
      // default values.                                                                                // 125
      throw new Error("Can't extend an inited Component");                                              // 126
                                                                                                        // 127
    var constr;                                                                                         // 128
    var constrMade = false;                                                                             // 129
    if (props && props.kind) {                                                                          // 130
      // If `kind` is different from super, set a constructor.                                          // 131
      // We used to set the function name here so that components                                       // 132
      // printed better in the console, but we took it out because                                      // 133
      // of CSP (and in hopes that Chrome finally adds proper                                           // 134
      // displayName support).                                                                          // 135
      constr = function () {};                                                                          // 136
      constrMade = true;                                                                                // 137
    } else {                                                                                            // 138
      constr = this._constr;                                                                            // 139
    }                                                                                                   // 140
                                                                                                        // 141
    // We don't know where we're getting `constr` from --                                               // 142
    // it might be from some supertype -- just that it has                                              // 143
    // the right function name.  So set the `prototype`                                                 // 144
    // property each time we use it as a constructor.                                                   // 145
    constr.prototype = this;                                                                            // 146
                                                                                                        // 147
    var c = new constr;                                                                                 // 148
    if (constrMade)                                                                                     // 149
      c._constr = constr;                                                                               // 150
                                                                                                        // 151
    if (props)                                                                                          // 152
      _extend(c, props);                                                                                // 153
                                                                                                        // 154
    // for efficient Component instantiations, we assign                                                // 155
    // as few things as possible here.                                                                  // 156
    _defineNonEnum(c, '_super', this);                                                                  // 157
    c.guid = String(UI.nextGuid++);                                                                     // 158
                                                                                                        // 159
    return c;                                                                                           // 160
  }                                                                                                     // 161
});                                                                                                     // 162
                                                                                                        // 163
//callChainedCallback = function (comp, propName, orig) {                                               // 164
  // Call `comp.foo`, `comp._super.foo`,                                                                // 165
  // `comp._super._super.foo`, and so on, but in reverse                                                // 166
  // order, and only if `foo` is an "own property" in each                                              // 167
  // case.  Furthermore, the passed value of `this` should                                              // 168
  // remain `comp` for all calls (which is achieved by                                                  // 169
  // filling in `orig` when recursing).                                                                 // 170
//  if (comp._super)                                                                                    // 171
//    callChainedCallback(comp._super, propName, orig || comp);                                         // 172
//                                                                                                      // 173
//  if (comp.hasOwnProperty(propName))                                                                  // 174
//    comp[propName].call(orig || comp);                                                                // 175
//};                                                                                                    // 176
                                                                                                        // 177
                                                                                                        // 178
// Returns 0 if the nodes are the same or either one contains the other;                                // 179
// otherwise, -1 if a comes before b, or else 1 if b comes before a in                                  // 180
// document order.                                                                                      // 181
// Requires: `a` and `b` are element nodes in the same document tree.                                   // 182
var compareElementIndex = function (a, b) {                                                             // 183
  // See http://ejohn.org/blog/comparing-document-position/                                             // 184
  if (a === b)                                                                                          // 185
    return 0;                                                                                           // 186
  if (a.compareDocumentPosition) {                                                                      // 187
    var n = a.compareDocumentPosition(b);                                                               // 188
    return ((n & 0x18) ? 0 : ((n & 0x4) ? -1 : 1));                                                     // 189
  } else {                                                                                              // 190
    // Only old IE is known to not have compareDocumentPosition (though Safari                          // 191
    // originally lacked it).  Thankfully, IE gives us a way of comparing elements                      // 192
    // via the "sourceIndex" property.                                                                  // 193
    if (a.contains(b) || b.contains(a))                                                                 // 194
      return 0;                                                                                         // 195
    return (a.sourceIndex < b.sourceIndex ? -1 : 1);                                                    // 196
  }                                                                                                     // 197
};                                                                                                      // 198
                                                                                                        // 199
findComponentWithProp = function (id, comp) {                                                           // 200
  while (comp) {                                                                                        // 201
    if (typeof comp[id] !== 'undefined')                                                                // 202
      return comp;                                                                                      // 203
    comp = comp.parent;                                                                                 // 204
  }                                                                                                     // 205
  return null;                                                                                          // 206
};                                                                                                      // 207
                                                                                                        // 208
findComponentWithHelper = function (id, comp) {                                                         // 209
  while (comp) {                                                                                        // 210
    if (comp.__helperHost) {                                                                            // 211
      if (typeof comp[id] !== 'undefined')                                                              // 212
        return comp;                                                                                    // 213
      else                                                                                              // 214
        return null;                                                                                    // 215
    }                                                                                                   // 216
    comp = comp.parent;                                                                                 // 217
  }                                                                                                     // 218
  return null;                                                                                          // 219
};                                                                                                      // 220
                                                                                                        // 221
getComponentData = function (comp) {                                                                    // 222
  comp = findComponentWithProp('data', comp);                                                           // 223
  return (comp ?                                                                                        // 224
          (typeof comp.data === 'function' ?                                                            // 225
           comp.data() : comp.data) :                                                                   // 226
          null);                                                                                        // 227
};                                                                                                      // 228
                                                                                                        // 229
updateTemplateInstance = function (comp) {                                                              // 230
  // Populate `comp.templateInstance.{firstNode,lastNode,data}`                                         // 231
  // on demand.                                                                                         // 232
  var tmpl = comp.templateInstance;                                                                     // 233
  tmpl.data = getComponentData(comp);                                                                   // 234
                                                                                                        // 235
  if (comp.dom && !comp.isDestroyed) {                                                                  // 236
    tmpl.firstNode = comp.dom.startNode().nextSibling;                                                  // 237
    tmpl.lastNode = comp.dom.endNode().previousSibling;                                                 // 238
    // Catch the case where the DomRange is empty and we'd                                              // 239
    // otherwise pass the out-of-order nodes (end, start)                                               // 240
    // as (firstNode, lastNode).                                                                        // 241
    if (tmpl.lastNode && tmpl.lastNode.nextSibling === tmpl.firstNode)                                  // 242
      tmpl.lastNode = tmpl.firstNode;                                                                   // 243
  } else {                                                                                              // 244
    // on 'created' or 'destroyed' callbacks we don't have a DomRange                                   // 245
    tmpl.firstNode = null;                                                                              // 246
    tmpl.lastNode = null;                                                                               // 247
  }                                                                                                     // 248
};                                                                                                      // 249
                                                                                                        // 250
_extend(UI.Component, {                                                                                 // 251
  // We implement the old APIs here, including how data is passed                                       // 252
  // to helpers in `this`.                                                                              // 253
  helpers: function (dict) {                                                                            // 254
    _extend(this, dict);                                                                                // 255
  },                                                                                                    // 256
  events: function (dict) {                                                                             // 257
    var events;                                                                                         // 258
    if (this.hasOwnProperty('_events'))                                                                 // 259
      events = this._events;                                                                            // 260
    else                                                                                                // 261
      events = (this._events = []);                                                                     // 262
                                                                                                        // 263
    _.each(dict, function (handler, spec) {                                                             // 264
      var clauses = spec.split(/,\s+/);                                                                 // 265
      // iterate over clauses of spec, e.g. ['click .foo', 'click .bar']                                // 266
      _.each(clauses, function (clause) {                                                               // 267
        var parts = clause.split(/\s+/);                                                                // 268
        if (parts.length === 0)                                                                         // 269
          return;                                                                                       // 270
                                                                                                        // 271
        var newEvents = parts.shift();                                                                  // 272
        var selector = parts.join(' ');                                                                 // 273
        events.push({events: newEvents,                                                                 // 274
                     selector: selector,                                                                // 275
                     handler: handler});                                                                // 276
      });                                                                                               // 277
    });                                                                                                 // 278
  }                                                                                                     // 279
});                                                                                                     // 280
                                                                                                        // 281
// XXX we don't really want this to be a user-visible callback,                                         // 282
// it's just a particular signal we need from DomRange.                                                 // 283
UI.Component.notifyParented = function () {                                                             // 284
  var self = this;                                                                                      // 285
  for (var comp = self; comp; comp = comp._super) {                                                     // 286
    var events = (comp.hasOwnProperty('_events') && comp._events) || null;                              // 287
    if ((! events) && comp.hasOwnProperty('events') &&                                                  // 288
        typeof comp.events === 'object') {                                                              // 289
      // Provide limited back-compat support for `.events = {...}`                                      // 290
      // syntax.  Pass `comp.events` to the original `.events(...)`                                     // 291
      // function.  This code must run only once per component, in                                      // 292
      // order to not bind the handlers more than once, which is                                        // 293
      // ensured by the fact that we only do this when `comp._events`                                   // 294
      // is falsy, and we cause it to be set now.                                                       // 295
      UI.Component.events.call(comp, comp.events);                                                      // 296
      events = comp._events;                                                                            // 297
    }                                                                                                   // 298
    _.each(events, function (esh) { // {events, selector, handler}                                      // 299
      // wrap the handler here, per instance of the template that                                       // 300
      // declares the event map, so we can pass the instance to                                         // 301
      // the event handler.                                                                             // 302
      var wrappedHandler = function (event) {                                                           // 303
        var comp = UI.DomRange.getContainingComponent(event.currentTarget);                             // 304
        var data = comp && getComponentData(comp);                                                      // 305
        var args = _.toArray(arguments);                                                                // 306
        updateTemplateInstance(self);                                                                   // 307
        return Deps.nonreactive(function () {                                                           // 308
          // put self.templateInstance as the second argument                                           // 309
          args.splice(1, 0, self.templateInstance);                                                     // 310
          // Don't want to be in a deps context, even if we were somehow                                // 311
          // triggered synchronously in an existing deps context                                        // 312
          // (the `blur` event can do this).                                                            // 313
          // XXX we should probably do what Spark did and block all                                     // 314
          // event handling during our DOM manip.  Many apps had weird                                  // 315
          // unanticipated bugs until we did that.                                                      // 316
          return esh.handler.apply(data === null ? {} : data, args);                                    // 317
        });                                                                                             // 318
      };                                                                                                // 319
                                                                                                        // 320
      self.dom.on(esh.events, esh.selector, wrappedHandler);                                            // 321
    });                                                                                                 // 322
  }                                                                                                     // 323
                                                                                                        // 324
  if (self.rendered) {                                                                                  // 325
    // Defer rendered callback until flush time.                                                        // 326
    Deps.afterFlush(function () {                                                                       // 327
      if (! self.isDestroyed) {                                                                         // 328
        updateTemplateInstance(self);                                                                   // 329
        self.rendered.call(self.templateInstance);                                                      // 330
      }                                                                                                 // 331
    });                                                                                                 // 332
  }                                                                                                     // 333
};                                                                                                      // 334
                                                                                                        // 335
// past compat                                                                                          // 336
UI.Component.preserve = function () {                                                                   // 337
  Meteor._debug("The 'preserve' method on templates is now unnecessary and deprecated.");               // 338
};                                                                                                      // 339
                                                                                                        // 340
// Gets the data context of the enclosing component that rendered a                                     // 341
// given element                                                                                        // 342
UI.getElementData = function (el) {                                                                     // 343
  var comp = UI.DomRange.getContainingComponent(el);                                                    // 344
  return comp && getComponentData(comp);                                                                // 345
};                                                                                                      // 346
                                                                                                        // 347
var jsUrlsAllowed = false;                                                                              // 348
UI._allowJavascriptUrls = function () {                                                                 // 349
  jsUrlsAllowed = true;                                                                                 // 350
};                                                                                                      // 351
UI._javascriptUrlsAllowed = function () {                                                               // 352
  return jsUrlsAllowed;                                                                                 // 353
};                                                                                                      // 354
                                                                                                        // 355
//////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

//////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                      //
// packages/ui/dombackend.js                                                                            //
//                                                                                                      //
//////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                        //
if (Meteor.isClient) {                                                                                  // 1
                                                                                                        // 2
  // XXX in the future, make the jQuery adapter a separate                                              // 3
  // package and make the choice of back-end library                                                    // 4
  // configurable.  Adapters all expose the same DomBackend interface.                                  // 5
                                                                                                        // 6
  if (! Package.jquery)                                                                                 // 7
    throw new Error("Meteor UI jQuery adapter: jQuery not found.");                                     // 8
                                                                                                        // 9
  var $jq = Package.jquery.jQuery;                                                                      // 10
                                                                                                        // 11
  var DomBackend = {};                                                                                  // 12
  UI.DomBackend = DomBackend;                                                                           // 13
                                                                                                        // 14
  ///// Removal detection and interoperability.                                                         // 15
                                                                                                        // 16
  // For an explanation of this technique, see:                                                         // 17
  // http://bugs.jquery.com/ticket/12213#comment:23 .                                                   // 18
  //                                                                                                    // 19
  // In short, an element is considered "removed" when jQuery                                           // 20
  // cleans up its *private* userdata on the element,                                                   // 21
  // which we can detect using a custom event with a teardown                                           // 22
  // hook.                                                                                              // 23
                                                                                                        // 24
  var JQUERY_REMOVAL_WATCHER_EVENT_NAME = 'meteor_ui_removal_watcher';                                  // 25
  var REMOVAL_CALLBACKS_PROPERTY_NAME = '$meteor_ui_removal_callbacks';                                 // 26
  var NOOP = function () {};                                                                            // 27
                                                                                                        // 28
  // Causes `elem` (a DOM element) to be detached from its parent, if any.                              // 29
  // Whether or not `elem` was detached, causes any callbacks registered                                // 30
  // with `onRemoveElement` on `elem` and its descendants to fire.                                      // 31
  // Not for use on non-element nodes.                                                                  // 32
  //                                                                                                    // 33
  // This method is modeled after the behavior of jQuery's `$(elem).remove()`,                          // 34
  // which causes teardown on the subtree being removed.                                                // 35
  DomBackend.removeElement = function (elem) {                                                          // 36
    $jq(elem).remove();                                                                                 // 37
  };                                                                                                    // 38
                                                                                                        // 39
  // Registers a callback function to be called when the given element or                               // 40
  // one of its ancestors is removed from the DOM via the backend library.                              // 41
  // The callback function is called at most once, and it receives the element                          // 42
  // in question as an argument.                                                                        // 43
  DomBackend.onRemoveElement = function (elem, func) {                                                  // 44
    if (! elem[REMOVAL_CALLBACKS_PROPERTY_NAME]) {                                                      // 45
      elem[REMOVAL_CALLBACKS_PROPERTY_NAME] = [];                                                       // 46
                                                                                                        // 47
      // Set up the event, only the first time.                                                         // 48
      $jq(elem).on(JQUERY_REMOVAL_WATCHER_EVENT_NAME, NOOP);                                            // 49
    }                                                                                                   // 50
                                                                                                        // 51
    elem[REMOVAL_CALLBACKS_PROPERTY_NAME].push(func);                                                   // 52
  };                                                                                                    // 53
                                                                                                        // 54
  $jq.event.special[JQUERY_REMOVAL_WATCHER_EVENT_NAME] = {                                              // 55
    teardown: function() {                                                                              // 56
      var elem = this;                                                                                  // 57
      var callbacks = elem[REMOVAL_CALLBACKS_PROPERTY_NAME];                                            // 58
      if (callbacks) {                                                                                  // 59
        for (var i = 0; i < callbacks.length; i++)                                                      // 60
          callbacks[i](elem);                                                                           // 61
        elem[REMOVAL_CALLBACKS_PROPERTY_NAME] = null;                                                   // 62
      }                                                                                                 // 63
    }                                                                                                   // 64
  };                                                                                                    // 65
                                                                                                        // 66
  DomBackend.parseHTML = function (html) {                                                              // 67
    // Return an array of nodes.                                                                        // 68
    //                                                                                                  // 69
    // jQuery does fancy stuff like creating an appropriate                                             // 70
    // container element and setting innerHTML on it, as well                                           // 71
    // as working around various IE quirks.                                                             // 72
    return $jq.parseHTML(html) || [];                                                                   // 73
  };                                                                                                    // 74
                                                                                                        // 75
  // Must use jQuery semantics for `context`, not                                                       // 76
  // querySelectorAll's.  In other words, all the parts                                                 // 77
  // of `selector` must be found under `context`.                                                       // 78
  DomBackend.findBySelector = function (selector, context) {                                            // 79
    return $jq(selector, context);                                                                      // 80
  };                                                                                                    // 81
                                                                                                        // 82
  DomBackend.newFragment = function (nodeArray) {                                                       // 83
    var frag = document.createDocumentFragment();                                                       // 84
    for (var i = 0; i < nodeArray.length; i++)                                                          // 85
      frag.appendChild(nodeArray[i]);                                                                   // 86
    return frag;                                                                                        // 87
  };                                                                                                    // 88
                                                                                                        // 89
  // `selector` is non-null.  `type` is one type (but                                                   // 90
  // may be in backend-specific form, e.g. have namespaces).                                            // 91
  // Order fired must be order bound.                                                                   // 92
  DomBackend.delegateEvents = function (elem, type, selector, handler) {                                // 93
    $jq(elem).on(type, selector, handler);                                                              // 94
  };                                                                                                    // 95
                                                                                                        // 96
  DomBackend.undelegateEvents = function (elem, type, handler) {                                        // 97
    $jq(elem).off(type, handler);                                                                       // 98
  };                                                                                                    // 99
                                                                                                        // 100
  DomBackend.bindEventCapturer = function (elem, type, selector, handler) {                             // 101
    var $elem = $jq(elem);                                                                              // 102
                                                                                                        // 103
    var wrapper = function (event) {                                                                    // 104
      event = $jq.event.fix(event);                                                                     // 105
      event.currentTarget = event.target;                                                               // 106
                                                                                                        // 107
      // Note: It might improve jQuery interop if we called into jQuery                                 // 108
      // here somehow.  Since we don't use jQuery to dispatch the event,                                // 109
      // we don't fire any of jQuery's event hooks or anything.  However,                               // 110
      // since jQuery can't bind capturing handlers, it's not clear                                     // 111
      // where we would hook in.  Internal jQuery functions like `dispatch`                             // 112
      // are too high-level.                                                                            // 113
      var $target = $jq(event.currentTarget);                                                           // 114
      if ($target.is($elem.find(selector)))                                                             // 115
        handler.call(elem, event);                                                                      // 116
    };                                                                                                  // 117
                                                                                                        // 118
    handler._meteorui_wrapper = wrapper;                                                                // 119
                                                                                                        // 120
    type = this.parseEventType(type);                                                                   // 121
    // add *capturing* event listener                                                                   // 122
    elem.addEventListener(type, wrapper, true);                                                         // 123
  };                                                                                                    // 124
                                                                                                        // 125
  DomBackend.unbindEventCapturer = function (elem, type, handler) {                                     // 126
    type = this.parseEventType(type);                                                                   // 127
    elem.removeEventListener(type, handler._meteorui_wrapper, true);                                    // 128
  };                                                                                                    // 129
                                                                                                        // 130
  DomBackend.parseEventType = function (type) {                                                         // 131
    // strip off namespaces                                                                             // 132
    var dotLoc = type.indexOf('.');                                                                     // 133
    if (dotLoc >= 0)                                                                                    // 134
      return type.slice(0, dotLoc);                                                                     // 135
    return type;                                                                                        // 136
  };                                                                                                    // 137
                                                                                                        // 138
}                                                                                                       // 139
//////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

//////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                      //
// packages/ui/domrange.js                                                                              //
//                                                                                                      //
//////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                        //
// TODO                                                                                                 // 1
// - Lazy removal detection                                                                             // 2
// - UI hooks (expose, test)                                                                            // 3
// - Quick remove/add (mark "leaving" members; needs UI hooks)                                          // 4
// - Event removal on removal                                                                           // 5
                                                                                                        // 6
var DomBackend = UI.DomBackend;                                                                         // 7
                                                                                                        // 8
var removeNode = function (n) {                                                                         // 9
//  if (n.nodeType === 1 &&                                                                             // 10
//      n.parentNode.$uihooks && n.parentNode.$uihooks.removeElement)                                   // 11
//    n.parentNode.$uihooks.removeElement(n);                                                           // 12
//  else                                                                                                // 13
    n.parentNode.removeChild(n);                                                                        // 14
};                                                                                                      // 15
                                                                                                        // 16
var insertNode = function (n, parent, next) {                                                           // 17
//  if (n.nodeType === 1 &&                                                                             // 18
//      parent.$uihooks && parent.$uihooks.insertElement)                                               // 19
//    parent.$uihooks.insertElement(n, parent, next);                                                   // 20
//  else                                                                                                // 21
    // `|| null` because IE throws an error if 'next' is undefined                                      // 22
  parent.insertBefore(n, next || null);                                                                 // 23
};                                                                                                      // 24
                                                                                                        // 25
var moveNode = function (n, parent, next) {                                                             // 26
//  if (n.nodeType === 1 &&                                                                             // 27
//      parent.$uihooks && parent.$uihooks.moveElement)                                                 // 28
//    parent.$uihooks.moveElement(n, parent, next);                                                     // 29
//  else                                                                                                // 30
    // `|| null` because IE throws an error if 'next' is undefined                                      // 31
    parent.insertBefore(n, next || null);                                                               // 32
};                                                                                                      // 33
                                                                                                        // 34
// A very basic operation like Underscore's `_.extend` that                                             // 35
// copies `src`'s own, enumerable properties onto `tgt` and                                             // 36
// returns `tgt`.                                                                                       // 37
var _extend = function (tgt, src) {                                                                     // 38
  for (var k in src)                                                                                    // 39
    if (src.hasOwnProperty(k))                                                                          // 40
      tgt[k] = src[k];                                                                                  // 41
  return tgt;                                                                                           // 42
};                                                                                                      // 43
                                                                                                        // 44
var _contains = function (list, item) {                                                                 // 45
  if (! list)                                                                                           // 46
    return false;                                                                                       // 47
  for (var i = 0, N = list.length; i < N; i++)                                                          // 48
    if (list[i] === item)                                                                               // 49
      return true;                                                                                      // 50
  return false;                                                                                         // 51
};                                                                                                      // 52
                                                                                                        // 53
var isArray = function (x) {                                                                            // 54
  return !!((typeof x.length === 'number') &&                                                           // 55
            (x.sort || x.splice));                                                                      // 56
};                                                                                                      // 57
                                                                                                        // 58
// Text nodes consisting of only whitespace                                                             // 59
// are "insignificant" nodes.                                                                           // 60
var isSignificantNode = function (n) {                                                                  // 61
  return ! (n.nodeType === 3 &&                                                                         // 62
            (! n.nodeValue ||                                                                           // 63
             /^\s+$/.test(n.nodeValue)));                                                               // 64
};                                                                                                      // 65
                                                                                                        // 66
var checkId = function (id) {                                                                           // 67
  if (typeof id !== 'string')                                                                           // 68
    throw new Error("id must be a string");                                                             // 69
  if (! id)                                                                                             // 70
    throw new Error("id may not be empty");                                                             // 71
};                                                                                                      // 72
                                                                                                        // 73
var textExpandosSupported = (function () {                                                              // 74
  var tn = document.createTextNode('');                                                                 // 75
  try {                                                                                                 // 76
    tn.blahblah = true;                                                                                 // 77
    return true;                                                                                        // 78
  } catch (e) {                                                                                         // 79
    // IE 8                                                                                             // 80
    return false;                                                                                       // 81
  }                                                                                                     // 82
})();                                                                                                   // 83
                                                                                                        // 84
var createMarkerNode = (                                                                                // 85
  textExpandosSupported ?                                                                               // 86
    function () { return document.createTextNode(""); } :                                               // 87
  function () { return document.createComment("IE"); });                                                // 88
                                                                                                        // 89
var rangeParented = function (range) {                                                                  // 90
  if (! range.isParented) {                                                                             // 91
    range.isParented = true;                                                                            // 92
                                                                                                        // 93
    if (! range.owner) {                                                                                // 94
      // top-level (unowned) ranges in an element,                                                      // 95
      // keep a pointer to the range on the parent                                                      // 96
      // element.  This is really just for IE 9+                                                        // 97
      // TextNode GC issues, but we can't do reliable                                                   // 98
      // feature detection (i.e. bug detection).                                                        // 99
      var parentNode = range.parentNode();                                                              // 100
      var rangeDict = (                                                                                 // 101
        parentNode.$_uiranges ||                                                                        // 102
          (parentNode.$_uiranges = {}));                                                                // 103
      rangeDict[range._rangeId] = range;                                                                // 104
      range._rangeDict = rangeDict;                                                                     // 105
                                                                                                        // 106
      // get jQuery to tell us when this node is removed                                                // 107
      DomBackend.onRemoveElement(parentNode, function () {                                              // 108
        rangeRemoved(range);                                                                            // 109
      });                                                                                               // 110
    }                                                                                                   // 111
                                                                                                        // 112
    if (range.component && range.component.notifyParented)                                              // 113
      range.component.notifyParented();                                                                 // 114
                                                                                                        // 115
    // recurse on member ranges                                                                         // 116
    var members = range.members;                                                                        // 117
    for (var k in members) {                                                                            // 118
      var mem = members[k];                                                                             // 119
      if (mem instanceof DomRange)                                                                      // 120
        rangeParented(mem);                                                                             // 121
    }                                                                                                   // 122
  }                                                                                                     // 123
};                                                                                                      // 124
                                                                                                        // 125
var rangeRemoved = function (range) {                                                                   // 126
  if (! range.isRemoved) {                                                                              // 127
    range.isRemoved = true;                                                                             // 128
                                                                                                        // 129
    if (range._rangeDict)                                                                               // 130
      delete range._rangeDict[range._rangeId];                                                          // 131
                                                                                                        // 132
    // clean up events                                                                                  // 133
    if (range.stopHandles) {                                                                            // 134
      for (var i = 0; i < range.stopHandles.length; i++)                                                // 135
        range.stopHandles[i].stop();                                                                    // 136
      range.stopHandles = null;                                                                         // 137
    }                                                                                                   // 138
                                                                                                        // 139
    // notify component of removal                                                                      // 140
    if (range.removed)                                                                                  // 141
      range.removed();                                                                                  // 142
                                                                                                        // 143
    membersRemoved(range);                                                                              // 144
  }                                                                                                     // 145
};                                                                                                      // 146
                                                                                                        // 147
var nodeRemoved = function (node, viaBackend) {                                                         // 148
  if (node.nodeType === 1) { // ELEMENT                                                                 // 149
    var comps = DomRange.getComponents(node);                                                           // 150
    for (var i = 0, N = comps.length; i < N; i++)                                                       // 151
      rangeRemoved(comps[i]);                                                                           // 152
                                                                                                        // 153
    if (! viaBackend)                                                                                   // 154
      DomBackend.removeElement(node);                                                                   // 155
  }                                                                                                     // 156
};                                                                                                      // 157
                                                                                                        // 158
var membersRemoved = function (range) {                                                                 // 159
  var members = range.members;                                                                          // 160
  for (var k in members) {                                                                              // 161
    var mem = members[k];                                                                               // 162
    if (mem instanceof DomRange)                                                                        // 163
      rangeRemoved(mem);                                                                                // 164
    else                                                                                                // 165
      nodeRemoved(mem);                                                                                 // 166
  }                                                                                                     // 167
};                                                                                                      // 168
                                                                                                        // 169
var nextGuid = 1;                                                                                       // 170
                                                                                                        // 171
var DomRange = function () {                                                                            // 172
  var start = createMarkerNode();                                                                       // 173
  var end = createMarkerNode();                                                                         // 174
  var fragment = DomBackend.newFragment([start, end]);                                                  // 175
  fragment.$_uiIsOffscreen = true;                                                                      // 176
                                                                                                        // 177
  this.start = start;                                                                                   // 178
  this.end = end;                                                                                       // 179
  start.$ui = this;                                                                                     // 180
  end.$ui = this;                                                                                       // 181
                                                                                                        // 182
  this.members = {};                                                                                    // 183
  this.nextMemberId = 1;                                                                                // 184
  this.owner = null;                                                                                    // 185
  this._rangeId = nextGuid++;                                                                           // 186
  this._rangeDict = null;                                                                               // 187
                                                                                                        // 188
  this.isParented = false;                                                                              // 189
  this.isRemoved = false;                                                                               // 190
                                                                                                        // 191
  this.stopHandles = null;                                                                              // 192
};                                                                                                      // 193
                                                                                                        // 194
_extend(DomRange.prototype, {                                                                           // 195
  getNodes: function () {                                                                               // 196
    if (! this.parentNode())                                                                            // 197
      return [];                                                                                        // 198
                                                                                                        // 199
    this.refresh();                                                                                     // 200
                                                                                                        // 201
    var afterNode = this.end.nextSibling;                                                               // 202
    var nodes = [];                                                                                     // 203
    for (var n = this.start;                                                                            // 204
         n && n !== afterNode;                                                                          // 205
         n = n.nextSibling)                                                                             // 206
      nodes.push(n);                                                                                    // 207
    return nodes;                                                                                       // 208
  },                                                                                                    // 209
  removeAll: function () {                                                                              // 210
    if (! this.parentNode())                                                                            // 211
      return;                                                                                           // 212
                                                                                                        // 213
    this.refresh();                                                                                     // 214
                                                                                                        // 215
    // leave start and end                                                                              // 216
    var afterNode = this.end;                                                                           // 217
    var nodes = [];                                                                                     // 218
    for (var n = this.start.nextSibling;                                                                // 219
         n && n !== afterNode;                                                                          // 220
         n = n.nextSibling) {                                                                           // 221
      // don't remove yet since then we'd lose nextSibling                                              // 222
      nodes.push(n);                                                                                    // 223
    }                                                                                                   // 224
    for (var i = 0, N = nodes.length; i < N; i++)                                                       // 225
      removeNode(nodes[i]);                                                                             // 226
                                                                                                        // 227
    membersRemoved(this);                                                                               // 228
                                                                                                        // 229
    this.members = {};                                                                                  // 230
  },                                                                                                    // 231
  // (_nextNode is internal)                                                                            // 232
  add: function (id, newMemberOrArray, beforeId, _nextNode) {                                           // 233
    if (id != null && typeof id !== 'string') {                                                         // 234
      if (typeof id !== 'object')                                                                       // 235
        // a non-object first argument is probably meant                                                // 236
        // as an id, NOT a new member, so complain about it                                             // 237
        // as such.                                                                                     // 238
        throw new Error("id must be a string");                                                         // 239
      beforeId = newMemberOrArray;                                                                      // 240
      newMemberOrArray = id;                                                                            // 241
      id = null;                                                                                        // 242
    }                                                                                                   // 243
                                                                                                        // 244
    if (! newMemberOrArray || typeof newMemberOrArray !== 'object')                                     // 245
      throw new Error("Expected component, node, or array");                                            // 246
                                                                                                        // 247
    if (isArray(newMemberOrArray)) {                                                                    // 248
      if (newMemberOrArray.length === 1) {                                                              // 249
        newMemberOrArray = newMemberOrArray[0];                                                         // 250
      } else {                                                                                          // 251
        if (id != null)                                                                                 // 252
          throw new Error("Can only add one node or one component if id is given");                     // 253
        var array = newMemberOrArray;                                                                   // 254
        // calculate `nextNode` once in case it involves a refresh                                      // 255
        _nextNode = this.getInsertionPoint(beforeId);                                                   // 256
        for (var i = 0; i < array.length; i++)                                                          // 257
          this.add(null, array[i], beforeId, _nextNode);                                                // 258
        return;                                                                                         // 259
      }                                                                                                 // 260
    }                                                                                                   // 261
                                                                                                        // 262
    var parentNode = this.parentNode();                                                                 // 263
    // Consider ourselves removed (and don't mind) if                                                   // 264
    // start marker has no parent.                                                                      // 265
    if (! parentNode)                                                                                   // 266
      return;                                                                                           // 267
    // because this may call `refresh`, it must be done                                                 // 268
    // early, before we add the new member.                                                             // 269
    var nextNode = (_nextNode ||                                                                        // 270
                    this.getInsertionPoint(beforeId));                                                  // 271
                                                                                                        // 272
    var newMember = newMemberOrArray;                                                                   // 273
    if (id == null) {                                                                                   // 274
      id = this.nextMemberId++;                                                                         // 275
    } else {                                                                                            // 276
      checkId(id);                                                                                      // 277
      id = ' ' + id;                                                                                    // 278
    }                                                                                                   // 279
                                                                                                        // 280
    var members = this.members;                                                                         // 281
    if (members.hasOwnProperty(id)) {                                                                   // 282
      var oldMember = members[id];                                                                      // 283
      if (oldMember instanceof DomRange) {                                                              // 284
        // range, does it still exist?                                                                  // 285
        var oldRange = oldMember;                                                                       // 286
        if (oldRange.start.parentNode !== parentNode) {                                                 // 287
          delete members[id];                                                                           // 288
          oldRange.owner = null;                                                                        // 289
          rangeRemoved(oldRange);                                                                       // 290
        } else {                                                                                        // 291
          throw new Error("Member already exists: " + id.slice(1));                                     // 292
        }                                                                                               // 293
      } else {                                                                                          // 294
        // node, does it still exist?                                                                   // 295
        var oldNode = oldMember;                                                                        // 296
        if (oldNode.parentNode !== parentNode) {                                                        // 297
          nodeRemoved(oldNode);                                                                         // 298
          delete members[id];                                                                           // 299
        } else {                                                                                        // 300
          throw new Error("Member already exists: " + id.slice(1));                                     // 301
        }                                                                                               // 302
      }                                                                                                 // 303
    }                                                                                                   // 304
                                                                                                        // 305
    if (newMember instanceof DomRange) {                                                                // 306
      // Range                                                                                          // 307
      var range = newMember;                                                                            // 308
      range.owner = this;                                                                               // 309
      var nodes = range.getNodes();                                                                     // 310
                                                                                                        // 311
      members[id] = newMember;                                                                          // 312
      for (var i = 0; i < nodes.length; i++)                                                            // 313
        insertNode(nodes[i], parentNode, nextNode);                                                     // 314
                                                                                                        // 315
      if (this.isParented)                                                                              // 316
        rangeParented(range);                                                                           // 317
    } else {                                                                                            // 318
      // Node                                                                                           // 319
      if (typeof newMember.nodeType !== 'number')                                                       // 320
        throw new Error("Expected Component or Node");                                                  // 321
      var node = newMember;                                                                             // 322
      // can't attach `$ui` to a TextNode in IE 8, so                                                   // 323
      // don't bother on any browser.                                                                   // 324
      if (node.nodeType !== 3)                                                                          // 325
        node.$ui = this;                                                                                // 326
                                                                                                        // 327
      members[id] = newMember;                                                                          // 328
      insertNode(node, parentNode, nextNode);                                                           // 329
    }                                                                                                   // 330
  },                                                                                                    // 331
  remove: function (id) {                                                                               // 332
    if (id == null) {                                                                                   // 333
      // remove self                                                                                    // 334
      this.removeAll();                                                                                 // 335
      removeNode(this.start);                                                                           // 336
      removeNode(this.end);                                                                             // 337
      this.owner = null;                                                                                // 338
      rangeRemoved(this);                                                                               // 339
      return;                                                                                           // 340
    }                                                                                                   // 341
                                                                                                        // 342
    checkId(id);                                                                                        // 343
    id = ' ' + id;                                                                                      // 344
    var members = this.members;                                                                         // 345
    var member = (members.hasOwnProperty(id) &&                                                         // 346
                  members[id]);                                                                         // 347
    delete members[id];                                                                                 // 348
                                                                                                        // 349
    // Don't mind double-remove.                                                                        // 350
    if (! member)                                                                                       // 351
      return;                                                                                           // 352
                                                                                                        // 353
    var parentNode = this.parentNode();                                                                 // 354
    // Consider ourselves removed (and don't mind) if                                                   // 355
    // start marker has no parent.                                                                      // 356
    if (! parentNode)                                                                                   // 357
      return;                                                                                           // 358
                                                                                                        // 359
    if (member instanceof DomRange) {                                                                   // 360
      // Range                                                                                          // 361
      var range = member;                                                                               // 362
      range.owner = null;                                                                               // 363
      // Don't mind if range (specifically its start                                                    // 364
      // marker) has been removed already.                                                              // 365
      if (range.start.parentNode === parentNode)                                                        // 366
        member.remove();                                                                                // 367
    } else {                                                                                            // 368
      // Node                                                                                           // 369
      var node = member;                                                                                // 370
      // Don't mind if node has been removed already.                                                   // 371
      if (node.parentNode === parentNode)                                                               // 372
        removeNode(node);                                                                               // 373
    }                                                                                                   // 374
  },                                                                                                    // 375
  moveBefore: function (id, beforeId) {                                                                 // 376
    var nextNode = this.getInsertionPoint(beforeId);                                                    // 377
    checkId(id);                                                                                        // 378
    id = ' ' + id;                                                                                      // 379
    var members = this.members;                                                                         // 380
    var member =                                                                                        // 381
          (members.hasOwnProperty(id) &&                                                                // 382
           members[id]);                                                                                // 383
    // Don't mind if member doesn't exist.                                                              // 384
    if (! member)                                                                                       // 385
      return;                                                                                           // 386
                                                                                                        // 387
    var parentNode = this.parentNode();                                                                 // 388
    // Consider ourselves removed (and don't mind) if                                                   // 389
    // start marker has no parent.                                                                      // 390
    if (! parentNode)                                                                                   // 391
      return;                                                                                           // 392
                                                                                                        // 393
    if (member instanceof DomRange) {                                                                   // 394
      // Range                                                                                          // 395
      var range = member;                                                                               // 396
      // Don't mind if range (specifically its start marker)                                            // 397
      // has been removed already.                                                                      // 398
      if (range.start.parentNode === parentNode) {                                                      // 399
        range.refresh();                                                                                // 400
        var nodes = range.getNodes();                                                                   // 401
        for (var i = 0; i < nodes.length; i++)                                                          // 402
          moveNode(nodes[i], parentNode, nextNode);                                                     // 403
      }                                                                                                 // 404
    } else {                                                                                            // 405
      // Node                                                                                           // 406
      var node = member;                                                                                // 407
      moveNode(node, parentNode, nextNode);                                                             // 408
    }                                                                                                   // 409
  },                                                                                                    // 410
  get: function (id) {                                                                                  // 411
    checkId(id);                                                                                        // 412
    id = ' ' + id;                                                                                      // 413
    var members = this.members;                                                                         // 414
    if (members.hasOwnProperty(id))                                                                     // 415
      return members[id];                                                                               // 416
    return null;                                                                                        // 417
  },                                                                                                    // 418
  parentNode: function () {                                                                             // 419
    return this.start.parentNode;                                                                       // 420
  },                                                                                                    // 421
  startNode: function () {                                                                              // 422
    return this.start;                                                                                  // 423
  },                                                                                                    // 424
  endNode: function () {                                                                                // 425
    return this.end;                                                                                    // 426
  },                                                                                                    // 427
  eachMember: function (nodeFunc, rangeFunc) {                                                          // 428
    var members = this.members;                                                                         // 429
    var parentNode = this.parentNode();                                                                 // 430
    for (var k in members) {                                                                            // 431
      // mem is a component (hosting a Range) or a Node                                                 // 432
      var mem = members[k];                                                                             // 433
      if (mem instanceof DomRange) {                                                                    // 434
        // Range                                                                                        // 435
        var range = mem;                                                                                // 436
        if (range.start.parentNode === parentNode) {                                                    // 437
          rangeFunc && rangeFunc(range); // still there                                                 // 438
        } else {                                                                                        // 439
          range.owner = null;                                                                           // 440
          delete members[k]; // gone                                                                    // 441
          rangeRemoved(range);                                                                          // 442
        }                                                                                               // 443
      } else {                                                                                          // 444
        // Node                                                                                         // 445
        var node = mem;                                                                                 // 446
        if (node.parentNode === parentNode) {                                                           // 447
          nodeFunc && nodeFunc(node); // still there                                                    // 448
        } else {                                                                                        // 449
          delete members[k]; // gone                                                                    // 450
          nodeRemoved(node);                                                                            // 451
        }                                                                                               // 452
      }                                                                                                 // 453
    }                                                                                                   // 454
  },                                                                                                    // 455
                                                                                                        // 456
  ///////////// INTERNALS below this point, pretty much                                                 // 457
                                                                                                        // 458
  // The purpose of "refreshing" a DomRange is to                                                       // 459
  // take into account any element removals or moves                                                    // 460
  // that may have occurred, and to "fix" the start                                                     // 461
  // and end markers before the entire range is moved                                                   // 462
  // or removed so that they bracket the appropriate                                                    // 463
  // content.                                                                                           // 464
  //                                                                                                    // 465
  // For example, if a DomRange contains a single element                                               // 466
  // node, and this node is moved using jQuery, refreshing                                              // 467
  // the DomRange will look to the element as ground truth                                              // 468
  // and move the start/end markers around the element.                                                 // 469
  // A refreshed DomRange's nodes may surround nodes from                                               // 470
  // sibling DomRanges (including their marker nodes)                                                   // 471
  // until the sibling DomRange is refreshed.                                                           // 472
  //                                                                                                    // 473
  // Specifically, `refresh` moves the `start`                                                          // 474
  // and `end` nodes to immediate before the first,                                                     // 475
  // and after the last, "significant" node the                                                         // 476
  // DomRange contains, where a significant node                                                        // 477
  // is any node except a whitespace-only text-node.                                                    // 478
  // All member ranges are refreshed first.  Adjacent                                                   // 479
  // insignificant member nodes are included between                                                    // 480
  // `start` and `end` as well, but it's possible that                                                  // 481
  // other insignificant nodes remain as siblings                                                       // 482
  // elsewhere.  Nodes with no DomRange owner that are                                                  // 483
  // found between this DomRange's nodes are adopted.                                                   // 484
  //                                                                                                    // 485
  // Performing add/move/remove operations on an "each"                                                 // 486
  // shouldn't require refreshing the entire each, just                                                 // 487
  // the member in question.  (However, adding to the                                                   // 488
  // end may require refreshing the whole "each";                                                       // 489
  // see `getInsertionPoint`.  Adding multiple members                                                  // 490
  // at once using `add(array)` is faster.                                                              // 491
  refresh: function () {                                                                                // 492
                                                                                                        // 493
    var parentNode = this.parentNode();                                                                 // 494
    if (! parentNode)                                                                                   // 495
      return;                                                                                           // 496
                                                                                                        // 497
    // Using `eachMember`, do several things:                                                           // 498
    // - Refresh all member ranges                                                                      // 499
    // - Count our members                                                                              // 500
    // - If there's only one, get that one                                                              // 501
    // - Make a list of member TextNodes, which we                                                      // 502
    //   can't detect with a `$ui` property because                                                     // 503
    //   IE 8 doesn't allow user-defined properties                                                     // 504
    //   on TextNodes.                                                                                  // 505
    var someNode = null;                                                                                // 506
    var someRange = null;                                                                               // 507
    var numMembers = 0;                                                                                 // 508
    var textNodes = null;                                                                               // 509
    this.eachMember(function (node) {                                                                   // 510
      someNode = node;                                                                                  // 511
      numMembers++;                                                                                     // 512
      if (node.nodeType === 3) {                                                                        // 513
        textNodes = (textNodes || []);                                                                  // 514
        textNodes.push(node);                                                                           // 515
      }                                                                                                 // 516
    }, function (range) {                                                                               // 517
      range.refresh();                                                                                  // 518
      someRange = range;                                                                                // 519
      numMembers++;                                                                                     // 520
    });                                                                                                 // 521
                                                                                                        // 522
    var firstNode = null;                                                                               // 523
    var lastNode = null;                                                                                // 524
                                                                                                        // 525
    if (numMembers === 0) {                                                                             // 526
      // don't scan for members                                                                         // 527
    } else if (numMembers === 1) {                                                                      // 528
      if (someNode) {                                                                                   // 529
        firstNode = someNode;                                                                           // 530
        lastNode = someNode;                                                                            // 531
      } else if (someRange) {                                                                           // 532
        firstNode = someRange.start;                                                                    // 533
        lastNode = someRange.end;                                                                       // 534
      }                                                                                                 // 535
    } else {                                                                                            // 536
      // This loop is O(childNodes.length), even if our members                                         // 537
      // are already consecutive.  This means refreshing just one                                       // 538
      // item in a list is technically order of the total number                                        // 539
      // of siblings, including in other list items.                                                    // 540
      //                                                                                                // 541
      // The root cause is we intentionally don't track the                                             // 542
      // DOM order of our members, so finding the first                                                 // 543
      // and last in sibling order either involves a scan                                               // 544
      // or a bunch of calls to compareDocumentPosition.                                                // 545
      //                                                                                                // 546
      // Fortunately, the common cases of zero and one members                                          // 547
      // are optimized.  Also, the scan is super-fast because                                           // 548
      // no work is done for unknown nodes.  It could be possible                                       // 549
      // to optimize this code further if it becomes a problem.                                         // 550
      for (var node = parentNode.firstChild;                                                            // 551
           node; node = node.nextSibling) {                                                             // 552
                                                                                                        // 553
        var nodeOwner;                                                                                  // 554
        if (node.$ui &&                                                                                 // 555
            (nodeOwner = node.$ui) &&                                                                   // 556
            ((nodeOwner === this &&                                                                     // 557
              node !== this.start &&                                                                    // 558
              node !== this.end &&                                                                      // 559
              isSignificantNode(node)) ||                                                               // 560
             (nodeOwner !== this &&                                                                     // 561
              nodeOwner.owner === this &&                                                               // 562
              nodeOwner.start === node))) {                                                             // 563
          // found a member range or node                                                               // 564
          // (excluding "insignificant" empty text nodes,                                               // 565
          // which won't be moved by, say, jQuery)                                                      // 566
          if (firstNode) {                                                                              // 567
            // if we've already found a member in our                                                   // 568
            // scan, see if there are some easy ownerless                                               // 569
            // nodes to "adopt" by scanning backwards.                                                  // 570
            for (var n = firstNode.previousSibling;                                                     // 571
                 n && ! n.$ui;                                                                          // 572
                 n = n.previousSibling) {                                                               // 573
              this.members[this.nextMemberId++] = n;                                                    // 574
              // can't attach `$ui` to a TextNode in IE 8, so                                           // 575
              // don't bother on any browser.                                                           // 576
              if (n.nodeType !== 3)                                                                     // 577
                n.$ui = this;                                                                           // 578
            }                                                                                           // 579
          }                                                                                             // 580
          if (node.$ui === this) {                                                                      // 581
            // Node                                                                                     // 582
            firstNode = (firstNode || node);                                                            // 583
            lastNode = node;                                                                            // 584
          } else {                                                                                      // 585
            // Range                                                                                    // 586
            // skip it and include its nodes in                                                         // 587
            // firstNode/lastNode.                                                                      // 588
            firstNode = (firstNode || node);                                                            // 589
            node = node.$ui.end;                                                                        // 590
            lastNode = node;                                                                            // 591
          }                                                                                             // 592
        }                                                                                               // 593
      }                                                                                                 // 594
    }                                                                                                   // 595
    if (firstNode) {                                                                                    // 596
      // some member or significant node was found.                                                     // 597
      // expand to include our insigificant member                                                      // 598
      // nodes as well.                                                                                 // 599
      for (var n;                                                                                       // 600
           (n = firstNode.previousSibling) &&                                                           // 601
           (n.$ui && n.$ui === this ||                                                                  // 602
            _contains(textNodes, n));)                                                                  // 603
        firstNode = n;                                                                                  // 604
      for (var n;                                                                                       // 605
           (n = lastNode.nextSibling) &&                                                                // 606
           (n.$ui && n.$ui === this ||                                                                  // 607
            _contains(textNodes, n));)                                                                  // 608
        lastNode = n;                                                                                   // 609
      // adjust our start/end pointers                                                                  // 610
      if (firstNode !== this.start)                                                                     // 611
        insertNode(this.start,                                                                          // 612
                   parentNode, firstNode);                                                              // 613
      if (lastNode !== this.end)                                                                        // 614
        insertNode(this.end, parentNode,                                                                // 615
                 lastNode.nextSibling);                                                                 // 616
    }                                                                                                   // 617
  },                                                                                                    // 618
  getInsertionPoint: function (beforeId) {                                                              // 619
    var members = this.members;                                                                         // 620
    var parentNode = this.parentNode();                                                                 // 621
                                                                                                        // 622
    if (! beforeId) {                                                                                   // 623
      // Refreshing here is necessary if we want to                                                     // 624
      // allow elements to move around arbitrarily.                                                     // 625
      // If jQuery is used to reorder elements, it could                                                // 626
      // easily make our `end` pointer meaningless,                                                     // 627
      // even though all our members continue to make                                                   // 628
      // good reference points as long as they are refreshed.                                           // 629
      //                                                                                                // 630
      // However, a refresh is expensive!  Let's                                                        // 631
      // make the developer manually refresh if                                                         // 632
      // elements are being re-ordered externally.                                                      // 633
      return this.end;                                                                                  // 634
    }                                                                                                   // 635
                                                                                                        // 636
    checkId(beforeId);                                                                                  // 637
    beforeId = ' ' + beforeId;                                                                          // 638
    var mem = members[beforeId];                                                                        // 639
                                                                                                        // 640
    if (mem instanceof DomRange) {                                                                      // 641
      // Range                                                                                          // 642
      var range = mem;                                                                                  // 643
      if (range.start.parentNode === parentNode) {                                                      // 644
        // still there                                                                                  // 645
        range.refresh();                                                                                // 646
        return range.start;                                                                             // 647
      } else {                                                                                          // 648
        range.owner = null;                                                                             // 649
        rangeRemoved(range);                                                                            // 650
      }                                                                                                 // 651
    } else {                                                                                            // 652
      // Node                                                                                           // 653
      var node = mem;                                                                                   // 654
      if (node.parentNode === parentNode)                                                               // 655
        return node; // still there                                                                     // 656
      else                                                                                              // 657
        nodeRemoved(node);                                                                              // 658
    }                                                                                                   // 659
                                                                                                        // 660
    // not there anymore                                                                                // 661
    delete members[beforeId];                                                                           // 662
    // no good position                                                                                 // 663
    return this.end;                                                                                    // 664
  }                                                                                                     // 665
});                                                                                                     // 666
                                                                                                        // 667
DomRange.prototype.elements = function (intoArray) {                                                    // 668
  intoArray = (intoArray || []);                                                                        // 669
  this.eachMember(function (node) {                                                                     // 670
    if (node.nodeType === 1)                                                                            // 671
      intoArray.push(node);                                                                             // 672
  }, function (range) {                                                                                 // 673
    range.elements(intoArray);                                                                          // 674
  });                                                                                                   // 675
  return intoArray;                                                                                     // 676
};                                                                                                      // 677
                                                                                                        // 678
// XXX alias the below as `UI.refresh` and `UI.insert`                                                  // 679
                                                                                                        // 680
// In a real-life case where you need a refresh,                                                        // 681
// you probably don't have easy                                                                         // 682
// access to the appropriate DomRange or component,                                                     // 683
// just the enclosing element:                                                                          // 684
//                                                                                                      // 685
// ```                                                                                                  // 686
// {{#Sortable}}                                                                                        // 687
//   <div>                                                                                              // 688
//     {{#each}}                                                                                        // 689
//       ...                                                                                            // 690
// ```                                                                                                  // 691
//                                                                                                      // 692
// In this case, Sortable wants to call `refresh`                                                       // 693
// on the div, not the each, so it would use this function.                                             // 694
DomRange.refresh = function (element) {                                                                 // 695
  var comps = DomRange.getComponents(element);                                                          // 696
                                                                                                        // 697
  for (var i = 0, N = comps.length; i < N; i++)                                                         // 698
    comps[i].refresh();                                                                                 // 699
};                                                                                                      // 700
                                                                                                        // 701
DomRange.getComponents = function (element) {                                                           // 702
  var topLevelComps = [];                                                                               // 703
  for (var n = element.firstChild;                                                                      // 704
       n; n = n.nextSibling) {                                                                          // 705
    if (n.$ui && n === n.$ui.start &&                                                                   // 706
        ! n.$ui.owner)                                                                                  // 707
      topLevelComps.push(n.$ui);                                                                        // 708
  }                                                                                                     // 709
  return topLevelComps;                                                                                 // 710
};                                                                                                      // 711
                                                                                                        // 712
// `parentNode` must be an ELEMENT, not a fragment                                                      // 713
DomRange.insert = function (range, parentNode, nextNode) {                                              // 714
  var nodes = range.getNodes();                                                                         // 715
  for (var i = 0; i < nodes.length; i++)                                                                // 716
    insertNode(nodes[i], parentNode, nextNode);                                                         // 717
  rangeParented(range);                                                                                 // 718
};                                                                                                      // 719
                                                                                                        // 720
DomRange.getContainingComponent = function (element) {                                                  // 721
  while (element && ! element.$ui)                                                                      // 722
    element = element.parentNode;                                                                       // 723
                                                                                                        // 724
  var range = (element && element.$ui);                                                                 // 725
                                                                                                        // 726
  while (range) {                                                                                       // 727
    if (range.component)                                                                                // 728
      return range.component;                                                                           // 729
    range = range.owner;                                                                                // 730
  }                                                                                                     // 731
  return null;                                                                                          // 732
};                                                                                                      // 733
                                                                                                        // 734
///// FIND BY SELECTOR                                                                                  // 735
                                                                                                        // 736
DomRange.prototype.contains = function (compOrNode) {                                                   // 737
  if (! compOrNode)                                                                                     // 738
    throw new Error("Expected Component or Node");                                                      // 739
                                                                                                        // 740
  var parentNode = this.parentNode();                                                                   // 741
  if (! parentNode)                                                                                     // 742
    return false;                                                                                       // 743
                                                                                                        // 744
  var range;                                                                                            // 745
  if (compOrNode instanceof DomRange) {                                                                 // 746
    // Component                                                                                        // 747
    range = compOrNode;                                                                                 // 748
    var pn = range.parentNode();                                                                        // 749
    if (! pn)                                                                                           // 750
      return false;                                                                                     // 751
    // If parentNode is different, it must be a node                                                    // 752
    // we contain.                                                                                      // 753
    if (pn !== parentNode)                                                                              // 754
      return this.contains(pn);                                                                         // 755
    if (range === this)                                                                                 // 756
      return false; // don't contain self                                                               // 757
    // Ok, `range` is a same-parent range to see if we                                                  // 758
    // contain.                                                                                         // 759
  } else {                                                                                              // 760
    // Node                                                                                             // 761
    var node = compOrNode;                                                                              // 762
    if (! elementContains(parentNode, node))                                                            // 763
      return false;                                                                                     // 764
                                                                                                        // 765
    while (node.parentNode !== parentNode)                                                              // 766
      node = node.parentNode;                                                                           // 767
                                                                                                        // 768
    range = node.$ui;                                                                                   // 769
  }                                                                                                     // 770
                                                                                                        // 771
  // Now see if `range` is truthy and either `this`                                                     // 772
  // or an immediate subrange                                                                           // 773
                                                                                                        // 774
  while (range && range !== this)                                                                       // 775
    range = range.owner;                                                                                // 776
                                                                                                        // 777
  return range === this;                                                                                // 778
};                                                                                                      // 779
                                                                                                        // 780
DomRange.prototype.$ = function (selector) {                                                            // 781
  var self = this;                                                                                      // 782
                                                                                                        // 783
  var parentNode = this.parentNode();                                                                   // 784
  if (! parentNode)                                                                                     // 785
    throw new Error("Can't select in removed DomRange");                                                // 786
                                                                                                        // 787
  // Strategy: Find all selector matches under parentNode,                                              // 788
  // then filter out the ones that aren't in this DomRange                                              // 789
  // using upwards pointers ($ui, owner, parentNode).  This is                                          // 790
  // asymptotically slow in the presence of O(N) sibling                                                // 791
  // content that is under parentNode but not in our range,                                             // 792
  // so if performance is an issue, the selector should be                                              // 793
  // run on a child element.                                                                            // 794
                                                                                                        // 795
  // Since jQuery can't run selectors on a DocumentFragment,                                            // 796
  // we don't expect findBySelector to work.                                                            // 797
  if (parentNode.nodeType === 11 /* DocumentFragment */ ||                                              // 798
      parentNode.$_uiIsOffscreen)                                                                       // 799
    throw new Error("Can't use $ on an offscreen component");                                           // 800
                                                                                                        // 801
  var results = DomBackend.findBySelector(selector, parentNode);                                        // 802
                                                                                                        // 803
  // We don't assume `results` has jQuery API; a plain array                                            // 804
  // should do just as well.  However, if we do have a jQuery                                           // 805
  // array, we want to end up with one also, so we use                                                  // 806
  // `.filter`.                                                                                         // 807
                                                                                                        // 808
                                                                                                        // 809
  // Function that selects only elements that are actually                                              // 810
  // in this DomRange, rather than simply descending from                                               // 811
  // `parentNode`.                                                                                      // 812
  var filterFunc = function (elem) {                                                                    // 813
    // handle jQuery's arguments to filter, where the node                                              // 814
    // is in `this` and the index is the first argument.                                                // 815
    if (typeof elem === 'number')                                                                       // 816
      elem = this;                                                                                      // 817
                                                                                                        // 818
    return self.contains(elem);                                                                         // 819
  };                                                                                                    // 820
                                                                                                        // 821
  if (! results.filter) {                                                                               // 822
    // not a jQuery array, and not a browser with                                                       // 823
    // Array.prototype.filter (e.g. IE <9)                                                              // 824
    var newResults = [];                                                                                // 825
    for (var i = 0; i < results.length; i++) {                                                          // 826
      var x = results[i];                                                                               // 827
      if (filterFunc(x))                                                                                // 828
        newResults.push(x);                                                                             // 829
    }                                                                                                   // 830
    results = newResults;                                                                               // 831
  } else {                                                                                              // 832
    // `results.filter` is either jQuery's or ECMAScript's `filter`                                     // 833
    results = results.filter(filterFunc);                                                               // 834
  }                                                                                                     // 835
                                                                                                        // 836
  return results;                                                                                       // 837
};                                                                                                      // 838
                                                                                                        // 839
                                                                                                        // 840
///// EVENTS                                                                                            // 841
                                                                                                        // 842
// List of events to always delegate, never capture.                                                    // 843
// Since jQuery fakes bubbling for certain events in                                                    // 844
// certain browsers (like `submit`), we don't want to                                                   // 845
// get in its way.                                                                                      // 846
//                                                                                                      // 847
// We could list all known bubbling                                                                     // 848
// events here to avoid creating speculative capturers                                                  // 849
// for them, but it would only be an optimization.                                                      // 850
var eventsToDelegate = {                                                                                // 851
  blur: 1, change: 1, click: 1, focus: 1, focusin: 1,                                                   // 852
  focusout: 1, reset: 1, submit: 1                                                                      // 853
};                                                                                                      // 854
                                                                                                        // 855
var EVENT_MODE_TBD = 0;                                                                                 // 856
var EVENT_MODE_BUBBLING = 1;                                                                            // 857
var EVENT_MODE_CAPTURING = 2;                                                                           // 858
                                                                                                        // 859
var HandlerRec = function (elem, type, selector, handler, $ui) {                                        // 860
  this.elem = elem;                                                                                     // 861
  this.type = type;                                                                                     // 862
  this.selector = selector;                                                                             // 863
  this.handler = handler;                                                                               // 864
  this.$ui = $ui;                                                                                       // 865
                                                                                                        // 866
  this.mode = EVENT_MODE_TBD;                                                                           // 867
                                                                                                        // 868
  // It's important that delegatedHandler be a different                                                // 869
  // instance for each handlerRecord, because its identity                                              // 870
  // is used to remove it.                                                                              // 871
  //                                                                                                    // 872
  // It's also important that the closure have access to                                                // 873
  // `this` when it is not called with it set.                                                          // 874
  this.delegatedHandler = (function (h) {                                                               // 875
    return function (evt) {                                                                             // 876
      if ((! h.selector) && evt.currentTarget !== evt.target)                                           // 877
        // no selector means only fire on target                                                        // 878
        return;                                                                                         // 879
      if (! h.$ui.contains(evt.currentTarget))                                                          // 880
        return;                                                                                         // 881
      return h.handler.apply(h.$ui, arguments);                                                         // 882
    };                                                                                                  // 883
  })(this);                                                                                             // 884
                                                                                                        // 885
  // WHY CAPTURE AND DELEGATE: jQuery can't delegate                                                    // 886
  // non-bubbling events, because                                                                       // 887
  // event capture doesn't work in IE 8.  However, there                                                // 888
  // are all sorts of new-fangled non-bubbling events                                                   // 889
  // like "play" and "touchenter".  We delegate these                                                   // 890
  // events using capture in all browsers except IE 8.                                                  // 891
  // IE 8 doesn't support these events anyway.                                                          // 892
                                                                                                        // 893
  var tryCapturing = elem.addEventListener &&                                                           // 894
        (! eventsToDelegate.hasOwnProperty(                                                             // 895
          DomBackend.parseEventType(type)));                                                            // 896
                                                                                                        // 897
  if (tryCapturing) {                                                                                   // 898
    this.capturingHandler = (function (h) {                                                             // 899
      return function (evt) {                                                                           // 900
        if (h.mode === EVENT_MODE_TBD) {                                                                // 901
          // must be first time we're called.                                                           // 902
          if (evt.bubbles) {                                                                            // 903
            // this type of event bubbles, so don't                                                     // 904
            // get called again.                                                                        // 905
            h.mode = EVENT_MODE_BUBBLING;                                                               // 906
            DomBackend.unbindEventCapturer(                                                             // 907
              h.elem, h.type, h.capturingHandler);                                                      // 908
            return;                                                                                     // 909
          } else {                                                                                      // 910
            // this type of event doesn't bubble,                                                       // 911
            // so unbind the delegation, preventing                                                     // 912
            // it from ever firing.                                                                     // 913
            h.mode = EVENT_MODE_CAPTURING;                                                              // 914
            DomBackend.undelegateEvents(                                                                // 915
              h.elem, h.type, h.delegatedHandler);                                                      // 916
          }                                                                                             // 917
        }                                                                                               // 918
                                                                                                        // 919
        h.delegatedHandler(evt);                                                                        // 920
      };                                                                                                // 921
    })(this);                                                                                           // 922
                                                                                                        // 923
  } else {                                                                                              // 924
    this.mode = EVENT_MODE_BUBBLING;                                                                    // 925
  }                                                                                                     // 926
};                                                                                                      // 927
                                                                                                        // 928
HandlerRec.prototype.bind = function () {                                                               // 929
  // `this.mode` may be EVENT_MODE_TBD, in which case we bind both. in                                  // 930
  // this case, 'capturingHandler' is in charge of detecting the                                        // 931
  // correct mode and turning off one or the other handlers.                                            // 932
  if (this.mode !== EVENT_MODE_BUBBLING) {                                                              // 933
    DomBackend.bindEventCapturer(                                                                       // 934
      this.elem, this.type, this.selector || '*',                                                       // 935
      this.capturingHandler);                                                                           // 936
  }                                                                                                     // 937
                                                                                                        // 938
  if (this.mode !== EVENT_MODE_CAPTURING)                                                               // 939
    DomBackend.delegateEvents(                                                                          // 940
      this.elem, this.type,                                                                             // 941
      this.selector || '*', this.delegatedHandler);                                                     // 942
};                                                                                                      // 943
                                                                                                        // 944
HandlerRec.prototype.unbind = function () {                                                             // 945
  if (this.mode !== EVENT_MODE_BUBBLING)                                                                // 946
    DomBackend.unbindEventCapturer(this.elem, this.type,                                                // 947
                                   this.capturingHandler);                                              // 948
                                                                                                        // 949
  if (this.mode !== EVENT_MODE_CAPTURING)                                                               // 950
    DomBackend.undelegateEvents(this.elem, this.type,                                                   // 951
                                this.delegatedHandler);                                                 // 952
};                                                                                                      // 953
                                                                                                        // 954
                                                                                                        // 955
// XXX could write the form of arguments for this function                                              // 956
// in several different ways, including simply as an event map.                                         // 957
DomRange.prototype.on = function (events, selector, handler) {                                          // 958
  var parentNode = this.parentNode();                                                                   // 959
  if (! parentNode)                                                                                     // 960
    // if we're not in the DOM, silently fail.                                                          // 961
    return;                                                                                             // 962
  // haven't been added yet; error                                                                      // 963
  if (parentNode.$_uiIsOffscreen)                                                                       // 964
    throw new Error("Can't bind events before DomRange is inserted");                                   // 965
                                                                                                        // 966
  var eventTypes = [];                                                                                  // 967
  events.replace(/[^ /]+/g, function (e) {                                                              // 968
    eventTypes.push(e);                                                                                 // 969
  });                                                                                                   // 970
                                                                                                        // 971
  if (! handler && (typeof selector === 'function')) {                                                  // 972
    // omitted `selector`                                                                               // 973
    handler = selector;                                                                                 // 974
    selector = null;                                                                                    // 975
  } else if (! selector) {                                                                              // 976
    // take `""` to `null`                                                                              // 977
    selector = null;                                                                                    // 978
  }                                                                                                     // 979
                                                                                                        // 980
  var newHandlerRecs = [];                                                                              // 981
  for (var i = 0, N = eventTypes.length; i < N; i++) {                                                  // 982
    var type = eventTypes[i];                                                                           // 983
                                                                                                        // 984
    var eventDict = parentNode.$_uievents;                                                              // 985
    if (! eventDict)                                                                                    // 986
      eventDict = (parentNode.$_uievents = {});                                                         // 987
                                                                                                        // 988
    var info = eventDict[type];                                                                         // 989
    if (! info) {                                                                                       // 990
      info = eventDict[type] = {};                                                                      // 991
      info.handlers = [];                                                                               // 992
    }                                                                                                   // 993
    var handlerList = info.handlers;                                                                    // 994
    var handlerRec = new HandlerRec(                                                                    // 995
      parentNode, type, selector, handler, this);                                                       // 996
    newHandlerRecs.push(handlerRec);                                                                    // 997
    handlerRec.bind();                                                                                  // 998
    handlerList.push(handlerRec);                                                                       // 999
    // move handlers of enclosing ranges to end                                                         // 1000
    for (var r = this.owner; r; r = r.owner) {                                                          // 1001
      // r is an enclosing DomRange                                                                     // 1002
      for (var j = 0, Nj = handlerList.length;                                                          // 1003
           j < Nj; j++) {                                                                               // 1004
        var h = handlerList[j];                                                                         // 1005
        if (h.$ui === r) {                                                                              // 1006
          h.unbind();                                                                                   // 1007
          h.bind();                                                                                     // 1008
          handlerList.splice(j, 1); // remove handlerList[j]                                            // 1009
          handlerList.push(h);                                                                          // 1010
          j--; // account for removed handler                                                           // 1011
          Nj--; // don't visit appended handlers                                                        // 1012
        }                                                                                               // 1013
      }                                                                                                 // 1014
    }                                                                                                   // 1015
  }                                                                                                     // 1016
                                                                                                        // 1017
  this.stopHandles = (this.stopHandles || []);                                                          // 1018
  this.stopHandles.push({                                                                               // 1019
    // closes over just `parentNode` and `newHandlerRecs`                                               // 1020
    stop: function () {                                                                                 // 1021
      var eventDict = parentNode.$_uievents;                                                            // 1022
      if (! eventDict)                                                                                  // 1023
        return;                                                                                         // 1024
                                                                                                        // 1025
      for (var i = 0; i < newHandlerRecs.length; i++) {                                                 // 1026
        var handlerToRemove = newHandlerRecs[i];                                                        // 1027
        var info = eventDict[handlerToRemove.type];                                                     // 1028
        if (! info)                                                                                     // 1029
          continue;                                                                                     // 1030
        var handlerList = info.handlers;                                                                // 1031
        for (var j = handlerList.length - 1; j >= 0; j--) {                                             // 1032
          if (handlerList[j] === handlerToRemove) {                                                     // 1033
            handlerToRemove.unbind();                                                                   // 1034
            handlerList.splice(j, 1); // remove handlerList[j]                                          // 1035
          }                                                                                             // 1036
        }                                                                                               // 1037
      }                                                                                                 // 1038
      newHandlerRecs.length = 0;                                                                        // 1039
    }                                                                                                   // 1040
  });                                                                                                   // 1041
};                                                                                                      // 1042
                                                                                                        // 1043
  // Returns true if element a contains node b and is not node b.                                       // 1044
  var elementContains = function (a, b) {                                                               // 1045
    if (a.nodeType !== 1) // ELEMENT                                                                    // 1046
      return false;                                                                                     // 1047
    if (a === b)                                                                                        // 1048
      return false;                                                                                     // 1049
                                                                                                        // 1050
    if (a.compareDocumentPosition) {                                                                    // 1051
      return a.compareDocumentPosition(b) & 0x10;                                                       // 1052
    } else {                                                                                            // 1053
          // Should be only old IE and maybe other old browsers here.                                   // 1054
          // Modern Safari has both functions but seems to get contains() wrong.                        // 1055
          // IE can't handle b being a text node.  We work around this                                  // 1056
          // by doing a direct parent test now.                                                         // 1057
      b = b.parentNode;                                                                                 // 1058
      if (! (b && b.nodeType === 1)) // ELEMENT                                                         // 1059
        return false;                                                                                   // 1060
      if (a === b)                                                                                      // 1061
        return true;                                                                                    // 1062
                                                                                                        // 1063
      return a.contains(b);                                                                             // 1064
    }                                                                                                   // 1065
  };                                                                                                    // 1066
                                                                                                        // 1067
                                                                                                        // 1068
UI.DomRange = DomRange;                                                                                 // 1069
                                                                                                        // 1070
//////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

//////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                      //
// packages/ui/attrs.js                                                                                 //
//                                                                                                      //
//////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                        //
                                                                                                        // 1
// An AttributeHandler object is responsible for updating a particular attribute                        // 2
// of a particular element.  AttributeHandler subclasses implement                                      // 3
// browser-specific logic for dealing with particular attributes across                                 // 4
// different browsers.                                                                                  // 5
//                                                                                                      // 6
// To define a new type of AttributeHandler, use                                                        // 7
// `var FooHandler = AttributeHandler.extend({ update: function ... })`                                 // 8
// where the `update` function takes arguments `(element, oldValue, value)`.                            // 9
// The `element` argument is always the same between calls to `update` on                               // 10
// the same instance.  `oldValue` and `value` are each either `null` or                                 // 11
// a Unicode string of the type that might be passed to the value argument                              // 12
// of `setAttribute` (i.e. not an HTML string with character references).                               // 13
// When an AttributeHandler is installed, an initial call to `update` is                                // 14
// always made with `oldValue = null`.  The `update` method can access                                  // 15
// `this.name` if the AttributeHandler class is a generic one that applies                              // 16
// to multiple attribute names.                                                                         // 17
//                                                                                                      // 18
// AttributeHandlers can store custom properties on `this`, as long as they                             // 19
// don't use the names `element`, `name`, `value`, and `oldValue`.                                      // 20
//                                                                                                      // 21
// AttributeHandlers can't influence how attributes appear in rendered HTML,                            // 22
// only how they are updated after materialization as DOM.                                              // 23
                                                                                                        // 24
AttributeHandler = function (name, value) {                                                             // 25
  this.name = name;                                                                                     // 26
  this.value = value;                                                                                   // 27
};                                                                                                      // 28
                                                                                                        // 29
AttributeHandler.prototype.update = function (element, oldValue, value) {                               // 30
  if (value === null) {                                                                                 // 31
    if (oldValue !== null)                                                                              // 32
      element.removeAttribute(this.name);                                                               // 33
  } else {                                                                                              // 34
    element.setAttribute(this.name, value);                                                             // 35
  }                                                                                                     // 36
};                                                                                                      // 37
                                                                                                        // 38
AttributeHandler.extend = function (options) {                                                          // 39
  var curType = this;                                                                                   // 40
  var subType = function AttributeHandlerSubtype(/*arguments*/) {                                       // 41
    AttributeHandler.apply(this, arguments);                                                            // 42
  };                                                                                                    // 43
  subType.prototype = new curType;                                                                      // 44
  subType.extend = curType.extend;                                                                      // 45
  if (options)                                                                                          // 46
    _.extend(subType.prototype, options);                                                               // 47
  return subType;                                                                                       // 48
};                                                                                                      // 49
                                                                                                        // 50
// Extended below to support both regular and SVG elements                                              // 51
var BaseClassHandler = AttributeHandler.extend({                                                        // 52
  update: function (element, oldValue, value) {                                                         // 53
    if (!this.getCurrentValue || !this.setValue)                                                        // 54
      throw new Error("Missing methods in subclass of 'BaseClassHandler'");                             // 55
                                                                                                        // 56
    var oldClasses = oldValue ? _.compact(oldValue.split(' ')) : [];                                    // 57
    var newClasses = value ? _.compact(value.split(' ')) : [];                                          // 58
                                                                                                        // 59
    // the current classes on the element, which we will mutate.                                        // 60
    var classes = _.compact(this.getCurrentValue(element).split(' '));                                  // 61
                                                                                                        // 62
    // optimize this later (to be asymptotically faster) if necessary                                   // 63
    for (var i = 0; i < oldClasses.length; i++) {                                                       // 64
      var c = oldClasses[i];                                                                            // 65
      if (! _.contains(newClasses, c))                                                                  // 66
        classes = _.without(classes, c);                                                                // 67
    }                                                                                                   // 68
    for (var i = 0; i < newClasses.length; i++) {                                                       // 69
      var c = newClasses[i];                                                                            // 70
      if ((! _.contains(oldClasses, c)) &&                                                              // 71
          (! _.contains(classes, c)))                                                                   // 72
        classes.push(c);                                                                                // 73
    }                                                                                                   // 74
                                                                                                        // 75
    this.setValue(element, classes.join(' '));                                                          // 76
  }                                                                                                     // 77
});                                                                                                     // 78
                                                                                                        // 79
var ClassHandler = BaseClassHandler.extend({                                                            // 80
  // @param rawValue {String}                                                                           // 81
  getCurrentValue: function (element) {                                                                 // 82
    return element.className;                                                                           // 83
  },                                                                                                    // 84
  setValue: function (element, className) {                                                             // 85
    element.className = className;                                                                      // 86
  }                                                                                                     // 87
});                                                                                                     // 88
                                                                                                        // 89
var SVGClassHandler = BaseClassHandler.extend({                                                         // 90
  getCurrentValue: function (element) {                                                                 // 91
    return element.className.baseVal;                                                                   // 92
  },                                                                                                    // 93
  setValue: function (element, className) {                                                             // 94
    element.setAttribute('class', className);                                                           // 95
  }                                                                                                     // 96
});                                                                                                     // 97
                                                                                                        // 98
var BooleanHandler = AttributeHandler.extend({                                                          // 99
  update: function (element, oldValue, value) {                                                         // 100
    var focused = this.focused(element);                                                                // 101
                                                                                                        // 102
    if (!focused) {                                                                                     // 103
      var name = this.name;                                                                             // 104
      if (value == null) {                                                                              // 105
        if (oldValue != null)                                                                           // 106
          element[name] = false;                                                                        // 107
      } else {                                                                                          // 108
        element[name] = true;                                                                           // 109
      }                                                                                                 // 110
    }                                                                                                   // 111
  },                                                                                                    // 112
  // is the element part of a control which is focused?                                                 // 113
  focused: function (element) {                                                                         // 114
    if (element.tagName === 'INPUT') {                                                                  // 115
      return element === document.activeElement;                                                        // 116
                                                                                                        // 117
    } else if (element.tagName === 'OPTION') {                                                          // 118
      // find the containing SELECT element, on which focus                                             // 119
      // is actually set                                                                                // 120
      var selectEl = element;                                                                           // 121
      while (selectEl && selectEl.tagName !== 'SELECT')                                                 // 122
        selectEl = selectEl.parentNode;                                                                 // 123
                                                                                                        // 124
      if (selectEl)                                                                                     // 125
        return selectEl === document.activeElement;                                                     // 126
      else                                                                                              // 127
        return false;                                                                                   // 128
    } else {                                                                                            // 129
      throw new Error("Expected INPUT or OPTION element");                                              // 130
    }                                                                                                   // 131
  }                                                                                                     // 132
});                                                                                                     // 133
                                                                                                        // 134
var ValueHandler = AttributeHandler.extend({                                                            // 135
  update: function (element, oldValue, value) {                                                         // 136
    var focused = (element === document.activeElement);                                                 // 137
                                                                                                        // 138
    if (!focused)                                                                                       // 139
      element.value = value;                                                                            // 140
  }                                                                                                     // 141
});                                                                                                     // 142
                                                                                                        // 143
// attributes of the type 'xlink:something' should be set using                                         // 144
// the correct namespace in order to work                                                               // 145
var XlinkHandler = AttributeHandler.extend({                                                            // 146
  update: function(element, oldValue, value) {                                                          // 147
    var NS = 'http://www.w3.org/1999/xlink';                                                            // 148
    if (value === null) {                                                                               // 149
      if (oldValue !== null)                                                                            // 150
        element.removeAttributeNS(NS, this.name);                                                       // 151
    } else {                                                                                            // 152
      element.setAttributeNS(NS, this.name, this.value);                                                // 153
    }                                                                                                   // 154
  }                                                                                                     // 155
});                                                                                                     // 156
                                                                                                        // 157
// cross-browser version of `instanceof SVGElement`                                                     // 158
var isSVGElement = function (elem) {                                                                    // 159
  return 'ownerSVGElement' in elem;                                                                     // 160
};                                                                                                      // 161
                                                                                                        // 162
var isUrlAttribute = function (tagName, attrName) {                                                     // 163
  // Compiled from http://www.w3.org/TR/REC-html40/index/attributes.html                                // 164
  // and                                                                                                // 165
  // http://www.w3.org/html/wg/drafts/html/master/index.html#attributes-1                               // 166
  var urlAttrs = {                                                                                      // 167
    FORM: ['action'],                                                                                   // 168
    BODY: ['background'],                                                                               // 169
    BLOCKQUOTE: ['cite'],                                                                               // 170
    Q: ['cite'],                                                                                        // 171
    DEL: ['cite'],                                                                                      // 172
    INS: ['cite'],                                                                                      // 173
    OBJECT: ['classid', 'codebase', 'data', 'usemap'],                                                  // 174
    APPLET: ['codebase'],                                                                               // 175
    A: ['href'],                                                                                        // 176
    AREA: ['href'],                                                                                     // 177
    LINK: ['href'],                                                                                     // 178
    BASE: ['href'],                                                                                     // 179
    IMG: ['longdesc', 'src', 'usemap'],                                                                 // 180
    FRAME: ['longdesc', 'src'],                                                                         // 181
    IFRAME: ['longdesc', 'src'],                                                                        // 182
    HEAD: ['profile'],                                                                                  // 183
    SCRIPT: ['src'],                                                                                    // 184
    INPUT: ['src', 'usemap', 'formaction'],                                                             // 185
    BUTTON: ['formaction'],                                                                             // 186
    BASE: ['href'],                                                                                     // 187
    MENUITEM: ['icon'],                                                                                 // 188
    HTML: ['manifest'],                                                                                 // 189
    VIDEO: ['poster']                                                                                   // 190
  };                                                                                                    // 191
                                                                                                        // 192
  if (attrName === 'itemid') {                                                                          // 193
    return true;                                                                                        // 194
  }                                                                                                     // 195
                                                                                                        // 196
  var urlAttrNames = urlAttrs[tagName] || [];                                                           // 197
  return _.contains(urlAttrNames, attrName);                                                            // 198
};                                                                                                      // 199
                                                                                                        // 200
// To get the protocol for a URL, we let the browser normalize it for                                   // 201
// us, by setting it as the href for an anchor tag and then reading out                                 // 202
// the 'protocol' property.                                                                             // 203
if (Meteor.isClient) {                                                                                  // 204
  var anchorForNormalization = document.createElement('A');                                             // 205
}                                                                                                       // 206
                                                                                                        // 207
var normalizeUrl = function (url) {                                                                     // 208
  if (Meteor.isClient) {                                                                                // 209
    anchorForNormalization.href = url;                                                                  // 210
    return anchorForNormalization.href;                                                                 // 211
  } else {                                                                                              // 212
    throw new Error('normalizeUrl not implemented on the server');                                      // 213
  }                                                                                                     // 214
};                                                                                                      // 215
                                                                                                        // 216
// UrlHandler is an attribute handler for all HTML attributes that take                                 // 217
// URL values. It disallows javascript: URLs, unless                                                    // 218
// UI._allowJavascriptUrls() has been called. To detect javascript:                                     // 219
// urls, we set the attribute and then reads the attribute out of the                                   // 220
// DOM, in order to avoid writing our own URL normalization code. (We                                   // 221
// don't want to be fooled by ' javascript:alert(1)' or                                                 // 222
// 'jAvAsCrIpT:alert(1)'.) In future, when the URL interface is more                                    // 223
// widely supported, we can use that, which will be                                                     // 224
// cleaner.  https://developer.mozilla.org/en-US/docs/Web/API/URL                                       // 225
var origUpdate = AttributeHandler.prototype.update;                                                     // 226
var UrlHandler = AttributeHandler.extend({                                                              // 227
  update: function (element, oldValue, value) {                                                         // 228
    var self = this;                                                                                    // 229
    var args = arguments;                                                                               // 230
                                                                                                        // 231
    if (UI._javascriptUrlsAllowed()) {                                                                  // 232
      origUpdate.apply(self, args);                                                                     // 233
    } else {                                                                                            // 234
      var isJavascriptProtocol =                                                                        // 235
            (normalizeUrl(value).indexOf('javascript:') === 0);                                         // 236
      if (isJavascriptProtocol) {                                                                       // 237
        Meteor._debug("URLs that use the 'javascript:' protocol are not " +                             // 238
                      "allowed in URL attribute values. " +                                             // 239
                      "Call UI._allowJavascriptUrls() " +                                               // 240
                      "to enable them.");                                                               // 241
        origUpdate.apply(self, [element, oldValue, null]);                                              // 242
      } else {                                                                                          // 243
        origUpdate.apply(self, args);                                                                   // 244
      }                                                                                                 // 245
    }                                                                                                   // 246
  }                                                                                                     // 247
});                                                                                                     // 248
                                                                                                        // 249
// XXX make it possible for users to register attribute handlers!                                       // 250
makeAttributeHandler = function (elem, name, value) {                                                   // 251
  // generally, use setAttribute but certain attributes need to be set                                  // 252
  // by directly setting a JavaScript property on the DOM element.                                      // 253
  if (name === 'class') {                                                                               // 254
    if (isSVGElement(elem)) {                                                                           // 255
      return new SVGClassHandler(name, value);                                                          // 256
    } else {                                                                                            // 257
      return new ClassHandler(name, value);                                                             // 258
    }                                                                                                   // 259
  } else if ((elem.tagName === 'OPTION' && name === 'selected') ||                                      // 260
             (elem.tagName === 'INPUT' && name === 'checked')) {                                        // 261
    return new BooleanHandler(name, value);                                                             // 262
  } else if ((elem.tagName === 'TEXTAREA' || elem.tagName === 'INPUT')                                  // 263
             && name === 'value') {                                                                     // 264
    // internally, TEXTAREAs tracks their value in the 'value'                                          // 265
    // attribute just like INPUTs.                                                                      // 266
    return new ValueHandler(name, value);                                                               // 267
  } else if (name.substring(0,6) === 'xlink:') {                                                        // 268
    return new XlinkHandler(name.substring(6), value);                                                  // 269
  } else if (isUrlAttribute(elem.tagName, name)) {                                                      // 270
    return new UrlHandler(name, value);                                                                 // 271
  } else {                                                                                              // 272
    return new AttributeHandler(name, value);                                                           // 273
  }                                                                                                     // 274
                                                                                                        // 275
  // XXX will need one for 'style' on IE, though modern browsers                                        // 276
  // seem to handle setAttribute ok.                                                                    // 277
};                                                                                                      // 278
                                                                                                        // 279
                                                                                                        // 280
ElementAttributesUpdater = function (elem) {                                                            // 281
  this.elem = elem;                                                                                     // 282
  this.handlers = {};                                                                                   // 283
};                                                                                                      // 284
                                                                                                        // 285
// Update attributes on `elem` to the dictionary `attrs`, whose                                         // 286
// values are strings.                                                                                  // 287
ElementAttributesUpdater.prototype.update = function(newAttrs) {                                        // 288
  var elem = this.elem;                                                                                 // 289
  var handlers = this.handlers;                                                                         // 290
                                                                                                        // 291
  for (var k in handlers) {                                                                             // 292
    if (! newAttrs.hasOwnProperty(k)) {                                                                 // 293
      // remove attributes (and handlers) for attribute names                                           // 294
      // that don't exist as keys of `newAttrs` and so won't                                            // 295
      // be visited when traversing it.  (Attributes that                                               // 296
      // exist in the `newAttrs` object but are `null`                                                  // 297
      // are handled later.)                                                                            // 298
      var handler = handlers[k];                                                                        // 299
      var oldValue = handler.value;                                                                     // 300
      handler.value = null;                                                                             // 301
      handler.update(elem, oldValue, null);                                                             // 302
      delete handlers[k];                                                                               // 303
    }                                                                                                   // 304
  }                                                                                                     // 305
                                                                                                        // 306
  for (var k in newAttrs) {                                                                             // 307
    var handler = null;                                                                                 // 308
    var oldValue;                                                                                       // 309
    var value = newAttrs[k];                                                                            // 310
    if (! handlers.hasOwnProperty(k)) {                                                                 // 311
      if (value !== null) {                                                                             // 312
        // make new handler                                                                             // 313
        handler = makeAttributeHandler(elem, k, value);                                                 // 314
        handlers[k] = handler;                                                                          // 315
        oldValue = null;                                                                                // 316
      }                                                                                                 // 317
    } else {                                                                                            // 318
      handler = handlers[k];                                                                            // 319
      oldValue = handler.value;                                                                         // 320
    }                                                                                                   // 321
    if (oldValue !== value) {                                                                           // 322
      handler.value = value;                                                                            // 323
      handler.update(elem, oldValue, value);                                                            // 324
      if (value === null)                                                                               // 325
        delete handlers[k];                                                                             // 326
    }                                                                                                   // 327
  }                                                                                                     // 328
};                                                                                                      // 329
                                                                                                        // 330
//////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

//////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                      //
// packages/ui/render.js                                                                                //
//                                                                                                      //
//////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                        //
                                                                                                        // 1
UI.Component.instantiate = function (parent) {                                                          // 2
  var kind = this;                                                                                      // 3
                                                                                                        // 4
  // check arguments                                                                                    // 5
  if (UI.isComponent(kind)) {                                                                           // 6
    if (kind.isInited)                                                                                  // 7
      throw new Error("A component kind is required, not an instance");                                 // 8
  } else {                                                                                              // 9
    throw new Error("Expected Component kind");                                                         // 10
  }                                                                                                     // 11
                                                                                                        // 12
  var inst = kind.extend(); // XXX args go here                                                         // 13
  inst.isInited = true;                                                                                 // 14
                                                                                                        // 15
  // XXX messy to define this here                                                                      // 16
  inst.templateInstance = {                                                                             // 17
    findAll: function (selector) {                                                                      // 18
      // XXX check that `.dom` exists here?                                                             // 19
      return inst.dom.$(selector);                                                                      // 20
    },                                                                                                  // 21
    find: function (selector) {                                                                         // 22
      var result = this.findAll(selector);                                                              // 23
      return result[0] || null;                                                                         // 24
    },                                                                                                  // 25
    firstNode: null,                                                                                    // 26
    lastNode: null,                                                                                     // 27
    data: null,                                                                                         // 28
    __component__: inst                                                                                 // 29
  };                                                                                                    // 30
  inst.templateInstance.$ = inst.templateInstance.findAll;                                              // 31
                                                                                                        // 32
  inst.parent = (parent || null);                                                                       // 33
                                                                                                        // 34
  if (inst.init)                                                                                        // 35
    inst.init();                                                                                        // 36
                                                                                                        // 37
  if (inst.created) {                                                                                   // 38
    updateTemplateInstance(inst);                                                                       // 39
    inst.created.call(inst.templateInstance);                                                           // 40
  }                                                                                                     // 41
                                                                                                        // 42
  return inst;                                                                                          // 43
};                                                                                                      // 44
                                                                                                        // 45
UI.Component.render = function () {                                                                     // 46
  return null;                                                                                          // 47
};                                                                                                      // 48
                                                                                                        // 49
var Box = function (func, equals) {                                                                     // 50
  var self = this;                                                                                      // 51
                                                                                                        // 52
  self.func = func;                                                                                     // 53
  self.equals = equals;                                                                                 // 54
                                                                                                        // 55
  self.curResult = null;                                                                                // 56
                                                                                                        // 57
  self.dep = new Deps.Dependency;                                                                       // 58
                                                                                                        // 59
  self.resultComputation = Deps.nonreactive(function () {                                               // 60
    return Deps.autorun(function (c) {                                                                  // 61
      var func = self.func;                                                                             // 62
                                                                                                        // 63
      var newResult = func();                                                                           // 64
                                                                                                        // 65
      if (! c.firstRun) {                                                                               // 66
        var equals = self.equals;                                                                       // 67
        var oldResult = self.curResult;                                                                 // 68
                                                                                                        // 69
        if (equals ? equals(newResult, oldResult) :                                                     // 70
            newResult === oldResult) {                                                                  // 71
          // same as last time                                                                          // 72
          return;                                                                                       // 73
        }                                                                                               // 74
      }                                                                                                 // 75
                                                                                                        // 76
      self.curResult = newResult;                                                                       // 77
      self.dep.changed();                                                                               // 78
    });                                                                                                 // 79
  });                                                                                                   // 80
};                                                                                                      // 81
                                                                                                        // 82
Box.prototype.stop = function () {                                                                      // 83
  this.resultComputation.stop();                                                                        // 84
};                                                                                                      // 85
                                                                                                        // 86
Box.prototype.get = function () {                                                                       // 87
  if (Deps.active && ! this.resultComputation.stopped)                                                  // 88
    this.dep.depend();                                                                                  // 89
                                                                                                        // 90
  return this.curResult;                                                                                // 91
};                                                                                                      // 92
                                                                                                        // 93
// Takes a reactive function (call it `inner`) and returns a reactive function                          // 94
// `outer` which is equivalent except in its reactive behavior.  Specifically,                          // 95
// `outer` has the following two special properties:                                                    // 96
//                                                                                                      // 97
// 1. Isolation:  An invocation of `outer()` only invalidates its context                               // 98
//    when the value of `inner()` changes.  For example, `inner` may be a                               // 99
//    function that gets one or more Session variables and calculates a                                 // 100
//    true/false value.  `outer` blocks invalidation signals caused by the                              // 101
//    Session variables changing and sends a signal out only when the value                             // 102
//    changes between true and false (in this example).  The value can be                               // 103
//    of any type, and it is compared with `===` unless an `equals` function                            // 104
//    is provided.                                                                                      // 105
//                                                                                                      // 106
// 2. Value Sharing:  The `outer` function returned by `emboxValue` can be                              // 107
//    shared between different contexts, for example by assigning it to an                              // 108
//    object as a method that can be accessed at any time, such as by                                   // 109
//    different templates or different parts of a template.  No matter                                  // 110
//    how many times `outer` is called, `inner` is only called once until                               // 111
//    it changes.  The most recent value is stored internally.                                          // 112
//                                                                                                      // 113
// Conceptually, an emboxed value is much like a Session variable which is                              // 114
// kept up to date by an autorun.  Session variables provide storage                                    // 115
// (value sharing) and they don't notify their listeners unless a value                                 // 116
// actually changes (isolation).  The biggest difference is that such an                                // 117
// autorun would never be stopped, and the Session variable would never be                              // 118
// deleted even if it wasn't used any more.  An emboxed value, on the other                             // 119
// hand, automatically stops computing when it's not being used, and starts                             // 120
// again when called from a reactive context.  This means that when it stops                            // 121
// being used, it can be completely garbage-collected.                                                  // 122
//                                                                                                      // 123
// If a non-function value is supplied to `emboxValue` instead of a reactive                            // 124
// function, then `outer` is still a function but it simply returns the value.                          // 125
//                                                                                                      // 126
UI.emboxValue = function (funcOrValue, equals) {                                                        // 127
  if (typeof funcOrValue === 'function') {                                                              // 128
                                                                                                        // 129
    var func = funcOrValue;                                                                             // 130
    var box = new Box(func, equals);                                                                    // 131
                                                                                                        // 132
    var f = function () {                                                                               // 133
      return box.get();                                                                                 // 134
    };                                                                                                  // 135
                                                                                                        // 136
    f.stop = function () {                                                                              // 137
      box.stop();                                                                                       // 138
    };                                                                                                  // 139
                                                                                                        // 140
    return f;                                                                                           // 141
                                                                                                        // 142
  } else {                                                                                              // 143
    var value = funcOrValue;                                                                            // 144
    var result = function () {                                                                          // 145
      return value;                                                                                     // 146
    };                                                                                                  // 147
    result._isEmboxedConstant = true;                                                                   // 148
    return result;                                                                                      // 149
  }                                                                                                     // 150
};                                                                                                      // 151
                                                                                                        // 152
                                                                                                        // 153
UI.namedEmboxValue = function (name, funcOrValue, equals) {                                             // 154
  if (! Deps.active) {                                                                                  // 155
    var f = UI.emboxValue(funcOrValue, equals);                                                         // 156
    f.stop();                                                                                           // 157
    return f;                                                                                           // 158
  }                                                                                                     // 159
                                                                                                        // 160
  var c = Deps.currentComputation;                                                                      // 161
  if (! c[name])                                                                                        // 162
    c[name] = UI.emboxValue(funcOrValue, equals);                                                       // 163
                                                                                                        // 164
  return c[name];                                                                                       // 165
};                                                                                                      // 166
                                                                                                        // 167
////////////////////////////////////////                                                                // 168
                                                                                                        // 169
UI.insert = function (renderedTemplate, parentElement, nextNode) {                                      // 170
  if (! renderedTemplate.dom)                                                                           // 171
    throw new Error("Expected template rendered with UI.render");                                       // 172
                                                                                                        // 173
  UI.DomRange.insert(renderedTemplate.dom, parentElement, nextNode);                                    // 174
};                                                                                                      // 175
                                                                                                        // 176
// Insert a DOM node or DomRange into a DOM element or DomRange.                                        // 177
//                                                                                                      // 178
// One of three things happens depending on what needs to be inserted into what:                        // 179
// - `range.add` (anything into DomRange)                                                               // 180
// - `UI.DomRange.insert` (DomRange into element)                                                       // 181
// - `elem.insertBefore` (node into element)                                                            // 182
//                                                                                                      // 183
// The optional `before` argument is an existing node or id to insert before in                         // 184
// the parent element or DomRange.                                                                      // 185
var insert = function (nodeOrRange, parent, before) {                                                   // 186
  if (! parent)                                                                                         // 187
    throw new Error("Materialization parent required");                                                 // 188
                                                                                                        // 189
  if (parent instanceof UI.DomRange) {                                                                  // 190
    parent.add(nodeOrRange, before);                                                                    // 191
  } else if (nodeOrRange instanceof UI.DomRange) {                                                      // 192
    // parent is an element; inserting a range                                                          // 193
    UI.DomRange.insert(nodeOrRange, parent, before);                                                    // 194
  } else {                                                                                              // 195
    // parent is an element; inserting an element                                                       // 196
    parent.insertBefore(nodeOrRange, before || null); // `null` for IE                                  // 197
  }                                                                                                     // 198
};                                                                                                      // 199
                                                                                                        // 200
UI.render = function (kind, parentComponent) {                                                          // 201
  if (kind.isInited)                                                                                    // 202
    throw new Error("Can't render component instance, only component kind");                            // 203
                                                                                                        // 204
  var inst, content, range;                                                                             // 205
                                                                                                        // 206
  Deps.nonreactive(function () {                                                                        // 207
                                                                                                        // 208
    inst = kind.instantiate(parentComponent);                                                           // 209
                                                                                                        // 210
    content = (inst.render && inst.render());                                                           // 211
                                                                                                        // 212
    range = new UI.DomRange;                                                                            // 213
    inst.dom = range;                                                                                   // 214
    range.component = inst;                                                                             // 215
                                                                                                        // 216
  });                                                                                                   // 217
                                                                                                        // 218
  materialize(content, range, null, inst);                                                              // 219
                                                                                                        // 220
  range.removed = function () {                                                                         // 221
    inst.isDestroyed = true;                                                                            // 222
    if (inst.destroyed) {                                                                               // 223
      Deps.nonreactive(function () {                                                                    // 224
        updateTemplateInstance(inst);                                                                   // 225
        inst.destroyed.call(inst.templateInstance);                                                     // 226
      });                                                                                               // 227
    }                                                                                                   // 228
  };                                                                                                    // 229
                                                                                                        // 230
  return inst;                                                                                          // 231
};                                                                                                      // 232
                                                                                                        // 233
UI.renderWithData = function (kind, data, parentComponent) {                                            // 234
  if (! UI.isComponent(kind))                                                                           // 235
    throw new Error("Component required here");                                                         // 236
  if (kind.isInited)                                                                                    // 237
    throw new Error("Can't render component instance, only component kind");                            // 238
  if (typeof data === 'function')                                                                       // 239
    throw new Error("Data argument can't be a function");                                               // 240
                                                                                                        // 241
  return UI.render(kind.extend({data: function () { return data; }}),                                   // 242
                   parentComponent);                                                                    // 243
};                                                                                                      // 244
                                                                                                        // 245
var contentEquals = function (a, b) {                                                                   // 246
  if (a instanceof HTML.Raw) {                                                                          // 247
    return (b instanceof HTML.Raw) && (a.value === b.value);                                            // 248
  } else if (a == null) {                                                                               // 249
    return (b == null);                                                                                 // 250
  } else {                                                                                              // 251
    return (a === b) &&                                                                                 // 252
      ((typeof a === 'number') || (typeof a === 'boolean') ||                                           // 253
       (typeof a === 'string'));                                                                        // 254
  }                                                                                                     // 255
};                                                                                                      // 256
                                                                                                        // 257
UI.InTemplateScope = function (tmplInstance, content) {                                                 // 258
  if (! (this instanceof UI.InTemplateScope))                                                           // 259
    // called without `new`                                                                             // 260
    return new UI.InTemplateScope(tmplInstance, content);                                               // 261
                                                                                                        // 262
  var parentPtr = tmplInstance.parent;                                                                  // 263
  if (parentPtr.__isTemplateWith)                                                                       // 264
    parentPtr = parentPtr.parent;                                                                       // 265
                                                                                                        // 266
  this.parentPtr = parentPtr;                                                                           // 267
  this.content = content;                                                                               // 268
};                                                                                                      // 269
                                                                                                        // 270
UI.InTemplateScope.prototype.toHTML = function (parentComponent) {                                      // 271
  return HTML.toHTML(this.content, this.parentPtr);                                                     // 272
};                                                                                                      // 273
                                                                                                        // 274
UI.InTemplateScope.prototype.toText = function (textMode, parentComponent) {                            // 275
  return HTML.toText(this.content, textMode, this.parentPtr);                                           // 276
};                                                                                                      // 277
                                                                                                        // 278
// Convert the pseudoDOM `node` into reactive DOM nodes and insert them                                 // 279
// into the element or DomRange `parent`, before the node or id `before`.                               // 280
var materialize = function (node, parent, before, parentComponent) {                                    // 281
  // XXX should do more error-checking for the case where user is supplying the tags.                   // 282
  // For example, check that CharRef has `html` and `str` properties and no content.                    // 283
  // Check that Comment has a single string child and no attributes.  Etc.                              // 284
                                                                                                        // 285
  if (node == null) {                                                                                   // 286
    // null or undefined.                                                                               // 287
    // do nothinge.                                                                                     // 288
  } else if ((typeof node === 'string') || (typeof node === 'boolean') || (typeof node === 'number')) { // 289
    node = String(node);                                                                                // 290
    insert(document.createTextNode(node), parent, before);                                              // 291
  } else if (node instanceof Array) {                                                                   // 292
    for (var i = 0; i < node.length; i++)                                                               // 293
      materialize(node[i], parent, before, parentComponent);                                            // 294
  } else if (typeof node === 'function') {                                                              // 295
                                                                                                        // 296
    var range = new UI.DomRange;                                                                        // 297
    var lastContent = null;                                                                             // 298
    var rangeUpdater = Deps.autorun(function (c) {                                                      // 299
      var content = node();                                                                             // 300
      // normalize content a little, for easier comparison                                              // 301
      if (HTML.isNully(content))                                                                        // 302
        content = null;                                                                                 // 303
      else if ((content instanceof Array) && content.length === 1)                                      // 304
        content = content[0];                                                                           // 305
                                                                                                        // 306
      // update if content is different from last time                                                  // 307
      if (! contentEquals(content, lastContent)) {                                                      // 308
        lastContent = content;                                                                          // 309
                                                                                                        // 310
        if (! c.firstRun)                                                                               // 311
          range.removeAll();                                                                            // 312
                                                                                                        // 313
        materialize(content, range, null, parentComponent);                                             // 314
      }                                                                                                 // 315
    });                                                                                                 // 316
    range.removed = function () {                                                                       // 317
      rangeUpdater.stop();                                                                              // 318
      if (node.stop)                                                                                    // 319
        node.stop();                                                                                    // 320
    };                                                                                                  // 321
    // XXXX HACK                                                                                        // 322
    if (Deps.active && node.stop) {                                                                     // 323
      Deps.onInvalidate(function () {                                                                   // 324
        node.stop();                                                                                    // 325
      });                                                                                               // 326
    }                                                                                                   // 327
    insert(range, parent, before);                                                                      // 328
  } else if (node instanceof HTML.Tag) {                                                                // 329
    var tagName = node.tagName;                                                                         // 330
    var elem;                                                                                           // 331
    if (HTML.isKnownSVGElement(tagName) && document.createElementNS) {                                  // 332
      elem = document.createElementNS('http://www.w3.org/2000/svg', tagName);                           // 333
    } else {                                                                                            // 334
      elem = document.createElement(node.tagName);                                                      // 335
    }                                                                                                   // 336
                                                                                                        // 337
    var rawAttrs = node.attrs;                                                                          // 338
    var children = node.children;                                                                       // 339
    if (node.tagName === 'textarea') {                                                                  // 340
      rawAttrs = (rawAttrs || {});                                                                      // 341
      rawAttrs.value = children;                                                                        // 342
      children = [];                                                                                    // 343
    };                                                                                                  // 344
                                                                                                        // 345
    if (rawAttrs) {                                                                                     // 346
      var attrComp = Deps.autorun(function (c) {                                                        // 347
        var attrUpdater = c.updater;                                                                    // 348
        if (! attrUpdater) {                                                                            // 349
          attrUpdater = c.updater = new ElementAttributesUpdater(elem);                                 // 350
        }                                                                                               // 351
                                                                                                        // 352
        try {                                                                                           // 353
          var attrs = HTML.evaluateAttributes(rawAttrs, parentComponent);                               // 354
          var stringAttrs = {};                                                                         // 355
          if (attrs) {                                                                                  // 356
            for (var k in attrs) {                                                                      // 357
              stringAttrs[k] = HTML.toText(attrs[k], HTML.TEXTMODE.STRING,                              // 358
                                           parentComponent);                                            // 359
            }                                                                                           // 360
            attrUpdater.update(stringAttrs);                                                            // 361
          }                                                                                             // 362
        } catch (e) {                                                                                   // 363
          reportUIException(e);                                                                         // 364
        }                                                                                               // 365
      });                                                                                               // 366
      UI.DomBackend.onRemoveElement(elem, function () {                                                 // 367
        attrComp.stop();                                                                                // 368
      });                                                                                               // 369
    }                                                                                                   // 370
    materialize(children, elem, null, parentComponent);                                                 // 371
                                                                                                        // 372
    insert(elem, parent, before);                                                                       // 373
  } else if (typeof node.instantiate === 'function') {                                                  // 374
    // component                                                                                        // 375
    var instance = UI.render(node, parentComponent);                                                    // 376
                                                                                                        // 377
    // Call internal callback, which may take advantage of the current                                  // 378
    // Deps computation.                                                                                // 379
    if (instance.materialized)                                                                          // 380
      instance.materialized();                                                                          // 381
                                                                                                        // 382
    insert(instance.dom, parent, before);                                                               // 383
  } else if (node instanceof HTML.CharRef) {                                                            // 384
    insert(document.createTextNode(node.str), parent, before);                                          // 385
  } else if (node instanceof HTML.Comment) {                                                            // 386
    insert(document.createComment(node.sanitizedValue), parent, before);                                // 387
  } else if (node instanceof HTML.Raw) {                                                                // 388
    // Get an array of DOM nodes by using the browser's HTML parser                                     // 389
    // (like innerHTML).                                                                                // 390
    var htmlNodes = UI.DomBackend.parseHTML(node.value);                                                // 391
    for (var i = 0; i < htmlNodes.length; i++)                                                          // 392
      insert(htmlNodes[i], parent, before);                                                             // 393
  } else if (Package['html-tools'] && (node instanceof Package['html-tools'].HTMLTools.Special)) {      // 394
    throw new Error("Can't materialize Special tag, it's just an intermediate rep");                    // 395
  } else if (node instanceof UI.InTemplateScope) {                                                      // 396
    materialize(node.content, parent, before, node.parentPtr);                                          // 397
  } else {                                                                                              // 398
    // can't get here                                                                                   // 399
    throw new Error("Unexpected node in htmljs: " + node);                                              // 400
  }                                                                                                     // 401
};                                                                                                      // 402
                                                                                                        // 403
                                                                                                        // 404
                                                                                                        // 405
// XXX figure out the right names, and namespace, for these.                                            // 406
// for example, maybe some of them go in the HTML package.                                              // 407
UI.materialize = materialize;                                                                           // 408
                                                                                                        // 409
UI.body = UI.Component.extend({                                                                         // 410
  kind: 'body',                                                                                         // 411
  contentParts: [],                                                                                     // 412
  render: function () {                                                                                 // 413
    return this.contentParts;                                                                           // 414
  },                                                                                                    // 415
  // XXX revisit how body works.                                                                        // 416
  INSTANTIATED: false,                                                                                  // 417
  __helperHost: true                                                                                    // 418
});                                                                                                     // 419
                                                                                                        // 420
UI.block = function (renderFunc) {                                                                      // 421
  return UI.Component.extend({ render: renderFunc });                                                   // 422
};                                                                                                      // 423
                                                                                                        // 424
UI.toHTML = function (content, parentComponent) {                                                       // 425
  return HTML.toHTML(content, parentComponent);                                                         // 426
};                                                                                                      // 427
                                                                                                        // 428
UI.toRawText = function (content, parentComponent) {                                                    // 429
  return HTML.toText(content, HTML.TEXTMODE.STRING, parentComponent);                                   // 430
};                                                                                                      // 431
                                                                                                        // 432
//////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

//////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                      //
// packages/ui/builtins.js                                                                              //
//                                                                                                      //
//////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                        //
                                                                                                        // 1
UI.If = function (argFunc, contentBlock, elseContentBlock) {                                            // 2
  checkBlockHelperArguments('If', argFunc, contentBlock, elseContentBlock);                             // 3
                                                                                                        // 4
  var f = function () {                                                                                 // 5
    var emboxedCondition = emboxCondition(argFunc);                                                     // 6
    f.stop = function () {                                                                              // 7
      emboxedCondition.stop();                                                                          // 8
    };                                                                                                  // 9
    if (emboxedCondition())                                                                             // 10
      return contentBlock;                                                                              // 11
    else                                                                                                // 12
      return elseContentBlock || null;                                                                  // 13
  };                                                                                                    // 14
                                                                                                        // 15
  return f;                                                                                             // 16
};                                                                                                      // 17
                                                                                                        // 18
                                                                                                        // 19
UI.Unless = function (argFunc, contentBlock, elseContentBlock) {                                        // 20
  checkBlockHelperArguments('Unless', argFunc, contentBlock, elseContentBlock);                         // 21
                                                                                                        // 22
  var f = function () {                                                                                 // 23
    var emboxedCondition = emboxCondition(argFunc);                                                     // 24
    f.stop = function () {                                                                              // 25
      emboxedCondition.stop();                                                                          // 26
    };                                                                                                  // 27
    if (! emboxedCondition())                                                                           // 28
      return contentBlock;                                                                              // 29
    else                                                                                                // 30
      return elseContentBlock || null;                                                                  // 31
  };                                                                                                    // 32
                                                                                                        // 33
  return f;                                                                                             // 34
};                                                                                                      // 35
                                                                                                        // 36
// Returns true if `a` and `b` are `===`, unless they are of a mutable type.                            // 37
// (Because then, they may be equal references to an object that was mutated,                           // 38
// and we'll never know.  We save only a reference to the old object; we don't                          // 39
// do any deep-copying or diffing.)                                                                     // 40
UI.safeEquals = function (a, b) {                                                                       // 41
  if (a !== b)                                                                                          // 42
    return false;                                                                                       // 43
  else                                                                                                  // 44
    return ((!a) || (typeof a === 'number') || (typeof a === 'boolean') ||                              // 45
            (typeof a === 'string'));                                                                   // 46
};                                                                                                      // 47
                                                                                                        // 48
// Unlike Spacebars.With, there's no else case and no conditional logic.                                // 49
//                                                                                                      // 50
// We don't do any reactive emboxing of `argFunc` here; it should be done                               // 51
// by the caller if efficiency and/or number of calls to the data source                                // 52
// is important.                                                                                        // 53
UI.With = function (argFunc, contentBlock) {                                                            // 54
  checkBlockHelperArguments('With', argFunc, contentBlock);                                             // 55
                                                                                                        // 56
  var block = contentBlock;                                                                             // 57
  if ('data' in block) {                                                                                // 58
    // XXX TODO: get religion about where `data` property goes                                          // 59
    block = UI.block(function () {                                                                      // 60
      return contentBlock;                                                                              // 61
    });                                                                                                 // 62
  }                                                                                                     // 63
                                                                                                        // 64
  block.data = function () {                                                                            // 65
    throw new Error("Can't get data for component kind");                                               // 66
  };                                                                                                    // 67
                                                                                                        // 68
  block.init = function () {                                                                            // 69
    this.data = UI.emboxValue(argFunc, UI.safeEquals);                                                  // 70
  };                                                                                                    // 71
                                                                                                        // 72
  block.materialized = function () {                                                                    // 73
    var self = this;                                                                                    // 74
    if (Deps.active) {                                                                                  // 75
      Deps.onInvalidate(function () {                                                                   // 76
        self.data.stop();                                                                               // 77
      });                                                                                               // 78
    }                                                                                                   // 79
  };                                                                                                    // 80
  block.materialized.isWith = true;                                                                     // 81
                                                                                                        // 82
  return block;                                                                                         // 83
};                                                                                                      // 84
                                                                                                        // 85
UI.Each = function (argFunc, contentBlock, elseContentBlock) {                                          // 86
  checkBlockHelperArguments('Each', argFunc, contentBlock, elseContentBlock);                           // 87
                                                                                                        // 88
  return UI.EachImpl.extend({                                                                           // 89
    __sequence: argFunc,                                                                                // 90
    __content: contentBlock,                                                                            // 91
    __elseContent: elseContentBlock                                                                     // 92
  });                                                                                                   // 93
};                                                                                                      // 94
                                                                                                        // 95
var checkBlockHelperArguments = function (which, argFunc, contentBlock, elseContentBlock) {             // 96
  if (typeof argFunc !== 'function')                                                                    // 97
    throw new Error('First argument to ' + which + ' must be a function');                              // 98
  if (! UI.isComponent(contentBlock))                                                                   // 99
    throw new Error('Second argument to ' + which + ' must be a template or UI.block');                 // 100
  if (elseContentBlock && ! UI.isComponent(elseContentBlock))                                           // 101
    throw new Error('Third argument to ' + which + ' must be a template or UI.block if present');       // 102
};                                                                                                      // 103
                                                                                                        // 104
// Returns a function that computes `!! conditionFunc()` except:                                        // 105
//                                                                                                      // 106
// - Empty array is considered falsy                                                                    // 107
// - The result is UI.emboxValue'd (doesn't trigger invalidation                                        // 108
//   as long as the condition stays truthy or stays falsy)                                              // 109
var emboxCondition = function (conditionFunc) {                                                         // 110
  return UI.namedEmboxValue('if/unless', function () {                                                  // 111
    // `condition` is emboxed; it is always a function,                                                 // 112
    // and it only triggers invalidation if its return                                                  // 113
    // value actually changes.  We still need to isolate                                                // 114
    // the calculation of whether it is truthy or falsy                                                 // 115
    // in order to not re-render if it changes from one                                                 // 116
    // truthy or falsy value to another.                                                                // 117
    var cond = conditionFunc();                                                                         // 118
                                                                                                        // 119
    // empty arrays are treated as falsey values                                                        // 120
    if (cond instanceof Array && cond.length === 0)                                                     // 121
      return false;                                                                                     // 122
    else                                                                                                // 123
      return !! cond;                                                                                   // 124
  });                                                                                                   // 125
};                                                                                                      // 126
                                                                                                        // 127
//////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

//////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                      //
// packages/ui/each.js                                                                                  //
//                                                                                                      //
//////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                        //
UI.EachImpl = Component.extend({                                                                        // 1
  typeName: 'Each',                                                                                     // 2
  render: function (modeHint) {                                                                         // 3
    var self = this;                                                                                    // 4
    var content = self.__content;                                                                       // 5
    var elseContent = self.__elseContent;                                                               // 6
                                                                                                        // 7
    if (modeHint === 'STATIC') {                                                                        // 8
      // This is a hack.  The caller gives us a hint if the                                             // 9
      // value we return will be static (in HTML or text)                                               // 10
      // or dynamic (materialized DOM).  The dynamic path                                               // 11
      // returns `null` and then we populate the DOM from                                               // 12
      // the `materialized` callback.                                                                   // 13
      //                                                                                                // 14
      // It would be much cleaner to always return the same                                             // 15
      // value here, and to have that value be some special                                             // 16
      // object that encapsulates the logic for populating                                              // 17
      // the #each using a mode-agnostic interface that                                                 // 18
      // works for HTML, text, and DOM.  Alternatively, we                                              // 19
      // could formalize the current pattern, e.g. defining                                             // 20
      // a method like component.populate(domRange) and one                                             // 21
      // like renderStatic() or even renderHTML / renderText.                                           // 22
      var parts = _.map(                                                                                // 23
        ObserveSequence.fetch(self.__sequence()),                                                       // 24
        function (item) {                                                                               // 25
          return content.extend({data: function () {                                                    // 26
            return item;                                                                                // 27
          }});                                                                                          // 28
        });                                                                                             // 29
                                                                                                        // 30
      if (parts.length) {                                                                               // 31
        return parts;                                                                                   // 32
      } else {                                                                                          // 33
        return elseContent;                                                                             // 34
      }                                                                                                 // 35
      return parts;                                                                                     // 36
    } else {                                                                                            // 37
      return null;                                                                                      // 38
    }                                                                                                   // 39
  },                                                                                                    // 40
  materialized: function () {                                                                           // 41
    var self = this;                                                                                    // 42
                                                                                                        // 43
    var range = self.dom;                                                                               // 44
                                                                                                        // 45
    var content = self.__content;                                                                       // 46
    var elseContent = self.__elseContent;                                                               // 47
                                                                                                        // 48
    // if there is an else clause, keep track of the number of                                          // 49
    // rendered items.  use this to display the else clause when count                                  // 50
    // becomes zero, and remove it when count becomes positive.                                         // 51
    var itemCount = 0;                                                                                  // 52
    var addToCount = function(delta) {                                                                  // 53
      if (!elseContent) // if no else, no need to keep track of count                                   // 54
        return;                                                                                         // 55
                                                                                                        // 56
      if (itemCount + delta < 0)                                                                        // 57
        throw new Error("count should never become negative");                                          // 58
                                                                                                        // 59
      if (itemCount === 0) {                                                                            // 60
        // remove else clause                                                                           // 61
        range.removeAll();                                                                              // 62
      }                                                                                                 // 63
      itemCount += delta;                                                                               // 64
      if (itemCount === 0) {                                                                            // 65
        UI.materialize(elseContent, range, null, self);                                                 // 66
      }                                                                                                 // 67
    };                                                                                                  // 68
                                                                                                        // 69
    this.observeHandle = ObserveSequence.observe(function () {                                          // 70
      return self.__sequence();                                                                         // 71
    }, {                                                                                                // 72
      addedAt: function (id, item, i, beforeId) {                                                       // 73
        addToCount(1);                                                                                  // 74
        id = LocalCollection._idStringify(id);                                                          // 75
                                                                                                        // 76
        var data = item;                                                                                // 77
        var dep = new Deps.Dependency;                                                                  // 78
                                                                                                        // 79
        // function to become `comp.data`                                                               // 80
        var dataFunc = function () {                                                                    // 81
          dep.depend();                                                                                 // 82
          return data;                                                                                  // 83
        };                                                                                              // 84
        // Storing `$set` on `comp.data` lets us                                                        // 85
        // access it from `changed`.                                                                    // 86
        dataFunc.$set = function (v) {                                                                  // 87
          data = v;                                                                                     // 88
          dep.changed();                                                                                // 89
        };                                                                                              // 90
                                                                                                        // 91
        if (beforeId)                                                                                   // 92
          beforeId = LocalCollection._idStringify(beforeId);                                            // 93
                                                                                                        // 94
        var renderedItem = UI.render(content.extend({data: dataFunc}), self);                           // 95
        range.add(id, renderedItem.dom, beforeId);                                                      // 96
      },                                                                                                // 97
      removedAt: function (id, item) {                                                                  // 98
        addToCount(-1);                                                                                 // 99
        range.remove(LocalCollection._idStringify(id));                                                 // 100
      },                                                                                                // 101
      movedTo: function (id, item, i, j, beforeId) {                                                    // 102
        range.moveBefore(                                                                               // 103
          LocalCollection._idStringify(id),                                                             // 104
          beforeId && LocalCollection._idStringify(beforeId));                                          // 105
      },                                                                                                // 106
      changedAt: function (id, newItem, atIndex) {                                                      // 107
        range.get(LocalCollection._idStringify(id)).component.data.$set(newItem);                       // 108
      }                                                                                                 // 109
    });                                                                                                 // 110
                                                                                                        // 111
    // on initial render, display the else clause if no items                                           // 112
    addToCount(0);                                                                                      // 113
  },                                                                                                    // 114
  destroyed: function () {                                                                              // 115
    if (this.__component__.observeHandle)                                                               // 116
      this.__component__.observeHandle.stop();                                                          // 117
  }                                                                                                     // 118
});                                                                                                     // 119
                                                                                                        // 120
//////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

//////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                      //
// packages/ui/fields.js                                                                                //
//                                                                                                      //
//////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                        //
                                                                                                        // 1
var global = (function () { return this; })();                                                          // 2
                                                                                                        // 3
// Searches for the given property in `comp` or a parent,                                               // 4
// and returns it as is (without call it if it's a function).                                           // 5
var lookupComponentProp = function (comp, prop) {                                                       // 6
  comp = findComponentWithProp(prop, comp);                                                             // 7
  var result = (comp ? comp.data : null);                                                               // 8
  if (typeof result === 'function')                                                                     // 9
    result = _.bind(result, comp);                                                                      // 10
  return result;                                                                                        // 11
};                                                                                                      // 12
                                                                                                        // 13
// Component that's a no-op when used as a block helper like                                            // 14
// `{{#foo}}...{{/foo}}`. Prints a warning that it is deprecated.                                       // 15
var noOpComponent = function (name) {                                                                   // 16
  return Component.extend({                                                                             // 17
    kind: 'NoOp',                                                                                       // 18
    render: function () {                                                                               // 19
      Meteor._debug("{{#" + name + "}} is now unnecessary and deprecated.");                            // 20
      return this.__content;                                                                            // 21
    }                                                                                                   // 22
  });                                                                                                   // 23
};                                                                                                      // 24
                                                                                                        // 25
// This map is searched first when you do something like `{{#foo}}` in                                  // 26
// a template.                                                                                          // 27
var builtInComponents = {                                                                               // 28
  // for past compat:                                                                                   // 29
  'constant': noOpComponent("constant"),                                                                // 30
  'isolate': noOpComponent("isolate")                                                                   // 31
};                                                                                                      // 32
                                                                                                        // 33
_extend(UI.Component, {                                                                                 // 34
  // Options:                                                                                           // 35
  //                                                                                                    // 36
  // - template {Boolean} If true, look at the list of templates after                                  // 37
  //   helpers and before data context.                                                                 // 38
  lookup: function (id, opts) {                                                                         // 39
    var self = this;                                                                                    // 40
    var template = opts && opts.template;                                                               // 41
    var result;                                                                                         // 42
    var comp;                                                                                           // 43
                                                                                                        // 44
    if (!id)                                                                                            // 45
      throw new Error("must pass id to lookup");                                                        // 46
                                                                                                        // 47
    if (/^\./.test(id)) {                                                                               // 48
      // starts with a dot. must be a series of dots which maps to an                                   // 49
      // ancestor of the appropriate height.                                                            // 50
      if (!/^(\.)+$/.test(id)) {                                                                        // 51
        throw new Error("id starting with dot must be a series of dots");                               // 52
      }                                                                                                 // 53
                                                                                                        // 54
      var compWithData = findComponentWithProp('data', self);                                           // 55
      for (var i = 1; i < id.length; i++) {                                                             // 56
        compWithData = compWithData ? findComponentWithProp('data', compWithData.parent) : null;        // 57
      }                                                                                                 // 58
                                                                                                        // 59
      return (compWithData ? compWithData.data : null);                                                 // 60
                                                                                                        // 61
    } else if ((comp = findComponentWithHelper(id, self))) {                                            // 62
      // found a property or method of a component                                                      // 63
      // (`self` or one of its ancestors)                                                               // 64
      var result = comp[id];                                                                            // 65
                                                                                                        // 66
    } else if (_.has(builtInComponents, id)) {                                                          // 67
      return builtInComponents[id];                                                                     // 68
                                                                                                        // 69
    // Code to search the global namespace for capitalized names                                        // 70
    // like component classes, `Template`, `StringUtils.foo`,                                           // 71
    // etc.                                                                                             // 72
    //                                                                                                  // 73
    // } else if (/^[A-Z]/.test(id) && (id in global)) {                                                // 74
    //   // Only look for a global identifier if `id` is                                                // 75
    //   // capitalized.  This avoids having `{{name}}` mean                                            // 76
    //   // `window.name`.                                                                              // 77
    //   result = global[id];                                                                           // 78
    //   return function (/*arguments*/) {                                                              // 79
    //     var data = getComponentData(self);                                                           // 80
    //     if (typeof result === 'function')                                                            // 81
    //       return result.apply(data, arguments);                                                      // 82
    //     return result;                                                                               // 83
    //   };                                                                                             // 84
    } else if (template && _.has(Template, id)) {                                                       // 85
      return Template[id];                                                                              // 86
                                                                                                        // 87
    } else if ((result = UI._globalHelper(id))) {                                                       // 88
                                                                                                        // 89
    } else {                                                                                            // 90
      // Resolve id `foo` as `data.foo` (with a "soft dot").                                            // 91
      return function (/*arguments*/) {                                                                 // 92
        var data = getComponentData(self);                                                              // 93
        if (template && !(data && _.has(data, id)))                                                     // 94
          throw new Error("Can't find template, helper or data context key: " + id);                    // 95
        if (! data)                                                                                     // 96
          return data;                                                                                  // 97
        var result = data[id];                                                                          // 98
        if (typeof result === 'function')                                                               // 99
          return result.apply(data, arguments);                                                         // 100
        return result;                                                                                  // 101
      };                                                                                                // 102
    }                                                                                                   // 103
                                                                                                        // 104
    if (typeof result === 'function' && ! result._isEmboxedConstant) {                                  // 105
      // Wrap the function `result`, binding `this` to `getComponentData(self)`.                        // 106
      // This creates a dependency when the result function is called.                                  // 107
      // Don't do this if the function is really just an emboxed constant.                              // 108
      return function (/*arguments*/) {                                                                 // 109
        var data = getComponentData(self);                                                              // 110
        return result.apply(data === null ? {} : data, arguments);                                      // 111
      };                                                                                                // 112
    } else {                                                                                            // 113
      return result;                                                                                    // 114
    };                                                                                                  // 115
  },                                                                                                    // 116
  lookupTemplate: function (id) {                                                                       // 117
    return this.lookup(id, {template: true});                                                           // 118
  },                                                                                                    // 119
  get: function (id) {                                                                                  // 120
    // support `this.get()` to get the data context.                                                    // 121
    if (id === undefined)                                                                               // 122
      id = ".";                                                                                         // 123
                                                                                                        // 124
    var result = this.lookup(id);                                                                       // 125
    return (typeof result === 'function' ? result() : result);                                          // 126
  },                                                                                                    // 127
  set: function (id, value) {                                                                           // 128
    var comp = findComponentWithProp(id, this);                                                         // 129
    if (! comp || ! comp[id])                                                                           // 130
      throw new Error("Can't find field: " + id);                                                       // 131
    if (typeof comp[id] !== 'function')                                                                 // 132
      throw new Error("Not a settable field: " + id);                                                   // 133
    comp[id](value);                                                                                    // 134
  }                                                                                                     // 135
});                                                                                                     // 136
                                                                                                        // 137
//////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

//////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                      //
// packages/ui/handlebars_backcompat.js                                                                 //
//                                                                                                      //
//////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                        //
// XXX this file no longer makes sense in isolation.  take it apart as                                  // 1
// part file reorg on the 'ui' package                                                                  // 2
var globalHelpers = {};                                                                                 // 3
                                                                                                        // 4
UI.registerHelper = function (name, func) {                                                             // 5
  globalHelpers[name] = func;                                                                           // 6
};                                                                                                      // 7
                                                                                                        // 8
UI._globalHelper = function (name) {                                                                    // 9
  return globalHelpers[name];                                                                           // 10
};                                                                                                      // 11
                                                                                                        // 12
Handlebars = {};                                                                                        // 13
Handlebars.registerHelper = UI.registerHelper;                                                          // 14
                                                                                                        // 15
// Utility to HTML-escape a string.                                                                     // 16
UI._escape = Handlebars._escape = (function() {                                                         // 17
  var escape_map = {                                                                                    // 18
    "<": "&lt;",                                                                                        // 19
    ">": "&gt;",                                                                                        // 20
    '"': "&quot;",                                                                                      // 21
    "'": "&#x27;",                                                                                      // 22
    "`": "&#x60;", /* IE allows backtick-delimited attributes?? */                                      // 23
    "&": "&amp;"                                                                                        // 24
  };                                                                                                    // 25
  var escape_one = function(c) {                                                                        // 26
    return escape_map[c];                                                                               // 27
  };                                                                                                    // 28
                                                                                                        // 29
  return function (x) {                                                                                 // 30
    return x.replace(/[&<>"'`]/g, escape_one);                                                          // 31
  };                                                                                                    // 32
})();                                                                                                   // 33
                                                                                                        // 34
// Return these from {{...}} helpers to achieve the same as returning                                   // 35
// strings from {{{...}}} helpers                                                                       // 36
Handlebars.SafeString = function(string) {                                                              // 37
  this.string = string;                                                                                 // 38
};                                                                                                      // 39
Handlebars.SafeString.prototype.toString = function() {                                                 // 40
  return this.string.toString();                                                                        // 41
};                                                                                                      // 42
                                                                                                        // 43
//////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);


/* Exports */
if (typeof Package === 'undefined') Package = {};
Package.ui = {
  UI: UI,
  Handlebars: Handlebars
};

})();

//# sourceMappingURL=a9e29b7374d49991c927b5161e76ef1f6e177c70.map
//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
//                                                                      //
// If you are using Chrome, open the Developer Tools and click the gear //
// icon in its lower right corner. In the General Settings panel, turn  //
// on 'Enable source maps'.                                             //
//                                                                      //
// If you are using Firefox 23, go to `about:config` and set the        //
// `devtools.debugger.source-maps-enabled` preference to true.          //
// (The preference should be on by default in Firefox 24; versions      //
// older than 23 do not support source maps.)                           //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

/* Package-scope variables */
var _, exports;

(function () {

///////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                       //
// packages/underscore/pre.js                                                                            //
//                                                                                                       //
///////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                         //
// Define an object named exports. This will cause underscore.js to put `_` as a                         // 1
// field on it, instead of in the global namespace.  See also post.js.                                   // 2
exports = {};                                                                                            // 3
                                                                                                         // 4
///////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

///////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                       //
// packages/underscore/underscore.js                                                                     //
//                                                                                                       //
///////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                         //
//     Underscore.js 1.5.2                                                                               // 1
//     http://underscorejs.org                                                                           // 2
//     (c) 2009-2013 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors                // 3
//     Underscore may be freely distributed under the MIT license.                                       // 4
                                                                                                         // 5
(function() {                                                                                            // 6
                                                                                                         // 7
  // Baseline setup                                                                                      // 8
  // --------------                                                                                      // 9
                                                                                                         // 10
  // Establish the root object, `window` in the browser, or `exports` on the server.                     // 11
  var root = this;                                                                                       // 12
                                                                                                         // 13
  // Save the previous value of the `_` variable.                                                        // 14
  var previousUnderscore = root._;                                                                       // 15
                                                                                                         // 16
  // Establish the object that gets returned to break out of a loop iteration.                           // 17
  var breaker = {};                                                                                      // 18
                                                                                                         // 19
  // Save bytes in the minified (but not gzipped) version:                                               // 20
  var ArrayProto = Array.prototype, ObjProto = Object.prototype, FuncProto = Function.prototype;         // 21
                                                                                                         // 22
  // Create quick reference variables for speed access to core prototypes.                               // 23
  var                                                                                                    // 24
    push             = ArrayProto.push,                                                                  // 25
    slice            = ArrayProto.slice,                                                                 // 26
    concat           = ArrayProto.concat,                                                                // 27
    toString         = ObjProto.toString,                                                                // 28
    hasOwnProperty   = ObjProto.hasOwnProperty;                                                          // 29
                                                                                                         // 30
  // All **ECMAScript 5** native function implementations that we hope to use                            // 31
  // are declared here.                                                                                  // 32
  var                                                                                                    // 33
    nativeForEach      = ArrayProto.forEach,                                                             // 34
    nativeMap          = ArrayProto.map,                                                                 // 35
    nativeReduce       = ArrayProto.reduce,                                                              // 36
    nativeReduceRight  = ArrayProto.reduceRight,                                                         // 37
    nativeFilter       = ArrayProto.filter,                                                              // 38
    nativeEvery        = ArrayProto.every,                                                               // 39
    nativeSome         = ArrayProto.some,                                                                // 40
    nativeIndexOf      = ArrayProto.indexOf,                                                             // 41
    nativeLastIndexOf  = ArrayProto.lastIndexOf,                                                         // 42
    nativeIsArray      = Array.isArray,                                                                  // 43
    nativeKeys         = Object.keys,                                                                    // 44
    nativeBind         = FuncProto.bind;                                                                 // 45
                                                                                                         // 46
  // Create a safe reference to the Underscore object for use below.                                     // 47
  var _ = function(obj) {                                                                                // 48
    if (obj instanceof _) return obj;                                                                    // 49
    if (!(this instanceof _)) return new _(obj);                                                         // 50
    this._wrapped = obj;                                                                                 // 51
  };                                                                                                     // 52
                                                                                                         // 53
  // Export the Underscore object for **Node.js**, with                                                  // 54
  // backwards-compatibility for the old `require()` API. If we're in                                    // 55
  // the browser, add `_` as a global object via a string identifier,                                    // 56
  // for Closure Compiler "advanced" mode.                                                               // 57
  if (typeof exports !== 'undefined') {                                                                  // 58
    if (typeof module !== 'undefined' && module.exports) {                                               // 59
      exports = module.exports = _;                                                                      // 60
    }                                                                                                    // 61
    exports._ = _;                                                                                       // 62
  } else {                                                                                               // 63
    root._ = _;                                                                                          // 64
  }                                                                                                      // 65
                                                                                                         // 66
  // Current version.                                                                                    // 67
  _.VERSION = '1.5.2';                                                                                   // 68
                                                                                                         // 69
  // Collection Functions                                                                                // 70
  // --------------------                                                                                // 71
                                                                                                         // 72
  // METEOR CHANGE: Define _isArguments instead of depending on                                          // 73
  // _.isArguments which is defined using each. In looksLikeArray                                        // 74
  // (which each depends on), we then use _isArguments instead of                                        // 75
  // _.isArguments.                                                                                      // 76
  var _isArguments = function (obj) {                                                                    // 77
    return toString.call(obj) === '[object Arguments]';                                                  // 78
  };                                                                                                     // 79
  // Define a fallback version of the method in browsers (ahem, IE), where                               // 80
  // there isn't any inspectable "Arguments" type.                                                       // 81
  if (!_isArguments(arguments)) {                                                                        // 82
    _isArguments = function (obj) {                                                                      // 83
      return !!(obj && hasOwnProperty.call(obj, 'callee') && typeof obj.callee === 'function');          // 84
    };                                                                                                   // 85
  }                                                                                                      // 86
                                                                                                         // 87
  // METEOR CHANGE: _.each({length: 5}) should be treated like an object, not an                         // 88
  // array. This looksLikeArray function is introduced by Meteor, and replaces                           // 89
  // all instances of `obj.length === +obj.length`.                                                      // 90
  // https://github.com/meteor/meteor/issues/594                                                         // 91
  // https://github.com/jashkenas/underscore/issues/770                                                  // 92
  var looksLikeArray = function (obj) {                                                                  // 93
    return (obj.length === +obj.length                                                                   // 94
            // _.isArguments not yet necessarily defined here                                            // 95
            && (_isArguments(obj) || obj.constructor !== Object));                                       // 96
  };                                                                                                     // 97
                                                                                                         // 98
  // The cornerstone, an `each` implementation, aka `forEach`.                                           // 99
  // Handles objects with the built-in `forEach`, arrays, and raw objects.                               // 100
  // Delegates to **ECMAScript 5**'s native `forEach` if available.                                      // 101
  var each = _.each = _.forEach = function(obj, iterator, context) {                                     // 102
    if (obj == null) return;                                                                             // 103
    if (nativeForEach && obj.forEach === nativeForEach) {                                                // 104
      obj.forEach(iterator, context);                                                                    // 105
    } else if (looksLikeArray(obj)) {                                                                    // 106
      for (var i = 0, length = obj.length; i < length; i++) {                                            // 107
        if (iterator.call(context, obj[i], i, obj) === breaker) return;                                  // 108
      }                                                                                                  // 109
    } else {                                                                                             // 110
      var keys = _.keys(obj);                                                                            // 111
      for (var i = 0, length = keys.length; i < length; i++) {                                           // 112
        if (iterator.call(context, obj[keys[i]], keys[i], obj) === breaker) return;                      // 113
      }                                                                                                  // 114
    }                                                                                                    // 115
  };                                                                                                     // 116
                                                                                                         // 117
  // Return the results of applying the iterator to each element.                                        // 118
  // Delegates to **ECMAScript 5**'s native `map` if available.                                          // 119
  _.map = _.collect = function(obj, iterator, context) {                                                 // 120
    var results = [];                                                                                    // 121
    if (obj == null) return results;                                                                     // 122
    if (nativeMap && obj.map === nativeMap) return obj.map(iterator, context);                           // 123
    each(obj, function(value, index, list) {                                                             // 124
      results.push(iterator.call(context, value, index, list));                                          // 125
    });                                                                                                  // 126
    return results;                                                                                      // 127
  };                                                                                                     // 128
                                                                                                         // 129
  var reduceError = 'Reduce of empty array with no initial value';                                       // 130
                                                                                                         // 131
  // **Reduce** builds up a single result from a list of values, aka `inject`,                           // 132
  // or `foldl`. Delegates to **ECMAScript 5**'s native `reduce` if available.                           // 133
  _.reduce = _.foldl = _.inject = function(obj, iterator, memo, context) {                               // 134
    var initial = arguments.length > 2;                                                                  // 135
    if (obj == null) obj = [];                                                                           // 136
    if (nativeReduce && obj.reduce === nativeReduce) {                                                   // 137
      if (context) iterator = _.bind(iterator, context);                                                 // 138
      return initial ? obj.reduce(iterator, memo) : obj.reduce(iterator);                                // 139
    }                                                                                                    // 140
    each(obj, function(value, index, list) {                                                             // 141
      if (!initial) {                                                                                    // 142
        memo = value;                                                                                    // 143
        initial = true;                                                                                  // 144
      } else {                                                                                           // 145
        memo = iterator.call(context, memo, value, index, list);                                         // 146
      }                                                                                                  // 147
    });                                                                                                  // 148
    if (!initial) throw new TypeError(reduceError);                                                      // 149
    return memo;                                                                                         // 150
  };                                                                                                     // 151
                                                                                                         // 152
  // The right-associative version of reduce, also known as `foldr`.                                     // 153
  // Delegates to **ECMAScript 5**'s native `reduceRight` if available.                                  // 154
  _.reduceRight = _.foldr = function(obj, iterator, memo, context) {                                     // 155
    var initial = arguments.length > 2;                                                                  // 156
    if (obj == null) obj = [];                                                                           // 157
    if (nativeReduceRight && obj.reduceRight === nativeReduceRight) {                                    // 158
      if (context) iterator = _.bind(iterator, context);                                                 // 159
      return initial ? obj.reduceRight(iterator, memo) : obj.reduceRight(iterator);                      // 160
    }                                                                                                    // 161
    var length = obj.length;                                                                             // 162
    if (!looksLikeArray(obj)) {                                                                          // 163
      var keys = _.keys(obj);                                                                            // 164
      length = keys.length;                                                                              // 165
    }                                                                                                    // 166
    each(obj, function(value, index, list) {                                                             // 167
      index = keys ? keys[--length] : --length;                                                          // 168
      if (!initial) {                                                                                    // 169
        memo = obj[index];                                                                               // 170
        initial = true;                                                                                  // 171
      } else {                                                                                           // 172
        memo = iterator.call(context, memo, obj[index], index, list);                                    // 173
      }                                                                                                  // 174
    });                                                                                                  // 175
    if (!initial) throw new TypeError(reduceError);                                                      // 176
    return memo;                                                                                         // 177
  };                                                                                                     // 178
                                                                                                         // 179
  // Return the first value which passes a truth test. Aliased as `detect`.                              // 180
  _.find = _.detect = function(obj, iterator, context) {                                                 // 181
    var result;                                                                                          // 182
    any(obj, function(value, index, list) {                                                              // 183
      if (iterator.call(context, value, index, list)) {                                                  // 184
        result = value;                                                                                  // 185
        return true;                                                                                     // 186
      }                                                                                                  // 187
    });                                                                                                  // 188
    return result;                                                                                       // 189
  };                                                                                                     // 190
                                                                                                         // 191
  // Return all the elements that pass a truth test.                                                     // 192
  // Delegates to **ECMAScript 5**'s native `filter` if available.                                       // 193
  // Aliased as `select`.                                                                                // 194
  _.filter = _.select = function(obj, iterator, context) {                                               // 195
    var results = [];                                                                                    // 196
    if (obj == null) return results;                                                                     // 197
    if (nativeFilter && obj.filter === nativeFilter) return obj.filter(iterator, context);               // 198
    each(obj, function(value, index, list) {                                                             // 199
      if (iterator.call(context, value, index, list)) results.push(value);                               // 200
    });                                                                                                  // 201
    return results;                                                                                      // 202
  };                                                                                                     // 203
                                                                                                         // 204
  // Return all the elements for which a truth test fails.                                               // 205
  _.reject = function(obj, iterator, context) {                                                          // 206
    return _.filter(obj, function(value, index, list) {                                                  // 207
      return !iterator.call(context, value, index, list);                                                // 208
    }, context);                                                                                         // 209
  };                                                                                                     // 210
                                                                                                         // 211
  // Determine whether all of the elements match a truth test.                                           // 212
  // Delegates to **ECMAScript 5**'s native `every` if available.                                        // 213
  // Aliased as `all`.                                                                                   // 214
  _.every = _.all = function(obj, iterator, context) {                                                   // 215
    iterator || (iterator = _.identity);                                                                 // 216
    var result = true;                                                                                   // 217
    if (obj == null) return result;                                                                      // 218
    if (nativeEvery && obj.every === nativeEvery) return obj.every(iterator, context);                   // 219
    each(obj, function(value, index, list) {                                                             // 220
      if (!(result = result && iterator.call(context, value, index, list))) return breaker;              // 221
    });                                                                                                  // 222
    return !!result;                                                                                     // 223
  };                                                                                                     // 224
                                                                                                         // 225
  // Determine if at least one element in the object matches a truth test.                               // 226
  // Delegates to **ECMAScript 5**'s native `some` if available.                                         // 227
  // Aliased as `any`.                                                                                   // 228
  var any = _.some = _.any = function(obj, iterator, context) {                                          // 229
    iterator || (iterator = _.identity);                                                                 // 230
    var result = false;                                                                                  // 231
    if (obj == null) return result;                                                                      // 232
    if (nativeSome && obj.some === nativeSome) return obj.some(iterator, context);                       // 233
    each(obj, function(value, index, list) {                                                             // 234
      if (result || (result = iterator.call(context, value, index, list))) return breaker;               // 235
    });                                                                                                  // 236
    return !!result;                                                                                     // 237
  };                                                                                                     // 238
                                                                                                         // 239
  // Determine if the array or object contains a given value (using `===`).                              // 240
  // Aliased as `include`.                                                                               // 241
  _.contains = _.include = function(obj, target) {                                                       // 242
    if (obj == null) return false;                                                                       // 243
    if (nativeIndexOf && obj.indexOf === nativeIndexOf) return obj.indexOf(target) != -1;                // 244
    return any(obj, function(value) {                                                                    // 245
      return value === target;                                                                           // 246
    });                                                                                                  // 247
  };                                                                                                     // 248
                                                                                                         // 249
  // Invoke a method (with arguments) on every item in a collection.                                     // 250
  _.invoke = function(obj, method) {                                                                     // 251
    var args = slice.call(arguments, 2);                                                                 // 252
    var isFunc = _.isFunction(method);                                                                   // 253
    return _.map(obj, function(value) {                                                                  // 254
      return (isFunc ? method : value[method]).apply(value, args);                                       // 255
    });                                                                                                  // 256
  };                                                                                                     // 257
                                                                                                         // 258
  // Convenience version of a common use case of `map`: fetching a property.                             // 259
  _.pluck = function(obj, key) {                                                                         // 260
    return _.map(obj, function(value){ return value[key]; });                                            // 261
  };                                                                                                     // 262
                                                                                                         // 263
  // Convenience version of a common use case of `filter`: selecting only objects                        // 264
  // containing specific `key:value` pairs.                                                              // 265
  _.where = function(obj, attrs, first) {                                                                // 266
    if (_.isEmpty(attrs)) return first ? void 0 : [];                                                    // 267
    return _[first ? 'find' : 'filter'](obj, function(value) {                                           // 268
      for (var key in attrs) {                                                                           // 269
        if (attrs[key] !== value[key]) return false;                                                     // 270
      }                                                                                                  // 271
      return true;                                                                                       // 272
    });                                                                                                  // 273
  };                                                                                                     // 274
                                                                                                         // 275
  // Convenience version of a common use case of `find`: getting the first object                        // 276
  // containing specific `key:value` pairs.                                                              // 277
  _.findWhere = function(obj, attrs) {                                                                   // 278
    return _.where(obj, attrs, true);                                                                    // 279
  };                                                                                                     // 280
                                                                                                         // 281
  // Return the maximum element or (element-based computation).                                          // 282
  // Can't optimize arrays of integers longer than 65,535 elements.                                      // 283
  // See [WebKit Bug 80797](https://bugs.webkit.org/show_bug.cgi?id=80797)                               // 284
  _.max = function(obj, iterator, context) {                                                             // 285
    if (!iterator && _.isArray(obj) && obj[0] === +obj[0] && obj.length < 65535) {                       // 286
      return Math.max.apply(Math, obj);                                                                  // 287
    }                                                                                                    // 288
    if (!iterator && _.isEmpty(obj)) return -Infinity;                                                   // 289
    var result = {computed : -Infinity, value: -Infinity};                                               // 290
    each(obj, function(value, index, list) {                                                             // 291
      var computed = iterator ? iterator.call(context, value, index, list) : value;                      // 292
      computed > result.computed && (result = {value : value, computed : computed});                     // 293
    });                                                                                                  // 294
    return result.value;                                                                                 // 295
  };                                                                                                     // 296
                                                                                                         // 297
  // Return the minimum element (or element-based computation).                                          // 298
  _.min = function(obj, iterator, context) {                                                             // 299
    if (!iterator && _.isArray(obj) && obj[0] === +obj[0] && obj.length < 65535) {                       // 300
      return Math.min.apply(Math, obj);                                                                  // 301
    }                                                                                                    // 302
    if (!iterator && _.isEmpty(obj)) return Infinity;                                                    // 303
    var result = {computed : Infinity, value: Infinity};                                                 // 304
    each(obj, function(value, index, list) {                                                             // 305
      var computed = iterator ? iterator.call(context, value, index, list) : value;                      // 306
      computed < result.computed && (result = {value : value, computed : computed});                     // 307
    });                                                                                                  // 308
    return result.value;                                                                                 // 309
  };                                                                                                     // 310
                                                                                                         // 311
  // Shuffle an array, using the modern version of the                                                   // 312
  // [Fisher-Yates shuffle](http://en.wikipedia.org/wiki/Fisher–Yates_shuffle).                          // 313
  _.shuffle = function(obj) {                                                                            // 314
    var rand;                                                                                            // 315
    var index = 0;                                                                                       // 316
    var shuffled = [];                                                                                   // 317
    each(obj, function(value) {                                                                          // 318
      rand = _.random(index++);                                                                          // 319
      shuffled[index - 1] = shuffled[rand];                                                              // 320
      shuffled[rand] = value;                                                                            // 321
    });                                                                                                  // 322
    return shuffled;                                                                                     // 323
  };                                                                                                     // 324
                                                                                                         // 325
  // Sample **n** random values from an array.                                                           // 326
  // If **n** is not specified, returns a single random element from the array.                          // 327
  // The internal `guard` argument allows it to work with `map`.                                         // 328
  _.sample = function(obj, n, guard) {                                                                   // 329
    if (arguments.length < 2 || guard) {                                                                 // 330
      return obj[_.random(obj.length - 1)];                                                              // 331
    }                                                                                                    // 332
    return _.shuffle(obj).slice(0, Math.max(0, n));                                                      // 333
  };                                                                                                     // 334
                                                                                                         // 335
  // An internal function to generate lookup iterators.                                                  // 336
  var lookupIterator = function(value) {                                                                 // 337
    return _.isFunction(value) ? value : function(obj){ return obj[value]; };                            // 338
  };                                                                                                     // 339
                                                                                                         // 340
  // Sort the object's values by a criterion produced by an iterator.                                    // 341
  _.sortBy = function(obj, value, context) {                                                             // 342
    var iterator = lookupIterator(value);                                                                // 343
    return _.pluck(_.map(obj, function(value, index, list) {                                             // 344
      return {                                                                                           // 345
        value: value,                                                                                    // 346
        index: index,                                                                                    // 347
        criteria: iterator.call(context, value, index, list)                                             // 348
      };                                                                                                 // 349
    }).sort(function(left, right) {                                                                      // 350
      var a = left.criteria;                                                                             // 351
      var b = right.criteria;                                                                            // 352
      if (a !== b) {                                                                                     // 353
        if (a > b || a === void 0) return 1;                                                             // 354
        if (a < b || b === void 0) return -1;                                                            // 355
      }                                                                                                  // 356
      return left.index - right.index;                                                                   // 357
    }), 'value');                                                                                        // 358
  };                                                                                                     // 359
                                                                                                         // 360
  // An internal function used for aggregate "group by" operations.                                      // 361
  var group = function(behavior) {                                                                       // 362
    return function(obj, value, context) {                                                               // 363
      var result = {};                                                                                   // 364
      var iterator = value == null ? _.identity : lookupIterator(value);                                 // 365
      each(obj, function(value, index) {                                                                 // 366
        var key = iterator.call(context, value, index, obj);                                             // 367
        behavior(result, key, value);                                                                    // 368
      });                                                                                                // 369
      return result;                                                                                     // 370
    };                                                                                                   // 371
  };                                                                                                     // 372
                                                                                                         // 373
  // Groups the object's values by a criterion. Pass either a string attribute                           // 374
  // to group by, or a function that returns the criterion.                                              // 375
  _.groupBy = group(function(result, key, value) {                                                       // 376
    (_.has(result, key) ? result[key] : (result[key] = [])).push(value);                                 // 377
  });                                                                                                    // 378
                                                                                                         // 379
  // Indexes the object's values by a criterion, similar to `groupBy`, but for                           // 380
  // when you know that your index values will be unique.                                                // 381
  _.indexBy = group(function(result, key, value) {                                                       // 382
    result[key] = value;                                                                                 // 383
  });                                                                                                    // 384
                                                                                                         // 385
  // Counts instances of an object that group by a certain criterion. Pass                               // 386
  // either a string attribute to count by, or a function that returns the                               // 387
  // criterion.                                                                                          // 388
  _.countBy = group(function(result, key) {                                                              // 389
    _.has(result, key) ? result[key]++ : result[key] = 1;                                                // 390
  });                                                                                                    // 391
                                                                                                         // 392
  // Use a comparator function to figure out the smallest index at which                                 // 393
  // an object should be inserted so as to maintain order. Uses binary search.                           // 394
  _.sortedIndex = function(array, obj, iterator, context) {                                              // 395
    iterator = iterator == null ? _.identity : lookupIterator(iterator);                                 // 396
    var value = iterator.call(context, obj);                                                             // 397
    var low = 0, high = array.length;                                                                    // 398
    while (low < high) {                                                                                 // 399
      var mid = (low + high) >>> 1;                                                                      // 400
      iterator.call(context, array[mid]) < value ? low = mid + 1 : high = mid;                           // 401
    }                                                                                                    // 402
    return low;                                                                                          // 403
  };                                                                                                     // 404
                                                                                                         // 405
  // Safely create a real, live array from anything iterable.                                            // 406
  _.toArray = function(obj) {                                                                            // 407
    if (!obj) return [];                                                                                 // 408
    if (_.isArray(obj)) return slice.call(obj);                                                          // 409
    if (looksLikeArray(obj)) return _.map(obj, _.identity);                                              // 410
    return _.values(obj);                                                                                // 411
  };                                                                                                     // 412
                                                                                                         // 413
  // Return the number of elements in an object.                                                         // 414
  _.size = function(obj) {                                                                               // 415
    if (obj == null) return 0;                                                                           // 416
    return (looksLikeArray(obj)) ? obj.length : _.keys(obj).length;                                      // 417
  };                                                                                                     // 418
                                                                                                         // 419
  // Array Functions                                                                                     // 420
  // ---------------                                                                                     // 421
                                                                                                         // 422
  // Get the first element of an array. Passing **n** will return the first N                            // 423
  // values in the array. Aliased as `head` and `take`. The **guard** check                              // 424
  // allows it to work with `_.map`.                                                                     // 425
  _.first = _.head = _.take = function(array, n, guard) {                                                // 426
    if (array == null) return void 0;                                                                    // 427
    return (n == null) || guard ? array[0] : slice.call(array, 0, n);                                    // 428
  };                                                                                                     // 429
                                                                                                         // 430
  // Returns everything but the last entry of the array. Especially useful on                            // 431
  // the arguments object. Passing **n** will return all the values in                                   // 432
  // the array, excluding the last N. The **guard** check allows it to work with                         // 433
  // `_.map`.                                                                                            // 434
  _.initial = function(array, n, guard) {                                                                // 435
    return slice.call(array, 0, array.length - ((n == null) || guard ? 1 : n));                          // 436
  };                                                                                                     // 437
                                                                                                         // 438
  // Get the last element of an array. Passing **n** will return the last N                              // 439
  // values in the array. The **guard** check allows it to work with `_.map`.                            // 440
  _.last = function(array, n, guard) {                                                                   // 441
    if (array == null) return void 0;                                                                    // 442
    if ((n == null) || guard) {                                                                          // 443
      return array[array.length - 1];                                                                    // 444
    } else {                                                                                             // 445
      return slice.call(array, Math.max(array.length - n, 0));                                           // 446
    }                                                                                                    // 447
  };                                                                                                     // 448
                                                                                                         // 449
  // Returns everything but the first entry of the array. Aliased as `tail` and `drop`.                  // 450
  // Especially useful on the arguments object. Passing an **n** will return                             // 451
  // the rest N values in the array. The **guard**                                                       // 452
  // check allows it to work with `_.map`.                                                               // 453
  _.rest = _.tail = _.drop = function(array, n, guard) {                                                 // 454
    return slice.call(array, (n == null) || guard ? 1 : n);                                              // 455
  };                                                                                                     // 456
                                                                                                         // 457
  // Trim out all falsy values from an array.                                                            // 458
  _.compact = function(array) {                                                                          // 459
    return _.filter(array, _.identity);                                                                  // 460
  };                                                                                                     // 461
                                                                                                         // 462
  // Internal implementation of a recursive `flatten` function.                                          // 463
  var flatten = function(input, shallow, output) {                                                       // 464
    if (shallow && _.every(input, _.isArray)) {                                                          // 465
      return concat.apply(output, input);                                                                // 466
    }                                                                                                    // 467
    each(input, function(value) {                                                                        // 468
      if (_.isArray(value) || _.isArguments(value)) {                                                    // 469
        shallow ? push.apply(output, value) : flatten(value, shallow, output);                           // 470
      } else {                                                                                           // 471
        output.push(value);                                                                              // 472
      }                                                                                                  // 473
    });                                                                                                  // 474
    return output;                                                                                       // 475
  };                                                                                                     // 476
                                                                                                         // 477
  // Flatten out an array, either recursively (by default), or just one level.                           // 478
  _.flatten = function(array, shallow) {                                                                 // 479
    return flatten(array, shallow, []);                                                                  // 480
  };                                                                                                     // 481
                                                                                                         // 482
  // Return a version of the array that does not contain the specified value(s).                         // 483
  _.without = function(array) {                                                                          // 484
    return _.difference(array, slice.call(arguments, 1));                                                // 485
  };                                                                                                     // 486
                                                                                                         // 487
  // Produce a duplicate-free version of the array. If the array has already                             // 488
  // been sorted, you have the option of using a faster algorithm.                                       // 489
  // Aliased as `unique`.                                                                                // 490
  _.uniq = _.unique = function(array, isSorted, iterator, context) {                                     // 491
    if (_.isFunction(isSorted)) {                                                                        // 492
      context = iterator;                                                                                // 493
      iterator = isSorted;                                                                               // 494
      isSorted = false;                                                                                  // 495
    }                                                                                                    // 496
    var initial = iterator ? _.map(array, iterator, context) : array;                                    // 497
    var results = [];                                                                                    // 498
    var seen = [];                                                                                       // 499
    each(initial, function(value, index) {                                                               // 500
      if (isSorted ? (!index || seen[seen.length - 1] !== value) : !_.contains(seen, value)) {           // 501
        seen.push(value);                                                                                // 502
        results.push(array[index]);                                                                      // 503
      }                                                                                                  // 504
    });                                                                                                  // 505
    return results;                                                                                      // 506
  };                                                                                                     // 507
                                                                                                         // 508
  // Produce an array that contains the union: each distinct element from all of                         // 509
  // the passed-in arrays.                                                                               // 510
  _.union = function() {                                                                                 // 511
    return _.uniq(_.flatten(arguments, true));                                                           // 512
  };                                                                                                     // 513
                                                                                                         // 514
  // Produce an array that contains every item shared between all the                                    // 515
  // passed-in arrays.                                                                                   // 516
  _.intersection = function(array) {                                                                     // 517
    var rest = slice.call(arguments, 1);                                                                 // 518
    return _.filter(_.uniq(array), function(item) {                                                      // 519
      return _.every(rest, function(other) {                                                             // 520
        return _.indexOf(other, item) >= 0;                                                              // 521
      });                                                                                                // 522
    });                                                                                                  // 523
  };                                                                                                     // 524
                                                                                                         // 525
  // Take the difference between one array and a number of other arrays.                                 // 526
  // Only the elements present in just the first array will remain.                                      // 527
  _.difference = function(array) {                                                                       // 528
    var rest = concat.apply(ArrayProto, slice.call(arguments, 1));                                       // 529
    return _.filter(array, function(value){ return !_.contains(rest, value); });                         // 530
  };                                                                                                     // 531
                                                                                                         // 532
  // Zip together multiple lists into a single array -- elements that share                              // 533
  // an index go together.                                                                               // 534
  _.zip = function() {                                                                                   // 535
    var length = _.max(_.pluck(arguments, "length").concat(0));                                          // 536
    var results = new Array(length);                                                                     // 537
    for (var i = 0; i < length; i++) {                                                                   // 538
      results[i] = _.pluck(arguments, '' + i);                                                           // 539
    }                                                                                                    // 540
    return results;                                                                                      // 541
  };                                                                                                     // 542
                                                                                                         // 543
  // Converts lists into objects. Pass either a single array of `[key, value]`                           // 544
  // pairs, or two parallel arrays of the same length -- one of keys, and one of                         // 545
  // the corresponding values.                                                                           // 546
  _.object = function(list, values) {                                                                    // 547
    if (list == null) return {};                                                                         // 548
    var result = {};                                                                                     // 549
    for (var i = 0, length = list.length; i < length; i++) {                                             // 550
      if (values) {                                                                                      // 551
        result[list[i]] = values[i];                                                                     // 552
      } else {                                                                                           // 553
        result[list[i][0]] = list[i][1];                                                                 // 554
      }                                                                                                  // 555
    }                                                                                                    // 556
    return result;                                                                                       // 557
  };                                                                                                     // 558
                                                                                                         // 559
  // If the browser doesn't supply us with indexOf (I'm looking at you, **MSIE**),                       // 560
  // we need this function. Return the position of the first occurrence of an                            // 561
  // item in an array, or -1 if the item is not included in the array.                                   // 562
  // Delegates to **ECMAScript 5**'s native `indexOf` if available.                                      // 563
  // If the array is large and already in sort order, pass `true`                                        // 564
  // for **isSorted** to use binary search.                                                              // 565
  _.indexOf = function(array, item, isSorted) {                                                          // 566
    if (array == null) return -1;                                                                        // 567
    var i = 0, length = array.length;                                                                    // 568
    if (isSorted) {                                                                                      // 569
      if (typeof isSorted == 'number') {                                                                 // 570
        i = (isSorted < 0 ? Math.max(0, length + isSorted) : isSorted);                                  // 571
      } else {                                                                                           // 572
        i = _.sortedIndex(array, item);                                                                  // 573
        return array[i] === item ? i : -1;                                                               // 574
      }                                                                                                  // 575
    }                                                                                                    // 576
    if (nativeIndexOf && array.indexOf === nativeIndexOf) return array.indexOf(item, isSorted);          // 577
    for (; i < length; i++) if (array[i] === item) return i;                                             // 578
    return -1;                                                                                           // 579
  };                                                                                                     // 580
                                                                                                         // 581
  // Delegates to **ECMAScript 5**'s native `lastIndexOf` if available.                                  // 582
  _.lastIndexOf = function(array, item, from) {                                                          // 583
    if (array == null) return -1;                                                                        // 584
    var hasIndex = from != null;                                                                         // 585
    if (nativeLastIndexOf && array.lastIndexOf === nativeLastIndexOf) {                                  // 586
      return hasIndex ? array.lastIndexOf(item, from) : array.lastIndexOf(item);                         // 587
    }                                                                                                    // 588
    var i = (hasIndex ? from : array.length);                                                            // 589
    while (i--) if (array[i] === item) return i;                                                         // 590
    return -1;                                                                                           // 591
  };                                                                                                     // 592
                                                                                                         // 593
  // Generate an integer Array containing an arithmetic progression. A port of                           // 594
  // the native Python `range()` function. See                                                           // 595
  // [the Python documentation](http://docs.python.org/library/functions.html#range).                    // 596
  _.range = function(start, stop, step) {                                                                // 597
    if (arguments.length <= 1) {                                                                         // 598
      stop = start || 0;                                                                                 // 599
      start = 0;                                                                                         // 600
    }                                                                                                    // 601
    step = arguments[2] || 1;                                                                            // 602
                                                                                                         // 603
    var length = Math.max(Math.ceil((stop - start) / step), 0);                                          // 604
    var idx = 0;                                                                                         // 605
    var range = new Array(length);                                                                       // 606
                                                                                                         // 607
    while(idx < length) {                                                                                // 608
      range[idx++] = start;                                                                              // 609
      start += step;                                                                                     // 610
    }                                                                                                    // 611
                                                                                                         // 612
    return range;                                                                                        // 613
  };                                                                                                     // 614
                                                                                                         // 615
  // Function (ahem) Functions                                                                           // 616
  // ------------------                                                                                  // 617
                                                                                                         // 618
  // Reusable constructor function for prototype setting.                                                // 619
  var ctor = function(){};                                                                               // 620
                                                                                                         // 621
  // Create a function bound to a given object (assigning `this`, and arguments,                         // 622
  // optionally). Delegates to **ECMAScript 5**'s native `Function.bind` if                              // 623
  // available.                                                                                          // 624
  _.bind = function(func, context) {                                                                     // 625
    var args, bound;                                                                                     // 626
    if (nativeBind && func.bind === nativeBind) return nativeBind.apply(func, slice.call(arguments, 1)); // 627
    if (!_.isFunction(func)) throw new TypeError;                                                        // 628
    args = slice.call(arguments, 2);                                                                     // 629
    return bound = function() {                                                                          // 630
      if (!(this instanceof bound)) return func.apply(context, args.concat(slice.call(arguments)));      // 631
      ctor.prototype = func.prototype;                                                                   // 632
      var self = new ctor;                                                                               // 633
      ctor.prototype = null;                                                                             // 634
      var result = func.apply(self, args.concat(slice.call(arguments)));                                 // 635
      if (Object(result) === result) return result;                                                      // 636
      return self;                                                                                       // 637
    };                                                                                                   // 638
  };                                                                                                     // 639
                                                                                                         // 640
  // Partially apply a function by creating a version that has had some of its                           // 641
  // arguments pre-filled, without changing its dynamic `this` context.                                  // 642
  _.partial = function(func) {                                                                           // 643
    var args = slice.call(arguments, 1);                                                                 // 644
    return function() {                                                                                  // 645
      return func.apply(this, args.concat(slice.call(arguments)));                                       // 646
    };                                                                                                   // 647
  };                                                                                                     // 648
                                                                                                         // 649
  // Bind all of an object's methods to that object. Useful for ensuring that                            // 650
  // all callbacks defined on an object belong to it.                                                    // 651
  _.bindAll = function(obj) {                                                                            // 652
    var funcs = slice.call(arguments, 1);                                                                // 653
    if (funcs.length === 0) throw new Error("bindAll must be passed function names");                    // 654
    each(funcs, function(f) { obj[f] = _.bind(obj[f], obj); });                                          // 655
    return obj;                                                                                          // 656
  };                                                                                                     // 657
                                                                                                         // 658
  // Memoize an expensive function by storing its results.                                               // 659
  _.memoize = function(func, hasher) {                                                                   // 660
    var memo = {};                                                                                       // 661
    hasher || (hasher = _.identity);                                                                     // 662
    return function() {                                                                                  // 663
      var key = hasher.apply(this, arguments);                                                           // 664
      return _.has(memo, key) ? memo[key] : (memo[key] = func.apply(this, arguments));                   // 665
    };                                                                                                   // 666
  };                                                                                                     // 667
                                                                                                         // 668
  // Delays a function for the given number of milliseconds, and then calls                              // 669
  // it with the arguments supplied.                                                                     // 670
  _.delay = function(func, wait) {                                                                       // 671
    var args = slice.call(arguments, 2);                                                                 // 672
    return setTimeout(function(){ return func.apply(null, args); }, wait);                               // 673
  };                                                                                                     // 674
                                                                                                         // 675
  // Defers a function, scheduling it to run after the current call stack has                            // 676
  // cleared.                                                                                            // 677
  _.defer = function(func) {                                                                             // 678
    return _.delay.apply(_, [func, 1].concat(slice.call(arguments, 1)));                                 // 679
  };                                                                                                     // 680
                                                                                                         // 681
  // Returns a function, that, when invoked, will only be triggered at most once                         // 682
  // during a given window of time. Normally, the throttled function will run                            // 683
  // as much as it can, without ever going more than once per `wait` duration;                           // 684
  // but if you'd like to disable the execution on the leading edge, pass                                // 685
  // `{leading: false}`. To disable execution on the trailing edge, ditto.                               // 686
  _.throttle = function(func, wait, options) {                                                           // 687
    var context, args, result;                                                                           // 688
    var timeout = null;                                                                                  // 689
    var previous = 0;                                                                                    // 690
    options || (options = {});                                                                           // 691
    var later = function() {                                                                             // 692
      previous = options.leading === false ? 0 : new Date;                                               // 693
      timeout = null;                                                                                    // 694
      result = func.apply(context, args);                                                                // 695
    };                                                                                                   // 696
    return function() {                                                                                  // 697
      var now = new Date;                                                                                // 698
      if (!previous && options.leading === false) previous = now;                                        // 699
      var remaining = wait - (now - previous);                                                           // 700
      context = this;                                                                                    // 701
      args = arguments;                                                                                  // 702
      if (remaining <= 0) {                                                                              // 703
        clearTimeout(timeout);                                                                           // 704
        timeout = null;                                                                                  // 705
        previous = now;                                                                                  // 706
        result = func.apply(context, args);                                                              // 707
      } else if (!timeout && options.trailing !== false) {                                               // 708
        timeout = setTimeout(later, remaining);                                                          // 709
      }                                                                                                  // 710
      return result;                                                                                     // 711
    };                                                                                                   // 712
  };                                                                                                     // 713
                                                                                                         // 714
  // Returns a function, that, as long as it continues to be invoked, will not                           // 715
  // be triggered. The function will be called after it stops being called for                           // 716
  // N milliseconds. If `immediate` is passed, trigger the function on the                               // 717
  // leading edge, instead of the trailing.                                                              // 718
  _.debounce = function(func, wait, immediate) {                                                         // 719
    var timeout, args, context, timestamp, result;                                                       // 720
    return function() {                                                                                  // 721
      context = this;                                                                                    // 722
      args = arguments;                                                                                  // 723
      timestamp = new Date();                                                                            // 724
      var later = function() {                                                                           // 725
        var last = (new Date()) - timestamp;                                                             // 726
        if (last < wait) {                                                                               // 727
          timeout = setTimeout(later, wait - last);                                                      // 728
        } else {                                                                                         // 729
          timeout = null;                                                                                // 730
          if (!immediate) result = func.apply(context, args);                                            // 731
        }                                                                                                // 732
      };                                                                                                 // 733
      var callNow = immediate && !timeout;                                                               // 734
      if (!timeout) {                                                                                    // 735
        timeout = setTimeout(later, wait);                                                               // 736
      }                                                                                                  // 737
      if (callNow) result = func.apply(context, args);                                                   // 738
      return result;                                                                                     // 739
    };                                                                                                   // 740
  };                                                                                                     // 741
                                                                                                         // 742
  // Returns a function that will be executed at most one time, no matter how                            // 743
  // often you call it. Useful for lazy initialization.                                                  // 744
  _.once = function(func) {                                                                              // 745
    var ran = false, memo;                                                                               // 746
    return function() {                                                                                  // 747
      if (ran) return memo;                                                                              // 748
      ran = true;                                                                                        // 749
      memo = func.apply(this, arguments);                                                                // 750
      func = null;                                                                                       // 751
      return memo;                                                                                       // 752
    };                                                                                                   // 753
  };                                                                                                     // 754
                                                                                                         // 755
  // Returns the first function passed as an argument to the second,                                     // 756
  // allowing you to adjust arguments, run code before and after, and                                    // 757
  // conditionally execute the original function.                                                        // 758
  _.wrap = function(func, wrapper) {                                                                     // 759
    return function() {                                                                                  // 760
      var args = [func];                                                                                 // 761
      push.apply(args, arguments);                                                                       // 762
      return wrapper.apply(this, args);                                                                  // 763
    };                                                                                                   // 764
  };                                                                                                     // 765
                                                                                                         // 766
  // Returns a function that is the composition of a list of functions, each                             // 767
  // consuming the return value of the function that follows.                                            // 768
  _.compose = function() {                                                                               // 769
    var funcs = arguments;                                                                               // 770
    return function() {                                                                                  // 771
      var args = arguments;                                                                              // 772
      for (var i = funcs.length - 1; i >= 0; i--) {                                                      // 773
        args = [funcs[i].apply(this, args)];                                                             // 774
      }                                                                                                  // 775
      return args[0];                                                                                    // 776
    };                                                                                                   // 777
  };                                                                                                     // 778
                                                                                                         // 779
  // Returns a function that will only be executed after being called N times.                           // 780
  _.after = function(times, func) {                                                                      // 781
    return function() {                                                                                  // 782
      if (--times < 1) {                                                                                 // 783
        return func.apply(this, arguments);                                                              // 784
      }                                                                                                  // 785
    };                                                                                                   // 786
  };                                                                                                     // 787
                                                                                                         // 788
  // Object Functions                                                                                    // 789
  // ----------------                                                                                    // 790
                                                                                                         // 791
  // Retrieve the names of an object's properties.                                                       // 792
  // Delegates to **ECMAScript 5**'s native `Object.keys`                                                // 793
  _.keys = nativeKeys || function(obj) {                                                                 // 794
    if (obj !== Object(obj)) throw new TypeError('Invalid object');                                      // 795
    var keys = [];                                                                                       // 796
    for (var key in obj) if (_.has(obj, key)) keys.push(key);                                            // 797
    return keys;                                                                                         // 798
  };                                                                                                     // 799
                                                                                                         // 800
  // Retrieve the values of an object's properties.                                                      // 801
  _.values = function(obj) {                                                                             // 802
    var keys = _.keys(obj);                                                                              // 803
    var length = keys.length;                                                                            // 804
    var values = new Array(length);                                                                      // 805
    for (var i = 0; i < length; i++) {                                                                   // 806
      values[i] = obj[keys[i]];                                                                          // 807
    }                                                                                                    // 808
    return values;                                                                                       // 809
  };                                                                                                     // 810
                                                                                                         // 811
  // Convert an object into a list of `[key, value]` pairs.                                              // 812
  _.pairs = function(obj) {                                                                              // 813
    var keys = _.keys(obj);                                                                              // 814
    var length = keys.length;                                                                            // 815
    var pairs = new Array(length);                                                                       // 816
    for (var i = 0; i < length; i++) {                                                                   // 817
      pairs[i] = [keys[i], obj[keys[i]]];                                                                // 818
    }                                                                                                    // 819
    return pairs;                                                                                        // 820
  };                                                                                                     // 821
                                                                                                         // 822
  // Invert the keys and values of an object. The values must be serializable.                           // 823
  _.invert = function(obj) {                                                                             // 824
    var result = {};                                                                                     // 825
    var keys = _.keys(obj);                                                                              // 826
    for (var i = 0, length = keys.length; i < length; i++) {                                             // 827
      result[obj[keys[i]]] = keys[i];                                                                    // 828
    }                                                                                                    // 829
    return result;                                                                                       // 830
  };                                                                                                     // 831
                                                                                                         // 832
  // Return a sorted list of the function names available on the object.                                 // 833
  // Aliased as `methods`                                                                                // 834
  _.functions = _.methods = function(obj) {                                                              // 835
    var names = [];                                                                                      // 836
    for (var key in obj) {                                                                               // 837
      if (_.isFunction(obj[key])) names.push(key);                                                       // 838
    }                                                                                                    // 839
    return names.sort();                                                                                 // 840
  };                                                                                                     // 841
                                                                                                         // 842
  // Extend a given object with all the properties in passed-in object(s).                               // 843
  _.extend = function(obj) {                                                                             // 844
    each(slice.call(arguments, 1), function(source) {                                                    // 845
      if (source) {                                                                                      // 846
        for (var prop in source) {                                                                       // 847
          obj[prop] = source[prop];                                                                      // 848
        }                                                                                                // 849
      }                                                                                                  // 850
    });                                                                                                  // 851
    return obj;                                                                                          // 852
  };                                                                                                     // 853
                                                                                                         // 854
  // Return a copy of the object only containing the whitelisted properties.                             // 855
  _.pick = function(obj) {                                                                               // 856
    var copy = {};                                                                                       // 857
    var keys = concat.apply(ArrayProto, slice.call(arguments, 1));                                       // 858
    each(keys, function(key) {                                                                           // 859
      if (key in obj) copy[key] = obj[key];                                                              // 860
    });                                                                                                  // 861
    return copy;                                                                                         // 862
  };                                                                                                     // 863
                                                                                                         // 864
   // Return a copy of the object without the blacklisted properties.                                    // 865
  _.omit = function(obj) {                                                                               // 866
    var copy = {};                                                                                       // 867
    var keys = concat.apply(ArrayProto, slice.call(arguments, 1));                                       // 868
    for (var key in obj) {                                                                               // 869
      if (!_.contains(keys, key)) copy[key] = obj[key];                                                  // 870
    }                                                                                                    // 871
    return copy;                                                                                         // 872
  };                                                                                                     // 873
                                                                                                         // 874
  // Fill in a given object with default properties.                                                     // 875
  _.defaults = function(obj) {                                                                           // 876
    each(slice.call(arguments, 1), function(source) {                                                    // 877
      if (source) {                                                                                      // 878
        for (var prop in source) {                                                                       // 879
          if (obj[prop] === void 0) obj[prop] = source[prop];                                            // 880
        }                                                                                                // 881
      }                                                                                                  // 882
    });                                                                                                  // 883
    return obj;                                                                                          // 884
  };                                                                                                     // 885
                                                                                                         // 886
  // Create a (shallow-cloned) duplicate of an object.                                                   // 887
  _.clone = function(obj) {                                                                              // 888
    if (!_.isObject(obj)) return obj;                                                                    // 889
    return _.isArray(obj) ? obj.slice() : _.extend({}, obj);                                             // 890
  };                                                                                                     // 891
                                                                                                         // 892
  // Invokes interceptor with the obj, and then returns obj.                                             // 893
  // The primary purpose of this method is to "tap into" a method chain, in                              // 894
  // order to perform operations on intermediate results within the chain.                               // 895
  _.tap = function(obj, interceptor) {                                                                   // 896
    interceptor(obj);                                                                                    // 897
    return obj;                                                                                          // 898
  };                                                                                                     // 899
                                                                                                         // 900
  // Internal recursive comparison function for `isEqual`.                                               // 901
  var eq = function(a, b, aStack, bStack) {                                                              // 902
    // Identical objects are equal. `0 === -0`, but they aren't identical.                               // 903
    // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).           // 904
    if (a === b) return a !== 0 || 1 / a == 1 / b;                                                       // 905
    // A strict comparison is necessary because `null == undefined`.                                     // 906
    if (a == null || b == null) return a === b;                                                          // 907
    // Unwrap any wrapped objects.                                                                       // 908
    if (a instanceof _) a = a._wrapped;                                                                  // 909
    if (b instanceof _) b = b._wrapped;                                                                  // 910
    // Compare `[[Class]]` names.                                                                        // 911
    var className = toString.call(a);                                                                    // 912
    if (className != toString.call(b)) return false;                                                     // 913
    switch (className) {                                                                                 // 914
      // Strings, numbers, dates, and booleans are compared by value.                                    // 915
      case '[object String]':                                                                            // 916
        // Primitives and their corresponding object wrappers are equivalent; thus, `"5"` is             // 917
        // equivalent to `new String("5")`.                                                              // 918
        return a == String(b);                                                                           // 919
      case '[object Number]':                                                                            // 920
        // `NaN`s are equivalent, but non-reflexive. An `egal` comparison is performed for               // 921
        // other numeric values.                                                                         // 922
        return a != +a ? b != +b : (a == 0 ? 1 / a == 1 / b : a == +b);                                  // 923
      case '[object Date]':                                                                              // 924
      case '[object Boolean]':                                                                           // 925
        // Coerce dates and booleans to numeric primitive values. Dates are compared by their            // 926
        // millisecond representations. Note that invalid dates with millisecond representations         // 927
        // of `NaN` are not equivalent.                                                                  // 928
        return +a == +b;                                                                                 // 929
      // RegExps are compared by their source patterns and flags.                                        // 930
      case '[object RegExp]':                                                                            // 931
        return a.source == b.source &&                                                                   // 932
               a.global == b.global &&                                                                   // 933
               a.multiline == b.multiline &&                                                             // 934
               a.ignoreCase == b.ignoreCase;                                                             // 935
    }                                                                                                    // 936
    if (typeof a != 'object' || typeof b != 'object') return false;                                      // 937
    // Assume equality for cyclic structures. The algorithm for detecting cyclic                         // 938
    // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.                       // 939
    var length = aStack.length;                                                                          // 940
    while (length--) {                                                                                   // 941
      // Linear search. Performance is inversely proportional to the number of                           // 942
      // unique nested structures.                                                                       // 943
      if (aStack[length] == a) return bStack[length] == b;                                               // 944
    }                                                                                                    // 945
    // Objects with different constructors are not equivalent, but `Object`s                             // 946
    // from different frames are.                                                                        // 947
    var aCtor = a.constructor, bCtor = b.constructor;                                                    // 948
    if (aCtor !== bCtor && !(_.isFunction(aCtor) && (aCtor instanceof aCtor) &&                          // 949
                             _.isFunction(bCtor) && (bCtor instanceof bCtor))) {                         // 950
      return false;                                                                                      // 951
    }                                                                                                    // 952
    // Add the first object to the stack of traversed objects.                                           // 953
    aStack.push(a);                                                                                      // 954
    bStack.push(b);                                                                                      // 955
    var size = 0, result = true;                                                                         // 956
    // Recursively compare objects and arrays.                                                           // 957
    if (className == '[object Array]') {                                                                 // 958
      // Compare array lengths to determine if a deep comparison is necessary.                           // 959
      size = a.length;                                                                                   // 960
      result = size == b.length;                                                                         // 961
      if (result) {                                                                                      // 962
        // Deep compare the contents, ignoring non-numeric properties.                                   // 963
        while (size--) {                                                                                 // 964
          if (!(result = eq(a[size], b[size], aStack, bStack))) break;                                   // 965
        }                                                                                                // 966
      }                                                                                                  // 967
    } else {                                                                                             // 968
      // Deep compare objects.                                                                           // 969
      for (var key in a) {                                                                               // 970
        if (_.has(a, key)) {                                                                             // 971
          // Count the expected number of properties.                                                    // 972
          size++;                                                                                        // 973
          // Deep compare each member.                                                                   // 974
          if (!(result = _.has(b, key) && eq(a[key], b[key], aStack, bStack))) break;                    // 975
        }                                                                                                // 976
      }                                                                                                  // 977
      // Ensure that both objects contain the same number of properties.                                 // 978
      if (result) {                                                                                      // 979
        for (key in b) {                                                                                 // 980
          if (_.has(b, key) && !(size--)) break;                                                         // 981
        }                                                                                                // 982
        result = !size;                                                                                  // 983
      }                                                                                                  // 984
    }                                                                                                    // 985
    // Remove the first object from the stack of traversed objects.                                      // 986
    aStack.pop();                                                                                        // 987
    bStack.pop();                                                                                        // 988
    return result;                                                                                       // 989
  };                                                                                                     // 990
                                                                                                         // 991
  // Perform a deep comparison to check if two objects are equal.                                        // 992
  _.isEqual = function(a, b) {                                                                           // 993
    return eq(a, b, [], []);                                                                             // 994
  };                                                                                                     // 995
                                                                                                         // 996
  // Is a given array, string, or object empty?                                                          // 997
  // An "empty" object has no enumerable own-properties.                                                 // 998
  _.isEmpty = function(obj) {                                                                            // 999
    if (obj == null) return true;                                                                        // 1000
    if (_.isArray(obj) || _.isString(obj)) return obj.length === 0;                                      // 1001
    for (var key in obj) if (_.has(obj, key)) return false;                                              // 1002
    return true;                                                                                         // 1003
  };                                                                                                     // 1004
                                                                                                         // 1005
  // Is a given value a DOM element?                                                                     // 1006
  _.isElement = function(obj) {                                                                          // 1007
    return !!(obj && obj.nodeType === 1);                                                                // 1008
  };                                                                                                     // 1009
                                                                                                         // 1010
  // Is a given value an array?                                                                          // 1011
  // Delegates to ECMA5's native Array.isArray                                                           // 1012
  _.isArray = nativeIsArray || function(obj) {                                                           // 1013
    return toString.call(obj) == '[object Array]';                                                       // 1014
  };                                                                                                     // 1015
                                                                                                         // 1016
  // Is a given variable an object?                                                                      // 1017
  _.isObject = function(obj) {                                                                           // 1018
    return obj === Object(obj);                                                                          // 1019
  };                                                                                                     // 1020
                                                                                                         // 1021
  // Add some isType methods: isArguments, isFunction, isString, isNumber, isDate, isRegExp.             // 1022
  each(['Arguments', 'Function', 'String', 'Number', 'Date', 'RegExp'], function(name) {                 // 1023
    _['is' + name] = function(obj) {                                                                     // 1024
      return toString.call(obj) == '[object ' + name + ']';                                              // 1025
    };                                                                                                   // 1026
  });                                                                                                    // 1027
                                                                                                         // 1028
  // Define a fallback version of the method in browsers (ahem, IE), where                               // 1029
  // there isn't any inspectable "Arguments" type.                                                       // 1030
  if (!_.isArguments(arguments)) {                                                                       // 1031
    _.isArguments = function(obj) {                                                                      // 1032
      return !!(obj && _.has(obj, 'callee'));                                                            // 1033
    };                                                                                                   // 1034
  }                                                                                                      // 1035
                                                                                                         // 1036
  // Optimize `isFunction` if appropriate.                                                               // 1037
  if (typeof (/./) !== 'function') {                                                                     // 1038
    _.isFunction = function(obj) {                                                                       // 1039
      return typeof obj === 'function';                                                                  // 1040
    };                                                                                                   // 1041
  }                                                                                                      // 1042
                                                                                                         // 1043
  // Is a given object a finite number?                                                                  // 1044
  _.isFinite = function(obj) {                                                                           // 1045
    return isFinite(obj) && !isNaN(parseFloat(obj));                                                     // 1046
  };                                                                                                     // 1047
                                                                                                         // 1048
  // Is the given value `NaN`? (NaN is the only number which does not equal itself).                     // 1049
  _.isNaN = function(obj) {                                                                              // 1050
    return _.isNumber(obj) && obj != +obj;                                                               // 1051
  };                                                                                                     // 1052
                                                                                                         // 1053
  // Is a given value a boolean?                                                                         // 1054
  _.isBoolean = function(obj) {                                                                          // 1055
    return obj === true || obj === false || toString.call(obj) == '[object Boolean]';                    // 1056
  };                                                                                                     // 1057
                                                                                                         // 1058
  // Is a given value equal to null?                                                                     // 1059
  _.isNull = function(obj) {                                                                             // 1060
    return obj === null;                                                                                 // 1061
  };                                                                                                     // 1062
                                                                                                         // 1063
  // Is a given variable undefined?                                                                      // 1064
  _.isUndefined = function(obj) {                                                                        // 1065
    return obj === void 0;                                                                               // 1066
  };                                                                                                     // 1067
                                                                                                         // 1068
  // Shortcut function for checking if an object has a given property directly                           // 1069
  // on itself (in other words, not on a prototype).                                                     // 1070
  _.has = function(obj, key) {                                                                           // 1071
    return hasOwnProperty.call(obj, key);                                                                // 1072
  };                                                                                                     // 1073
                                                                                                         // 1074
  // Utility Functions                                                                                   // 1075
  // -----------------                                                                                   // 1076
                                                                                                         // 1077
  // Run Underscore.js in *noConflict* mode, returning the `_` variable to its                           // 1078
  // previous owner. Returns a reference to the Underscore object.                                       // 1079
  _.noConflict = function() {                                                                            // 1080
    root._ = previousUnderscore;                                                                         // 1081
    return this;                                                                                         // 1082
  };                                                                                                     // 1083
                                                                                                         // 1084
  // Keep the identity function around for default iterators.                                            // 1085
  _.identity = function(value) {                                                                         // 1086
    return value;                                                                                        // 1087
  };                                                                                                     // 1088
                                                                                                         // 1089
  // Run a function **n** times.                                                                         // 1090
  _.times = function(n, iterator, context) {                                                             // 1091
    var accum = Array(Math.max(0, n));                                                                   // 1092
    for (var i = 0; i < n; i++) accum[i] = iterator.call(context, i);                                    // 1093
    return accum;                                                                                        // 1094
  };                                                                                                     // 1095
                                                                                                         // 1096
  // Return a random integer between min and max (inclusive).                                            // 1097
  _.random = function(min, max) {                                                                        // 1098
    if (max == null) {                                                                                   // 1099
      max = min;                                                                                         // 1100
      min = 0;                                                                                           // 1101
    }                                                                                                    // 1102
    return min + Math.floor(Math.random() * (max - min + 1));                                            // 1103
  };                                                                                                     // 1104
                                                                                                         // 1105
  // List of HTML entities for escaping.                                                                 // 1106
  var entityMap = {                                                                                      // 1107
    escape: {                                                                                            // 1108
      '&': '&amp;',                                                                                      // 1109
      '<': '&lt;',                                                                                       // 1110
      '>': '&gt;',                                                                                       // 1111
      '"': '&quot;',                                                                                     // 1112
      "'": '&#x27;'                                                                                      // 1113
    }                                                                                                    // 1114
  };                                                                                                     // 1115
  entityMap.unescape = _.invert(entityMap.escape);                                                       // 1116
                                                                                                         // 1117
  // Regexes containing the keys and values listed immediately above.                                    // 1118
  var entityRegexes = {                                                                                  // 1119
    escape:   new RegExp('[' + _.keys(entityMap.escape).join('') + ']', 'g'),                            // 1120
    unescape: new RegExp('(' + _.keys(entityMap.unescape).join('|') + ')', 'g')                          // 1121
  };                                                                                                     // 1122
                                                                                                         // 1123
  // Functions for escaping and unescaping strings to/from HTML interpolation.                           // 1124
  _.each(['escape', 'unescape'], function(method) {                                                      // 1125
    _[method] = function(string) {                                                                       // 1126
      if (string == null) return '';                                                                     // 1127
      return ('' + string).replace(entityRegexes[method], function(match) {                              // 1128
        return entityMap[method][match];                                                                 // 1129
      });                                                                                                // 1130
    };                                                                                                   // 1131
  });                                                                                                    // 1132
                                                                                                         // 1133
  // If the value of the named `property` is a function then invoke it with the                          // 1134
  // `object` as context; otherwise, return it.                                                          // 1135
  _.result = function(object, property) {                                                                // 1136
    if (object == null) return void 0;                                                                   // 1137
    var value = object[property];                                                                        // 1138
    return _.isFunction(value) ? value.call(object) : value;                                             // 1139
  };                                                                                                     // 1140
                                                                                                         // 1141
  // Add your own custom functions to the Underscore object.                                             // 1142
  _.mixin = function(obj) {                                                                              // 1143
    each(_.functions(obj), function(name) {                                                              // 1144
      var func = _[name] = obj[name];                                                                    // 1145
      _.prototype[name] = function() {                                                                   // 1146
        var args = [this._wrapped];                                                                      // 1147
        push.apply(args, arguments);                                                                     // 1148
        return result.call(this, func.apply(_, args));                                                   // 1149
      };                                                                                                 // 1150
    });                                                                                                  // 1151
  };                                                                                                     // 1152
                                                                                                         // 1153
  // Generate a unique integer id (unique within the entire client session).                             // 1154
  // Useful for temporary DOM ids.                                                                       // 1155
  var idCounter = 0;                                                                                     // 1156
  _.uniqueId = function(prefix) {                                                                        // 1157
    var id = ++idCounter + '';                                                                           // 1158
    return prefix ? prefix + id : id;                                                                    // 1159
  };                                                                                                     // 1160
                                                                                                         // 1161
  // By default, Underscore uses ERB-style template delimiters, change the                               // 1162
  // following template settings to use alternative delimiters.                                          // 1163
  _.templateSettings = {                                                                                 // 1164
    evaluate    : /<%([\s\S]+?)%>/g,                                                                     // 1165
    interpolate : /<%=([\s\S]+?)%>/g,                                                                    // 1166
    escape      : /<%-([\s\S]+?)%>/g                                                                     // 1167
  };                                                                                                     // 1168
                                                                                                         // 1169
  // When customizing `templateSettings`, if you don't want to define an                                 // 1170
  // interpolation, evaluation or escaping regex, we need one that is                                    // 1171
  // guaranteed not to match.                                                                            // 1172
  var noMatch = /(.)^/;                                                                                  // 1173
                                                                                                         // 1174
  // Certain characters need to be escaped so that they can be put into a                                // 1175
  // string literal.                                                                                     // 1176
  var escapes = {                                                                                        // 1177
    "'":      "'",                                                                                       // 1178
    '\\':     '\\',                                                                                      // 1179
    '\r':     'r',                                                                                       // 1180
    '\n':     'n',                                                                                       // 1181
    '\t':     't',                                                                                       // 1182
    '\u2028': 'u2028',                                                                                   // 1183
    '\u2029': 'u2029'                                                                                    // 1184
  };                                                                                                     // 1185
                                                                                                         // 1186
  var escaper = /\\|'|\r|\n|\t|\u2028|\u2029/g;                                                          // 1187
                                                                                                         // 1188
  // JavaScript micro-templating, similar to John Resig's implementation.                                // 1189
  // Underscore templating handles arbitrary delimiters, preserves whitespace,                           // 1190
  // and correctly escapes quotes within interpolated code.                                              // 1191
  _.template = function(text, data, settings) {                                                          // 1192
    var render;                                                                                          // 1193
    settings = _.defaults({}, settings, _.templateSettings);                                             // 1194
                                                                                                         // 1195
    // Combine delimiters into one regular expression via alternation.                                   // 1196
    var matcher = new RegExp([                                                                           // 1197
      (settings.escape || noMatch).source,                                                               // 1198
      (settings.interpolate || noMatch).source,                                                          // 1199
      (settings.evaluate || noMatch).source                                                              // 1200
    ].join('|') + '|$', 'g');                                                                            // 1201
                                                                                                         // 1202
    // Compile the template source, escaping string literals appropriately.                              // 1203
    var index = 0;                                                                                       // 1204
    var source = "__p+='";                                                                               // 1205
    text.replace(matcher, function(match, escape, interpolate, evaluate, offset) {                       // 1206
      source += text.slice(index, offset)                                                                // 1207
        .replace(escaper, function(match) { return '\\' + escapes[match]; });                            // 1208
                                                                                                         // 1209
      if (escape) {                                                                                      // 1210
        source += "'+\n((__t=(" + escape + "))==null?'':_.escape(__t))+\n'";                             // 1211
      }                                                                                                  // 1212
      if (interpolate) {                                                                                 // 1213
        source += "'+\n((__t=(" + interpolate + "))==null?'':__t)+\n'";                                  // 1214
      }                                                                                                  // 1215
      if (evaluate) {                                                                                    // 1216
        source += "';\n" + evaluate + "\n__p+='";                                                        // 1217
      }                                                                                                  // 1218
      index = offset + match.length;                                                                     // 1219
      return match;                                                                                      // 1220
    });                                                                                                  // 1221
    source += "';\n";                                                                                    // 1222
                                                                                                         // 1223
    // If a variable is not specified, place data values in local scope.                                 // 1224
    if (!settings.variable) source = 'with(obj||{}){\n' + source + '}\n';                                // 1225
                                                                                                         // 1226
    source = "var __t,__p='',__j=Array.prototype.join," +                                                // 1227
      "print=function(){__p+=__j.call(arguments,'');};\n" +                                              // 1228
      source + "return __p;\n";                                                                          // 1229
                                                                                                         // 1230
    try {                                                                                                // 1231
      render = new Function(settings.variable || 'obj', '_', source);                                    // 1232
    } catch (e) {                                                                                        // 1233
      e.source = source;                                                                                 // 1234
      throw e;                                                                                           // 1235
    }                                                                                                    // 1236
                                                                                                         // 1237
    if (data) return render(data, _);                                                                    // 1238
    var template = function(data) {                                                                      // 1239
      return render.call(this, data, _);                                                                 // 1240
    };                                                                                                   // 1241
                                                                                                         // 1242
    // Provide the compiled function source as a convenience for precompilation.                         // 1243
    template.source = 'function(' + (settings.variable || 'obj') + '){\n' + source + '}';                // 1244
                                                                                                         // 1245
    return template;                                                                                     // 1246
  };                                                                                                     // 1247
                                                                                                         // 1248
  // Add a "chain" function, which will delegate to the wrapper.                                         // 1249
  _.chain = function(obj) {                                                                              // 1250
    return _(obj).chain();                                                                               // 1251
  };                                                                                                     // 1252
                                                                                                         // 1253
  // OOP                                                                                                 // 1254
  // ---------------                                                                                     // 1255
  // If Underscore is called as a function, it returns a wrapped object that                             // 1256
  // can be used OO-style. This wrapper holds altered versions of all the                                // 1257
  // underscore functions. Wrapped objects may be chained.                                               // 1258
                                                                                                         // 1259
  // Helper function to continue chaining intermediate results.                                          // 1260
  var result = function(obj) {                                                                           // 1261
    return this._chain ? _(obj).chain() : obj;                                                           // 1262
  };                                                                                                     // 1263
                                                                                                         // 1264
  // Add all of the Underscore functions to the wrapper object.                                          // 1265
  _.mixin(_);                                                                                            // 1266
                                                                                                         // 1267
  // Add all mutator Array functions to the wrapper.                                                     // 1268
  each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function(name) {                // 1269
    var method = ArrayProto[name];                                                                       // 1270
    _.prototype[name] = function() {                                                                     // 1271
      var obj = this._wrapped;                                                                           // 1272
      method.apply(obj, arguments);                                                                      // 1273
      if ((name == 'shift' || name == 'splice') && obj.length === 0) delete obj[0];                      // 1274
      return result.call(this, obj);                                                                     // 1275
    };                                                                                                   // 1276
  });                                                                                                    // 1277
                                                                                                         // 1278
  // Add all accessor Array functions to the wrapper.                                                    // 1279
  each(['concat', 'join', 'slice'], function(name) {                                                     // 1280
    var method = ArrayProto[name];                                                                       // 1281
    _.prototype[name] = function() {                                                                     // 1282
      return result.call(this, method.apply(this._wrapped, arguments));                                  // 1283
    };                                                                                                   // 1284
  });                                                                                                    // 1285
                                                                                                         // 1286
  _.extend(_.prototype, {                                                                                // 1287
                                                                                                         // 1288
    // Start chaining a wrapped Underscore object.                                                       // 1289
    chain: function() {                                                                                  // 1290
      this._chain = true;                                                                                // 1291
      return this;                                                                                       // 1292
    },                                                                                                   // 1293
                                                                                                         // 1294
    // Extracts the result from a wrapped and chained object.                                            // 1295
    value: function() {                                                                                  // 1296
      return this._wrapped;                                                                              // 1297
    }                                                                                                    // 1298
                                                                                                         // 1299
  });                                                                                                    // 1300
                                                                                                         // 1301
}).call(this);                                                                                           // 1302
                                                                                                         // 1303
///////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

///////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                       //
// packages/underscore/post.js                                                                           //
//                                                                                                       //
///////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                         //
// This exports object was created in pre.js.  Now copy the `_` object from it                           // 1
// into the package-scope variable `_`, which will get exported.                                         // 2
_ = exports._;                                                                                           // 3
                                                                                                         // 4
///////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);


/* Exports */
if (typeof Package === 'undefined') Package = {};
Package.underscore = {
  _: _
};

})();

//# sourceMappingURL=0a80a8623e1b40b5df5a05582f288ddd586eaa18.map
$("script[type='text/spacebars']").each(function (index, script) {
  var name = script.getAttribute('name');
  var renderFuncCode = Spacebars.compile(script.innerHTML);
  eval("Template.__define__(" + JSON.stringify(name) +
       ", " + renderFuncCode + ");");
});

$(document).ready(function () {
  if (Template.main) {
    UI.insert(UI.render(Template.main), document.body);
  }
});

Deps = Package.deps.Deps;
Blaze = {};
Blaze.Var = function (initVal) {
  if (! (this instanceof Blaze.Var))
    return new Blaze.Var(initVal);
  this._dep = new Deps.Dependency;
  this._value = initVal;
};

Blaze.Var.prototype.get = function () {
  this._dep.depend();
  return this._value;
};

Blaze.Var.prototype.set = function (val) {
  if (this._value === val)
    return val;
  this._dep.changed();
  this._value = val;
};
